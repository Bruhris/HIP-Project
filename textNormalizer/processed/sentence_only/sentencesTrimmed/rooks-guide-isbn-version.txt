Hansen All rights reserved .

ISBN Guide Press Black Road Berlin , VT November Preface What you are reading is the ﬁrst of what hope to be many everimproving iterations of useful textbook .
gone fairly quickly from whim to print on an basis , and as result , there are many things that add and change if had an inﬁnite amount of time in my schedule .
Some of it is mine , and some was added by our crack team of technical editors as we translated poor grammar into grammar .

If section missing or in need of clariﬁcation , please take bit of time and make those changes .
If you want to bother yourself with the GitHub repository , send me your additions and modiﬁcations directly .

want to ﬁrst thank my family for the time spend with them on the writing weekend and throughout the summer when was editing and .
promise do this next summer .

My next thanks go out to the technical editors and , without whom you would have much uglier book .
also thank Craig Robbins iii and Levi Schuck , who , on diﬀerent sides of the planet , managed to contribute extensively to the heavy of the book into the shape in now .
If we ever meet , owe you beer or whatever having .

also would like to thank all of the Kickstarter backers not only for the money which made this possible , but for reinforcing the idea that this is worthwhile contribution to the community .
Peter Stephenson and Andrew Pedley also contributed food directly over the textbook writing hackathon weekend , and without them never have our saturated fat quota .
It to Russo for shooting the video and organizing the media and social networking eﬀorts with the Kickstarter project through the writing weekend .

Special thanks to Allyson for the textbook photography , several diagrams , and the extensive search through the semiﬁnal textbook that turned up bunch of mistakes that missed .

And my last not at all thanks go out to all the students who showed up in person or digitally .
And without too grandiose , you remind us all that we can make the world by showing up .
Keep showing up .

Jeremy November , everyone Contents History Variables How do decide which data type need .

Review Review Answers .

Hansen is licensed under Creative Commons Unported License , as described at xi Dramatis Personæ Managing Editor : Jeremy .
Hansen , PhD , CISSP Technical Editing Typesetting : Jeremy .
Hansen Jadud , PhD Craig .
Robbins .

Levi Schuck Media Outreach :
Russo Cover Art Graphic Design : Allyson .
LeFebvre Content Authors : Tyler Atkinson , Troy .
Dundas , Connor .
Fortune , Jeremy .
Hansen ,
Heimann , Benjamin .
Jones , Michelle Kellerman , Michael .
Kirl , Zachary LeBlanc , Allyson .
LeFebvre , Gerard .
McEleney , Phung .
Pham , Megan Rioux , Alex Robinson , Kyle .
, Jesse .
Rodimon , Matthew .
Russo , Yosary Silvestre , Dale .
Stevens , Ryan .
Sutherland , James .
Verderico , Christian .
Vergnes , Rebecca Weaver , Richard .
Wells , and Branden .

Funding Support : Peter Stephenson , PhD , VSM , CISSP , CISM , FICAF , LPI at the Norwich University Center for Advanced Computing Digital Forensics Andrew Pedley at Depot Square Pizza xiii Kickstarter contributors : Nathan Adams , Chris Aldrich , Jay Anderson , Kent Archie , Erik Arvedson , Astrolox , Phoebe Ayers , Papa Joe Barr , Julia , Georgia Perimeter College , Patrick Berthon , Francis Bolduc , Greg Borenstein , Patrick Breen , Igor Bronshteyn , Valdemar Bučilko , Ross Buckley , Nikita Burtsev , Jakob Bysewski , David Camara , Dave .
Campbell , Brian .
Campbell III ,
Canero , Serge Canizares , Andrew Carlberg , Casey .
Cessnun , Winston Chow ,
Jesse Clements , Greg Crawford , Sean Cristofori , Jordan Cundiﬀ , Michael David , Joseph Davies , Ashley Davis , David .
Dean , DJS , Carlton Doc Dodd , Phil Dodds , Dominic , Sankar Dorai , dryack , DuHarte , Brandon Duong , Van Van Duong , Daniel Egger , Chris Fabian , Jorge .

Falcon , Tek Francis , Fuchsi , Steve Gannon , Michael Gaskins , Gavlig , Adam Gibson , Russell .
Gibson , Goldenwyrm , James Green , Brian .
Green , Casey Grooms , Vitalik Gruntkovskiy , Vegar Guldal , Felix Gutbrodt , Jeremy Gwinnup , Beau .
Hahn , Paul .
Harms Norwich , Corey .
Hart , MBA , Aaron .
Haviland , Josh Heﬀner , Greg Holland , Henry Howard , Mark Howe , Ivaliy Ivanov , Jadud , Joseph Jaoudi , Tim .
Johnson , Kentobi , Mark King , Mitchell Kogut III , Sigmund Kopperud , Michael Korolev , Jamie Kosoy , Aria , Alexander Týr Kristjánsson , Richard Kutscher , Eric Laberge , John Lagerquist , Philip Lawrence , Mark Brent Lee , John and Nancy LeFebvre , Nevin Liber , Jonathan Lindquist , Lockney , Stuart .
Pedro Maciel , Troels Holstein Madsen , William Marone , Fred Mastropasqua , Miles Mawyer , michael mazzello , Ryan McDonough , Matthew McFadden , John McIntosh II , Sean McNamara , mdsaravanan , Brandon Meskimen , Andrew Mike ,
Miller IV , Marcus Millin , Salvador Torres Morales , Danny Morgan , Ken Moulton , Aaron Murray , mvi , Jon Nebenfuhr , Philip .
Nicholson , chris nielsen , Pontus Nilsson , Mike Noble , Aleksander .
, Greg , Doug , Randy Padawer , Palmer , Tasos Papastylianou , Paul , James , Peterson , Grigory Petrov , pezmanlou , Joachim Pileborg , Kyle Pinches , pkh , Mary Purdey , Marshall Reeves , Ringman , Craig .
Robbins , Antonio Rodriguez , Armando Emanuel Roggio , Victor Suarez Rovere , Christian Sandberg , Jaymes , Paolo Scalia , Patrice Scheidt , Daniel , Levi Schuck , Raman , Michael Shashoua , Daniel Shiﬀman , Clay Shirky , sillygoatgirl , Kevin .
Slonka , Brian Smith , Hazel Smith Rebecca Twigg , Andrey Soplevenko , Kasper Souren , Derek .
Spangler , Speckman , Kellan , Nick Stefanou , Steve , Andrew Stewart , Jeremy Sturdivant , Cyrille Tabary , Adam Tannir , Taylor , Telecat Productions , Aron Temkin , Mitchell Tilbrook , Nathan Tolbert , Devin .
Tomlinson Vermont Born , Todd Trimble , Michiel van Slobbe , James .
Velez , Marco Verdecchia , David Walter , Lothar Werzinger , Wayne West , Sean Whaley , Mark Wheeler , Tommy Widenﬂycht , Dylan Widis , Tony Williamitis , Adam .
Williams , Stephen .
Williams , Dylan Wilson , Wesley Wiser , wizzy , Sam Wright , Janet Hong Yam , and Jy Yaworski .

Chapter History Developed by Bjarne Stroustrup , has become one of the most popular programming languages in the world .
Originally , it was designed as an improvement upon the language , which was developed by Bell Labs .
Developed in the early , name is derived from the programming language , which in turn was derived from the BCPL language .
gained large following , in part due to its use in the development of the UNIX operating system .
Due to both its popularity and the was formed in to create standard for the language , which was adopted in .

Stroustrup began with the idea that object oriented programming would be an important addition to , and created with Classes .
In , contributions oﬃcially became known as , its name stemming from and adding the operator .
It until that the international standard for was established .

Since then , most changes have been minor .
In , report was released by the ISO on features that were intended to be included in the next version of .

In this book , favor older techniques ,
When features are discussed , they will be pointed out as such .
While not all of the new features are discussed , we will be trying our best to explain them as we go .

Very simply put , variable is space in memory that can store some range of values .
Some of the basic data types are shown in Table .
For deeper discussion of data types , refer to Chapter .

How do decide which data type need .

What you can do with variable depends on the type of data they contain .
For instance , you store the number in char because char stores only character data .
To store the programmer should use an int .
If you think you are dealing with numbers that have fractional parts , you need at least float .
You generally want to use the smallest variable type that will get your job done .
Simply put , if it is round number , int works ﬁne ; if true or false , use bool ; for , use char ; for fractional numbers , use float ; for really big number or number with many digits the decimal point , use double .

How do we have the program diﬀerentiate between multiple ints , chars , or doubles .

An identiﬁer can be almost anything like , provided the identiﬁer does not begin with number or Remember that the variable name can only be one word long .
You may use an underscore to replace space if you so desire , and note that is case sensitive .

declaration is the declaration for an integer variable named myVariable looks like this : myVariable  speciﬁc set of grammatical rules for the important to follow when declaring variables .
Notice that the ﬁrst part is the data type of the variable .
You can think of the semicolon in as equivalent to period at the end of sentence ; are few exceptions , including those words that describe data types in the table and other keywords such as if and while , which learn about in later chapters .

Note that you may declare several variables of .

To do this , the name is followed by an equals , the assignment , the value , and semicolon .
Consider this example : int ; double .
When variable is declared , it contains whatever was already in that space of memory , which can give them unpredictable values .

All assignment statements have the variable being assigned the value on the side of an equals and the value to assign on the right side .

Note that the expression on the right side of the assignment may contain arithmetic operations such as multiplication , division , addition , and subtraction , or even other variables .
Consider the following .

Declare two variables of type int and initialize them to an appropriate value .

Declare three integer variables : sum ,
Initialize the variables and to an appropriate integer and use an assignment statement to assign sum the result of plus .

Declare double variable called number and initialize it to .

Create program in which variables are declared .
Create one float named myFloat , one int named myInt , and one double named myDouble .

Literals and Constants Literals literal is value outside of variable such as , and .
Each of those is an int , but literal can be of any data type .
In other words , you convince the compiler to give the literal the value of , because is constant .

Table contains few examples .

you declare constant , you are unable to change it , no what .
Since it is constant , we will also need to initialize the value at the time we declare the variable .
Here is an example cover the cout object shortly in Chapter : const .

Describe the diﬀerence between literals and declared constants .
When would declared constant be more useful than literal constant .

What is the diﬀerence between normal variable and constant .

Build program in that does the following : Declare double variable named Feet .
Initialize it to your height .

Set it to Feet multiplied by MetersPerFoot .

Create program that displays the diameter and of circle for any given Use const float to represent .

literal is value not stored in variable ; constant is an unchanging value stored in variable .

Normal variables can be changed or ; constants cannot be changed or .

Chapter Assignments Assignments are way for user programmer to assign value to variable .

In mathematics we are allowed to say that  but in the only acceptable way to assign the value of to is to type .

Here are some examples of value to diﬀerent types of .

We are able to declare variables and assign value to those variables immediately by using the assignment operator .
When we assign literal values to variables of type char , the value must be surrounded by single quotes example ,

When we assign values to variables of type string , the literal value must be surrounded by double quotes example ,
We do not have to initialize the values of the variables , however .
We can set them later in the code like this :  some c .

In all of the lines of code in this section where variable is set using the assignment operator , the that is being given value " is known as an .

For example , if had value of , would then be assigned to the value with the above code .

We can also store the results of an arithmetic expression in variable like this : +  But we write +  ERROR .

Make sure that the variable  the variable , and the literal are of the same type .
For example , the following code will result in an .

When we try to combine diﬀerent variable types , the compiler will get very mad at us .
Some exceptions to this rule are if we try to combine floats , ints , because they are all numeric values .
Both doubles and floats can hold values with decimal point such as , whereas an int can only hold round values such as ,
Refer to Chapter for more information on converting between data types .

Which of the following is an incorrect way to assign value to variable .

When we store value in variable , the variable goes on the of the assignment operator , and the value being stored in that variable goes to the right of the assignment operator .

String literals must be surrounded by double quotes , not single quotes ; single quotes are used for single characters like .

Chapter Output Output in is done with the object cout .
For example , if we wanted to prompt the user with Type in your name : we would use cout .
make program that outputs something to the screen : include namespace .

In this case , we are displaying string literal .
As you know , every statement in ends with semicolon , and this one is no exception .

What if we want to print more , though .

Try to compile and run that .
It works , but not really the desired output .

How do we get those on diﬀerent line .
One of the ways we can do it is to use the object endl .
You will also need another redirect operator between the string literal and the endl .

all of this together looks like this : include namespace .

Alternatively , we can combine the two lines that use cout into single one like this : c  Go .

Another thing we can use with the console output object is the special character .
Printing this character is the same as pressing the tab key on your keyboard , and is used for indentation and .
Let ' look at an example that uses the newline character , the tab character , and some text : include namespace .

We don ' always have to output words the screen using cout .
We can also print variables of type int , double , and float and can control the number of digits that appear the decimal point .
For example , if we had variable that contained the value we might only care about the ﬁrst two numbers the decimal point and just want to output to the screen .

In the following code , the number of digits is set to : include namespace .

Notice the use of the left ﬂag in the following code , which positions the output on the side of the ﬁeld ; the default is for the output to be on the right side : include namespace .

Write several lines of code using the and functions in that prints Programming .

Write code to the values , and strings .

What is the of the following program .

Input When programmer wants user to enter data , such as the price of an item , he or she will use the cin object , pronounced , in conjunction with , the extraction operator in the program .
Let us look at the following code : include namespace .

Please enter value for  As user you may want to check the value that was entered .
To do this , simply add an additional statement like this : include .

Do not be afraid to insert additional statements throughout program to check the values of variables when debugging .

If you want to have user input more than one value , just repeat the code for each individual variable : include namespace .

We can ' always trust that the user will input the correct data into variable .

For example , if user was prompted to input an age into variable of type int but typed the character , the program would not behave properly because the user entered the wrong data type .
We can check for improper input like this by using the function in conditional statement .
Look at the following .

Which of the following numbered lines of code are proper cin statements .

What is the redirect operator , and how is it used to process user input .

Can you use cin to store value in variable that already has value .

Write code that allows the user to enter an integer value and store it in variable .
Your code should prompt the user , receive their input , and then print their input value back to them .

Add some functionality to the code you wrote for the previous exercise .
Add two new  one char and one float or double .
Prompt the user properly for each value .

Only is correct .

You do not need to to use cin statements exclusively with statements , though it is good practice to provide adequate feedback to users .

Yes , and the previous value is .

Arithmetic One of the most important things provided by is the ability to do math .
Everything computer sees is number .
To computer , its ability to do math and manipulate numbers is as essential to it as breathing is to us .

Addition is still plus sign + and subtraction is still minus sign .
On the other hand , multiplication becomes an asterisk and division becomes forward slash .

To do math in , you will either want variable to store the answer , or output the answer to the user .

When you use more complicated equations , you can use parentheses to help .
uses familiar order of operations , Exponents , Multiply , Divide , Add , and Subtract , or , but without the exponent operation topic is covered in Chapter .

However , unlike in normal arithmetic , parentheses do not imply multiplication .
For example , which we might expect to mean times " does not mean the same as , the correct syntax .
Conversely , the decrement operator decreases the value by .

Keep in mind that order does with the increment and decrement operators .
Starting with similarities , and both increase value of by one .

Table : Examples of compound assignment updates int .

Compound assignment can decrease the amount you type can make your code more readable .
What makes these special is that they use the value you want to change in the operation .
For example , is equivalent to +

Keep in mind the order that was used , as this becomes important with subtraction division .
say we have  want to set equal to the value of divided by the value of .

Here is some sample code using the concepts we presented in this chapter : include namespace  int    cout cout cout cout     + + endl endl endl endl .

Write statement declaring two integer variables initialize them to , respectively .

Without changing the last line , ﬁx the following code so there will be an output of .

Chapter Comments As programmer , comments will make your life easier .

To this end , comments are quick explanation of the code .

comments typically come line of code .
For comment , simply type double slash at the end of the line , and follow it with whatever notes you like , preferably to explain what that line of code does .
Alternatively , the comment can start on line of its own .
Here are some examples :  was to count something +  by  and ; comments , sometimes called block comments , are used when you have lot to say .
Here is an example : This comment comment Block comments do not need star at the beginning of every line in the preceding , but many programmers write it anyways , because it makes it .

Comment each line of this code : include namespace .

Explain the purpose of commenting .

Why would someone else need to be able to understand your code .

Write and properly comment your own simple program .

Go back to the program you wrote from the previous question .
Add further comments that explain happening and share the commented code with classmate or friend .
Ask them if they understand happening from just the comments .

Add comments to the following code .

Note : Save percentages in hockey are shown to three decimal places and not multiplied by : instead of .

Comments help you check that you know what doing and make sure you are doing everything that needs to be done .

Answers will vary .

Keep trying until someone else understands the code from the comments alone .

Answers will vary .

Chapter Data Types and Conversion Suppose you need to carry two products across farmyard : apples and water .
You might choose small hand basket to carry few apples , and larger bushel basket to carry large number of apples .
Similarly , you could use bucket or bucket , depending on how much water you expected to move .

In similar way , we choose data types to describe the type of data we would like to store in variable , and much " of that data we expect to store .

Every variable has data type which describes the range of possible values that may be stored in the variable .
Additionally , the standard provides for the long long int data type as described in Table .

Several of the integer types have unsigned versions , which may only contain values greater than or equal to zero .

Variables of this type will be at least as large as double .

Type unsigned unsigned unsigned unsigned unsigned char short int long long Size byte bytes bytes bytes bytes Range of Values to to , to , to , to , Table : Unsigned types Type float double Exponent Range to to , long double to , Signiﬁcand Range  possible values  possible values  possible values Table : Floating point types diﬀerent ranges of signiﬁcand and exponents , as shown in Table .

In fact , we can use scientiﬁc notation in conjunction with variables .

Other types introduced by provides the cstdint library , which deﬁnes several additional types that may be convenient .

Type Purpose integer of maximum size supported on the platform An integer of exactly bits An integer of exactly bits An integer of exactly bits An integer of exactly bits Unsigned version Table : Data types found in cstdint library types are provided in part because the basic types like int and short are not guaranteed to be of any particular size , which can cause problems when compiling the same code on diﬀerent platforms .

On the other hand , we can do the reverse conversion : int  double .
We refer to this as narrowing conversion .
If we change the code slightly , we can see where problems can occur : int  double .

In this case , we know that we want an integer value , so we can tell the compiler to explicitly convert the doubles to ints using explicit casts , as follows : +
Doing this removes the warning that the compiler produces when it coerces the double to int .
At compile time , the data type of the value that is assigned determines the data type that replaces the auto type .
Some of the syntax in the second line below may be description of happening there , refer to Chapter .

Here is an example : std    Create of .
the diﬀerence between the various data types that store numbers .

If you assign the result of an int divided by an int to float .

Declare variable named and set it to .

Write code that increases by .

Conditionals Conditionals are used to direct the program to diﬀerent sections of code .
In plain English , we might have statement is greater than , do " Conditionals direct the program to behave diﬀerently depending on the results of comparison .

Several common comparison operators used in are : Symbol , and , or Meaning Is equal to Is not equal to Greater than or equal to Less than or equal to Greater than Less than Logical AND : condition on the AND the condition on the right must be true Logical OR : condition on the OR the condition on the right must be true Table : Common comparison operators .

An if statement looks like this : Code c when same keyword if is used to start the statement .
Parentheses are used to contain the conditional expression .
If the expression inside the parentheses is true , then the following expression will be executed .

However , having only one expression within code block is the same as not having it in code block .

For example , suppose you have some code for baking bread , like the following .

No Else Figure : if and else statement ﬂow of execution Except that is really the same .

An empty expression does nothing , and so now every bread type will have the fan on , which is not what the baker wanted .

An else statement is used when you want some code to execute in any other case where the if statement is not true .
An example of how this works is also shown in Figure .

An else if could also be placed the if statement .
An else if is an additional if statement checked only when the previous if statement is false .

While else is , else if chains an if to test for other conditions .

Multiple else if statements can be used , and they are all checked sequentially , and if necessary , an else statement can be included at the end as ﬁnal .

Take look at Figure for ﬂowchart example .

what the three statements would look like all together :

Note that every conditional expression is in parentheses .
Each if must be followed by Boolean expression inside the in .

Conditional expressions also appear in loops in Chapter and switch statements .

It does the job as many if statements , but can simplify the job when used correctly .
Here is an example : switch  case : c c when break  case : c c when break  default  c c when nor .

If variable is equal to then the code following case : will be executed .

If it is equal to , then the code following case : will be executed , and if it is equal to neither , then the code following default : will be executed .

When there are only few cases , if , else if , and else statements are easier .
However , when you get to greater number of cases , switch statements become easier .

In switch statements , only one code executes , provided that each case is followed by break .
Otherwise , the program continues execution until it reaches break statement or the end of the switch block .
With an if and else if , only one branch may be executed , and the condition in the else if is only evaluated if the condition in the if is false .

Here is some code that uses both switch and if statements .
Compiling and running the following code results in the output in Table .

User enters start other than , or Output Addition Subtraction Compare Type the number of your desired option : result of this addition is result of this subtraction is is greater than Not an option .

When are braces needed in an if statement .

Write program that checks which number is higher than another and prints out an appropriate message .
Bonus : Rewrite it to also check if the numbers are equal .

Braces are needed for any code longer than lines following an if .

Strings discuss strings .
string is data type typically used to hold collection of printable characters such as words , sentences , or longer sequences .
In order to use strings in your program you must ﬁrst include the string library : include namespace  Also note that string , for convenience , can be treated like an array of individual characters .

When we declare variables of type string , we declare them just like we would an int , float , or double .
We can create variable named myString of type string by doing this : include namespace  myString .

We can store " in the string by doing the following :  c   It is also possible to use the arithmetic operator + with strings to concatenate the two strings .
If we combined one string that contained " and another string that contained " the connected string would then read .

Alternatively , space can be added like so :     World   c +   +  Outputs  World ﬁrst two concatenates the two strings to create one string that contains , and the third concatenates three strings to produce the same result .

When reading strings from , the default behavior is to collect all characters until the ﬁrst whitespace tab , space , or character that it ﬁnds in the input .
For example , if the user inputs World " in the following code , stops reading at the ﬁrst whitespace , and thus the string would contain only .
If we want to read the entire line of text , we need to use the function , which reads until the ﬁrst newline character .

We can also ﬁnd out the length of the string by using the member function with any string object .
For example , if we wanted to ﬁnd the length of string entered by user and store it in variable named stringLength , we might do .

Figure : string viewed as an array code results in the value being stored in the variable named because the space character is stored at index if you treat the string as an array , as shown in Figure .

Remember that we start at index , so even though the space is in the sixth position , it is at index in the string .
When line of text is stored in string , think of it as being stored in memory in an array of the same length as there are characters in the string .
For example , the string World " can be contained in an array with slots , therefore the space character would be found in .

We can also use the function to ﬁnd character in reverse direction from the end of the string , or from some starting point , as above .
If we wanted to ﬁnd the single character string " before the space we might do something like this :  World   

Sometimes the string you search for cannot be found , as in this example :  World 

Write code to declare string and take input from user .

Can string be treated as character array .

What is the needed to use strings .

What function do you have to use to take an input with space .

Write code that takes in words and outputs each of them times .

Write program that takes in an input of at least two words of the same length .

When you need to hold collection of printable characters such as words , sentences , or longer sequences .

Loops Introduction Okay , so you know how to do some programming , but now you need to be able to handle dozen or more operations that are obnoxiously repetitive .
Imagine that you have program that needs to allow data to be entered about your employees .
Do you really want to have to write out the code to do that for every single individual .

want to set it up so you write it out as concisely as possible , and copy and paste just won ' work .
What we need to do is write the relevant code once and have it repeated for us as many times as necessary .

For this , use structure known as loop , which does exactly what you expect it would .
loop allows you to repeat section of code as many times as you need .
When the code reaches the end of the section , it goes back to the top of the section and the loop starts again .
each repetition of the loop we call an , it will check for an end condition that is speciﬁed by the programmer .

referred to as pretest loop as designed to check the end condition prior to repetition of the loop .

In Figure , the basic model of pretest loop is shown .
diamond is used to represent where decision must be made .
In this case , Boolean expression .

If the expression is true , control passes to the rectangle , which represents an action to be performed : the statements that represent the body of the loop .

When the Boolean expression is false , remember , the loop is ﬁnished .

Also , note that , like an if statement , the braces are not necessary if there is only one statement following the line with the while keyword and Boolean expression .
Is it recommended to use the braces with only one statement .
For your own sanity , and that of others reading your code , yes .

No , but some organizations ' coding standards might say otherwise , because it makes the code easier to read and edit .
So remember , best to start with good habits early .

look at an actual example of while loop .

Well , loop is known as loop for similar reason .
take look at the ﬂowchart in Figure and take guess as to why .

loops perform the statements in the body of the loop before it tests the end condition .
look at how this will aﬀect the syntax you will use when implementing the loop .

Figure : Logic of loop .

In this case , the line with the while and the end condition are the main section of code .
In normal while loop , the program can potentially meet the end condition before even entering the loop body , and just pass over it .
In loop , the program checks the end condition each iteration of the loop , so it will run at least once before the loop ends .

Loops vs Loops Loops can be organized into two categories based on how you use them .
look at code examples to diﬀerentiate the two .

needed to initialize variable that we want to check .
also needed an end condition to test that variable against .
Finally , we needed way of modifying that variable to meet that end condition .
that , whatever felt like in .
With the for loop , we put those three elements into the loop header , separated by semicolons .

for loop would would look something like this :

You use this kind of loop to count up each iteration until you get to the speciﬁed value .

run through how for loop should run , following the code below .
Assuming everything is correct , you would initialize the ﬁrst value to something such as an int that is set to .
Finally , say is the update expression .
In each iteration you also decide to change from the body of the you will move through this pretest loop four times .

Picking Loop Which loop you use is dependent on your preferences and needs .
for loop is nice , but more convenient as loop .
If you needed to use an loop , you may prefer to use while or loop .
for loop is nice way to condense the initialization , end conditions and update statement of the loop into one short line .
When choosing between and while loop , you should remember that with , it will always run at least once , while while loop may run zero or more times .

Just remember to practice good habits to keep the code from being too confusing .
Take look at the example below , then let ' talk our way through it .

For those readers who concluded that this is clock simulation , you are correct .

Our system of time is set up that we have hours in day , and each hour is minute cycle , and each minute is second cycle .
minutes , the hour loop is incremented .
Each time an outer loop starts another iteration , variables inside the inner loops are reset .

What will happen if you can ' reach that end condition from within the loop .
Most likely an inﬁnite loop will occur , which is loop that can ' stop itself .
Depending on the operation of the loop , you may not know what is happening , and the loop could potentially cause disastrous results .
Let ' look at an example of while loop that suﬀers from an inﬁnite loop .

Create while loop that increments some integer variable initialized with value of by until the value of reaches value of .
Make sure you declare the variable and initialize it ﬁrst .

Create loop that reads integer values given by the user into an integer variable , initialized to , then adds those values onto some variable named totalVal until totalVal reaches at least .

Create for loop that outputs your name to the screen times before exiting the loop .

Spot the logic error and correct it in the following code :

Arrays An array is series of variables that are the same of the same type , float , double , char , and so .
Arrays are held in computer ' memory in strict linear sequence .
An array does not hold anything other than the elements of the speciﬁed type , so there is no assigning an array of type float and hoping to store string there .
Doing so would cause mismatch error " and the program wouldn ' compile .
To create an array , the programmer types something like this : char c  char is the data type for all elements in the array , Scott is the name of the array can be as creative as you want with the , and the inside the square brackets represents the size of the array .
So char can hold pieces of data that are of type char .

When trying to visualize an array , think of rectangle split up into as many pieces as the array has places to hold data .
In Figure , the rectangle has ﬁve spaces , each of type char awaiting some values .

In order to refer to the individual elements in an array , we start with the number and count upwards .
We use to access the ﬁrst element in the array , for the second , for the third , and so on .
In order to read or write certain locations of the array , we state the name of the array and the element we want to access .
It should look like this : c 

To do so , you need to enclose the values of the appropriate type in brackets and separate the values with comma .
Below are two examples , one an array where each element is of type char and another where each element is of type int .

In , this is represented by the special character .
Because the null temrinator takes up one element in the array , any character array that is intended to be used as printable string must be declared having size one larger than the longest string that you expect to store .
Initializing the above character array should really be done as the following that we make the array one element : char c     c             

Arrays array might call it is the same thing as an array , but is an of .
array : c  Declaring arrays with more dimensions are possible with similar syntax .
example : Sam  And here is array .

Declare an integer array named myInt with size of .

If an array has size of , how many indexes are there in the array and what are they .

Declare character array named myArray with size of , and initialize the characters in the array to , and .

Create program in which an integer array named myArray is declared with size of .
Use for loop to prompt the user to store value in every index of the array .
the array is given values , output the values of the array to the screen using for loop .
Output each value of the array on its own line .

Blocks , Functions , and Scope Blocks Since covered if statements and loops , go into more detail about the code contained within them .
When you need to contain multiple lines of code , shown how to use braces .

Take look at the example below .
Notice the variables declared in each , and .
When these are declared , they are only usable within the blocks that they were declared .
When that block reaches its end , they are lost to the rest of the program .
We discuss scope further at the end of this chapter .

Functions are an important part of programming .
Without them , programs would be confusing and diﬃcult to troubleshoot .
When programs are , they tend to be in logical chunks which we call subprograms .
Simply put , functions are like miniature programs that when pieced together form the actual program that you are trying to write .

With basic functions , your declarations should start with return type such as double , int , and so on ; this is the data type your function will return .

the return type , the next item that needs to be is the name , which can be almost anything you want .
Remember that you will be using it again later in your code , so it makes sense to make it something short and logical that you can remember .
Now that you have your data type and your function name , time for zero or more function parameters .
Each parameter is in turn made Function return type .

comma separates function parameters and your declaration must end with semicolon the closing right parenthesis .
Here is an example of function declaration : c and c double cost  double c  Using function looks much like an abbreviated version of the function declaration .
function call is responsible for telling the compiler when and how to execute function .
Function calls are found in another function like .
Often the user is prompted to enter necessary data with cout statements and his or her response is collected with cin .
Once this data is collected , the program holds it until function call is made somewhere in the code .
Once the function call is made , the compiler takes the entered data and then uses the code in the function deﬁnition we will go over to operate on the parameters and return value .
For your function call , write your function name followed by the variables or values you want to pass in .
In functiton call , it is not necessary to the data types , as they are already understood .

Here is an example of function call : include namespace .

You have declaration and function call now .

As result , the deﬁnition and body are also more diﬃcult to write than the declaration or call .
Multiple function deﬁnitions and bodies can be placed your in no particular order , though it makes it less confusing if you use the same order as when they were declared .
Start your function deﬁnition with your function heading , which looks exactly like your function declaration but without semicolon .
Following your heading , you need your function body .
Start your function body by placing an opening brace on the line following your heading .
the code in the body is ﬁnished , you end the body with closing right brace .
Notice that the semicolon is not necessary either your heading or your closing brace .
What goes inside the function body depends completely on what you want the function to do .
You may declare variables to be used just in your function and can leave the function using return statements at any time .

Below is an example of function deﬁnition : function definition double  temporary price cost  c c the return  return the to the c function Great , now that you have grasp of the three major parts of basic functions we can move on to other related material .

Predeﬁned functions are functions that are already and deﬁned .
In order to use predeﬁned functions , the programmer needs to include the necessary library and then call the function wherever they need it .

In the following example we will use the function to calculate the square root of the input .

Notice that other function declarations that do return value start with their return type such as double , int , or the like .
common application where void function is used is printing the result of calculations to the screen .
Syntax for void functions works in the same way as normal functions , but the keyword void is where the return data type would normally go .
Note that , like other functions , there does not necessarily need to be parameters in void function .
Here is an example of simple void function declaration : void displayMessage  Remember the deﬁnition and calling of would be the same as any other function with the exception of the void return type and that no value is returned .
Here is an example of deﬁnition , declaration , and how this function would be called : include namespace .

Overloading Function Names Overloading function names allows the same name to be used in multiple function deﬁnitions but with diﬀerent parameter listings .
Function names can be reused using this feature .
Function name overloading eliminates problems associated with having multiple names for functions with similar purposes and can make the code both more understandable and more convenient for the programmer to write .

Below is an example of an overloaded function name .
Notice that both functions have the same name , but diﬀerent parameter types .

Scope As we dive into more complex programs there is need for wide variety of variables in diﬀerent locations in the code .
Some of these variables are declared within individual blocks of code , such as within loops or conditionals .
Others are declared completely outside functions .

Local variables are declared within block of code .
local variable is available to code from the point of its declaration through the end of that block of code .
simple example is variable declared in .

It cannot be used anywhere outside without some additional work as passing it by reference to .
Similarly , variables declared in other functions are not available to code in .

If is referenced anywhere else outside that function , the program will not compile .

An easy way to understand local variables is to compare them to your neighbors .
Everyone that lives on your street and around you are variables , and since you all share the same street , they are local .
You can think of these neighbors on the adjacent street as other functions .
While they might be close by , they do not share the same street .

Global variables are quite diﬀerent from local variables .
Global variables can be used by code anywhere within the program .
global variable is declared outside of any function .
Using similar code as in the example above , we make the variable .

Both functions print the same variable , causing the program to produce the following output : To sum it up , local variables work only within the block of code that it is declared .
Global variables are declared outside functions , and can be used at any point in the program .

What are the three parts of function .

Can void function return value .

How many functions can one program have .

What is the output of the following code snippet .

Write code using at least one function that will ask the user to guess " number your between and until they get it right .

guess , the program should output whether the number they guessed is higher or lower than the " number .
It should also display how many guesses the user makes , and loop until the guess is correct .

Using at least one function , write code that prompts the user for number of miles travelled and number of hours , then calculates the speed in miles per hour .

Problem Solving Troubleshooting Problem solving and troubleshooting in programming is referred to as debugging .
Does your program not compile .
Does it not achieve the desired eﬀect .

Debugging is your answer .
And , unless are perfect programmer , are likely to do quite bit of debugging .

Because the code is incorrect , the compiler can only guess at what meant and give hint .

For example , one of the most common errors beginning programmer will encounter is semicolon .
In some development environments NetBeans in Figure , this will cause the error to be reported not on the line with the missing semicolon , but on the following line .

When the code is executed , however , the result is wrong .
Another common issue is misplacement of parentheses , as misplaced parenthesis can cause problems in complex expressions .

For an inﬁnite loop to occur , the conditional expression while , for , or loop remains true .

Figure : An inﬁnite loop in the NetBeans development environment .

How does it aﬀect the output the code .

Review Answers retun should be return .

Remove the unused variable cont and lines .
Because shots and goals are both integers , the program does the math as though are looking for an int result and doesn ' store the fractional parts , even though it stores the result in double .
Change shots , goals , and to be type double and the program will work as intended .

Chapter Preprocessor Preprocessor directives are lines code that are executed before the compilation the code begins .
One the most preprocessor directives is .

When we want to include in our code system library or some other ﬁle , we use the keyword followed by the library name or the ﬁle name .
For example , when we want to use objects like cout or cin , we need to include the iostream library like so : include If we want to include ﬁle , such as ﬁle named , we can write : However , when we include ﬁles , they must be in the same directory as the ﬁle where the appears .
We discuss the Standard Template Library in Chapter , and include short sample other libraries in Table .

Table : Some useful libraries and sampling what they provide .

Which the following demonstrate correct syntax for statements .

Identify the the preprocessor statements in the following code : namespace .

Is using namespace std ; preprocessor directive .

If you want to be able to use the funtion , which library do you need .

Chapter Advanced Arithmetic Advanced arithmetic in includes mathematics that can ' be used in code without the use of the library .
As we have seen before , some simple arithmetic might look .

Doing simple operations like these does not require any special libraries or unusual commands .
Any compiler can look at + or in line of code and know exactly what the programmer expects to happen .
Some math requires extra help , though .
In this case , help is the library .

Using the library in code is as simple as including it at the top of your source code ﬁle with the rest of your libraries .
For example : c the inclusion of the library , you can use certain mathematical functions in your code such as , which raises the parameter to the power of parameter , and , which returns the square root of .
In your ﬁrst few programs you will probably not use the more advanced mathematical functions included in the library , but for full list of the functions provided in , refer to Reading " at the end of this chapter .

First , we are declaring two variables : and .

Now we get to more interesting section of code .
We are asking the compiler to raise the value of plus to the power of , add , and then place the result in .
To use the pow function , you must understand its syntax .
Here is the breakdown : In + + we are raising the starting value + to the power of .
Before the power of is applied , is added to .
In this case it is the simple operation of , which yields .
we get , we raise it to the power to get value of .
we reach the value of we are ﬁnished with the pow function and resume using normal operators when we add to resulting in the ﬁnal value of .

Undoubtedly there are more complicated uses of the pow function , such as multiple uses of pow in the same line of code .
You might use multiple pow operations in code that calculates the length of one side of triangle using the Pythagorean .
Look at the following code and see if you can ﬁgure out what the output value would .

For visual .

Since sqrt returns double , you should usually assign the result to double variable , but in this example , sqrt returns exactly , so it is implicitly converted to an int without any issues .

When writing such code , it is very important to keep track of the parentheses and to use correct syntax .
One such syntax mistake is made when programmers think that syntax is the same as algebraic syntax .

When the compiler sees this , it doesn ' view it as multiplication , but instead as to , It is important to be explicit with mathematical symbols in .
So instead of the incorrect code above , use : pow 

Which library is needed to use advance arithmetic operators .

Write code to calculate .

Write statement to set the value of variable of type double to the square root of .

Complete the code below to ﬁnd the length of the hypotenuse of right triangle that + given the lengths of the other two sides .
What is the ﬁnal output of your code .

Chapter File File refers to the input and output from and to ﬁles .
So far we have been using cin to get input from the keyboard and cout to output to the screen .
Just like output can be sent to the screen , output can be sent to ﬁle .
Input can be taken either from keyboard or from ﬁle .
Input and output is handled in the program through objects called streams .

File is useful because ﬁles provide way to store data permanently .
With keyboard input and screen output , the data is temporary and goes away once the program is ﬁnished .
When it comes to ﬁles , the data is there for us and we do not have to waste our time typing it over and over again .

If data is ﬂowing out of the program it is called an output stream .
We have actually been using both types of streams already .
If an input stream object is connected to ﬁle , then the program can get its input from that ﬁle .
Similarly , an output stream object can send data to the screen or to ﬁle .
ﬁle can be opened for both reading and writing , in which case it can be accessed by both input and output streams .

File When the program opens ﬁle for input , the program is reading from the ﬁle .
When the program opens ﬁle for output , the program is writing to the ﬁle .
provides us with the ifstream , ofstream , and fstream classes for reading from and writing to ﬁles .
All of these classes are available through the fstream library , which means we must it in our code in order to use them : include ofstream type that as file is used to write data to ﬁles .

Objects of type fstream can combine the behavior of ifstream and ofstream and allow us to both read from and write to ﬁles .

However , in order to use ifstream , ofstream and fstream objects , you must declare one like you would any other variable .
Declaring these objects looks like this : named ifstream inFile  named ofstream outFile  variable inFile will deal with input from ﬁle , while the variable outFile will deal with data to ﬁle .

Every ﬁle on computer has its own name and location .
An example of text ﬁle name is and its location in Windows operating system might be .
In operating system , the same ﬁle might be in .
Regardless of the operating system , we need to know the path in order to tell the program where to ﬁnd the ﬁle .

In order to open ﬁle you must ﬁrst make an object of type ifstream , ofstream , or fstream just like we did earlier .
We open ﬁle using member function named open .
Otherwise , if the ﬁle already exists , the open function will erase existing data in the ﬁle by default .

Once you are done with the ﬁle , it is good practice to close it .
Closing the ﬁle disconnects it from the program and prevents the program from continuing to read from or write to the ﬁle .
If the program ends normally or crashes , the ﬁles will be automatically closed .
Closing ﬁles is even simpler than opening them .
All you need to do is use the close function with empty parentheses .
For example , to close both inFile and outFile : inFile .

Reading from File We use the ifstream class to read data from ﬁle .
Instead of having user input data from the keyboard , we now input the data from ﬁle .
As you recall from earlier in the book , we used cin with , the extraction operator .
Once we have declared our variable of type ifstream and opened ﬁle , we can use it to input data .
Using this is very similar to cin except we replace cin with the name of our variable .
For example : include include namespace .

Overall , ifstream objects are very similar to just have to declare one and remember to use the variable name instead of cin .

Just like cout , ofstream objects use , the insertion operator .
Using this is very similar to cout except we replace the cout with the name of our variable .
For example : include include namespace .

Both cin and cout are objects .
An object is variable that has functions built in and may have multiple pieces of data associated with it .
For example , the function with and many is considered member function of ifstream and ofstream , which means it is function that is associated with object of those two types .
more into detail , these object types are deﬁned as part of class .
class is blueprint for complex data types .
We already know data types such as integers , doubles , and chars , but using classes , you will be able to design your own data type .

When calling the functions open or close , you will notice we use period between the object name and the function .
We call this the dot operator and it is used to reference member functions and member variables of class .

One example is the function .
We use this function to determine whether the ﬁle was opened successfully or not .
We usually use if statements with the function so that if the ﬁle does not open correctly we can warn the user .

When we use the operator , spaces , tabs and whitespace data are skipped automatically .
However with , nothing is done automatically , so the whitespace characters can be extracted , too .
For example : char Character .

Even if the next character is space , tab , or newline , the program will store that character in the variable .

For example : char    newline c c ofstream outFile .

What do we call the type of object used to control data ﬂowing into your program .

What do we call the type of object used to control data ﬂowing out of your program .

What header ﬁle must you in order to use ifstream and ofstream .

What are ifstream and ofstream used for .

How do you declare an ifstream object named input and an ofstream object named output .

How would you open ﬁle named with an ifstream object called input .

How would you close ﬁle named with an ofstream object called output .

What kind of function is the function and what does it do .

What are the beneﬁts of using ﬁles for input and output .

What is the diﬀerence between cin c ; and ; if c is of type char .

Write program that outputs the contents of some ﬁle to the screen .

Write program that reads in text ﬁle and prints to the screen the of times the character ' shows up .

An input stream .

You need to .

It returns true if the program has reached the end of the ﬁle .

File input and output are useful because ﬁles provide way to store data permanently .
With keyboard input and screen output , the data is temporary and disappears once the program is ﬁnished .
Also , an input ﬁle can be used by many programs at the same time without having to store multiple copies or the data over and over again .

Pointers Pointers do just what they sound like they do .
pointer is an address in memory .
It is declared using an asterisk following the data type : int ptr  variable named is of type , an pointer " that stores the address of variable of type int .

To indicate that pointer variable is not pointing toward any usable data , we set its value to NULL , which is deﬁned as zero when you : NULL .

It " the address stored in the pointer and returns whatever is in that location .

You will use this to produce pointer .

c an  Take and Go  the value  out output of this code is : Here is slightly longer example : int 

the fourth line is executed , will store the address of .
Figure shows the state of the variables .
the line of code is executed , the location where points is assigned the value stored in .
Since contains the address of , receives that value .
Figure Figure : state of the variables line Figure : state of the variables line shows the state of the variables .

Use caution when declaring pointers .
If you are declaring more than one pointer in single line , make sure to indicate each pointer variable with the before the variable name .
Here is correct declaration of two pointers : int 

Review Answers .

Allocating space for variables at compile time is adequate in many cases , but occasionally program will need to allocate space for data in memory while it is running .

Consider the following code : int arraySize   number your  

In order to allocate the space for myArray , the compiler needs to know how many elements make up the array so that there is enough room in memory to accommodate the array .
Unfortunately , the value of arraySize is not known until the user enters something on the keyboard the program has started running and as result , the compiler returns syntax error .

In , pointers are used to keep track of data : NULL   which nowhere In order to dynamically allocate an object of type float , we use the new operator : created object of type float does not have name , so the new operator .

When value is assigned to the dereference , the ﬂoatingpoint value at the address stored in is changed .

In order to free up the memory properly , we use the delete operator : float .

Write code to declare an integer pointer and dynamically allocate an integer .

On the next line , assign this integer the value .

Given the following code , write few lines that deallocate any dynamicallyallocated memory and set all pointer values to NULL : int int int .

Classes and Abstraction Imagine for second behind the wheel of an automobile .
driving along , but do you know your engine is working right if not making any horrendous screeching sounds .
Do you have any idea how your steering actually works when you turn the wheel .
So long as you can press down on the accelerator to move forward and the steering handles correctly , you probably don ' care about the speciﬁcs of how things work .

Abstract types are the automobiles of , and one of the reasons is known as an programming language .
their job to package and obscure the information from the average user , and at the same time make their lives more convenient .
ADTs can be thought of as group of of different types that are treated as single item .
For example , if we wanted to record the name , identiﬁcation number , age , graduation date , and sex of all of the students on campus , we could create new type named Student with those variables .
In the following sections we will show you how to use and deﬁne two types of ADTs : structures and classes .

Points store int , float , or double variables and , which represent the position of the Point on the the .

In the example , the keyword struct is used to declare the structure deﬁnition while the identiﬁer , the word directly to the right of struct , is the structure name and the name of new type .
However , directly the closing brace , there must be semicolon .

Once structure is deﬁned , it can be used just like the types int , char , string , and so on .
For example , we might declare Point structure named input like this : Point input .

Assigning values to member variables Any variable of type Point such as the one above is collection of two variables , and .
Any variables contained in the struct can be accessed by combining the structure in our by symbol called the dot operator period , and the member name .
For example , if we wanted to set in input , we would use the dot operator as follows : input .

Classes classes are like structs except classes contain both variables and functions , whereas structs only contain Also , in struct , member variables are public by default while all members of class are private by default .
discuss the distinction more in minute .
First , take look at an actual class deﬁnition .

Notice the similar syntax to the struct .
Like struct , the declaration starts with the class keyword , followed by the name of the class , and the closing right brace , semicolon .
Notice the public : and private : sections of the deﬁnition .
To indicate that set of member variables or functions is private , we use the private keyword followed by colon .
Everything the keyword will be considered private .
We will discuss what this means in the next section .

On the other hand , if we want to indicate that set member variables or functions is public , we use the keyword public followed by colon .
Everything this keyword will be considered public .

general rule of thumb is to put variables in the private : section , where they would be referred to as private member variables , and related functions in the public : section , where they would be referred to as public member functions .
Private members can only be accessed by the member functions and nowhere else , while public members can be used anywhere , in the same way that the members of struct can be used .

Within the above class deﬁnition , we have seven member functions that we need to deﬁne .
Each function has speciﬁc purpose to set the values of private member variables , return the values of private member variables , or perform some other operation using those member variables .

Functions that are declared in the above code with names starting with the word get will be used to access the variables ; these functions are called accessors .

Functions that are declared in the above code that have names starting with the word set will be used to change the variables ' values ; these functions are called mutators .
Accessors and mutators can be named whatever you like , but it is common convention to name them get and set plus the name of the variable you are accessing or mutating .

When Rectangle object is created , it will be initialized according to the code in this constructor .
By the end of this chapter , understand how useful these are in programming .

When we deﬁne member function , all the member variables within the class are accessible to the function .
For example , we can deﬁne the member function from Rectangle above like .

In this code , we are able to directly access the member variable because both the function and the member variable are part of the class .
Since we are not returning anything to the user , the function is deﬁned as void function .
In order to deﬁne member function , we have to use special operator called the scope resolution operator .

We do this by requiring them to pass value to the mutator member function which sets the member variable .

In the above code , we start by creating Rectangle variable named .
the user is prompted for the length of the base , which is stored in the variable , we call the member function with the dot operator and pass as parameter to the function .

To retrieve the value of member variable , we need to create accessor functions .

When it comes to using accessors , it is very simple .
Just match the type that you want to access , in this case it was float , and deﬁne the member function with that return type .

For example , if we wanted to take in three points we could create Triangle class with these points which are individually of type Point , struct that contains and .

Here we have the ability to combine struct with class in order to have all three points , and c that each contain their own variables and .
Despite the fact that the variables in the struct are public , we cannot access those speciﬁc values outside the Triangle unless we use member function .
If we had mutator function for Point , it might look like .

constructor is member function with the same name as the class and cannot be called directly .
Constructors are what we use to initialize the variables of the class when ﬁrst created .
For example , if we wanted to set default values for class named student deﬁned as : class student .

Overloading Member Functions Note that , like other functions , you can overload any of the functions in class .

Going back to the Rectangle example used earlier , take look at the following code .

Create class called Animal that can store information about animals in zoo and has the following private variables :  pounds  number pounds char animalType  the type of animal   for herbivore  for carnivore You should have public member functions that get and set each variable , and function called that prints all the information about the animal .

Write program that can calculate the slope of line .

You will have struct called Point which contain the following variables : double 

Point   Your class should have accessor and mutator functions , function that calculates and returns the slope of line between the two Points as double , and function that outputs the data to the user called .

Only is correct : through will result in syntax errors .

Separate Compilation Separate compilation is the process of breaking program into separate ﬁles to improve organization .
Parts of the program can be spread out over number of diﬀerent ﬁles that are later compiled individually , then linked using linker to produce the ﬁnal , working program .
When changes are made , only those ﬁles with changes need to be recompiled , the result of which can then be relinked with the ﬁles .
When the development environment takes care of these details , the user is with the sole task of making changes where they are needed .

One of the most basic applications of separate compilation is used when writing abstract data types .
Recall from Chapter that there are declaration and deﬁnition sections in class .

Declarations will be put into the interface ﬁle or the header ﬁle which typically has suﬃx .
In most code by novice programmers , there will be only one class declaration in each header ﬁle .
To use the class in your code elsewhere , you should use followed by the ﬁle in double quotes .

Below is an example of the contents of an interface ﬁle called .

For example , the ﬁle for student will probably be .

To ensure that new ﬁle is compiled into your program , you do not need to anything .
However , the development environment will automatically compile and link the ﬁle if it has been added to your project .

To avoid linker errors , your ﬁles should have safeguards to ensure that classes and functions are not declared more than once within the same program .
For example , we place the following two lines at the top of the ﬁle : c be following line should go at the end of the same ﬁle : ab ve above three lines do the following :
Test if has been previously , usually because this header ﬁle has been elsewhere .

If it has not been , it now and proceed with compiling the code between the and .

Close the block .
If was previously deﬁned , skip to the line this one .

Here is an example of what these lines look like alongside some actual code : class student c c c an c .

What is header ﬁle .

What ﬁle extension do we typically use for header ﬁle .

What ﬁle extension do we typically use for ﬁle .

How do you incorporate header ﬁle named into ﬁle named .

Do you incorporate an ﬁle into your project the same way .

How do you prevent redeclaration of ADTs and functions in header ﬁles .

header ﬁle stores the interface of an ADT .
header ﬁle ends in .
An ﬁle ends in .
In the interface ﬁle .
Add " alongside the other statements in .

No , the ﬁle will automatically be compiled and linked by your development environment as long as the ﬁle is in your project .

You prevent redeclaration by adding lines similar to the following to the top of your header ﬁle : add the following to the end of the header ﬁle :

Chapter STL Standard Template Library provides set of tools beyond those that are provided by the " language .
While comprehensive discussion of the features of the STL is far beyond the scope of this text , there are several libraries that oﬀer extremely important features with which you should become comfortable .

Note : rather than assuming that namespace  is at the top of every code example , each data type , function , or variable derived from the STL will be shown with the preﬁx .

For example , to link identiﬁcation number and their grade point average , we can write : std    float 

Iterators are objects that refer to elements within container object , and and allow for traversal through those elements .

While the speciﬁcs of the iterators vary , most iterators belong to one of the following categories , based on the operations that may be performed on them .

Everything bidirectional iterator can do .

Can use arithmetic operators to move forward and backward certain number of items at once .

Allows comparisons between iterators to determine relative positions in the container .

Can use access to elements in the container an .

For example : std   std  

An associative container diﬀers from an in that items in an are referenced with number which indicates the position in memory :  An ; An associative container , on the other hand , can use any data type to reference the items in the container .
For example , you might choose to use string to reference collection of int items to store list of students ' ages according to their names .

Objects of type may be iterated , and in , their contents can be printed in for loop as we brieﬂy demonstrate here .
Each item in the , is of type .

This code  John Max Ma .
