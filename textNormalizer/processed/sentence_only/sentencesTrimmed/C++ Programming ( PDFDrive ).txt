Access student data files and other study tools on .

For detailed instructions visit Store your Data Files on USB drive for maximum efficiency in organizing and working with the files .

Macintosh users should use program to expand WinZip or PKZip archives .

Ask your instructor or lab coordinator for assistance .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

PROGRAMMING : PROGRAM DESIGN INCLUDING DATA STRUCTURES SEVENTH EDITION .
MALIK Australia Brazil Japan Korea Mexico Singapore Spain United Kingdom United States Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

This is an electronic version of the print textbook .
Due to electronic rights restrictions , some third party content may be suppressed .
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
The publisher reserves the right to remove content from this title at any time if subsequent rights restrictions require it .
For valuable information on pricing , previous editions , changes to current editions , and alternate formats , please visit to search by , author , title , or keyword for materials in your areas of interest .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming : Program Design Including Data Structures , Seventh Edition .
Malik Product Director : Kathleen McMahon Senior Product Manager : Jim Gish Senior Content Developer : Alyssa Pratt Product Assistant : Gillian Daniels Content Project Manager : Jennifer Art Director : GEX Publishing Services Print Buyer : Julio Esperas Cover Designer : GEX Publishing Services Cengage Learning WCN : ALL RIGHTS RESERVED .
No part of this work covered by the copyright herein may be reproduced , transmitted , stored or used in any form or by any , electronic , or mechanical , including but not limited to photocopying , recording , scanning , digitizing , taping , Web distribution , information networks , or information storage and retrieval systems , or of the United States except as permitted under Section Copyright the prior written permission of the publisher .

For product information and technology assistance , contact us at Cengage Learning Customer Sales Support , support .

For permission to use material from this text or product , submit all requests online at .

Cover Photo : Further permissions questions can be emailed to .

Proofreader : Andrea Schein Indexer : Sharon Hilgenberg Compositor : Integra Software Services Library of Congress Control Number : 

Cengage Learning First Stamford Place , Floor Stamford , CT USA Cengage Learning is leading provider of customized learning solutions with office locations around the globe , including Singapore , the United Kingdom , Australia , Mexico , Brazil , and Japan .
Locate your local office at : Cengage Learning products are represented in Canada by Nelson Education , Ltd .

Purchase any of our products at your local college store or at our preferred online store : Some of the product names and company names used in this book have been used for identification purposes only and may be trademarks or registered trademarks of their respective manufacturers and sellers .

Microsoft product screenshots used with permission from Microsoft Corporation .

Unless otherwise credited , all art and tables Cengage Learning , produced by Integra .

Cengage Learning reserves the right to revise this publication and make changes from time to time in its content without notice .

Any fictional data related to persons or companies or URLs used throughout this book is intended for instructional purposes only .
At the time this book was printed , any such data was fictional and not belonging to any real persons or companies .

The programs in this book are for instructional purposes only .
They have been tested with care , but are not guaranteed for any particular intent beyond educational purposes .
The author and the publisher do not offer any warranties or representations , nor do they accept any liabilities with respect to the programs .

Printed in the United States of America Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

TO My Parents Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

RIEF ONTENTS PREFACE .
An Overview of Computers and Programming Languages .
Basic Elements of xxxv .

Simple Data Types , Namespaces , and the string Type .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

APPENDIX Memory Size on System and Random Number Generator .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

TABLE OF ONTENTS .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Table of Contents Input Statement Variable Initialization ix Increment and Decrement Operators .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Table of Contents .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Table of Contents .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Table of Contents Functions and Enumeration Types Declaring Variables When Defining the Enumeration Type Anonymous Data Types typedef Statement xv Programming Example : The Game of Rock , Paper , and Scissors .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming : Program Design Including Data Structures , Seventh Edition Integral Data Type and Array Indices Other Ways to Declare Arrays Searching an Array for Specific Item Sorting Auto Declaration and For Loops String Comparison Reading and Writing Strings String Input String Output Specifying Files at Execution Time string Type and Files Parallel Arrays and Multidimensional Arrays Accessing Array Components Array Initialization during Declaration Arrays and Enumeration Types Initialization Print Input Sum by Row Sum by Column Largest Element in Each Row and Each Column Passing Arrays as Parameters to Functions Arrays of Strings Arrays of Strings and the string Type Another Way to Declare Array Multidimensional Arrays Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Table of Contents .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming : Program Design Including Data Structures , Seventh Edition Assignment Operator and Classes Class Scope Functions and Classes Reference Parameters and Class Objects Implementation of Member Functions Accessor and Mutator Functions Order of public and private Members of Class Constructors Invoking Constructor Invoking the Default Constructor Invoking Constructor with Parameters Constructors and Default Parameters Classes and Constructors : Precaution Initialization of Data Members and the Default Constructor Arrays of Class and Constructors Destructors Data Abstraction , Classes , and Abstract Data Types .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Table of Contents .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Table of Contents .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Table of Contents .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming : Program Design Including Data Structures , Seventh Edition Insert the Last Node Header File of the Unordered Linked List Ordered Linked Lists Search the List Insert Node Insert First and Insert Last Delete Node Header File of the Ordered Linked List Print Linked List in Reverse Order printListReverse Doubly Linked Lists Default Constructor isEmptyList Destroy the List Initialize the List Length of the List Print the List Reverse Print the List Search the List First and Last Elements Circular Linked Lists .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Table of Contents .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming : Program Design Including Data Structures , Seventh Edition Removing Recursion : Nonrecursive Algorithm to Print Linked List Backward Queues Queue Operations Implementation of Queues as Arrays Linked Implementation of Queues Queue Derived from the class unorderedLinkedListType Application of Queues : Simulation Designing Queuing System Customer Server Server List Waiting Customers Queue Main Program Quick Review .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Table of Contents .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Table of Contents .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Table of Contents .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Table of Contents .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

REFACE WELCOME TO THE SEVENTH EDITION OF Programming : Program Design Including Data Structures .
Designed for two semester and course , this text will provide breath of fresh air to you and your students .
The and courses serve as the cornerstone of the Computer Science curriculum .
My primary goal is to motivate and excite all introductory programming students , regardless of their level .
Motivation breeds excitement for learning .
Motivation and excitement are critical factors that lead to the success of the programming student .
This text is culmination and development of my classroom notes throughout more than fifty semesters of teaching successful programming to Computer Science students .

Warning : This text can be expected to create serious reduction in the demand for programming help during your office hours .
Other side effects include significantly diminished student dependency on others while learning to program .

Programming : Program Design Including Data Structures started as collection of brief examples , exercises , and lengthy programming examples to supplement the books that were in use at our university .
It soon turned into collection large enough to develop into text .

The approach taken in this book is , in fact , driven by the students ' demand for clarity and readability .

The material was written and rewritten until the students felt comfortable with it .
Most of the examples in this book resulted from student interaction in the classroom .

As with any profession , practice is essential .
Cooking students practice their recipes .
Budding violinists practice their scales .
New programmers must practice solving problems and writing code .

We do not simply list the syntax followed by an example ; we dissect the " behind all the concepts .
The crucial question of " is answered for every topic when first introduced .
This technique offers bridge to learning .
Students must understand the " in order to be motivated to learn .

Traditionally , programming neophyte needed working knowledge of another programming language .
This book assumes no prior programming experience .
However , some adequate mathematics background such as college algebra is required .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

special feature of the seventh edition is the mapping of with their respective learning listed at the beginning of the chapter .

The first part of Chapter is reorganized by introducing the if and structures earlier .
Also , the first part of Chapter is rewritten .
This edition also introduces some features of , such as for loops , in Chapter , and illustrates how to use them to process the elements of an array , in Chapters and , and on sequence containers , in Chapter .
We have also included various new  such as Examples , and .

Approach The language , which evolved from , is no longer considered an language .
Numerous colleges and universities use for their first language course .
is combination of structured and  and this book addresses both types .

This book is intended for course , and , in Computer Science .
The first or chapters can be covered in the first course and the remaining in the second course .

In July , Standard was officially approved .
This book focuses on ISO Standard .
Even though the syntax of Standard and Standard is very similar , Chapter discusses some of the features of Standard that are not available in Standard .

Chapter briefly reviews the history of computers and languages .
The reader can quickly skim through this chapter and become familiar with some of the hardware components and the software parts of the computer .
This chapter contains section on processing program .
This chapter also describes structured and .

Chapter discusses the basic elements of .
After completing this chapter , students become familiar with the basics of and are ready to write programs that are complicated enough to do some computations .
is fundamental to any language .
It is introduced early , in Chapter , and is covered in detail .

Chapters and introduce control structures to alter the sequential flow of execution .

Chapter studies functions .
It is recommended that readers with no prior background spend extra time on Chapter .
Several are provided to help readers understand the concepts of parameter passing and the scope of an identifier .

Chapter discusses the simple data type , the namespace mechanism of Standard , and the string type .
The earlier versions of did not include the enumeration type .
Enumeration types have very limited use ; their main purpose is to make the program readable .
This book is organized such that readers can skip Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Preface xxxvii the section on enumeration types during the first reading without experiencing any discontinuity , and then later go through this section .

Chapter discusses arrays in detail .
This chapter also introduces for loops , feature of Standard , and explains how to use them to process the elements of an array .

Limitations of for loops on arrays passed as parameters to functions are also discussed .
Chapter also discusses sequential search algorithm and selection sort algorithm .

Chapter introduces records .
The introduction of structs in this book is similar to structs .
This chapter is optional ; it is not prerequisite for any of the remaining chapters .

Chapter begins the study of and introduces classes .

The first half of this chapter shows how classes are defined and used in program .
The second half of the chapter introduces abstract data types .
This chapter shows how classes in are natural way to implement ADTs .
Chapter continues with the fundamentals of design and OOP , and discusses inheritance and composition .
It explains how classes in provide natural mechanism for OOD and how supports OOP .
Chapter also discusses how to find the objects in given problem .

Chapter studies pointers in detail .
After introducing pointers and how to use them in program , this chapter highlights the peculiarities of classes with pointer data members and how to avoid them .
Moreover , this chapter discusses how to create and work with dynamic arrays , and also explains why for loops cannot be used on dynamic arrays .
Chapter also discusses abstract classes and type of polymorphism accomplished via virtual functions .

Chapter continues the study of OOD and OOP .
In particular , it studies polymorphism in .

Chapter specifically discusses two types of and templates .

Chapter discusses exception handling in detail .
Chapter introduces and discusses recursion .
This is chapter , so it can be studied anytime after Chapter .

Chapters and are devoted to the study of data structures .
Discussed in detail are linked lists in Chapter and stacks and queues in Chapter .
The code developed in these chapters is generic .
These chapters effectively use the fundamentals of OOD .

Chapter discusses various searching and sorting algorithms .
In addition to showing how these algorithms work , it also provides relevant analysis and results concerning the performance of the algorithms .
The algorithm analysis allows the user to decide which algorithm to use in particular application .
This chapter also includes several sorting algorithms .
The instructor can decide which algorithms to cover .

Chapter provides an introduction to binary trees .
Various traversal algorithms , as well as the basic properties of binary trees , are discussed and illustrated .
Special binary trees , called binary search trees , are introduced .
Searching , as well as item insertion and deletion from binary search tree , are described and illustrated .
Chapter also discusses nonrecursive binary tree traversal algorithms .
Furthermore , to enhance the flexibility of traversal algorithms , it shows how to construct and pass functions as parameters to other functions .
This chapter also discusses AVL trees in detail .
Because of text length considerations , discussion on AVL trees is provided as separate section and is available on the Web site accompanying this book .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

After introducing the basic graph theory terminology , the representation of graphs in computer memory is discussed .
This chapter also discusses graph traversal algorithms , the shortest path algorithm , and the minimal spanning tree algorithm .
Topological sort is also discussed in this chapter and is available on the Web site accompanying this book .

is equipped with powerful Standard Template Library data structures and algorithms that can be used effectively in wide variety of applications .
Chapter describes the STL in detail .
After introducing the three basic components of the STL , it shows how sequence containers are used in program .
Special containers , such as stacks and queues , are also discussed .
The latter half of this chapter shows how various STL algorithms can be used in program .
This chapter is fairly long ; depending on the availability of time , the instructor can at least cover the sequence containers , iterators , the classes stack and queue , and certain algorithms .

Appendix lists the reserved words in .
Appendix shows the precedence and associativity of the operators .
Appendix lists the ASCII Standard Code for Information and EBCDIC Binary Coded Decimal Interchange character sets .
Appendix lists the operators that can be overloaded .

Appendix has three objectives .
First , we discuss how to convert number from decimal to binary and binary to decimal .
We then discuss binary and random access files in detail .
Finally , we describe the naming conventions of the header files in both Standard and Standard .
Appendix discusses some of the most widely used library routines , and includes the names of the standard header files .
The programs in Appendix show how to print the memory size for the data types on your system as well as how to use random number generator .
Appendix gives selected references for further study .
Appendix provides the answers to exercises in the book .

In Figure , dotted lines mean that the preceding chapter is used in one of the sections of the chapter and is not necessarily prerequisite for the next chapter .
For example , Chapter covers arrays in detail .
In Chapters and , we show the relationship between arrays and structs and arrays and classes , respectively .
However , if Chapter is studied before Chapter , then the section dealing with arrays in Chapter can be skipped without any discontinuation .
This particular section can be studied after studying Chapter .

It is recommended that the first six chapters be covered sequentially .
After covering the first six chapters , if the reader is interested in learning OOD and OOP early , then Chapter can be studied right after Chapter .
Chapter can be studied anytime after Chapter .
After studying the first six chapters in sequence , some of the approaches are :

Study chapters in the sequence :

Study chapters in the sequence : Study chapters in the sequence :

As the chapter dependency diagram shows , Chapters and can be covered in any sequence .

However , typically , Chapters and are studied in sequence .
Ideally , one should study Chapters , and in sequence .
Chapters and can be studied in any sequence .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Figure shows the dependency of the chapters .

Chapter dependency diagram Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

BOOK interior design shows accurate code and related comments .

One video is available for each chapter on the optional CourseMate that accompanies this text .
Each video is designed to explain how program works .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

More than visual diagrams , both extensive and exhaustive , illustrate difficult concepts .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Numbered Examples illustrate the key concepts with their relevant code .
The programming code in these examples is followed by Sample Run .
An explanation then follows that describes what each line in the code does .

Notes highlight important facts about the concepts introduced in the chapter .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Examples are where everything in the chapter comes together .

These examples teach skills and include the concrete stages of input , output , problem analysis and algorithm design , class design , and program listing .
All programs are designed to be methodical , consistent , and .
Each Programming Example starts with problem analysis that is followed by the algorithm design class design , and every step of the algorithm is coded in .
In addition to helping students learn problemsolving techniques , these detailed programs show the student how to implement concepts in an actual program .

We strongly recommend that students study the Programming Examples carefully in order to learn effectively .
Students typically learn much from completely programs .
Further , programming examples considerably reduce students ' need for help outside the classroom and bolster students '

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Exercises further reinforce learning and ensure that students have , in fact , mastered the material .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Exercises challenge students to write programs with specified outcome .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

UPPLEMENTAL ESOURCES CourseMate Make the most of your study time with everything you need to succeed in one place .
Read your textbook , highlight and take notes , review flashcards , watch videos , and take practice quizzes online .
Learn more at .

The Programming CourseMate includes the following .

Videos step you through programs in each chapter , while integrated quizzes provide immediate feedback to gauge your understanding .

Lab Manual lets you apply material with wealth of practical , exercises .

Interactive Quizzes and Study Games drill key chapter concepts , while openended Assignments develop critical thinking skills .

Instructors may add CourseMate to the textbook package , or students may purchase CourseMate directly through .

Source Code The source code , in Standard , is available for students to download at and through the CourseMate available for this text .
These files are also available to instructors at .
The input files needed to run some of the programs are also included with the source code .

Instructor Resources The following supplemental materials are available when this book is used in classroom setting .
All teaching tools are available with this book at .
An instructor account is required .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Supplemental Resources xlvii Electronic Manual The Manual follows the text and includes material to assist in planning and organizing an effective , engaging course .

The Manual includes Overviews , Chapter Objectives , Teaching Tips , Quick Quizzes , Class Discussion Topics , Additional Projects , Additional Resources , and Key Terms .
Sample Syllabus is also available .

Test Bank Cengage Learning Testing Powered by Cognero is flexible , online system that allows you .

Slides may be used to guide classroom presentation , to make available to students for chapter review , or to print as classroom handouts .
Instructors can add their own slides for additional topics that they introduce to the class , as well as customize the slides with the complete Figure Files from the text .

Solution Files The solution files for all Programming Exercises , in , are available for instructor download at .
The input files needed to run some of the Programming Exercises are also included with the solution files .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

CKNOWLEDGEMENTS There are many people that must thank who , one way or another , contributed to the success of this book .
First , would like to thank all the students who , during the preparation , were spontaneous in telling me if certain portions needed to be reworded for better understanding and clearer reading .
Next , would like to thank those who numerous comments to improve upon the sixth edition .
am also very grateful to the reviewers who reviewed earlier versions of this book and offered many critical suggestions on how to improve it .

owe great deal to the following reviewers who made helpful , critical suggestions for improving this edition of the text : Terry Hoffer : City College Montana State University ; Douglas Kranch : North Central State College ; Xiangdong Li : New York City College of Technology ; and Jeffrey Miller : Occidental College .

Next , express thanks to Jim Gish , Senior Product Manager , for recognizing the importance and uniqueness of this project .
All this would not have been possible without the careful planning of Senior Content Developer , Alyssa Pratt , and Product Development Manager , Leigh Hefferon .
extend my sincere thanks to Alyssa , as well as to Content Project Manager , Jennifer .
also thank Shanthi Guruswamy of Integra Software Services for assisting us in keeping the project on schedule .
would like to thank Chris Scriver and Serge Palladino of Cengage Learning for patiently and carefully testing the code and discovering typos and errors .

This book is dedicated to my parents , who thank for their blessings .

Finally , am thankful for the support of my wife Sadhana and especially my daughter Shelly .

They cheered me up whenever was overwhelmed during the writing of this book .

welcome any comments concerning the text .
Comments may be forwarded to the following address :

Malik Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Become aware of Standard , Standard , and Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Students in elementary school regularly  the Internet and use computers to design and implement their classroom projects .
Many people use the Internet to look for information and to communicate with others .
This is all made possible by the use of various software , also known as computer programs .
Without software , computer cannot work .
Software is developed by using programming languages .
is one of the programming languages , which is well suited for developing software to accomplish specific tasks .
The main objective of this book is to help you learn programming language to write programs .
Before you begin programming , it is useful to understand some of the basic terminology and different components of computer .
We begin with an overview of the history of computers .

Brief Overview of the History of Computers The first device known to carry out calculations was the abacus .
The abacus was invented in Asia but was used in ancient Babylon , China , and throughout Europe until the late middle ages .
The abacus uses system of sliding beads in rack for addition and subtraction .
In , the French philosopher and mathematician Blaise Pascal invented the calculating device called the Pascaline .
It had eight movable dials on wheels and could calculate sums up to eight figures long .
Both the abacus and Pascaline could perform only addition and subtraction operations .
Later in the century , Gottfried von Leibniz invented device that was able to add , subtract , multiply , and divide .
In , Joseph Jacquard , French weaver , discovered that the weaving instructions for his looms could be stored on cards with holes punched in them .
While the cards moved through the loom in sequence , needles passed through the holes and picked up threads of the correct color and texture .
weaver could rearrange the cards and change the pattern being woven .
In essence , the cards programmed loom to produce patterns in cloth .
The weaving industry may seem to have little in common with the computer industry .
However , the idea of storing information by punching holes on card proved to be of great importance in the later development of computers .

In the early and , Charles Babbage , an English mathematician and physical scientist , designed two calculating machines : the difference engine and the analytical engine .
The difference engine could perform complex operations such as squaring numbers automatically .
Babbage built prototype of the difference engine , but did not build the actual device .
The first complete difference engine was completed in London in , years after it was designed .
It consists of parts , weighs five tons , and measures feet long .
replica of the difference engine was completed in and is on display at the Computer History Museum in Mountain View , California .
Most of work is known through the writings of his colleague Ada Augusta , Countess of Lovelace .
Augusta is considered the first computer programmer .

At the end of the century , The United States Census officials needed help in accurately tabulating the census data .
Herman Hollerith invented calculating machine that ran on electricity and used punched cards to store data .
machine was immensely successful .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Elements of Computer System Hollerith founded the Tabulating Machine Company , which later became the computer and technology corporation known as IBM .

The first machine was the Mark .
It was built , in , jointly by IBM and Harvard University under the leadership of Howard Aiken .
Punched cards were used to feed data into the machine .
The Mark was feet long , weighed tons , and had parts .

In , the Electronic Numerical Integrator and Calculator was built at the University of Pennsylvania .
It contained vacuum tubes and weighed some tons .

The computers that we know today use the design rules given by John von Neumann in the late .
His design included components such as an arithmetic logic unit , control unit , memory , and devices .
These components are described in the next section .
Von computer design makes it possible to store the programming instructions and the data in the same memory space .
In , the Universal Automatic Computer was built and sold to the The United States Census Bureau .

In , the invention of transistors resulted in smaller , faster , more reliable , and more computers .
This era also saw the emergence of the software development industry , with the introduction of FORTRAN and COBOL , two early programming languages .
In the next major technological advancement , transistors were replaced by integrated circuits , or " Chips are much smaller and more efficient than transistors , and with new it can be made to contain thousands of circuits on single chip .
They give computers tremendous processing speed .

In , the microprocessor , an entire central processing unit on single chip , was invented .
In , Stephen Wozniak and Steven Jobs designed and built the first Apple computer in their garage .
In , IBM introduced its personal computer .
In the , clones of the IBM PC made the personal computer even more affordable .
By the , people from many walks of life were able to afford them .
Computers continue to become faster and less expensive as advances .

computers are powerful , reliable , and easy to use .
They can accept instructions and imitate human reasoning through artificial intelligence .
Expert systems assist doctors in making diagnoses .
Mobile computing applications are growing significantly .
Using devices , delivery drivers can access global positioning satellites to verify customer locations for pickups and deliveries .
Cell phones permit you to check your , make airline reservations , see how stocks are performing , access your bank accounts , and communicate with family and friends via social media .

Although there are several categories of computers , such as mainframe , midsize , and micro , all computers share some basic elements , described in the next section .

Elements of Computer System computer is an electronic device capable of performing commands .
The basic commands that computer performs are input , output , storage , and performance of arithmetic and logical operations .
There are two main components of computer Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : An Overview of Computers and Programming Languages system : hardware and software .
In the next few sections , you will learn brief overview of these components .
look at hardware first .

Hardware Major hardware components include the central processing unit ; main memory , also called random access memory ; devices ; and secondary storage .
Some examples of input devices are the keyboard , mouse , and secondary storage .

Examples of output devices are the screen , printer , and secondary storage .
look at each of these components in greater detail .

Central Processing Unit and Main Memory The central processing unit is the " of computer and the most expensive piece of hardware in computer .
The more powerful the CPU , the faster the computer .

Arithmetic and logical operations are carried out inside the CPU .
Figure shows some hardware components .

Central Processing Main Memory Secondary Storage Input Device Output Device .

Memory Hardware components of computer and main memory Main memory , or random access memory , is connected directly to the CPU .
All programs must be loaded into main memory before they can be executed .
Similarly , all data must be brought into main memory before program can manipulate it .
When the computer is turned off , everything in main memory is lost .

Main memory is an ordered sequence of cells , called memory cells .
Each cell has unique location in main memory , called the address of the cell .
These addresses help you access the information stored in the cell .
Figure shows main memory with some data .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The Language of Computer computers come with main memory consisting of millions to billions of cells .

Although Figure shows data stored in cells , the content of cell can be either programming instruction or data .
Moreover , this figure shows the data as numbers and letters .
However , as explained later in this chapter , main memory stores everything as sequences of and .
The memory addresses are also expressed as sequences of and .

SECONDARY STORAGE Because programs and data must be loaded into the main memory before processing and because everything in main memory is lost when the computer is turned off , information stored in main memory must be saved in some other device for permanent storage .
The device that stores information permanently the device becomes unusable or you change the information by rewriting is called secondary storage .
To be able to transfer information from main memory to secondary storage , these components must be directly connected to each other .
Examples of secondary storage are hard disks , flash drives , and .

Input Devices For computer to perform useful task , it must be able to take in data and programs and display the results of calculations .
The devices that feed data and programs into computers are called input devices .
The keyboard , mouse , scanner , camera , and secondary storage are examples of input devices .
The devices that the computer uses to display results are called output devices .
monitor , printer , and secondary storage are examples of output devices .

Software Software are programs written to perform specific tasks .
For example , word processors are programs that you use to write letters , papers , and even books .
All software is written in programming languages .
There are two types of programs : system programs and application programs .

System programs control the computer .
The system program that loads first when you turn on your computer is called the operating system .
Without an operating system , the computer is useless .
The operating system handles the overall activity of the computer and provides services .
Some of these services include memory management , activities , and storage management .
The operating system has special program that organizes secondary storage so that you can conveniently access information .
Some operating systems are Windows , Mac OS , Linux , and Android .

Application programs perform specific task .
Word processors , spreadsheets , and games are examples of application programs .
The operating system is the program that runs application programs .

The Language of Computer When you press on your keyboard , the computer displays on the screen .
But what is actually stored inside the main memory .
What is the language of the computer .

How does it store whatever you type on the keyboard .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : An Overview of Computers and Programming Languages Remember that computer is an electronic device .
Electrical signals are used inside the computer to process information .
There are two types of electrical signals : analog and digital .
Analog signals are continuously varying continuous wave forms used to represent such things as sound .
Audio tapes , for example , store data in analog signals .

Digital signals represent information with sequence of and .
represents low voltage , and represents high voltage .
Digital signals are more reliable carriers of information than analog signals and can be copied from one device to another with exact precision .
You might have noticed that when you make copy of an audio tape , the sound quality of the copy is not as good as the original tape .
On the other hand , when you copy CD , the copy is the same as the original .
Computers use digital signals .

Because digital signals are processed inside computer , the language of computer , called machine language , is sequence of and .
The digit or is called binary digit , or bit .
Sometimes sequence of and is referred to as binary code or binary number .

Bit : binary digit or .

sequence of eight bits is called byte .
Table summarizes the terms used to describe various numbers of .

Byte bits Kilobyte .

TB GB GB Petabyte PB TB TB Exabyte EB PB PB Zettabyte ZB EB EB Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The Evolution of Programming Languages Every letter , number , or special symbol as or on your keyboard is encoded as sequence of bits , each having unique representation .
The most commonly used encoding scheme on personal computers is the American Standard Code for Information Interchange .
The ASCII data set consists of characters numbered through .
That is , in the ASCII data set , the position of the first character is , the position of the second character is , and so on .
In this scheme , is encoded as the binary number .
In fact , is the character in the ASCII character code , but its position is because the position of the first character is .
Furthermore , the binary number is the binary representation of .
The character is encoded as .
Note that in the ASCII character set , the position of the character is , so the character is the character in the ASCII set .
It also follows that is the binary representation of .
For complete list of the printable ASCII character set , refer to Appendix .

The number system that we use in our daily life is called the decimal system , or base .

Because everything inside computer is represented as sequence of and , that is , binary numbers , the number system that computer uses is called binary , or base .
We indicated in the preceding paragraph that the number is the binary representation of .
Appendix describes how to convert number from base to base and vice versa .

Inside the computer , every character is represented as sequence of eight bits , that is , as byte .

Now the binary representation of is .
Note that we added to the left of the representation of to convert it to an representation .
Similarly , we add one to the binary value of to get its binary representation .

ASCII is code .
Therefore , to represent each ASCII character inside the computer , you must convert the binary representation of an ASCII character to an binary representation .
This is accomplished by adding to the left of the ASCII encoding of character .
Hence , inside the computer , the character is represented as , and the character is represented as .

There are other encoding schemes , such as EBCDIC by and Unicode , which is more recent development .
EBCDIC consists of characters ; Unicode consists of characters .
To store character belonging to Unicode , you need bits or two .
Unicode was created to represent variety of characters and is continuously expanding .
It consists of characters from languages other than English .

The Evolution of Programming Languages The most basic language of computer , the machine language , provides program instructions in bits .
Even though most computers perform the same kinds of operations , the designers of the computer may have chosen different sets of binary codes to perform the operations .
Therefore , the machine language of one machine is not necessarily the same as the machine language of another machine .
The only consistency among computers is that in any modern computer , all data is stored and manipulated as binary codes .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : An Overview of Computers and Programming Languages Early computers were programmed in machine language .
To see how instructions are written in machine language , suppose you want to use the equation : rate hours to calculate weekly .
Further , suppose that the binary code stands for load , stands for multiplication , and stands for store .
In machine language , you might need the following sequence of instructions to calculate weekly  To represent the weekly equation in machine language , the programmer had to remember the machine language codes for various operations .
Also , to manipulate data , the programmer had to remember the locations of the data in the main memory .
This need to remember specific codes made programming not only very difficult , but also error prone .

Assembly languages were developed to make the job easier .
In assembly language , an instruction is an form called mnemonic .
For example , suppose LOAD stands for the machine code , MULT stands for the machine code , and STOR stands for the machine code .

Using assembly language instructions , you can write the equation to calculate the weekly as follows : LOAD MULT STOR rate hours As you can see , it is much easier to write instructions in assembly language .
However , computer cannot execute assembly language instructions directly .
The instructions first have to be translated into machine language .
program called an assembler translates the assembly language instructions into machine language .

Assembler : program that translates program written in assembly language into an equivalent program in machine language .

Moving from machine language to assembly language made programming easier , but programmer was still forced to think in terms of individual machine instructions .
The next step toward making programming easier was to devise languages that were closer to natural languages , such as English , French , German , and Spanish .
Basic , FORTRAN , COBOL , and Java are all languages .
You will learn the language in this book .

In , you write the weekly equation as follows : rate hours ; The instruction written in is much easier to understand and is to novice user who is familiar with basic arithmetic .
As in the case of assembly language , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Processing Program however , the computer cannot directly execute instructions written in language .
To execute on computer , these instructions first need to be translated into machine language .
program called compiler translates instructions written in languages into machine code .

Compiler : program that translates instructions written in language into the equivalent machine language .

Processing Program In the previous sections , we discussed machine language and languages and showed statement .
Because computer can understand only machine language , you are ready to review the steps required to process written in .

Recall that computer can understand only machine language .
Therefore , in order to run this successfully , the code must first be translated into machine language .
In this section , we review the steps required to execute programs written in .

The following steps , as shown in Figure , are necessary to process .

You use text editor to create following the rules , or syntax , of the language .
This is called the source code , or source .
The must be saved in text file that has the extension .
For example , if you saved the preceding in the file named FirstCPPProgram , then its complete name is .

Source  written in language .

The given in the preceding section contains the statement .
In  statements that begin with the symbol are called preprocessor directives .
These statements are processed by called preprocessor .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : An Overview of Computers and Programming Languages After processing preprocessor directives , the next step is to verify that the obeys the rules of the programming is , the is syntactically translate the into the equivalent machine language .
The compiler checks the source for syntax errors and , if no error is found , translates the into the equivalent machine language .

The equivalent machine language is called an object .

Object  The machine language version of the language .

The programs that you write in language are developed using an integrated development environment .
The IDE contains many programs that are useful in creating your .
For example , it contains the necessary code to display the results of the and several mathematical functions to make the job somewhat easier .

Therefore , if certain code is already available , you can use this code rather than writing your own code .
Once the is developed and successfully compiled , you must still bring the code for the resources used from the IDE into your to produce final that the computer can execute .

This prewritten code resides in place called the library .
called linker combines the object with the programs from libraries .

Linker : that combines the object with other programs in the library and is used in the to create the executable code .

You must next load the executable into main memory for execution .
called loader accomplishes this task .

Loader : that loads an executable into main memory .

The final step is to execute the .

Figure shows how typical is processed .

Program Editor Step .

Compiler Syntax Error Step .

Processing Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming with the Problem Cycle As programmer , you mainly need to be concerned with Step .
That is , you must learn , understand , and master the rules of the programming language to create source programs .

As noted earlier , programs are developed using an IDE .
IDEs used to create programs in the language Visual Express and Visual Studio , and Builder .
You can also use IDE from Bloodshed Software to create and test programs .
These IDEs contain text editor to create the source  compiler to check the source for syntax errors , to link the object code with the IDE resources , and to execute the .

These IDEs are quite user friendly .
When you compile your  the compiler not only identifies the syntax errors , but also typically suggests how to correct them .
Moreover , with just simple command , the object code is linked with the resources used from the IDE .
For example , the command that does the linking on Visual Express and Visual Studio is Build or Rebuild .

The Web site explains how to use Visual Express and Visual Studio to create .

Programming with the Problem Cycle Programming is process of problem solving .
Different people use different techniques to solve problems .
Some techniques are nicely outlined and easy to follow .
They not only solve the problem , but also give insight into how the solution is reached .
These problemsolving techniques can be easily modified if the domain of the problem changes .

To be good problem solver and good programmer , you must follow good techniques .
One common technique includes analyzing problem , outlining the problem requirements , and designing steps , called an algorithm , to solve the problem .

Algorithm : process in which solution is arrived at in finite amount of time .

In programming environment , the process requires the following three steps :

Analyze and outline the problem and its solution requirements , and design an algorithm to solve the problem .

Implement the algorithm in programming language , such as , and verify that the algorithm works .

Maintain the program by using and modifying it if the problem domain changes .

Figure summarizes the first two steps of this programming process .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Problem Analysis Algorithm Design Coding Preprocessor Compiler Library Error No Error Linker Loader .

Error No Error Results FIGURE Problem cycle To develop program to solve problem , you start by analyzing the problem .
You then design the algorithm ; write the program instructions in language , or code the program ; and enter the program into computer system .

Analyzing the problem is the first and most important step .
This step requires you to do the following :

Thoroughly understand the problem .

Understand the problem requirements .
Requirements can include whether the program requires interaction with the user , whether it manipulates data , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming with the Problem Cycle .

If the program manipulates data , the programmer must know what the data is and how it is represented .
That is , you need to look at sample data .
If the program produces output , you should know how the results should be generated and formatted .

If the problem is complex , divide the problem into subproblems and repeat Steps and .
That is , for complex problems , you need to analyze each subproblem and understand each requirements .

After you carefully analyze the problem , the next step is to design an algorithm to solve the problem .
If you break the problem into subproblems , you need to design an algorithm for each subproblem .
Once you design an algorithm , you need to check it for correctness .
You can sometimes test an correctness by using sample data .
At other times , you might need to perform some mathematical analysis to test the correctness .

Once you have designed the algorithm and verified its correctness , the next step is to convert it into an equivalent programming code .
You then use text editor to enter the programming code or the program into computer .
Next , you must make sure that the program follows the syntax .
To verify the correctness of the syntax , you run the code through compiler .
If the compiler generates error messages , you must identify the errors in the code , remove them , and then run the code through the compiler again .

When all the syntax errors are removed , the compiler generates the equivalent machine code , the linker links the machine code with the resources , and the loader places the program into main memory so that it can be executed .

The final step is to execute the program .
The compiler guarantees only that the program follows the syntax .
It does not guarantee that the program will run correctly .

During execution , the program might terminate abnormally due to logical errors , such as division by zero .
Even if the program terminates normally , it may still generate erroneous results .
Under these circumstances , you may have to reexamine the code , the algorithm , or even the problem analysis .

Your overall programming experience will be successful if you spend enough time to complete the problem analysis before attempting to write the programming instructions .

Usually , you do this work on paper using pen or pencil .
Taking this careful approach to programming has number of advantages .
It is much easier to find errors in program that is well analyzed and well designed .
Furthermore , carefully analyzed and designed program is much easier to follow and modify .
Even the most experienced programmers spend considerable amount of time analyzing problem and designing an algorithm .

Throughout this book , you will not only learn the rules of writing programs in , but you will also learn techniques .
Most of the chapters contain programming examples that discuss programming problems .
These programming examples teach techniques of how to analyze and solve problems , design algorithms , code the algorithms into , and also help you understand the concepts discussed in the chapter .
To gain the full benefit of this book , we recommend that you work through these programming examples .

Next , we provide examples of various and techniques .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : An Overview of Computers and Programming Languages EXAMPLE In this example , we design an algorithm to find the and of rectangle .

To find the and of rectangle , you need to know the length and width .

The and of the rectangle are then given by the following formulas : length width The algorithm to find the and of the rectangle is :

Get the length of the rectangle .

Get the width of the rectangle .

Find the using the following equation :

Find the using the following equation : length width EXAMPLE In this example , we design an algorithm that calculates the sales tax and the price of an item sold in particular state .

The sales tax is calculated as follows : The portion of the sales tax is , and the portion of the sales tax is .
If the item is luxury item , such as car more than , then there is luxury tax .

To calculate the price of the item , we need to calculate the portion of the sales tax , the portion of the sales tax , and , if it is luxury item , the luxury tax .

Suppose salePrice denotes the selling price of the item , denotes the sales tax , denotes the sales tax , luxuryTax denotes the luxury tax , salesTax denotes the total sales tax , and amountDue denotes the final price of the item .

To calculate the sales tax , we must know the selling price of the item and whether the item is luxury item .

The and can be calculated using the following formulas : salePrice salePrice Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming with the Problem Cycle Next , you can determine as follows : salePrice otherwise Next , you can determine as follows : + + Finally , you can calculate as follows : salePrice + The algorithm to determine and is , therefore :

Get the selling price of the item .

Determine whether the item is luxury item .

Find the portion of the sales tax using the formula : salePrice .

Find using the formula : + +

Find using the formula : salePrice + EXAMPLE Watch the Video In this example , we design an algorithm that calculates the monthly paycheck of salesperson at local department store .

Every salesperson has base salary .
The salesperson also receives bonus at the end of each month , based on the following criteria : If the salesperson has been with the store for five years or less , the bonus is for each year that he or she has worked there .
If the salesperson has been with the store for more than five years , the bonus is for each year that he or she has worked there .
The salesperson can earn an additional bonus as follows : If the total sales made Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : An Overview of Computers and Programming Languages by the salesperson for the month are at least but less than , he or she receives commission on the sale .
If the total sales made by the salesperson for the month are at least , he or she receives commission on the sale .

To calculate monthly paycheck , you need to know the base salary , the number of years that the salesperson has been with the company , and the total sales made by the salesperson for that month .
Suppose baseSalary denotes the base salary , noOfServiceYears denotes the number of years that the salesperson has been with the store , denotes the  totalSales denotes the total sales made by the salesperson for the month , and denotes the additional .

You can determine the as follows : noOfServiceYears otherwise noOfServiceYears Next , you can determine the additional of the salesperson as follows : otherwise if is greater than or equal to and otherwise Following the above discussion , you can now design the algorithm to calculate monthly paycheck :

Calculate using the following formula : noOfServiceYears otherwise noOfServiceYears .

Calculate using the following formula : otherwise if is greater than or equal to and otherwise Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming with the Problem Cycle .

The objective is to randomly generate an integer greater than or equal to and less than .

Then prompt the player to guess the number .
If the player guesses the number correctly , output an appropriate message .
Otherwise , check whether the guessed number is less than the random number .
If the guessed number is less than the random number generated , output the message , guess is lower than the number .
Guess ; otherwise , output the message , guess is higher than the number .
Then prompt the player to enter another number .
The player is prompted to guess the random number until the player enters the correct number .

The first step is to generate random number , as described above .
provides the means to do so , which is discussed in Chapter .
Suppose num stands for the random number and guess stands for the number guessed by the player .

After the player enters the guess , you can compare the guess with the random number as follows : otherwise You can now design an algorithm as follows :

Generate random number and call it num .

Repeat the following steps until the player has guessed the correct number :
Prompt the player to enter guess .

Check the value of guess .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : An Overview of Computers and Programming Languages EXAMPLE There are students in class .
Each student has taken five tests , and each test is worth points .
We want to design an algorithm to calculate the grade for each student , as well as the class average .
The grade is assigned as follows : If the average test score is greater than or equal to , the grade is ; if the average test score is greater than or equal to and less than , the grade is ; if the average test score is greater than or equal to and less than , the grade is ; if the average test score is greater than or equal to and less than , the grade is ; otherwise , the grade is .
Note that the data consists of students ' names and their test scores .

This is problem that can be divided into subproblems as follows : There are five tests , so you design an algorithm to find the average test score .
Next , you design an algorithm to determine the grade .
The two subproblems are to determine the average test score and to determine the grade .

Let us first design an algorithm to determine the test score .
To find the test score , add the five test scores and then divide the sum by .
Therefore , the algorithm is the following :

Get the five test scores .

Add the five test scores .
Suppose sum stands for the sum of the test scores .

Suppose stands for the test score .
Then sum ; Next , you design an algorithm to determine the .
Suppose stands for the assigned to student .
The following algorithm determines the  if is greater than or equal to otherwise if is greater than or equal to otherwise if is greater than or equal to otherwise if is greater than or equal to otherwise You can use the solutions to these subproblems to design the main algorithm as follows :

Get name .

Use the algorithm as discussed above to find the test score .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming with the Problem Cycle c .
Use the algorithm as discussed above to find the .

Update by adding the current test score .

Determine the class as follows : programming exercise in Chapter asks you to write program to calculate the test score and for each student in class .

Earlier in this chapter , we described the problem analysis , coding , and execution cycle .

In this section , we gave various examples to illustrate the problem analysis and coding cycle .

It must be pointed out that problem analysis is the most important part of programming .

Once you have analyzed the problem and written the necessary steps of the solution in your native language , then , as you will see throughout the text , writing the code to implement your solution is relatively easy .
In addition , soon you will recognize that the steps of your solutions can be effecively translated into code .
Furthermore , good problem analysis will lead to better and cleaner program .
Even though we have not yet introduced the syntax of , to illustrate how to write code corresponding to the steps of your solution , let us consider the algorithm designed in Example .
Suppose length , width , perimeter , and area represents the length , width , perimeter , and area of rectangle .

Here are the four steps of the algorithm and their corresponding statement : Algorithm Step .

Consider the first statement .
In , cin stands for common input .
During program execution , the code associated with it instructs the user to input data and if the user enters valid datum , then that datum will be stored in the memory , that is , will become the value of length .
The code in Step uses the values of length and width to compute the  which then is assigned to .

In order to write complete program to compute the and  you need to know the basic structure of program , which will be introduced in the next chapter .

However , if you are curious to know how the complete program looks , you can visit the Web site accompanying this book and look at the programming code stored in the file .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : An Overview of Computers and Programming Languages Programming Methodologies Two popular approaches to programming design are the structured approach and the approach , which are outlined below .

Structured Programming Dividing problem into smaller subproblems is called structured design .
Each subproblem is then analyzed , and solution is obtained to solve the subproblem .

The solutions to all of the subproblems are then combined to solve the overall problem .

This process of implementing structured design is called structured programming .

The approach is also known as design , design , stepwise refinement , and modular programming .

Programming design is widely used programming methodology .
In OOD , the first step in the process is to identify the components called objects , which form the basis of the solution , and to determine how these objects interact with one another .
For example , suppose you want to write program that automates the video rental process for local video store .
The two main objects in this problem are the video and the customer .

After identifying the objects , the next step is to specify for each object the relevant data and possible operations to be performed on that data .
For example , for video object , the data might .

An object combines data and operations on the data into single unit .
In OOD , the final program is collection of interacting objects .
programming language that implements OOD is called an programming language .
You will learn about the many advantages of OOD in later chapters .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Methodologies Because an object consists of data and operations on that data , before you can design and use objects , you need to learn how to represent data in computer memory , how to manipulate data , and how to implement operations .
In Chapter , you will learn the basic data types of and discover how to represent and manipulate data in computer memory .
Chapter discusses how to input data into program and output the results generated by program .

To create operations , you write algorithms and implement them in programming language .
Because data element in complex program usually has many operations , to separate operations from each other and to use them effectively and in convenient manner , you use functions to implement algorithms .
After brief introduction in Chapters and , you will learn the details of functions in Chapter .
Certain algorithms require that program make decisions , process called selection .
Other algorithms might require certain statements to be repeated until certain conditions are met , process called repetition .
Still other algorithms might require both selection and repetition .
You will learn about selection and repetition mechanisms , called control structures , in Chapters and .

Also , in Chapter , using mechanism called an array , you will learn how to manipulate data when data items are of the same type , such as items in list of sales figures .

Finally , to work with objects , you need to know how to combine data and operations on the data into single unit .
In , the mechanism that allows you to combine data and operations on the data into single unit is called class .
You will learn how classes work , how to work with classes , and how to create classes in the chapter Classes and Data Abstraction in this .

As you can see , you need to learn quite few things before working with the OOD methodology .
To make this learning easier and more effective , this book purposely divides control structures into two chapters ; Chapter .

For some problems , the structured approach to program design will be very effective .

Other problems will be better addressed by OOD .
For example , if problem requires manipulating sets of numbers with mathematical functions , you might use the structured design approach and outline the steps required to obtain the solution .
The library supplies wealth of functions that you can use effectively to manipulate numbers .
On the other hand , if you want to write program that would make candy machine operational , the OOD approach is more effective .
was designed especially to implement OOD .
Furthermore , OOD works well with structured design .

Both the structured design and OOD approaches require that you master the basic components of programming language to be an effective programmer .
In Chapters to , you will learn the basic components of , such as data types , control structures , functions , and arrays , required by either type of programming .
We develop and illustrate how these concepts work using the structured programming approach .
Starting with the chapter Classes and Data Abstraction , we develop and use the OOD approach .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : An Overview of Computers and Programming Languages Standard The programming language evolved from and was designed by Bjarne Stroustrup at Bell Laboratories in the early .
From the early through the early , several compilers were available .
Even though the fundamental features of in all compilers were mostly the same , the language , referred to in this book as Standard , was evolving in slightly different ways in different compilers .
As consequence , programs were not always portable from one compiler to another .

To address this problem , in the early , joint committee of the American National Standards Institute and International Organization for Standardization was established to standardize the syntax of .
In , language were approved .
Most of compilers comply with these new .

Over the last several years , the committee met several times to further standardize the syntax of .
In , the second of was approved .
The main objective of this  referred to as , is to make the code cleaner and more effective .
For example , the new introduces the data type long long to deal with large integers , auto declaration of variables using initialization statements , enhancing the functionality of for loops to effectively work with arrays and containers , and new algorithms .
Some of these new features are introduced in this book .

This book focuses on the syntax of as approved by , referred to as ISO Standard .

QUICK REVIEW .

computer is an electronic device capable of performing arithmetic and logical operations .

computer system has two components : hardware and software .

The central processing unit and the main memory are examples of hardware components .

All programs must be brought into main memory before they can be executed .

When the power is switched off , everything in main memory is lost .

Secondary storage provides permanent storage for information .
Hard disks , flash drives , and are examples of secondary storage .

Input to the computer is done via an input device .
Two common input devices are the keyboard and the mouse .

The computer sends its output to an output device , such as the computer screen or printer .

Software are programs run by the computer .

The operating system handles the overall activity of the computer and provides services .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Quick Review .

Every computer directly understands its own machine language .

bit is binary digit , or .

byte is sequence of eight bits .

sequence of and is referred to as binary code or binary number .

One kilobyte is bytes ; one megabyte is bytes ; one gigabyte is bytes ; one terabyte is bytes ; one petabyte is bytes ; one exabyte is bytes ; and one zettabyte is bytes .

Assembly language uses instructions called mnemonics .

Assemblers are programs that translate program written in assembly language into machine language .

Compilers are programs that translate program written in language into machine code , called object code .

linker links the object code with other programs provided by the integrated development environment and used in the program to produce executable code .

Typically , six steps are needed to execute program : edit , preprocess , compile , link , load , and execute .

loader transfers executable code into main memory .

An algorithm is process in which solution is arrived at in finite amount of time .

The process has three steps : analyze the problem and design an algorithm , implement the algorithm in programming language , and maintain the program .

In structured design , problem is divided into smaller subproblems .
Each subproblem is solved , and the solutions to all of the subproblems are then combined to solve the problem .

In design , program is collection of interacting objects .

An object consists of data and operations on that data .

The Standard syntax was approved in .

The second of  was approved in .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : An Overview of Computers and Programming Languages EXERCISES The number in parentheses at the end of an exercise refers to the learning objective listed at the beginning of the chapter .

Mark the following statements as true or false .

The calculating device Pascaline could perform only addition and program written in programming language is called source linker links and loads the object code from main memory into the CPU Describe the three steps of the process in programming What are the advantages of problem analysis and algorithm design over directly writing Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The four test scores and their respective weights are given in the following .

For example , sample data is as follows :

After marking up the prices , each item is put on sale at discount of .
Design an algorithm to find the selling price of an item sold at the The volume of sphere is and the surface is , where is the radius of the sphere .
Given the radius , design an algorithm that computes the volume and surface area of the sphere .
Also using the statements provided for Example , write the statement corresponding to each statement in Tom and Jerry opened new service .
They provide three types of services : mowing , fertilizing , and planting trees .
The cost of mowing is per square yards , fertilizing is per application , and planting tree is .
Write an algorithm that prompts the user to enter the area of the  the number of fertilizing applications , and the number of trees to be planted .
The algorithm then determines the billing amount .
If the total cost of the items ordered , at one time , is or more , then the shipping and handling is free ; otherwise , the shipping and handling is per item .
Design an algorithm that prompts Jason to enter the number of items ordered and the price of each item .

The algorithm then outputs the total billing amount .
Your algorithm must use loop to get the price of each item .
If customer withdraws more than , the service charge is of the amount over .
If the customer does not have sufficient money in the account , the ATM informs the customer about the insufficient funds and gives the customer the option to withdraw the money for service charge of .
If there is no Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : An Overview of Computers and Programming Languages money in the account or if the account balance is negative , the ATM does not allow the customer to withdraw any money .
If the amount to be withdrawn is greater than , the ATM informs the customer about the maximum amount that can be withdrawn .
Write an algorithm that allows the customer to enter the amount to be withdrawn .
The algorithm then checks the total amount in the account , dispenses the money to the customer , and debits the Design an algorithm to find the real roots of quadratic equation of the form student spends majority of his weekend playing and watching sports , thereby tiring him out and leading him to oversleep and often miss his Monday AM math class .
Suppose that the tuition per semester is and the average semester consists of units .
If the math class meets three days week , one hour each day for weeks , and is four unit course , how much does each hour of math class cost the student .
Design an algorithm that computes the cost You are given list of students names and their test scores .
Design an algorithm that does the following :

Calculates the average test scores .

Determines and prints the names of all the students whose test scores are below the average test score .

Determines the highest test score .

Prints the names of all the students whose test scores are the same as the highest test score .

The second subproblem determines and prints the names of all the students whose test scores are below the average test score .
The third subproblem determines the highest test score .
The fourth subproblem prints the names of all the students whose test scores are the same as the highest test score .
The main Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Become familiar with the basic components of program , including functions , special symbols , and identifiers .

Explore how to properly structure program , including using comments to document program .

Learn how to write program Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

As your objective is to learn the programming language , two questions naturally arise .
First , what is computer program .

Second , what is programming .
computer program , or program , is sequence of statements whose objective is to accomplish task .
Programming is process of planning and creating program .
These two definitions tell the truth , but not the whole truth , about programming .
It may very well take an entire book to give good and satisfactory definition of programming .
You might gain better grasp of the nature of programming from an analogy , so let us turn to topic about which almost everyone has some .
recipe is also program , and everyone with some cooking experience can agree on the following :

It is usually easier to follow recipe than to create one .

Some are easy to follow and some are not easy to follow .

Some produce reliable results and some do not .

You must have some knowledge of how to use cooking tools to follow recipe to completion .

To create good new  you must have lot of knowledge and good understanding of cooking .

These same six points are also true about programming .
Let us take the cooking analogy one step further .
Suppose you need to teach someone how to become chef .

Would you first introduce the person to good food , hoping that taste for good food develops .
Would you have the person follow recipe after recipe in the hope that some of it rubs off .
Or would you first teach the use of tools and the nature of ingredients , the foods and spices , and explain how they fit together .
Just as there is disagreement about how to teach cooking , there is disagreement about how to teach programming .

Learning programming language is like learning to become chef or learning to play musical instrument .
All three require direct interaction with the tools .

You cannot become good chef just by reading .
Similarly , you cannot become musician by reading books about musical instruments .
The same is true of programming .
You must have fundamental knowledge of the language , and you must test your programs on the computer to make sure that each program does what it is supposed to do .

Quick Look at Program In this chapter , you will learn the basic elements and concepts of the programming language to create programs .
In addition to giving examples to illustrate various concepts , we will also show programs to clarify these concepts .
In this section , we provide an example of program that computes the perimeter and area of Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Quick Look at Program rectangle .
At this point you need not be too concerned with the details of this program .

You only need to know the effect of an output statement , which is introduced in this program .

In Example , we designed an algorithm to find the perimeter and area of rectangle .
Given the length and width of rectangle , the program , in Example , computes and displays the perimeter and area .

Sample Run : you compile and execute this program , the following five lines are Program to compute and output the and of .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Basic Elements of These lines are displayed by the execution of the following statements :  of " endl ; cout cout cout cout .

It causes the computer to evaluate the expression after the pair of symbols and display the result on the screen .

program can contain various types of expressions such as arithmetic and strings .

For example , + is an arithmetic expression .
Anything in double quotes is string .
For example , to compute and output the and  is string .

Similarly ,  of " is also string .
Typically , string evaluates to itself .

Arithmetic expressions are evaluated according to rules of arithmetic operations , which you typically learn in an arithmetic course .
Later in this chapter , we will explain how arithmetic expressions and strings are formed and evaluated .

Also note that in an output statement , endl causes the insertion point to move to the beginning of the next line .
Also , on the screen , the insertion point is where the cursor Therefore , the preceding statement causes the system to display the following line on the screen .

Program to compute and output the and of .

Let us now consider the following statement :   endl ; This output statement consists of two expressions .
The first expression , the first , is   and the second expression , the second , consists of the identifier The expression   is string and evaluates to itself .
Because the value assigned to in the program is , evaluates to .
Therefore , the output of the preceding statement is : Note that the value of is output as not as .
We will explain in the next chapter how to force the program to output the value of as .
The meaning of the remaining output statements is similar .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Quick Look at Program .

We will elaborate on this statement later in this chapter .

Before we identify various parts of program , look at one more output statement .
Consider the following statement : +  + endl ; In this output statement , the + which is string , evaluates to itself .

Let us consider the second  +
This consists of the numbers and , and the arithmetic operator +
Therefore , the result of the + is the sum of and , which is .
Thus , the output of the preceding statement is : + In this chapter , until we explain how to properly construct program , we will be using output statements such as the preceding ones to explain various concepts .
After finishing Chapter , you should be able to write programs well enough to do some computations and show results .

Next , let us note the following about the previous program .
program is collection of functions , one of which is the function main .
Roughly speaking , function is set of statements whose objective is to accomplish something .
The preceding program consists of only the function main ; all programs require function main .

The first four lines of the program begins with the pair of symbols in , which are comments .
Comments are for the user ; they typically explain the purpose of the programs , that is , the meaning of the statements .

It means that if you do not this statement , then should be used as : and endl should be used as .
We will elaborate on this later in this chapter .

Next consider the following line : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Chapter : Basic Elements of This is the heading of the function main .
The next line consists of left brace .
This marks the beginning of the of the function main .
The right brace the last line of the matches this left brace and marks the end of the body of the function main .
We will explain the meaning of the other terms , such as the ones shown in blue , later in this book .
Note that in , is an operator , called the stream insertion operator .

Before ending this section , let us identify certain parts of the program in Figure .

An output statement instructs the system to display results .

Various parts of program Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Quick Look at Program One of the terms that you will encounter throughout the text and that is also identified in Figure is variable .
Therefore , we introduce this term in this section .
Recall from Chapter that all data must be loaded into main memory before it can be manipulated .

For example , given the and  the program in Figure computes and outputs the and of .
This means that the values of and must be stored in main memory .
Also , recall from Chapter that main memory is an ordered sequence of cells and every cell has an address .
Inside the computer , the address of memory cell is in binary .
Once we store the values of and  and because these values might be needed in more than one place in program , we would like to know the locations where these values are stored and how to access those memory locations .
makes it easy for programmer to specify the locations because the programmer can supply an alphabetic name for each of those locations .
Of course , we must follow the rules to specify the names .
For example , in the program in Figure , we are telling the system to allocate four memory spaces and name them    and  respectively .

Also during program execution , the system will allocate four memory locations large enough to store decimal numbers and those memory locations will be named    and  respectively , see Figure .

Memory allocation The statement ; will cause the system to store in the memory location associated with the name identified by the  see Figure .
Examples and further illustrate how data is manipulated in variables .

Memory spaces after the statement ; executes As we proceed through this chapter , we will explain the meaning of the remaining parts identified in Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Basic Elements of The Basics of Program In the previous section , we gave an example of program and also identified certain parts of the program .
In general , program is collection of one or more subprograms , called functions .
Roughly speaking , subprogram or function is collection of statements , and when it is activated , or executed , it accomplishes something .

Some functions , called predefined or standard functions , are already written and are provided as part of the system .
But to accomplish most tasks , programmers must learn to write their own functions .

Thus , if program has only one function , it must be the function main .
Until Chapter , other than using some of the predefined functions , you will mainly deal with the function main .
By the end of this chapter , you will have learned how to write programs consisting only of the function main .

If you have never seen program written in programming language , the program in Example may look like foreign language .
To make meaningful sentences in foreign language , you must learn its alphabet , words , and grammar .

To write meaningful programs , you must learn the programming special symbols , words , and syntax rules .
The syntax rules tell you which statements are legal or valid , that is , which are accepted by the programming language and which are not .
You must also learn semantic rules , which determine the meaning of the instructions .
The programming rules , symbols , and special words enable you to write programs to solve problems .

Programming language : set of rules , symbols , and special words .

In the remainder of this section , you will learn about some of the special symbols of program .
Additional special symbols are introduced as other concepts are encountered in later chapters .
Similarly , syntax and semantic rules are introduced and discussed throughout the book .

Comments The program that you write should be clear not only to you , but also to the reader of your program .
Part of good programming is the inclusion of comments in the program .

Typically , comments can be used to identify the authors of the program , give the date when the program is written or modified , give brief explanation of the program , and explain the meaning of key statements in program .
In the programming examples , for the programs that we write , we will not include the date when the program is written , consistent with the standard convention for writing such books .

Comments are for the reader , not for the compiler .
So when compiler compiles program to check for the syntax errors , it completely ignores comments .
Throughout this book , comments are shown in green .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The Basics of Program .

The program in Example contains the following comments :

comments begin with and can be placed anywhere in the line .
Everything encountered in that line after is ignored by the compiler .
For example , consider the following statement : +  +

This comment could be meaningful for beginning programmer .

comments are enclosed between and .
The compiler ignores anything that appears between and .
For example , the following is an example of comment : You can include comments that can occupy several lines .

tokens are divided into special symbols , word symbols , and identifiers .

Following are some of the special symbols : +

The second row consists of punctuation marks taken from English grammar .

Note that the comma is also special symbol .
In , commas are used to separate items in list .
Semicolons are also special symbols and are used to end statement .
Note that blank , which is not shown above , is also special symbol .
You create blank symbol by pressing the space bar on the keyboard .
The third row consists of Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Basic Elements of tokens made up of two characters that are regarded as single symbol .
No character can come between the two characters in the token , not even blank .

second category of tokens is reserved word symbols .
Some of the reserved word symbols include the following : int , float , double , char , const , void , return Reserved words are also called keywords .
The letters that make up reserved word are always lowercase .
Like the special symbols , each is considered to be single symbol .

Furthermore , reserved words cannot be redefined within any program ; that is , they cannot be used for anything other than their intended use .
For complete list of reserved words , see Appendix .

Throughout this book , reserved words are shown in blue .

Identifiers third category of tokens is identifiers .
Identifiers are names of things that appear in programs , such as variables , constants , and functions .
All identifiers must obey rules for identifiers .

Some identifiers are predefined ; others are defined by the user .
In the program in Example , is predefined identifier and length is identifier .
Two predefined identifiers that you will encounter frequently are and cin .
You have already seen the effect of .
Later in this chapter , you will learn how cin , which is used to input data , works .
Unlike reserved words , predefined identifiers can be redefined , but it would not be wise to do so .

Identifiers can be made of only letters , digits , and the underscore character ; no other symbols are permitted to form an identifier .

is case and lowercase letters are considered different .
Thus , the identifier NUMBER is not the same as the identifier number .
Similarly , the identifiers and are different .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The Basics of Program In , identifiers can be of any length .

EXAMPLE The following are legal identifiers in : first conversion payRate Table shows some illegal identifiers and explains why they are illegal and also gives correct identifier .

TABLE Examples of Illegal Identifiers .

The exclamation mark cannot be used in an identifier .

Hello one + two The symbol + cannot be used in an identifier .

When the linker links the object program with the system resources provided by the integrated development environment , certain errors could occur .
Therefore , it is advisable that you should not begin identifiers in your program with an underscore .

Whitespaces Every program contains whitespaces .
Whitespaces include blanks , tabs , and newline characters .
In program , whitespaces are used to separate special symbols , reserved words , and identifiers .
Whitespaces are nonprintable in the sense that when they are printed on white sheet of paper , the space between special symbols , reserved words , and identifiers is white .
Proper utilization of whitespaces in program is important .
They can be used to make the program more readable .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Different programs manipulate different data .
program designed to calculate an paycheck will add , subtract , multiply , and divide numbers , and some of the numbers might represent hours worked and pay rate .
Similarly , program designed to alphabetize class list will manipulate names .
You use cherry pie recipe to help you bake cookies .
Similarly , you use program designed to perform arithmetic calculations to manipulate alphabetic characters .

Furthermore , you multiply or subtract names .
Reflecting these kinds of underlying differences , categorizes data into different types , and only certain operations can be performed on particular types of data .
Although at first it may seem confusing , by being so type conscious , has checks to guard against errors .

Data type : set of values together with set of allowed operations .

data types fall into the following three .

Simple data type Structured data type Pointers For the next few chapters , you will be concerned only with simple data types .

Simple Data Types The simple data type is the fundamental data type in because it becomes building block for the structured data type , which you will start learning about in Chapter .

There are three categories of simple .

Integral , which is data type that deals with integers , or numbers without decimal part .

, which is data type that deals with decimal numbers .

Enumeration , which is data type The enumeration type is method for allowing programmers to create their own simple data types .
This data type will be discussed in Chapter .

Integral data types are further classified into the following categories : char , short , int , long , bool , unsigned char , unsigned short , unsigned int , unsigned long , long long , and unsigned long long .

Every data type has different set of values associated with it .
For example , the char data type is used to represent integers between and .
The int data type is used to represent integers between and , and the data type short is used to represent integers between and .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Data Types Which data type you use depends on how big number your program needs to deal with .

In the early days of programming , computers and main memory were very expensive .

Only small amount of memory was available to execute programs and manipulate the data .
As result , programmers had to optimize the use of memory .
Because writing program and making it work is already complicated process , not having to worry about the size of memory makes for one less thing to think about .
To effectively use memory , programmer can look at the type of data to be used by program and thereby figure out which data type to use .

Different compilers may allow different ranges of values .
Check your documentation .
To find the exact size of the integral data types on particular system , you can run program given in Appendix Size of .
Furthermore , find the maximum and minimum values of these data types , you can run another program given in Appendix File .
Also , the data type long long is available in .

This discussion also applies other integral data types .

Integers in , as in mathematics , are numbers such as the following : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right remove additional content at any time if subsequent rights restrictions require it .

Chapter : Basic Elements of Note the following two rules from these examples :
Positive integers do not need + sign in front of them .

No commas are used within an integer .
Recall that in , commas are used separate items in list .
So would be interpreted as two integers : and .

Also , true and false are called the logical values .
The central purpose of this data type is manipulate logical expressions .
Logical expressions will be formally defined and discussed in detail in Chapter .
In , bool , true , and false are reserved words .

Thus , the char data type can represent every key on your keyboard .

When using the char data type , you enclose each character represented within single quotation marks .
Examples of values belonging the char data type include the following :   Note that blank space is character and is written as  with space between the single quotation marks .

The data type char allows only one symbol be placed between the single quotation marks .
Thus , the value ' is not of the type char .
Furthermore , even similar special symbols are considered be one symbol , they are not regarded as possible values of the data type char .
All the individual symbols located on the keyboard that are printable may be considered as possible values of the char data type .

Several different character data sets are currently in use .
The most common are the American Standard Code for Information Interchange and Extended BinaryCoded Decimal Interchange Code .
The ASCII character set has values .

The EBCDIC character set has values and was created by IBM .
Both character sets are described in Appendix .

Each of the values of the ASCII character set represents different character .
For example , the value represents , and the value represents .
Thus , each character has predefined ordering represented by the numeric value associated with the character .
This ordering is called collating sequence , in the set .
The collating sequence is used when you compare characters .
For example , the value representing ' is , so ' is smaller than .
Similarly , is smaller than ' because is smaller than .

The character in the ASCII character set is called the newline character and is represented as .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right remove additional content at any time if subsequent rights restrictions require it .

Data Types character set is because the position of the first character is Even the newline character is combination of two characters , it is treated as one character .
Similarly , the horizontal tab character is represented in as ' and the null character is represented as ' followed by .
Furthermore , the first characters in the ASCII character set are nonprintable .
To facilitate the discussion , let us review concept from high school or college algebra course .

You may be familiar with scientific notation .

To represent decimal numbers , uses form of scientific notation called floatingpoint notation .
Table shows how might print set of decimal numbers using one interpretation of notation .
In the notation , the letter stands for the exponent .

TABLE Examples of Decimal Numbers in Scientific and Notations .

As in the case of integral data types , the data types float , double , and long double differ in the set of values it can represent .

On most newer compilers , the data types double and long double are the same .

Therefore , only the data types float and double are described here .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Basic Elements of float : The data type float is used in to represent any decimal number between and .
The memory allocated for value of the float data type is four bytes .

The memory allocated for value of the double data type is eight bytes .

The maximum and minimum values of the data types float and double are system dependent .
To find these values on particular system , you can check your documentation or , alternatively , you can run program given in Appendix File .

Other than the set of values , there is one more difference between the data types float and double .
The maximum number of significant is , the number of decimal float values is six or seven .
The maximum number of significant digits in values belonging to the double type is .

For values of the double type , for better precision , some compilers might give more than significant digits .
Check your documentation .

The maximum number of significant digits is called the precision .
Sometimes float values are called single precision , and values of type double are called double precision .
If you are dealing with decimal numbers , for the most part you need only the float type ; if you need accuracy to more than six or seven decimal places , you can use the double type .

In , by default , numbers are considered type double .
Therefore , if you use the data type float to manipulate numbers in program , certain compilers might give you warning message , such as from double to " To avoid such warning messages , you should use the double data type .

For illustration purposes and to avoid such warning messages in programming examples , this book mostly uses the data type double to manipulate numbers .

Data Types , Variables , and Assignment Statements Now that we know how to define an identifier , what data type is , and the term variable , we can show how to declare variable .
When we declare variable , not only do we specify the name of the variable , we also specify what type of data variable can store .
syntax rule to declare variable is : dataType identifier ; Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Arithmetic Operators , Operator Precedence , and Expressions .

That is , is that can store an int value .
Similarly , is that can store value of type double ; and is that can store value of type char .

One way to store value in is by using an assignment statement , which takes the following form : expression ; where expression is evaluated and its value is assigned to .

We will discuss assignment statements in detail later in this chapter .

Arithmetic Operators , Operator Precedence , and Expressions One of the most important uses of computer is its ability to calculate .
You can use the standard arithmetic operators to manipulate integral and data types .
There are five arithmetic operators : Arithmetic Operators : + or , These operators work as .

You can use the operators + and with both integral and floatingpoint data types .
These operators work with integral and data the same way as you learned in college algebra course .

That is , integral division truncates any fractional .

You use with only the integral data type , to find the remainder in ordinary division .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Basic Elements of Example shows how the operators and work with the integral data types .

EXAMPLE Arithmetic Expression Result .

Therefore , with the integral operands evaluates to the quotient , which is .

Therefore , evaluates to the remainder , which is .

Therefore , evaluates to the remainder , which is .

EXAMPLE Given length in inches , we write program determines outputs the equivalent length in feet inches .
Now there are inches in foot .
Therefore , inches equals feet inches ;  inches equals feet inches .

From these examples , it follows we can effectively use the operators to accomplish our task .
The desired program is as follows : Given length in  this program outputs the equivalent length in feet remaining .

Arithmetic Operators , Operator Precedence , Expressions .

Note each time you run this program , it will output the value of .
To convert some other value of  you need to edit this program store different value in the  which is not very convenient .
Later in this chapter we will illustrate how to statements in program will instruct the user to enter different values .
However , if you are curious to know at this point , then replace the statement .

Consider the following expressions , which you have been accustomed to working with since high school : + + + + + where are unknown numbers .
These are examples of arithmetic expressions .
The numbers appearing in the expressions are called operands .
The numbers are used to evaluate an operator are called the operands for operator .

Operators have only one operand are called unary operators .

Operators have two operands are called binary operators .

Unary operator : An operator has only one operand .

Binary operator : An operator has two operands .

Moreover , in the expression , the operator + indicates the number is positive .
Here , + has only one operand so acts as unary operator .

From the preceding discussion , it follows + are both unary binary arithmetic operators .
However , as arithmetic operators , are binary so must have two operands .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

According to the order of precedence rules for arithmetic operators ,  are at higher level of precedence than + Note the operators , have the same level of precedence .
Similarly , the operators + have the same level of precedence .

When operators have the same level of precedence , the operations are performed from left to right .
To avoid confusion , you can use parentheses to group arithmetic expressions .

For example , using the order of precedence rules , + + means the following : + + + + + + + + +

Note the use of parentheses in the second example clarifies the order of precedence .

You can also use parentheses to override the order of precedence rules .

Because arithmetic operators , using the precedence rules , are evaluated from left to right , unless parentheses are present , the associativity of the arithmetic operators is said to be from left to right .

However , you should use this ability carefully .
There is difference between the character ' the integer .

The integer value of ' is , which is the ASCII collating sequence of the character .

When evaluating arithmetic  + + + which yields ; + + which yields .

These examples illustrate that many things can go wrong when you are performing character arithmetic .
If you must employ them , use arithmetic operations on the char data type with caution .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Arithmetic Operators , Operator Precedence , Expressions .

Sample Run : + + + + Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Basic Elements of You should be careful when evaluating the mod operator with negative integer operands .

You might not get the answer you expect .
Also , in the division , the quotient is the remainder is .

Expressions There are three types of arithmetic in .

Integral operands in the expression are integers .
An integral expression yields an integral result .

operands in the expression are .
expression yields result .

Mixed expression contains both integers decimal numbers .

Looking at some examples will help clarify these definitions .

EXAMPLE Consider the following integral  + + + + In these  are variables of type int .

EXAMPLE Consider the following expressions : + Here , and are variables of type double .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Arithmetic Operators , Operator Precedence , and Expressions .

As before , when operators have the same precedence , the expression is evaluated from left to right .
You can always use parentheses to group operands and operators to avoid confusion .

Next , we discuss mixed expressions .

Mixed Expressions An expression that has operands of different data types is called mixed expression .
mixed expression contains both integers and numbers .
The following expressions are examples of mixed expressions : + + + In the first expression , the operand + has one integer operand and one operand .
In the second expression , both operands for the operator are integers , the first operand of + is the result of , and the second operand of + is number .
The third is an even more complicated mix of integers and floatingpoint numbers .
The obvious question is : How does evaluate mixed expressions .

Two rules apply when evaluating mixed expression :
When evaluating an operator in mixed expression :

If the operator has the same types of operands is , either both integers or both , the operator is evaluated according to the type of the operands .
Integer operands thus yield an integer result ; numbers yield number .

If the operator has both types of operands is , one is an integer and the other is , then during calculation , the integer is changed to number with the decimal part of zero and the operator is evaluated .
The result is number .

The entire expression is evaluated according to the precedence rules ; the multiplication , division , and modulus operators are evaluated before the addition and subtraction operators .
Operators having the same level of precedence are evaluated from left to right .
Grouping using parentheses is allowed for clarity .

From these rules , it follows that when evaluating mixed expression , you concentrate on one operator at time , using the rules of precedence .
If the operator to be evaluated has operands of the same data type , evaluate the operator using Rule .
That is , an operator with integer operands will yield an integer result , and an operator with operands will yield result .
If the operator to be evaluated has one integer operand and one operand , before evaluating this operator , convert the integer operand to number with the decimal part of .
The following examples show how to evaluate mixed expressions .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Basic Elements of EXAMPLE Mixed Expression Evaluation .

Sample Run : + + + + Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In the previous section , you learned that when evaluating an arithmetic expression , if the operator has mixed operands , the integer value is changed to value with the zero decimal part .
When value of one data type is automatically changed to another data type , an implicit type coercion is said to have occurred .
As the examples in the preceding section illustrate , if you are not careful about data types , implicit type coercion can generate unexpected results .

To avoid implicit type coercion , provides for explicit type conversion through the use of cast operator .
The cast operator , also called type conversion or type casting , takes the following form : First , the expression is evaluated .
Its value is then converted to value of the type specified by dataTypeName .
In , is reserved word .

When converting number to an integer using the cast operator , you simply drop the decimal part of the number .
That is , the number is truncated .
Example shows how cast operators work .
Be sure you understand why the last two expressions evaluate as they do .

EXAMPLE Expression .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Basic Elements of .

Note that the value of the expression is .

This is we have not yet discussed how to output decimal numbers with decimal parts to show the decimal point and the trailing zeros .

Chapter explains how to output decimal numbers in desired format .
Similarly , the output of other decimal numbers with zero decimal parts is without the decimal point and the decimal part .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

However , is more stable than casting .

You can also use cast operators to explicitly convert char data values into data values and data values into char data values .
To convert char data values into data values , you use collating sequence .
For example , in the ASCII character set , is and is .

Earlier in this chapter , you learned how arithmetic expressions are formed and evaluated in .
If you want to use the value of one expression in another expression , first you must save the value of the expression .
There are many reasons to save the value of an expression .
Some expressions are complex and may require considerable amount of computer time to evaluate .

By calculating the values once and saving them for further use , you not only save computer time and create program that executes more quickly , you also avoid possible typographical errors .
In , expressions are evaluated , and if the value is not saved , it is lost .
That is , unless it is saved , the value of an expression cannot be used in later calculations .
Later in this chapter , you will learn how to save the value of an expression and use it in subsequent calculations .

Before leaving the discussion of data types , let us discuss one more data .

It is not directly available for use in program like the simple data types discussed earlier .
To use this data type , you need to access program components from the library , which will be discussed later in this chapter .
The data type string is feature of Standard .

Prior to the language standard , the standard library did not provide string data type .
Compiler vendors often supplied their own string type , and the syntax and semantics of string operations often varied from vendor to vendor .

string is sequence of zero or more characters .
Strings in are enclosed in quotation marks .
string containing no characters is called null or empty string .
The following are examples of strings .
Note that " is the empty string .

Every character in string has relative position in the string .
The position of the first character is , the position of the second character is , and so on .
The length of string is the number of characters in it .
When determining the length of string , you must also count any spaces in the string .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Basic Elements of EXAMPLE String Position of Character in the String .

Position Position Position Position Position of of of of of ' is .

The string type is very powerful and more complex than simple data types .
It provides not only the physical space required to store the string , but many operations to manipulate strings .
For example , it provides operations to find the length of string , extract part of string , and compare strings .
You will learn about this data type over the next few chapters .

Variables , Assignment Statements , and Input Statements As noted earlier , the main objective of program is to perform calculations and manipulate data .
Recall that data must be loaded into main memory before it can be manipulated .
In this section , you will learn how to put data into the memory .

Storing data in the memory is process :
Instruct the computer to allocate memory .

Include statements in the program to put data into the allocated memory .

Allocating Memory with Constants and Variables When you instruct the computer to allocate memory , you tell it not only what names to use for each memory location , but also what type of data to store in those memory locations .
Knowing the location of data is essential , because data stored in one memory location might be needed at several places in the program .
As you saw earlier , knowing what data type you have is crucial for performing accurate calculations .
It is also critical to Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Variables , Assignment Statements , and Input Statements know whether your data needs to remain fixed throughout program execution or whether it should change .

NAMED CONSTANTS Some data must stay the same throughout program .
For example , the conversion formula that converts inches into centimeters is fixed , because inch is always equal to centimeters .
When stored in memory , this type of data needs to be protected from accidental changes during program execution .
In , you can use named constant to instruct program to mark those memory locations in which data is fixed throughout program execution .

Named constant : memory location whose content is not allowed to change during program execution .

To allocate memory , we use declaration statements .
The syntax to declare named constant is : const dataType value ; In , const is reserved word .
It should be noted that named constant is initialized and declared all in one statement and that it must be initialized when it is declared because from this statement on the compiler will reject any attempt to change the value .

EXAMPLE Consider the following .

The first statement tells the compiler to allocate memory to store value of type double , call this memory space  and store the value in it .

Throughout program that uses this statement , whenever the conversion formula is needed , the memory space can be accessed .
The meaning of the other statements is similar .

Note that the for named constant is in uppercase letters .
Even though there are no written rules , programmers typically prefer to use uppercase letters to name named constant .
Moreover , if the name of named constant is combination of more than one word , called word , then the words are typically separated using an underscore .
For example , in the preceding example , is word .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Basic Elements of As noted earlier , the default type of numbers is double .
Therefore , if you declare named constant of type float , then you must specify that the value is of type float as follows : const float ; Otherwise , the compiler will generate warning message .
Notice that says that it is float .
Recall that the memory size for float values is four bytes ; for double values , eight bytes .
Because memory size is of little concern these days , as indicated earlier , we will mostly use the type double to work with values .

Using named constant to store fixed data , rather than using the data itself , has one major advantage .
If the fixed data changes , you do not need to edit the entire program and change the old to the new wherever the old is used .

In addition , by storing and referring to that memory location whenever the is needed , you avoid typing the same again and again and prevent accidental typos .
If you misspell the name of the constant location , the computer will warn you through an error message , but it will not warn you if the is mistyped .

VARIABLES Earlier in this chapter , we introduced the term variable and how to declare it .
We now review this concept and also give the general syntax to declare variables .

In some programs , data needs to be modified during program execution .
For example , after each test , the average test score and the number of tests taken changes .
Similarly , after each pay increase , the salary changes .
This type of data must be stored in those memory cells whose contents can be modified during program execution .
In , memory cells whose contents can be modified during program execution are called variables .

Variable : memory location whose content may change during program execution .

The syntax for declaring one variable or multiple variables is : dataType 

Variables , Assignment Statements , and Input Statements The first statement tells the compiler to allocate eight bytes of memory space to store of the type double and call it amountDue .
The second and third statements have similar conventions .
The fourth statement tells the compiler to allocate two different memory spaces , each four bytes , to store of the type int ; name the first memory space ; and name the second memory space .
The fifth statement tells the compiler to allocate memory space and call it name .

As in the case of naming named constants , there are no written rules for naming variables .

However , programmers typically use lowercase letters to declare variables .
If variable name is combination of more than one word , then the first letter of each word , except the first word , is uppercase .

In , you must declare all identifiers before you can use them .
If you refer to an without declaring it , the compiler will generate an error message , indicating that the is not declared .
Therefore , to use either named constant or variable , you must first declare it .

Now that data types , variables , and constants have been defined and discussed , it is possible to offer formal definition of simple data types .
data type is called simple if the variable or named constant of that type can store only one at time .
For example , if is an int  at given time , only one can be stored in .

Putting Data into Variables Now that you know how to declare variables , the next question is : How do you put data into those variables .
In , you can place data into in two ways :
Use assignment statement .

Use input statements .

Assignment Statement The assignment statement takes the following form : expression ; In an assignment statement , the of the expression should match the data type of the .
The expression on the right side is evaluated , and its is assigned to the thus to memory on the left side .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Basic Elements of is said to be initialized the first time is placed in the .

Recall that in  is called the assignment operator .

EXAMPLE Suppose you have the following .

For each of these statements , the computer evaluates the expression on the right and then stores that in memory location named by the identifier on the left .
The statement stores the in , the second statement stores in , the third statement stores in  and the fourth statement stores the character in .

The fifth statement assigns the string is sunny " to the .

The following program shows the effect of the preceding statements : This program illustrates how data in the variables are .

Variables , Assignment Statements , and Input Statements .

Sample Run : It is sunny day .

For the most part , the preceding program is straightforward .
Let us take look at the output statement :   endl ; This output statement consists of the string  the operator , and the .
Here , the of the string   is output , and then the of the is output .
The meaning of the other output statements is similar .

statement such as + means whatever is in  add to it , and assign the new to the memory location " The expression on the right side must be evaluated  that is then assigned to the memory location specified by the on the left side .
Thus , the sequence of statements :

Note that if has not been initialized , the statement + might give unexpected results the complier might generate warning message indicating that the has not been initialized .
In general , referencing or using the contents of before it is initialized should be avoided .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Basic Elements of EXAMPLE Suppose that , and are int variables and the following statements are executed in sequence .

The following table shows the values of the variables after the execution of each statement .
The orange color in box shows Values of the Statement Before Statement After Statement .

This is assigned to , which replaces the old of .

This is assigned to , which replaces the old of .

Thus , after the execution of the statement in , and .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Variables , Assignment Statements , and Input Statements Tracing values through sequence , called , is valuable tool to learn and practice .
Try it in the sequence above .
You will learn more about how to walk through sequence of statements later in this chapter .

The following is legal statement in : In this statement , first the of is assigned to  and then the new of is assigned to .
Because the assignment  is evaluated from right to left , the associativity of the assignment is said to be from right to left .

Saving and Using the Value of an Expression Now that you know how to declare variables and put data into them , you can learn how to save the of an expression .
You can then use this in later expression without using the expression itself , thereby answering the question raised earlier in this chapter .
To save the of an expression and use it in later expression , do the following :
Declare variable of the appropriate data type .
For example , if the result of the expression is an integer , declare an int variable .

Assign the of the expression to the variable that was declared , using the assignment statement .
This action saves the of the expression into the variable .

Wherever the of the expression is needed , use the variable holding the .
The following example further illustrates this concept .

EXAMPLE Suppose that you have the following declaration : int , c ,  int   Further suppose that you want to evaluate the expressions + and and assign the values of these expressions to and  respectively .

Because the expression appears in both expressions , you can first calculate the of this expression and save its in .
You can then use the of to evaluate the expressions , as shown by the following .

You also learned that after declaring variable , you can use an assignment statement to initialize it .
It is possible to initialize and declare variables at the same time .
Before we discuss how to use an input statement , we address this important issue .

Declaring and Initializing Variables When variable is declared , may not automatically put meaningful in it .
In other words , may not automatically initialize variables .
For example , the int and double variables may not be initialized to , as happens in some programming languages .

This does not mean , however , that there is no in variable after its declaration .

When variable is declared , memory is allocated for it .

Recall from Chapter that main memory is an ordered sequence of cells , and each cell is capable of storing .
Also , recall that the machine language is sequence of and , or bits .
Therefore , data in memory cell is sequence of bits .
These bits are nothing but electrical signals , so when the computer is turned on , some of the bits are and some are .
The state of these bits depends on how the system functions .
However , when you instruct the computer to store particular in memory cell , the bits are set according to the data being stored .

During data manipulation , the computer takes the stored in particular cells and performs calculation .
If you declare variable and do not store in it , the memory cell still has the of the setting of the bits from their last you have no way to know what this is .

If you only declare variable and do not instruct the computer to put data into the variable , the of that variable is garbage .
However , the computer does not warn us , regards whatever values are in memory as legitimate , and performs calculations using those values in memory .
Using variable in an expression without initializing it produces erroneous results .
To avoid these pitfalls , allows you to initialize variables while they are being declared .
For example , consider the following statements in which variables are declared and then .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Variables , Assignment Statements , and Input Statements .

The statement declares two int variables , and  and stores in and in .
The meaning of the other statements is similar .

In reality , not all variables are initialized during declaration .
It is the nature of the program or the choice that dictates which variables should be initialized during declaration .
The key point is that all variables must be initialized before they are used .

Input Statement Previously , you learned how to put data into variables using the assignment statement .
In this section , you will learn how to put data into variables from the standard input device , using input statements .

In most cases , the standard input device is the keyboard .

When the computer gets the data from the keyboard , the user is said to be acting interactively .

Putting data into variables from the standard input device is accomplished via the use of cin and the .
The syntax of cin together with is : cin variable variable ; This is called an input statement .
In , is called the stream extraction .

In syntax , the shading indicates the part of the definition that is optional .
Furthermore , throughout this book , the syntax is enclosed in yellow boxes .

EXAMPLE Suppose that miles is variable of type double .
Further suppose that the input is .
Consider the following statement : cin miles ; This statement causes the computer to get the input , which is , from the standard input device and stores it in the variable miles .
That is , after this statement executes , the of the variable miles is .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Basic Elements of Example further explains how to input numeric data into program .

Next , consider the following statement : cin feet inches ; This statement stores the number into the variable feet and then the number into the variable inches .
Notice that when these numbers are entered via the keyboard , they are separated with blank .
In fact , they can be separated with one or more blanks or lines or even the tab character .

The following program shows the effect of the preceding input statements : This program illustrates how input statements work .

Sample Run : In this sample run , the user input is shaded .

Enter two integers separated by one or more spaces : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Variables , Assignment Statements , and Input Statements The program in Example illustrates how to read strings and numeric data .

Sample Run : In this sample run , the user input is shaded .

Enter name , last name ,  and  separated by spaces .

Sheila Mann Name : Sheila Mann   The preceding program works as follows : The statements in Lines to declare the variables firstName and of type string , of type int , and of type double .
The statement in Line is an output statement and tells the user what to do .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Basic Elements of The statement in Line reads and stores the string Sheila into the variable firstName and then skips the space after Sheila and reads and stores the string Mann into the variable .
Next , the statement in Line skips the blank after Mann and reads and stores into the variable and then skips the blank after and reads and stores into the variable .

The statements in Lines , and produce the third , fourth , and fifth lines of the sample run .

During programming execution , if more than one value is entered in line , these values must be separated by at least one blank or tab .
Alternately , one value per line can be entered .

Variable Initialization Remember , there are two ways to initialize variable : by using the assignment statement .

In , and are initialized using assignment statements , and in , these executes , and are initialized to the same value unless you edit the source code , change the value , recompile , and run .
On the other hand , in , each time the program runs , you are prompted to enter values for and .
Therefore , read statement is much more versatile than an assignment statement .

Sometimes it is necessary to initialize variable by using an assignment statement .
This is especially true if the variable is used only for internal calculation and not for reading and storing data .

Recall that does not automatically initialize variables when they are declared .
Some variables can be initialized when they are declared , whereas others must be initialized using either an assignment statement or read statement .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Variables , Assignment Statements , and Input Statements When the program is compiled , some of the newer IDEs might give warning messages if the program uses the value of variable without first properly initializing that variable .

In this case , if you ignore the warning and execute the program , the program might terminate abnormally with an error message .

Suppose you want to store character into char variable using an input statement .

During program execution , when you enter the character , you do not the single quotes .
For example , suppose that ch is char variable .
Consider the following input statement : cin ch ; If you want to store into ch using this statement , during program execution , you only enter .
Similarly , if you want to store string into string variable using an input statement , during program execution , you enter only the string without the double quotes .

Also , suppose that the following statements execute in the order given .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Chapter : Basic Elements of In addition , suppose the input is : Amy This line has four values , Amy , and , and each value is separated from the others by blank .

now determine the values of the declared variables after the last statement executes .

To explicitly show how particular statement changes the value of variable , the values of the variables after each statement executes are shown .

This statement replaces the old of with this new .

Read two numbers , which are and , and store the first number into  and the second into .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Variables , Assignment Statements , and Input Statements After St .

Values of the .

This statement replaces the old of with this new .

This statement replaces the old of with this new .

Store into This statement replaces the old value of with this new value .

Read the next input , from the keyboard and store it into ch .

When something goes wrong in program and the results it generates are not what you expected , you should do of the statements that assign values to your variables .
Example illustrates how to do of your program .
This is very effective debugging technique .
The Web site accompanying this book contains program that shows the effect of the statements listed at the beginning of Example .
The program is named Example .

If you assign the value of an expression that evaluates to using the cast variable of type int , the fractional part is dropped .
In this case , the compiler most likely will issue warning message about the implicit type conversion .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Basic Elements of Increment and Decrement Operators Now that you know how to declare variable and enter data into variable , in this section , you will learn about two more operators : the increment and decrement operators .
These operators are used frequently by programmers and are useful programming tools .

Suppose is an int variable .
The statement : + increments the value of by .
To execute this assignment statement , the computer first evaluates the expression on the right , which is +
It then assigns this value to the variable on the left , which is .

As you will see in later chapters , such statements are frequently used to how many times certain things have happened .
To expedite the execution of such statements , provides the increment operator , plus , which increases the value of variable by , and the decrement operator , minus , which decreases the value of variable by .
Increment and decrement operators each have two forms , pre and post .
The syntax of the increment operator is : The syntax of the decrement operator is : look at some examples .

Because both the increment and decrement operators are built into , the value of the variable is quickly incremented or decremented without having to use the form of an assignment statement .

Now , both the and operators increment the value of the variable by .

Similarly , the and operators decrement the value of the variable by .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Increment and Decrement Operators .

The difference becomes apparent when the variable using these operators is employed in an expression .

Suppose that is an int variable .
If is used in an expression , first the of is incremented by , and then the new of is used to evaluate the expression .
On the other hand , if is used in an expression , first the current of is used in the expression , and then the of is incremented by .
The following example clarifies the difference between the and operators .

Suppose that and are int variables .
Consider the following statements : The first statement assigns the to .
To evaluate the second statement , which uses the operator , first the of is incremented to , and then this  is assigned to .
After the second statement executes , both and have the .
The equivalent results would occur with this set of .

As before , the first statement assigns to .
In the second statement , the operator is applied to .
To execute the second statement , first the of  which is , is used to evaluate the expression , and then the of is incremented to .
Finally , the of the expression , which is , is stored in .
After the second statement executes , the of is , and the of is .
The equivalent results would occur with this set of .

As you see , the only difference between the and statements is when the incrementing takes place : before the assignment or after .

The following example further illustrates how the pre and post forms of the increment operator work .

EXAMPLE Suppose and are int variables and ; + Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

The first statement assigns to .
To execute the second statement , first the expression is evaluated .
Because the operator is applied to  first the of is incremented to .
Then is added to to get , which is then assigned to .

Therefore , after the second statement executes , is and is .

Output In the preceding sections , you have seen how to put data into the memory and how to manipulate that data .
We also used certain output statements to show the results on the standard output device .
This section explains in some detail how to further use output statements to generate the desired results .

The standard output device is usually the screen .

In , output on the standard output device is accomplished via the use of and the operator .
The general syntax of together with is : expression or expression or ; This is called an output statement .
In , is called the stream insertion operator .
Generating output with follows two rules :
The expression is evaluated , and its is printed at the current insertion point on the output device .

is used to format the output .
The simplest is endl last character is the letter , which causes the insertion point to move to the beginning of the next line .

On the screen , the insertion point is where the cursor is .

The next example illustrates how an output statement works .
In an output statement , string or an expression involving only one variable or single evaluates to itself .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Output When an output statement outputs char values , it outputs only the character without the single quotes the single quotes are part of the output .

EXAMPLE Consider the following statements .
The output is shown to the right of each statement .

Look at the output of statement .
Recall that in , the newline character is ; it causes the insertion point to move to the beginning of the next line before printing .

Therefore , when appears in string in an output statement , it causes the insertion point to move to the beginning of the next line on the output device .
This fact explains why Hello and .

In , is called the escape character and is called the newline escape sequence .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Basic Elements of Recall that all variables must be properly initialized ; otherwise , the value stored in them may not make much sense .
Also recall that does not automatically initialize variables .

If is an int variable , then the output of the statement :

EXAMPLE Consider the following program : This program illustrates how output statements work .

The line numbers are shown in this column to make it easy to see which output corresponds to which statement .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Output Output of Statement at Hello .

Look at the output of the statements in Lines , and .
The statement in Line outputs the result of + which is , and moves the insertion point to the beginning of the next line .
The statement in Line outputs the string +
Note that the statement in Line consists only of the string +

Therefore , after printing + the insertion point stays positioned after ; it does not move to the beginning of the next line .
Next the output of the statement in Line outputs space and at the insertion point , which was positioned after .

The output statement in Line contains only the manipulator endl , which moves the insertion point to the beginning of the next line .
Therefore , when the statement in Line executes , the output starts at the beginning of the line .
Note that in this output , the column of Statement at " does not contain Line .
This is due to the fact that the statement in Line does not produce any printable output .

It simply moves the insertion point to the beginning of the next line .
Next , the statement in Line outputs the value of + which is .
The manipulator endl then moves the insertion point to the beginning of the next line .

Outputting or accessing the value of variable in an expression does not destroy or modify the contents of the variable .

Let us now take close look at the newline character ,

Now consider the following statements :

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Chapter : Basic Elements of The output of these statements is : Hello there .

My name is James .

When is encountered in the string , the insertion point is positioned at the beginning of the next line .
Note also that may appear anywhere in the string .
For example , the output of the statement :

My name is James .

Also , note that the output of the .

Output In each case , the output of the statements is : Hello .

My name is James .

Obviously , you will use an output statement to produce this output .
However , in the programming code , this statement may not fit in one line as part of the output statement .

Also , note that is no manipulator at the end of the first statement .
Here , two output statements are used to output the sentence in one line .

Equivalently , you can use the following output statement to output this sentence : can go "  In this statement , note that is no semicolon at the end of the first line , and the identifier does not appear at the beginning of the second line .
Because is no semicolon at the end of the first line , this output statement continues at the second line .
Also , note the double quotation marks at the beginning and end of the sentences on each line .
The string is broken into two strings , but both strings are part of the same output statement .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

However , the following statement would be incorrect : is sunny , warm , and not windy day .

That is , in programming code , string cannot be broken into more than one line by using the return key on your keyboard .

Recall that the newline character is , which causes the insertion point to move to the beginning of the next line .
There are many escape sequences in , which allow you to control the output .
Table lists some of the commonly used escape sequences .

TABLE Commonly Used Escape Sequences Escape Sequence Description .

Return Cursor moves to the beginning of the current line .

Double quotation mark is printed The following example shows the effect of some of these escape sequences .

EXAMPLE The output of the statement : newline escape sequence is "  is : The newline escape sequence is Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Preprocessor Directives .

Therefore , the preceding statement is equivalent to the following output .

The Web site accompanying this text contains the program that shows the effect of the statements in Example .
The program is named .

To use cin and in program , you must include certain header file .
The next section explains what this header file is , how to include header file in program , and why you need header files in program .
Chapter will provide detailed explanation of cin and .

Preprocessor Directives Only small number of operations , such as arithmetic and assignment operations , are explicitly defined in .
Many of the functions and symbols needed to run program are provided as collection of libraries .
Every library has name and is referred to by header file .
For example , the descriptions of the functions needed to perform are contained in the header file iostream .
Similarly , the descriptions of some very useful mathematical functions , such as power , absolute , and sine , are contained in the header file cmath .
If you want to use or math functions , you need to tell the computer where to find the necessary code .
You use preprocessor directives and the names of header files to tell the computer the locations of the code provided in libraries .
Preprocessor directives are processed by program called preprocessor .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All preprocessor commands begin with .
There are no semicolons at the end of preprocessor commands because they are not statements .
To use header file in program , use the preprocessor directive .

The general syntax to header file by the in program is :

Preprocessor directives to header files are placed as the first line of program so that the identifiers declared in those header files can be used throughout the program .

Appendix describes some of the commonly used header files .
Individual programmers can also create their own header files , which is discussed in the chapter Classes and Data Abstraction , later in this book .

Note that the preprocessor commands are processed by the preprocessor before the program goes through the compiler .

From Figure , we can conclude that system has three basic components : the program development environment , the language , and the library .
All three components are integral parts of the system .
The program development environment consists of the six steps shown in Figure .
As you learn the language throughout the book , we will discuss components of the library as we need them .

In Standard , these identifiers are declared in the header file iostream , but within namespace .
The name of this namespace is std .
For now , you need to know only how to use cin and and , in fact , any other identifier from the header file There are several ways you can use an identifier declared in the namespace std .
One way to use cin and is to refer to them as and : throughout the program .

Another option is to the following statement in your program : using namespace std ; Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Creating Program This statement should appear after the statement .
You can then refer to cin and without using the prefix .
To simplify the use of cin and  this book uses the second form .
That is , to use cin and in program , the programs will contain the following two statements : using namespace std ; In , namespace and using are reserved words .

The namespace mechanism is feature of Standard .
As you learn more programming , you will become aware of other header files .
For example , the header file cmath contains the specifications of many useful mathematical functions .

Similarly , the header file iomanip contains the specifications of many useful functions and manipulators that help you format your output in specific manner .
However , just like the identifiers in the header file iostream , the identifiers in Standard header files are declared within namespace .

The name of the namespace in each of these header files is std .
Therefore , whenever certain features of header file in Standard are discussed , this book will refer to the identifiers without the prefix .
Moreover , to simplify the accessing of identifiers in programs , the statement using namespace std ; will be included .
Also , if program uses multiple header files , only one using statement is needed .
This using statement typically appears after all the header files .

Using the string Data Type in Program Recall that the string data type is data type and is not directly available for use in program .
To use the string data type , you need to access its definition from the header file string .
Therefore , to use the string data type in program , you must the following preprocessor directive : Creating Program In previous sections , you learned enough concepts to write meaningful programs .

You are now ready to create complete program .

program is collection of functions , one of which is the function main .

Therefore , if program consists of only one function , then it must be the function main .
Moreover , function is set of instructions designed to accomplish specific task .

Until Chapter , you will deal mainly with the function main .

The statements to declare variables , the statements to manipulate data as , and the statements to input and output data are placed within the function main .
The statements to declare named constants are usually placed outside of the function main .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The statement return ; must be included in the function main and must be the last statement .
If the statement return ; is misplaced in the body of the function main , the results generated by the program may not be to your liking .
The full meaning of the statement return ; will be discussed in Chapter .
For now , think of this statement as the statement .

In , return is reserved word .

program might use the resources provided by the IDE , such as the necessary code to input the data , which would require your program to certain header files .
You can , therefore , divide program into two parts : preprocessor directives and the program .
The preprocessor directives tell the compiler which header files to in the program .
The program contains statements that accomplish meaningful results .
Taken together , the preprocessor directives and the program statements constitute the source code .
Recall that to be useful , source code must be saved in file with the file extension .
For example , if the source code is saved in the file firstProgram , then the complete name of this file is .
The file containing the source code is called the source code file or source file .

When the program is compiled , the compiler generates the object code , which is saved in file with the file extension .
When the object code is linked with the system resources , the executable code is produced and saved in file with the file extension .
Typically , the name of the file containing the object code and the name of the file containing the executable code are the same as the name of the file containing the source code .
For example , if the source code is located in file named , the name of the file containing the object code is , and the name of the file containing the executable code is .

The extensions as given in the preceding is , and system dependent .
Moreover , some IDEs maintain programs in the form of projects .
The name of the project and the name of the source file need not be the same .
It is possible that the name of the executable file is the name of the project , with the extension .

To be certain , check your system or IDE documentation .

Because the programming instructions are placed in the function main , let us elaborate on this function .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Creating Program .

The statements enclosed between the curly braces form the body of the function main .
The body of the function main contains two types of .

Declaration statements Executable statements Declaration statements are used to declare things , such as variables .

In , identifiers , such as variables , can be declared anywhere in the program , but they must be declared before they can be used .

EXAMPLE The following statements are examples of variable declarations : int  c ; double , Executable statements perform calculations , manipulate data , create output , accept input , and so on .

Some executable statements that you have encountered so far are the assignment , input , and output statements .

EXAMPLE The following statements are examples of executable .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Debugging : Understanding and Fixing Syntax Errors .

The statement in uses the using namespace statement so that identifiers declared in the header file iostream , such as cin ,  and endl , can be used without using the prefix .
The statement in declares the named constant and sets its to .
The statement in contains the heading of the function main , and the left brace in marks the beginning of the function main .
The statements in Lines and declare the variables and .

The statement in sets the of to , and the statement in outputs the of .
Next , the statement in prompts the user to enter an integer .
The statement in reads and stores the integer into the variable  which is in the sample run .
The statement in positions the cursor on the screen at the beginning of the next line .
The statement in outputs the of .
The statement in evaluates the expression : + + and assigns the of this expression to the variable  which is in the sample run .
The statement in outputs the new of .
The statement in contains the return statement , which is the last executable statement .
The right brace in marks the end of the function main .

Debugging : Understanding and Fixing Syntax Errors The previous sections of this chapter described the basic components of program .

When you type program , typos and unintentional syntax errors are likely to occur .

Therefore , when you compile program , the compiler will identify the syntax error .
In this section , we show how to identify and fix syntax errors .

Consider the following program :

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Chapter : Basic Elements of .

We have numbered the statements for easy This program contains syntax errors .
When you compile this program , the compiler produces the following errors .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Debugging : Understanding and Fixing Syntax Errors .

It is best to try to correct the errors in fashion because the first error may confuse the compiler and cause it to flag multiple subsequent errors when actually there was only one error on an earlier line .
So , first consider the following error : error : syntax error  missing ' before identifier ' The expression indicates that there is an error in Line .
The remaining part of this error specifies that there is missing  before the identifier .
If we look at Line , we find that there is missing semicolon at the end of the statement int .
Therefore , we must insert  at the end of the statement in Line .

Next , consider the second error : error :  undeclared identifier This error occurs in Line , and it specifies that the identifier is undeclared .

When we look at the code , we find that this identifier has not been declared .
So we must declare as an int variable .

The error : error :  undeclared identifier occurs in Line , and it specifies that the identifier is undeclared .
As in the previous error , we must declare .
Note that once we declare and recompile , this and the previous error will disappear .

The next error is : error : mismatch in formal parameter list This error occurs in Line , and it indicates that some formal parameter list is mismatched .
For beginner , this error is somewhat hard to understand .
This error becomes clear if you look at the next error , part of which is : function overload .

So we must correct this error .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Basic Elements of .

However , at this point , the explanation given , especially for beginner , is somewhat unclear .
However , if you look at the statement return  in Line and remember the syntax of the function main as well as all the programs given in this book , we find that the number is missing , that is , this statement must be return ; From the errors reported by the compiler , we see that the compiler not only identifies the errors , but it also specifies the line numbers where the errors occur and the types of the errors .
We can effectively use this information to fix syntax errors .

After correcting all of the syntax errors , correct program .

It is possible that the list of errors reported by the compiler is longer than the program itself .
This is because , as indicated above , syntax error in one line can cause syntax errors in subsequent lines .
In situations like this , correct the syntax errors in the order they are listed and compile your program , if necessary , after each correction .
You will see how quickly the syntax errors list shrinks .
The important thing is not to panic .

In the next section , we describe some simple rules that you can follow so that your program is properly structured .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Program Style and Form .

Before beginning to write programs , however , you need to learn their proper structure , among other things .
Using the proper structure for program makes it easier to understand and subsequently modify the program .
There is nothing more frustrating than trying to follow and perhaps modify program that is syntactically correct but has no structure .

In addition , every program must satisfy certain rules of the language .
program must contain the function main .
It must also follow the syntax rules , which , like grammar rules , tell what is right and what is wrong and what is legal and what is illegal in the language .
Other rules serve the purpose of giving precise meaning to the language ; that is , they support the semantics .

The following sections are designed to help you learn how to use the programming elements you have learned so far to create functioning program .
These sections cover the syntax ; the use of blanks ; the use of semicolons , brackets , and commas ; semantics ; naming identifiers ; prompt lines ; documentation , including comments ; and form and style .

Syntax The syntax rules of language tell what is legal and what is not legal .
Errors in syntax are detected during compilation .
For example , consider the following statements : int .

When these statements are compiled , compilation error will occur at Line because the semicolon is missing after the declaration of the variable .
second compilation error will occur at Line because the identifier is used but has not been declared .

As discussed in Chapter , you enter program into the computer by using text editor .

When the program is typed , errors are almost unavoidable .
Therefore , when the program is compiled , you are most likely to see syntax errors .
It is quite possible that syntax error at particular place might lead to syntax errors in several subsequent statements .
It is very common for the omission of single character to cause four or five error messages .

However , when the first syntax error is removed and the program is recompiled , subsequent syntax errors caused by this syntax error may disappear .
Therefore , you should correct syntax errors in the order in which the compiler lists them .
As you become more familiar and experienced with , you will learn how to quickly spot and fix syntax errors .
Also , compilers not only discover syntax errors , but also hint and sometimes tell the user where the syntax errors are and how to fix them .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Basic Elements of Use of Blanks In , you use one or more blanks to separate numbers when data is input .
Blanks are also used to separate reserved words and identifiers from each other and from other symbols .
Blanks must never appear within reserved word or identifier .

Use of Semicolons , Brackets , and Commas All statements must end with semicolon .
The semicolon is also called statement terminator .

Note that curly braces , and , are not statements in and of themselves , even though they often appear on line with no other code .
You might regard brackets as delimiters , because they enclose the body of function and set it off from other parts of the program .
Brackets have other uses , which will be explained in Chapter .

Recall that commas are used to separate items in list .
For example , you use commas when you declare more than one variable following data type .

Semantics The set of rules that gives meaning to language is called semantics .
For example , the rules for arithmetic operators are semantic rules .

If program contains syntax errors , the compiler will warn you .
What happens when program contains semantic errors .
It is quite possible to eradicate all syntax errors in program and still not have it run .
And if it runs , it may not do what you meant it to do .

For example , the following two lines of code are both syntactically correct expressions , but they have different meanings : + and : + If you substitute one of these lines of code for the other in program , you will not get the same though the numbers are the same , the semantics are different .
You will learn about semantics throughout this book .

Program Style and Form .

The identifiers in the second set of statements , such as  are usually called identifiers .
As you can see , identifiers can make comments less necessary .

Consider the identifier annualsale .
This identifier is called .
In using identifiers , you may inadvertently include words , which may lessen the clarity of your documentation .
You can make words easier to understand by either capitalizing the beginning of each new or by inserting an underscore just before new .
For example , you could use either annualSale or to create an identifier that is more clear .

Recall that earlier in this chapter , we specified the general rules for naming named constants and variables .
For example , an identifier used to name named constant is all uppercase .
If this identifier is  then the words are separated with the underscore character , such as .

Prompt Lines Part of good documentation is the use of clearly written prompts so that users will know what to do when they interact with program .
There is nothing more frustrating than sitting in front of running program and not having the foggiest notion of whether to enter something or what to enter .
Prompt lines are executable statements that inform the user what to do .
For example , consider the following statements , in which num is an int .

If the program contained only the second statement , users would have no idea that they must enter an integer , and the computer would wait forever for the input .
The preceding output statement is an example of prompt line .

In program , whenever input is needed from users , you must include the necessary prompt lines .
Furthermore , these prompt lines should include as much information as Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Basic Elements of possible about what input is acceptable .
For example , the preceding prompt line not only tells the user to input number , but also informs the user that the number should be between and .

Documentation The programs that you write should be clear not only to you , but also to anyone else .
Therefore , you must properly document your programs .
You use comments to document programs .
Comments should appear in program to explain the purpose of the program , identify who wrote it , and explain the purpose of particular statements or groups of statements .

Form and Style You might be thinking that has too many rules .
However , in practice , the rules give great degree of freedom .
For example , consider the following two ways of declaring variables : int feet ,

The computer would have no difficulty understanding either of these formats , but the first form is easier to read and follow .
Of course , the omission of single comma or semicolon in either format may lead to all sorts of strange error messages .

What about blank spaces .
Where are they significant and where are they meaningless .

Consider the following two statements : int ; and .

The lack of blank between int and the changes the reserved int and the into new  inta .

The clarity of the rules of syntax and semantics frees you to adopt formats that are pleasing to you and easier to understand .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Program Style and Form .

This program is syntactically correct ; the compiler would have no difficulty reading and compiling this program .
However , this program is very hard to read .
The program that you write should be properly indented and formatted .
Note the difference when the program is .

As you can see , this program is easier to read .
Your programs should be properly indented and formatted .
To document the variables , programmers typically declare one variable per line .
Also , always put space before after an operator .
When you type your program using an IDE , typically , your program is automatically indented .

More on Assignment Statements The assignment statements you have seen so far are called simple assignment statements .
In certain cases , you can use special assignment statements called compound assignment statements to write simple assignment statements in more concise notation .

Corresponding to the five arithmetic + provides five compound  respectively .
Consider the following simple assignment statement , in which are int variables :

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

More on Assignment Statements .

EXAMPLE This example shows several compound assignment statements that are equivalent to simple assignment statements .

Simple Assignment Statement .

Therefore , you cannot immediately convert this statement into compound assignment statement .
In fact , the equivalent compound assignment statement .

We recommend avoiding such compound expressions .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Convert Length Write program that takes as input given lengths expressed in feet inches .
The program should then convert output the lengths in centimeters .
Assume that the given lengths in feet inches are integers .

Watch the Video PROBLEM ANALYSIS AND ALGORITHM DESIGN Input .

Equivalent length in centimeters .

The lengths are given in feet inches , you need to find the equivalent length in centimeters .
One is equal to centimeters .
The first thing the program needs to do is convert the length given in feet inches to all inches .
Then , you can use the conversion formula , centimeters , to find the equivalent length in .
To convert the length from feet inches to inches , you multiply the number of feet by , as foot is equal to inches , add the given inches .

For example , suppose the input is feet inches .
You then find the total inches as follows : + inches + You can then apply the conversion formula ,  to find the length in .

Get the length in feet inches .

Convert the length into total inches .

Convert total inches into .

Variables The input for the program is two numbers : one for feet one for inches .
Thus , you need two variables : one to store feet the other to store inches .
Because the program will first convert the given length into inches , you need another to store the total inches .
You also need to store the equivalent length in In summary , you need the following .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Convert Length Named To calculate the equivalent length in  you need to multiply the total Constants inches by .
Instead of using the value directly in the program , you will declare this value as named constant .
Similarly , to find the total inches , you need to multiply the feet by and add the inches .
Instead of using directly in the program , you will also declare this value as named constant .
Using named constant makes it easier to modify the program later .

We also determined the necessary variables and named constants .
We can now expand the algorithm given in the section Problem Analysis and Algorithm Design to solve the problem given at the beginning of this programming example .

Prompt the user for the input .

Echo the is , output what the program read as input .

This is also good way to ensure that .
Find the length in inches .

Output the length in inches .

Convert the length to .

Output the length in .

Putting It Now that the problem has been analyzed and the algorithm has been designed , the Together next step is to translate the algorithm into code .
Because this is the first complete program you are writing , review the necessary steps in sequence .

The program will begin with comments that document its purpose and functionality .

As there is both input to this program length in feet and and output equivalent length in , you will be using system resources for .

In other words , the program will use input statements to get data into the program and output statements to print the results .
Because the data will be entered from the keyboard and the output will be displayed on the screen , the program must include the header file iostream .
Thus , the first statement of the program , after the comments as described above , will be the preprocessor directive to include this header file .

This program requires two types of memory locations for data manipulation : named constants and variables .
Typically , named constants hold special data , such as Depending on the nature of named constant , it can be Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Basic Elements of placed before the function main or within the function main .
If named constant is to be used throughout the program , then it is typically placed before the function main .
We will comment further on where to put named constants within program in Chapter , when we discuss functions in general .
Until then , usually , we will place named constants before the function main so that they can be used throughout the program .

This program has only one function , the function main , which will contain all of the programming instructions in its body .
In addition , the program needs variables to manipulate data , and these variables will be declared in the body of the function main .
The reasons for declaring variables in the body of the function main are explained in Chapter .
The body of the function main will also contain the statements that implement the algorithm .
Therefore , the body of the function main has the following form :

Begin the program with comments for documentation .

Include header files , if any are used in the program .

Declare named constants .

Write the definition of the function main .

Programming Example : Make Change .

Sample Run : In this sample run , the user input is shaded .

Enter two integers , one for feet , one for  The numbers you entered are for feet and for .

The total number of The number of PROGRAMMING EXAMPLE : Make Change Write program that takes as input any change expressed in cents .
It should then compute the number of , quarters , dimes , nickels , and pennies to be returned , returning as many as possible , then quarters , dimes , nickels , and pennies , in that order .
For example , cents should be returned as halfdollars , quarter , nickel , and pennies .

Input Change in cents .

Equivalent change in , quarters , dimes , nickels , and pennies .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

To find the number of , you divide by , the value of , and find the quotient , which is , and the remainder , which is .
The quotient , is the number of , and the remainder , is the remaining change .

Next , divide the remaining change by to find the number of quarters .
Since the remaining change is , division by gives the quotient , which is the number of quarters , and remainder of , which is the remaining change .
This process continues for dimes and nickels .
To calculate the remainder in an integer division , you use the mod operator ,

Applying this discussion to cents yields the following calculations :

VARIABLES Get the in cents .

Find the number of .

Calculate the remaining .

Find the number of .

Calculate the remaining .

Find the number of .

Calculate the remaining .

Find the number of .

Calculate the remaining  which is the number of .

From the previous discussion and algorithm , it appears that the program will need variables to hold the number of ,  and so on .
However , the numbers of ,  and so on are not used in later calculations , so the program can simply output these values without saving each of them in variable .
The only thing that keeps changing is the  so the program actually needs only one variable : int  Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Programming Example : Make NAMED CONSTANTS To calculate the equivalent  the program performs calculations using the values of , which is ; quarter , which is ; dime , which is ; and nickel , which is .
Because these data are special and the program uses these values more than once , it makes sense to declare them as named constants .
Using named constants also simplifies later modification of the program : const const const const MAIN ALGORITHM int int int int .

Using the variables and named constants specified earlier , while writing the steps of the main algorithm , we also give the corresponding statements .

Compute and print the number of .

Corresponding Statement .
Compute and print the number of .

Sample Run : In this sample run , the user input is shaded .

Enter in cents : The The The The The The number number number number number you entered is of to be returned is of quarters to be returned is of dimes to be returned is of nickels to be returned is of pennies to be returned is QUICK REVIEW .

program is collection of functions .

comment starts with the pair of symbols anywhere in the line .

Multiline comments are enclosed between and .

The compiler ignores comments .

Reserved words cannot be used as identifiers in program .

All reserved words in consist of lowercase letters Appendix .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Basic Elements of In , identifiers are names of things .

identifier consists of letters , digits , and underscores and must begin with letter or underscore .

Whitespaces blanks , tabs , and newline characters .

data type is set of values together with set of allowed operations .

data types fall into the following three categories : simple , structured , and pointers .

There are three categories of simple data : integral , and enumeration .

Integral data types are classified into the following categories : char , short , int , long , bool , unsigned char , unsigned short , unsigned int , unsigned long , long long , and unsigned long long .

The values belonging to int data type are to .

The data type bool has only two values : true and false .

The most common character sets are ASCII , which has values , and EBCDIC , which has values .

The collating sequence of character is its preset number in the character data set .

provides three data types to manipulate decimal numbers : float , double , and long double .

The data type float is used in to represent any real number between and .
The memory allocated for value of the float data type is four bytes .

The data type double is used in to represent any real number between and .
The memory allocated for value of the double data type is eight bytes .

The arithmetic operators in are addition , subtraction , multiplication , division , and modulus .

The modulus operator , takes only integer operands .

Arithmetic expressions are evaluated using the precedence rules and the associativity of the arithmetic operators .

All operands in an integral expression , or integer expression , are integers , and all operands in expression are decimal numbers .

mixed expression is an expression that consists of both integers and decimal numbers .

When evaluating an operator in an expression , an integer is converted to number , with decimal part of , only if the operator has mixed operands .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Quick Review .

string is sequence of zero or more characters .

Strings in are enclosed in double quotation marks .

string containing no characters is called null or empty string .

Every character in string has relative position in the string .
The position of the first character is , the position of the second character is , and so on .

The length of string is the number of characters in it .

During program execution , the contents of named constant cannot be changed .

named constant is declared by using the reserved word const .

named constant must be initialized when it is declared .

All variables must be declared before they can be used .

does not automatically initialize variables .

Every variable has name ,  data type , and size .

When new is assigned to variable , the old is lost .

Only an assignment statement or an input statement can change the of variable .

In , is called the stream extraction operator .

Input from the standard input device is accomplished by using cin and the stream extraction operator .

When data is input in program , the data items , such as numbers , are usually separated by blanks , lines , or tabs .

In , is called the stream insertion operator .

Output of the program to the standard output device is accomplished by using cout and the stream insertion operator .

The manipulator endl positions the insertion point at the beginning of the next line on an output device .

Outputting or accessing the of variable in an expression does not destroy or modify the contents of the variable .

The character is called the escape character .

The sequence is called the newline escape sequence .

All preprocessor commands start with the symbol .

The preprocessor commands are processed by the preprocessor before the program goes through the compiler .

The preprocessor command instructs the preprocessor to include the header file iostream in the program .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Basic Elements of To use cin and cout , the program must include the header file iostream and either include the statement using namespace std ; or refer to these identifiers as .

All statements end with semicolon .
The semicolon in is called the statement terminator .

system has three components : environment , language , the standard libraries .

Standard libraries are not part of the language .
They contain functions to perform operations , such as mathematical operations .

file containing program usually ends with the extension .

Prompt lines are executable statements that tell the user what to do .

Corresponding to the five arithmetic + provides five compound  respectively .

EXERCISES The number in parentheses at the end of an exercise refers to the learning objective listed at the beginning of the chapter .

Mark the following statements as true or false .

In mixed expression , all the operands are converted to .
After the statement ; executes , is .
After the statement ; executes , the of is still Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Weekly Quiz .

Chapter : Basic Elements of .

Assume that .

Declare int variables and .

Declare and initialize an int variable temp to and char variable ch to .

Update the value of an int variable by adding to it .

Declare and initialize variable payRate to .

Copy the value of an int variable firstNum into an int variable tempNum .

Swap the contents of the int variables and .
Output the contents of   and the expression +

Declare char variable and set the value of to .

Declare int variables to store four integers .

Copy the value of variable to the nearest integer into an int variable .

The character that represents .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Assign the value to the variable .

Assign the string seventh edition to the variable str .

Increment the value of the int variable by .

Suppose   and are int variables and and are variables .

What value is assigned to each of these variables after the last statement .

What value is assigned to each of .

Suppose are int variables , double variable ,
What the output the following statements .

Give meaningful identifiers for the following variables write proper .

variable variable variable variable variable to to to to to store store store store store the the the the the first name student .

Output the tab character .

Output double quotation mark .

Declare int variables .

Prompt the user to input two integers .

Input the first number in the second number in .

Output , minus .
Your output must identify each number the expression .

The following program has syntax errors .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The following program has syntax errors .
On each successive const ' const int .

Chapter : Basic Elements of The following program has syntax errors the statements are in the incorrect order .
On each successive line , assume that any using namespace .

What value is assigned to each variable after each statement executes .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Miller Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Write program that produces the following output : Programming Assignment Computer Programming Author :

If necessary , adjust the positions and the of the stars to produce rectangle .

Write program that produces the following output : CCCCCCCCC CC CC CC CC CCCCCCCCC Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Write statement that includes the header file iostream .

Write statement that allows you to use cin ,  and endl without the prefix .

Write that declare the following variables : and average of type int .

Write statements that store into , into , and into .

Write statement that stores the average of , and , into average .

Write that output the values of , and average .

Compile and run your program .

Repeat Exercise by declaring , and , and average of type double .

Consider the following program in which the statements are in the incorrect order .
Rearrange the statements so that it prompts the user to input the radius of circle and outputs the area and circumference of the circle .

Write statements that the header files iostream and string .

Write statement that allows you to use cin ,  and endl without the prefix .

Write statements that declare the following variables : name of type string and studyHours of type double .

Write statements that prompt and input string into name and double value into studyHours .

Write statement that outputs the values of name and studyHours and the value of studyHours is , the output is : Hello , Donald .

Compile and run your program .

Write program that prompts the user to input decimal number and outputs the number rounded to the nearest integer .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Write statements that the header files iostream and string .

Write statement that allows you to use cin ,  and endl without the prefix .

Write statements that declare and initialize the following named constants : SECRET of type int initialized to and RATE of type double initialized to .

Write statements that declare the following variables : and newNum of type int ; name of type string ; and hoursWorked and wages of type double .

Write statements that prompt the user to input two integers and store the first number in and the second number in .

Write that outputs the values of and , indicating which is and which is .
For example , if is and is , then the output is : The value of and the value of .

Write statement that multiplies the value of by , adds the value of to it , and then stores the result in newNum .
Then , write statement that outputs the value of newNum .

Write statement that updates the value of newNum by adding the value of the named constant SECRET to it .
Then , write statement that outputs the value of newNum with an appropriate message .

Write statements that prompt the user to enter last name and then store the last name into the variable name .

Write statements that prompt the user to enter decimal number between and and then store the number entered into hoursWorked .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Write statements that produce the following output : Name : Pay Rate : Hours Worked : Salary :

Write program that tests each of the statements that you wrote in parts through .
Place the statements at the appropriate place in the program segment given at the beginning of this problem .

Test run your program on the following input data :

Write program that prompts the user to enter five test scores and then prints Write program that prompts the user to input five decimal numbers .
The program should then add the five decimal numbers , convert the sum to the nearest integer , and print the result .

Write program that prompts the capacity , in gallons , of an automobile fuel tank and the miles per gallon the automobile can be driven .
The program outputs the number of miles the automobile can be driven without refueling .

Write program that prompts the user to input the elapsed time for an event in seconds .
The program then outputs the elapsed time in hours , minutes , and seconds .
The program then outputs the To make profit , local store marks up the prices of its items by certain percentage .
Write program that reads the original price of the item sold , the percentage of the price , and the sales tax rate .
The program then outputs the original price of the item , the percentage of the Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

This is due to the fact that , typically , manufacturer uses bytes as the value of bytes , bytes as the value of , as the value of .
Therefore , byte hard drive contains bytes .
However , in computer memory , as given in Table , is equal to bytes , and so on .
So the actual storage on hard drive is approximately .

Write program to implement and test the algorithm that you designed for Exercise of Chapter .

milk carton can hold liters of milk .
Each morning , dairy farm ships cartons of milk to local grocery store .
The cost of producing one liter of milk is , and the profit of each carton of milk is .
Write program that does the following :

Chapter : Basic Elements of Prompts the user to enter the total amount of milk produced in the morning .

Outputs the number of milk cartons needed to hold milk .

Outputs the profit for producing milk .

Redo Programming Exercise so that the user can also input the cost of producing one liter of milk and the profit on each carton of milk .

You found an exciting summer job for five weeks .
It pays , say , per hour .
Suppose that the total tax you pay on your summer job income is .
After paying the taxes , you spend of your net income to buy new and other accessories for the next school year and to buy school supplies .
After buying and school supplies , you use of the remaining money to buy savings bonds .

For each dollar you spend to buy savings bonds , your parents spend to buy additional savings bonds for you .
Write program that prompts the user to enter the pay rate for an hour and the number of hours you worked each week .
The program then outputs the following : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Exercises .

The money you spend on and other accessories .

The money you spend on school supplies .

The money you spend to buy savings bonds .

The money your parents spend to buy additional savings bonds for you .

Write program that prompts the user to input number of quarters , dimes , and nickels .
The program then outputs the total value of the coins in pennies .

law states that the force , between two bodies of masses and is given by :  in which is the gravitational constant and is the distance between the bodies .
The value of is approximately dyn .
Write program that prompts the user to input the masses of the bodies and the distance between the bodies .
The program then outputs the force between the bodies .

One metric ton is approximately pounds .
Write program that prompts the user to input the amount of rice , in pounds , bag can hold .

The program outputs the number of bags needed to store one metric ton of rice .

Cindy uses the services of brokerage firm to buy and sell stocks .
The firm charges service charges on the total amount for each transaction , buy or sell .
When Cindy sells stocks , she would like to know if she gained or lost on particular investment .
Write program that allows Cindy to input the number of shares sold , the purchase price of each share , and the selling price of each share .
The program outputs the amount invested , the total service charges , amount gained or lost , and the amount received after selling the stock .

piece of wire is to be bent in the form of rectangle to put around picture frame .
The length of the picture frame is times the width .
Write program that prompts the user to input the length of the wire and outputs the length and width of the picture frame .

Repeat Exercise , but the wire is to be bent in the form of circle .
In this case , the user specifies the length of the wire and the program outputs the radius and area of the circle .
Also declare Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Basic Elements of room has one door , two windows , and bookshelf and it needs to be painted .
Suppose that one gallon of paint can paint square feet .

Write the program that prompts the user to input the lengths and widths of the door , each window , the bookshelf ; and the length , width , and height of the room .
The program outputs the amount of paint needed to paint the walls of the room .

Modify Exercise so that the user can also specify the area that can be painted with one gallon of paint .

In an elementary school , mixture of equal amounts of nuts and dried fruit is provided during lunch .
Suppose that the number of calories in each pound of nuts is times the number of calories in each pound of dried fruit .
Write program that prompts the user to input the number of students in the elementary school , the number of calories required for each student from the mixture , and the number of calories in each pound of nuts .
The program outputs the amount of nuts and dried fruit needed for the students .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Become familiar with file input and output Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

You used cin and the extraction operator to get data from the keyboard , and cout and the insertion operator to send output to the screen .
Because operations are fundamental to any programming language , in this chapter , you will learn about operations in more detail .
First , you will learn about statements that extract input from the standard input device and send output to the standard output device .
You will then learn how to format output using manipulators .
In addition , you will learn about the limitations of the operations associated with the standard devices and learn how to extend these operations to other devices .

Streams and Standard Devices program performs three basic operations : it gets data , it manipulates the data , and it outputs the results .
In Chapter , you learned how to manipulate numeric data using arithmetic operations .
In later chapters , you will learn how to manipulate nonnumeric data .
Because writing programs for is quite complex , offers extensive support for operations by providing substantial prewritten operations , some of which you encountered in Chapter .
In this chapter , you will learn about various operations that can greatly enhance the flexibility of your programs .

In , is sequence of bytes , called stream , from the source to the destination .
The bytes are usually characters , unless the program requires other types of information , such as graphic image or digital speech .
Therefore , stream is sequence of characters from the source to the destination .
There are two types of streams : Input stream : sequence of characters from an input device to the computer .

Output stream : sequence of characters from the computer to an output device .

Recall output output header that the standard input device is usually the keyboard , and the standard device is usually the screen .
To receive data from the keyboard and send to the screen , every program must use the header file iostream .
This file contains , among other things , the definitions of two data types , istream and ostream .
The header file also contains two variable declarations , one for cin , which stands for common input , and one for cout , which stands for common output .

These variable declarations are similar to the following statements : istream .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Streams and Standard Devices .

Without the statement using namespace , you refer to these identifiers as and .
In Chapter , you will learn about the meaning of the statement using namespace std ; in detail .

Variables of type istream are called input stream variables ; variables of type ostream are called output stream variables .
stream variable is either an input stream variable or an output stream variable .

Because cin and cout are already defined and have specific meanings , to avoid confusion , you should never redefine them in programs .

The variable cin has access to operators and functions that can be used to extract data from the standard input device .
You have briefly used the extraction operator to input data from the standard input device .
The next section describes in detail how the extraction operator works .
In the following sections , you will learn how to use the functions get , ignore , peek , and putback to input data in specific manner .

Suppose payRate is double variable .
Consider the following statement : cin payRate ; When the computer executes this statement , it inputs the next number typed on the keyboard and stores this number in payRate .
Therefore , if the user types , the value stored in payRate is .

The extraction operator is binary and thus takes two operands .
The operand must be an input stream variable , such as cin .
Because the purpose of an input statement is to read and store values in memory location and because only variables refer to memory locations , the operand is variable .

The extraction operator is defined only for putting data into variables of simple data types .
Therefore , the operand of the extraction operator is variable of the simple data type .
However , allows the programmer to extend the definition of the extraction operator so that data can also be put into other types of variables by using an input statement .
You will learn this mechanism in Chapter later in this book .

The syntax of an input statement using cin and the extraction operator is : cin variable .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Chapter : As you can see in the preceding syntax , single input statement can read more than one data item by using the operator several times .
Every occurrence of extracts the next data item from the input stream .
For example , you can read both payRate and hoursWorked via single input statement by using the following code : cin payRate .

When scanning for the next input , skips all whitespace characters .
Recall that whitespace characters consist of blanks and certain nonprintable characters , such as tabs and the newline character .
Thus , whether you separate the input data by lines or blanks , the extraction operator simply finds the next input data in the input stream .
For example , suppose that payRate and hoursWorked are double variables .
Consider the following input statement : cin payRate hoursWorked ; Whether the input is : or : or : the preceding input statement would store in payRate and in hoursWorked .
Note that the first input is separated by blank , the second input is separated by tab , and the third input is separated by line .

Now suppose that the input is .
How does the extraction operator distinguish between the character and the number .
The operand of the extraction operator makes this distinction .
If the operand is variable of the data type char , the input is treated as the character and , in this case , the ASCII value of is stored .
If the operand is variable of the data type int or double , the input is treated as the number .

Next , consider the input and the statement : cin ; where is variable of some simple data type .
If is of the data type char , only the single character is stored in .
If is of the data type int , is stored in .
If is of the data type Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Streams and Standard Devices .

Table summarizes this discussion by showing the valid input for variable of the simple data type .

TABLE Valid Input for Variable of the Simple Data Type .

If the actual data input is an integer , the input is converted to decimal number with the zero decimal part .

When reading data into char variable , after skipping any leading whitespace characters , the extraction operator finds and stores only the next character ; reading stops after single character .
To read data into an int or double variable , after skipping all leading whitespace characters and reading the plus or minus sign , the extraction operator reads the digits of the number , including the decimal point for variables , and stops when it finds whitespace character or character other than digit .

The following statements show how the extraction operator works .

AB Value Stored in Memory ' is held for later input .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

For statement , data is entered on the same line separated by blanks .
For statement , data is entered on two lines ; the first two input values are separated by two blank spaces , and the third input is on the next line .
For statement , all three input values are separated by lines , and for statement , all three input values are on the same line , but there is no space between them .
Note that the second input is nonnumeric character .
These statements work as follows .

Statements , and are easy to follow .
Let us look at statement .

In statement , first the extraction operator extracts from the input stream and stores it in .
Then , the extraction operator extracts the character ' from the input stream and stores it in .
Next , is extracted and stored in .

Note that statements , and illustrate that regardless of whether the input is separated by blanks or by lines , the extraction operator always finds the next input .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Streams and Standard Devices .

Next , is extracted and stored in .
Finally , is extracted and stored in .

Statement works similarly .

In statement , is stored in  and is stored in  but the input stream does not have enough input data to fill each variable .
In this case , the computer waits waits , and waits .
The computer does not continue to execute until the next value is entered .

In statement , the first operand of the extraction operator is variable of the type int , and the input is .
Now for int variables , after inputting the digits of the number , the reading stops at the first whitespace character or character other than digit .
Therefore , the operator stores into .
The next operand of is the variable  which is of the type double .
Therefore , the operator stores the value as into .

In statement , the first operand of the extraction operator is char variable , so the first nonwhitespace character , is extracted from the input stream .

The character ' is stored in the variable .
The next operand of the extraction operator is an int variable , so the next input value , is extracted and stored in .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : In statement , the first operator of the extraction operator is an int variable , so the first data item , is extracted from the input stream and stored in .

Now the computer waits for the next data item for the variable .

In statement , is stored into .
The extraction operator then skips the blank , and ' is stored in .

Recall that during program execution , when entering character data such as letters , you do not enter the single quotes around the character .

What happens if the input stream has more data items than required by the program .

After the program terminates , any values left in the input stream are discarded .
When you enter data for processing , the data values should correspond to the data types of the variables in the input statement .
Recall that when entering number for double variable , it is not necessary for the input number to have decimal part .
If the input number is an integer and has no decimal part , it is converted to decimal value .
The computer , however , does not tolerate any other kind of mismatch .
For example , entering char value into an int or double variable causes serious errors , called input failure .

Input failure is discussed later in this chapter .

The extraction operator , when scanning for the next input in the input stream , skips whitespace such as blanks and the newline character .
However , there are situations when these characters must also be stored and processed .
For example , if you are processing text in fashion , you must know where in the input stream the newline character is located .
Without identifying the position of the newline character , the program would not know where one line ends and another begins .
The next few sections teach you how to input data into program using the input functions , such as get , ignore , putback , and peek .
These functions are associated with the data type istream and are called istream member functions .
functions , such as get , are typically called stream member functions or stream functions .

Before you can learn about the input functions get , ignore , putback , peek , and other functions that are used in this chapter , you need to first understand what function is and how it works .
You will study functions in detail and learn how to write your own in Chapter .

Using Predefined Functions in Program As noted in Chapter , function , also called subprogram , is set of instructions .
When function executes , it accomplishes something .
The function main , as you saw in Chapter , executes automatically when you run program .
Other functions execute Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Using Predefined Functions in Program only when they are is , called .
comes with wealth of functions , called predefined functions , that are already written .
In this section , you will learn how to use some predefined functions that are provided as part of the system .
Later in this chapter , you will learn how to use stream functions to perform specific operation .

Recall from Chapter that predefined functions are organized as collection of libraries , called header files .
Therefore , to use particular function , you need to know the name of the function and few other things , which are described shortly .

That is , xy .
For example , and ,
The numbers and that you use in the function are called the arguments or parameters of the function .
For example , in , the parameters are and .

An expression such as , is called function call , which causes the code attached to the predefined function to execute and , in this case , computes .

The header file cmath contains the specification of the function .

To use predefined function in program , you need to know the name of the header file containing the specification of the function and include that header file in the program .
In addition , you need to know the name of the function , the number of parameters the function takes , and the type of each parameter .
You must also be aware of what the function is going to do .
For example , to use the function  you must include the header file cmath .
The function has two parameters , which are decimal numbers .
The function calculates the first parameter to the power of the second parameter .
More specifically , we use some math functions , from the header file cmath , and the string function length , from the header file string .
Note that the function length determines the length of string .

EXAMPLE to use predefined functions .

If and are the coordinates of two in the plane , then the distance between these points is .

Sample Run : In this sample run , the user input is shaded .

Line : Enter the radius of the sphere : Line : The volume of the sphere is : Line : Enter the coordinates of two points in the plane : Line : The between the points , and , is : Line : The number of characters , including blanks , in with " is : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Using Predefined Functions in Program The preceding program works as follows .
The statements in Lines to declare the variables used in the program .
The statement in Line prompts the user to enter the radius of the sphere , and the statement in Line stores the radius in the variable sphereRadius .
The statement in Line uses the function to compute and store the volume of the sphere in the variable .
The statement in Line outputs the volume .
The statement in Line prompts the user to enter the coordinates of two points in the plane , and the statement in Line stores the coordinates in the variables , and , respectively .
The statement in Line uses the functions sqrt and to determine the between the points .

The statement in Line outputs the between the points .
The statement in Line stores the string with " in .
The statement in Line uses the string function to determine and output the of .
Note how the function is used .
Later in this chapter we will explain the meaning of expressions such as .

Because is fundamental to any programming language and because writing instructions to perform specific operation is not job for everyone , every programming language provides set of useful functions to perform specific operations .
In the remainder of this chapter , you will learn how to use some of these functions in program .
As programmer , you must pay close attention to how these functions are used so that you can get the most out of them .
The first function you will learn about here is the function get .

Now consider the following statement : cin num ; When the computer executes this statement , is stored in , the blank is skipped by the extraction operator , the character ' is stored in , and is stored in num .

However , what if you intended to store ' in , the blank in , and in num .
It is clear that you cannot use the extraction operator to input this data .

As stated earlier , sometimes you need to process the entire input , including whitespace characters , such as blanks and the newline character .
For example , suppose you want to Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : process the entered data on basis .
Because the extraction operator skips the newline character and unless the program captures the newline character , the computer does not know where one line ends and the next begins .

The variable cin can access the stream function get , which is used to read character data .
The get function inputs the very next character , including whitespace characters , from the input stream and stores it in the memory location indicated by its argument .

The function get comes in many forms .
Next , we discuss the one that is used to read character .

The syntax of cin , together with the get function to read character , follows : In the statement , varChar is char variable .
The effect of the preceding statement would be to store the next input character in the variable varChar .

Now consider the following input again : To store ' in , the blank in , and in num , you can effectively use the get .

Because this form of the get function has only one argument and reads only one character and you need to read two characters from the input stream , you need to call this function twice .
Notice that you cannot use the get function to read data into the variable num because num is an int variable .
The preceding form of the get function reads values of only the char data type .

The preceding set of statements is equivalent to the following .

For the next few chapters , you need only the form of the function get introduced here .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Using Predefined Functions in Program cin and the ignore Function When you want to process only partial data , within , you can use the stream function ignore to discard portion of the input .
The syntax to use the function ignore is : Here , intExp is an integer expression yielding an integer value , and chExp is char expression yielding char value .
In fact , the value of the expression intExp specifies the maximum number of characters to be ignored in line .

Suppose intExp yields value of , say .
This statement says to ignore the next characters or ignore the input until it encounters the character specified by chExp , whichever comes first .
To be specific , consider the following statement : When this statement executes , it ignores either the next characters or all characters until the newline character is found , whichever comes first .
For example , if the next characters do not contain the newline character , then only the first characters are discarded and the next input data is the character .
However , if the character is the newline character , then the first characters are discarded and the next input data is the character .
Similarly , the execution of the statement : results in ignoring the first characters or all characters until the character ' is found , whichever comes first .

EXAMPLE Consider the declaration : int , and the input :

The third statement , cin , stores the next in .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter :

Consider the declaration : char , and the .

The first statement , cin , stores ' in .
The second statement , results in discarding all characters until .

Thus , the extraction operator skips the space after .
Suppose that we have the following .

The first statement , cin , stores ' in .
The second statement , results in discarding the next five characters , that is , until .

The third statement , cin , stores the character ' the same in .

When the function ignore is used without any arguments , then it only skips the very next character .
For example , the following statement will skip the very next character : This statement is typically used to skip the newline character .

The putback and peek Functions Suppose you are processing data that is mixture of numbers and characters .
Moreover , the numbers must be read and processed as numbers .
You have also looked at many sets of sample data and cannot determine whether the next input is character or number .
You could read the entire data set character by character and check whether certain character is digit .
If digit is found , you could then read the remaining digits of the number and somehow convert these characters into numbers .
This programming code would be somewhat complex .
Fortunately , provides two very useful stream functions that can be used effectively in these types of situations .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Using Predefined Functions in Program The stream function putback lets you put the last character extracted from the input stream by the get function back into the input stream .
The stream function peek looks into the input stream and tells you what the next character is without removing it from the input stream .
By using these functions , after determining that the next input is number , you can read it as number .
You do not have to read the digits of the number as characters and then convert these characters to that number .

The peek function returns the next character from the input stream but does not remove the character from that stream .
In other words , the function peek looks into the input stream and checks the identity of the next input character .
Moreover , after checking the next input character in the input stream , it can store this character in designated memory location without removing it from the input stream .
That is , when you use the peek function , the next input character stays the same , even though you now know what it is .

The syntax to use the function peek is : Here , istreamVar is an input stream variable , such as cin , and is char variable .

Notice how the function peek is used .
First , the function peek is used in an assignment statement .
It is not statement like get , ignore , and putback .
Second , the function peek has empty parentheses .
Until you become comfortable with using function and learn how to write one , pay close attention to how to use predefined function .

The following example illustrates how to use the peek and putback functions .

Sample Run : In this sample run , the user input is shaded .

Line : Enter string : abcd Line Line Line Line Line .

The user input , abcd , allows you to see the effect of the functions get , putback , and peek in the preceding program .
The statement in Line prompts the user to enter string .

In Line , the statement ; extracts the first character from the input stream and stores it in the variable .
So after Line executes , the value of is .

The statement in Line outputs the value of .
The statement ; in Line extracts the next character from the input stream , which is , and stores it in .

At this point , the value of is .

The statement in Line outputs the value of .
The ; statement in Line puts the previous character extracted by the get function , which is , back into the input stream .
Therefore , the next character to be extracted from the input stream is .

The ; statement in Line extracts the next character from the input stream , which is still , and stores it in .
Now the value of is .
The statement in Line outputs the value of as .

In Line , the statement ; checks the next character in the input stream , which is , and stores it in .
The value of is now .
The statement in Line Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Using Predefined Functions in Program .

The ; statement in Line extracts the next character from the input stream and stores it in .
The statement in Line outputs the value of  which is still .

Note that the statement ; in Line did not remove the character ' from the input stream ; it only peeked into the input stream .
The output of Lines and demonstrates this functionality .

The Dot Notation between Stream Variables and Functions : Precaution In the preceding sections , you learned how to manipulate an input stream to get data into program .
You also learned how to use the functions get , ignore , peek , and putback .
It is important that you use these functions exactly as shown .
For example , to use the get function , you used statements such as the following : Omitting the is , the period between the variable cin and the function name .

Similarly , missing parentheses , as in , result in syntax error .
Also , remember that you must use the input functions together with an input stream variable .
If you try to use any of the input functions is , without the input stream compiler might generate an error message such as " For example , the statement ; could result in syntax error .

As you can see , several functions are associated with an istream variable , each doing specific job .
Recall that the functions get , ignore , and so on are members of the data type istream .
Called the dot notation , the dot separates the input stream variable name from the member , or function , name .
In fact , in , the dot is an operator called the member access operator .

has special name for the data types istream and ostream .
The data types istream and ostream are called classes .
The variables cin and also have special names , called objects .
Therefore , cin is called an istream object , and is called an ostream object .
In fact , stream variables are called stream objects .
You will learn these concepts in Chapter later in this book .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Input Failure Many things can go wrong during program execution .
program that is syntactically correct might produce incorrect results .
For example , suppose that paycheck is calculated by using the following formula : payRate hoursWorked ; If you accidentally type + in place of , the calculated would be incorrect , even though the statement containing + is syntactically correct .

What about an attempt to read invalid data .
For example , what would happen if you tried to input letter into an int variable .
If the input data did not match the corresponding variables , the program would run into problems .
For example , trying to read letter into an int or double variable would result in an input failure .
Consider the following statements : int , c ; double .

If the input were : then the input statement : cin ; would result in storing in , in , and in .

Because the next variable c is of the data type int , the computer tries to read .
The input stream then enters state called the fail state .

What actually happens when the input stream enters the fail state .
Once an input stream enters the fail state , all further statements using that stream are ignored .
Unfortunately , the program quietly continues to execute with whatever values are stored in variables and produces incorrect results .
The program in Example illustrates an input failure .
This program on your system may produce different results .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Input Failure .

Sample Runs : In these sample runs , the user input is shaded .

Sample Run Line : Enter    and  Sam Line Line Line Line :  Sam :    The statements in Lines , and declare the variables    and  and also initialize the variable   and .
The statement in Line prompts the user to enter    and  the statement in Line inputs these values into variables    and  respectively .

In this sample run , the third input is and the cin statement tries to input this into the variable .
However , the input begins with the character ' and is variable of type int , so cin enters the fail state .
Note that the printed values of the variables and are unchanged , as shown by the output of the statements in Lines and .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Next the cin statement tries to input the decimal point into  which is an int variable .
So the input stream enters the fail state and the values of and are unchanged , as shown by the output of the statements in Lines and .

The clear Function When an input stream enters the fail state , the system ignores all further using that stream .
You can use the stream function clear to restore the input stream to working state .

The syntax to use the function clear is : Here , istreamVar is an input stream variable , such as cin .

After using the function clear to return the input stream to working state , you still need to clear the rest of the garbage from the input stream .
This can be accomplished by using the function ignore .
Example illustrates this situation .

EXAMPLE failure and the clear function .

Sample Run : In this sample run , the user input is shaded .

Line : Enter    and  Sam Line Line Line Line :  Sam :    Line : Enter    and  Sam Line Line Line Line :  Sam    The statements in Lines , and declare the variables    and  and also initialize the variable   and .
The statement in Line prompts the user to enter    and  the statement in Line inputs these values into variables    and  respectively .

As in Example , when the cin statement tries to input into  it enters the fail statement .
The statement in Line restores the input stream by using the function clear , and the statement in Line ignores the rest of the input .
The statement in Line again prompts the user to input    and  the statement in Line stores these values in    and  respectively .
Next , the statements in Lines to output the values of    and .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Output and Formatting Output Other than writing efficient programs , generating the desired output is one of highest priorities .
Chapter briefly introduced the process involved in generating output on the standard output device .
More precisely , you learned how to use the insertion operator and the manipulator endl to display results on the standard output device .

However , there is lot more to output than just displaying results .
Sometimes , floatingpoint numbers must be output in specific way .
For example , paycheck must be printed to two decimal places , whereas the results of scientific experiment might require the output of numbers to six , seven , or perhaps even ten decimal places .
Also , you might like to align the numbers in specific columns or fill the empty space between strings and numbers with character other than the blank .
For example , in preparing the table of contents , the space between the section heading and the page number might need to be filled with dots or dashes .
In this section , you will learn about various output functions and manipulators that allow you to format your output in desired way .

Recall that the syntax of when used together with the insertion operator is : expression or expression or ; Here , expression is evaluated , its value is printed , and is used to format the output .
The simplest that you have used so far is endl , which is used to move the insertion point to the beginning of the next line .

Other output manipulators that are of interest include setprecision , fixed , showpoint , and setw .
The next few sections describe these manipulators .

Usually , the default output of numbers is scientific notation .
Some integrated development environments might use maximum of six decimal places for the default output of numbers .
However , when an paycheck is printed , the desired output is maximum of two decimal places .
To print output to two decimal places , you use the setprecision to set the precision to .

The general syntax of the setprecision is : where is the number of decimal places .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Output and Formatting Output .

Notice that the number of decimal places , or the precision value , is passed as an argument to setprecision .

To use the setprecision , the program must the header file iomanip .
Thus , the following statement is required : fixed Manipulator To further control the output of numbers , you can use other manipulators .

To output numbers in fixed decimal format , you use the fixed .
The following statement sets the output of numbers in fixed decimal format on the standard output device : fixed ; After the preceding statement executes , all numbers are displayed in the fixed .

For example , to disable the fixed on the standard output device , you use the following statement : After the fixed is disabled , the output of the numbers returns .

On some compilers , the statements fixed ; and .

The following example shows how the manipulators scientific and fixed work without using the setprecision .

Sample Run : Scientific  Fixed decimal  The sample run shows that when the value of and are printed without setting the scientific or fixed manipulators , the trailing zeros are not shown and , in the case of  the decimal point is also not shown .
After setting the manipulators , the values are printed to six decimal places .
In the next section , we describe the showpoint to force the system to show the decimal point and trailing zeros .
We will then give an example to show how to use the manipulators setprecision , fixed , and showpoint to get the desired output .

In this case , when you instruct the computer to output the decimal number in fixed decimal format , the output may not show the decimal point and the decimal part .
To force the output to show the decimal point and Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Output and Formatting Output .

Sample Run : In this program , the statement in includes the header file iomanip , and the statement in declares the named constant and sets the value to eight decimal places .
The statements in Lines and declare and initialize the variables and to store the of the base and the of cylinder .
The statement in sets the output of numbers in decimal format with decimal point and trailing zeros .

The statements in Lines , and output the values of    and to two decimal places .

The statements in Lines , and output the values of    and to three decimal places .

The statements in Lines , and output the values of    and to four decimal places .

The statement in outputs the value of to three decimal places , the value of to two decimal places , and the value of to five decimal places .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Output and Formatting Output .

The value of printed in contains trailing .
This is because the stored value of has only two decimal places ; is printed at the third decimal place .
In similar manner , the value of is printed in Lines , and .

Also , notice how the statements in Lines , and calculate and output to two , three , and four decimal places .

Note that the value of printed in is rounded .

The statement in first sets the output of numbers to three decimal places and then outputs the value of to three decimal places .
After printing the value of  the statement in sets the output of numbers to two decimal places and then outputs the value of to two decimal places .
Next , it sets the output of numbers to five decimal places and then outputs the value of to five decimal places .

If you omit the statement in and recompile and run the program , you will see the default output of the decimal numbers .
More specifically , the value of the expression that calculates the might be printed in the scientific notation .

The manipulator is used to output the value of an expression in specific number of columns .
The value of the expression can be either string or number .
The expression outputs the value of the next expression in columns .
The output is rightjustified .
Thus , if you specify the number of columns to be , for example , and the output requires only four columns , the first four columns are left blank .
Furthermore , if the number of columns specified is less than the number of columns required by the output , the output automatically expands to the required number of columns ; the output is not truncated .
For example , if is an int variable , the following statement outputs the value of in five columns on the standard output device :

EXAMPLE : This example illustrates how the function .

Sample Run :

The statement in Line sets the output of numbers in decimal format with decimal point and trailing zeros .
The output of the statement in Line shows the column positions when the specific values are printed ; it is the first line of output .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Additional Output Formatting Tools .

Because has only three digits , only three columns are needed to output its value .
Therefore , the first two columns are left blank in the second line of output .

The statement in Line sets the output of numbers to two decimal places .

The statement in Line outputs the value of in the first five columns , the value of in the next five columns , the value of in the next six columns , and the value of in the next seven columns .
Because contains four digits and decimal point , five columns are required to output the value of .
Also , because the function sets the output of in six columns , the first column is left blank .
Similarly , the value of is output in seven columns leaving the first three columns blank .
The fourth line of output is blank because the manipulator appears twice in the statement in Line .

The statement in Line outputs the values of in the first five columns , in the next five columns , the value of in the next four columns , and in the following seven columns , creating the fifth line of output .
Note that to output the value of at least five columns are required , but the program only specifies four columns , so the output of is expanded to the required number of columns .
Also note that after printing the value of  the value of is printed at the current cursor position the fifth line of .

The statement in Line sets the output of in two columns .
However , the value of contains three digits , so the value of is expanded to the right number of columns .
After printing the value of  the value of is printed in the next six columns followed by the value of in the next seven columns .

The statement in Line sets the output of in two columns .
However , the value of contains three digits , so the value of is expanded to the right number of columns .
After printing the value of  the value of the string " is printed in the next seven columns followed by the value of .
Because to output the value of the number of columns is not specified , after printing the string " the value of is printed the last line of the .

Additional Output Formatting Tools In the previous section , you learned how to use the manipulators setprecision ,  and showpoint to control the output of numbers and how to use the manipulator to display the output in specific columns .
Even though these manipulators are adequate to produce an elegant report , in some situations , you may want to do more .
In this section , you will learn additional formatting tools that give you more control over your output .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : unused columns to the left are filled with spaces .
The output stream variables can use the manipulator setfill to fill the unused columns with character other than space .

The syntax to use the manipulator setfill is :

To use the manipulator setfill , the program must the header file iomanip .

The program in Example illustrates the effect of using setfill in program .

EXAMPLE : This program illustrates how the function .

Additional Output Formatting Tools .

Sample Run : Jessica Jessica The statements in Lines , and declare and initialize the variables   and to , and , respectively .
The output of the statement in Line first line of the column position when the subsequent statements output the values of the variables .
The statement in Line , sets the output of decimal numbers in decimal format with decimal point with two decimal places .

The statement in Line outputs the value of in ten columns , the value of in seven columns , and the value of in eight columns .
In this statement , the filling character is the blank character , as shown in the second line of output .

The statement in Line sets the filling character to .
The statement in Line outputs the value of in ten columns , the value of in seven columns , and the value of in eight columns .
Because " is string of length and ten columns are assigned to output its value , the first three columns are unused and are , therefore , filled by the filling character .
Similarly , the columns unused by the values of and are filled by .

The output of the statement in Line fourth line of similar to the output of the statement in Line , except that the filling character for and is .
In the output of the statement in Line fifth line of , the filling character for is , the filling character for is , and the filling character for is .
The manipulator sets these filling characters .

The statement in Line sets the filling character to blank .
The statement in Line outputs the values of   and using the filling character blank , as shown in the sixth line of output .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : left and right Manipulators Recall that if the number of columns specified in the manipulator exceeds the number of columns required by the next expression , the default output is .

Sometimes , you might want the output to be .
To the output , you use the manipulator left .

The syntax to set the manipulator left is :

Disabling the manipulator left returns .

For example , the following statement .

Additional Output Formatting Tools .

Sample Run : Jessica Jessica The output of this program is the same as the output of Example .
The only difference here is that for the statements in Lines through , the output is leftjustified .
You are encouraged to do of this program .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : This chapter discusses several stream functions and stream manipulators .
To use stream functions such as get , ignore , fill , and clear in program , the program must the header file iostream .

There are two types of manipulators : those with parameters and those without parameters .

Manipulators with parameters are called parameterized stream manipulators .
For example , manipulators such as setprecision ,  and are parameterized .
On the other hand , manipulators such as endl ,  scientific ,  and left do not have parameters .

To use parameterized stream manipulator in program , you must the header file iomanip .
Manipulators without parameters are part of the iostream header file and , therefore , do not require inclusion of the header file iomanip .

and the string Type You can use an input stream variable , such as cin , and the extraction operator to read string into variable of the data type string .
For example , if the input is the string , the following code stores this input into the string variable .

Recall that the extraction operator skips any leading whitespace characters and that reading stops at whitespace character .
As consequence , you cannot use the extraction operator to read strings that contain blanks .
For example , suppose that the variable is defined as noted above .
If the input is : Alice Wonderland then after the statement : cin  executes , the value of the variable is .

The syntax to use the function getline is : where istreamVar is an input stream variable and strVar is string variable .
The reading is delimited by the newline character .

The function getline reads until it reaches the end of the current line .
The newline character is also read but not stored in the string variable .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Debugging : Understanding Logic Errors and Debugging with Statements .

If the input is .

All characters , including the first four blanks , are stored into .

Similarly , you can use an output stream variable , such as  and the insertion operator to output the contents of variable of the data type string .

Debugging : Understanding Logic Errors and Debugging with Statements In the debugging section of Chapter , we illustrated how to understand and correct syntax errors .
As we have seen , syntax errors are reported by the compiler , and the compiler not only reports syntax errors , but also gives some explanation about the errors .
On the other hand , logic errors are typically not caught by the compiler except for the trivial ones such as using variable without properly initializing it .
In this section , we illustrate how to spot and correct logic errors using statements .
Suppose that we want to write program that takes as input the temperature in Fahrenheit and outputs the equivalent temperature in Celsius .
The formula to convert the temperature is : Celsius .
So consider the following .

Enter temperature in Fahrenheit : degree degree .

Sample Run : In this sample run , the user input is shaded .

Enter temperature in Fahrenheit : degree degree .

The result shown in the first calculation looks correct .
However , the result in the second calculation is clearly not correct even though the same formula is used , because degree degree .
It means the value of calculated in Line is incorrect .
Now , the value of is given by the expression .
So we should look at this expression closely .
To see the effect of this expression , we can separately print the values of the two expression and fahrenheit .
This can be accomplished by temporarily inserting an output statement as shown in the following .

Debugging : Understanding Logic Errors and Debugging with Statements Sample Run : In this sample run , the user input is shaded .

Enter temperature in Fahrenheit : degree degree .

Let us look at the sample run .
We see that the value and the value .
Now let us look at the expression .
The value this expression is .
That is , the value the expression is also calculated correctly .
So by the precedence the operators , the value the expression will always be regardless the value So the problem is in the integer division .
We can replace the expression will be decimal number .

Chapter : Sample Run : In this sample run , the user input is shaded .

Enter temperature in Fahrenheit : degree degree .

As we can see , using temporary statements , we were able to find the problem .
After correcting the problem , the temporary statements are removed .

The temperature conversion program contained logic errors , not syntax errors .
Using statements to print the values expressions variables to see the results calculation is an effective way to find and correct logic errors .

File The previous sections discussed in some detail how to get input from the keyboard input and send output to the screen output .
However , getting input from the keyboard and sending output to the screen have several limitations .
Inputting data in program from the keyboard is comfortable as long as the amount input is very small .
Sending output to the screen works well if the amount data is small larger than the size the and you do not want to distribute the output in printed format to others .

If the amount input data is large , however , it is inefficient to type it at the keyboard each time you run program .
In addition to the inconvenience typing large amounts data , typing can generate errors , and unintentional typos cause erroneous results .
You must have some way to get data into the program from other sources .
By using alternative sources data , you can prepare the data before running program , and the program can access the data each time it runs .

Suppose you want to present the output program in meeting .
Distributing printed copies the program output is better approach than showing the output on screen .

For example , you might give printed report to each member committee before an important meeting .
Furthermore , output must sometimes be saved so that the output produced by one program can be used as an input to other programs .

This section discusses how to obtain data from other input devices , such as disk is , secondary , and how to save the output to disk .
allows program to get data directly from and save output directly to secondary storage .
program can use the file and read data from or write data to file .
Formally , file is defined as follows : File : An area in secondary storage used to hold information .

The standard header file , iostream , contains data types and variables that are used only for input from the standard input device and output to the standard output device .

In addition , provides header file called fstream , which is used for file .

Among other things , the fstream header file contains the definitions two data types : ifstream , which means input file stream and is similar to istream , and ofstream , which means output file stream and is similar to ostream .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

File The variables cin and are already defined and associated with the standard output devices .
In addition , get , ignore , putback , peek , and so on can be used with cin , whereas , setfill , and so on can be used with .
These same operators and functions are also available for file , but the header file fstream does not declare variables to use them .
You must declare variables called file stream variables , which ifstream variables for input and ofstream variables for output .
You then use these variables together with , or other functions for .
Remember that does not automatically initialize variables .
Once you declare the fstream variables , you must associate these file variables with the sources .

File is process :

Include the header file fstream in the program .

Declare file stream variables .

Associate the file stream variables with the sources .

Use the file stream variables with , or other functions .

Close the files .

We will now describe these five steps in detail .
skeleton program then shows how the steps might appear in program .

Step requires that the header file fstream be included in the program .
The following statement accomplishes this task :

The first statement declares inData to be an input file stream variable .
The second statement declares outData to be an output file stream variable .

Step requires you to associate file stream variables with the sources .
This step is called opening the files .
The stream member function open is used to open files .

The syntax for opening file is : Here , fileStreamVariable is file stream variable , and sourceName is the name of the file .

Suppose you the declaration from Step in program .
Further suppose that the input data is stored in file called .
The following statements associate inData with and outData with .
That is , the file is opened for inputting data , and the file is opened for outputting data .

Chapter : IDEs such as Visual Studio manage programs in the form of projects .
That is , first you create project , and then you add source files to the project .
The statement in Line assumes that the file is in the same directory as your project .
However , if this is in different directory , then you must specify the path where the file is located , along with the name of the file .
For example , suppose that the file is on flash memory in drive .
Then the statement in Line should be modified as follows : Note that there are two after .
Recall from Chapter that in , is the escape character .
Therefore , to produce string , you need .

Suppose that program reads data from file .
Because different computers have drives labeled differently , for simplicity , throughout the book , we assume that the file containing the data and the program reading data from the file are in the same directory .

We typically use , or as an extension for the input and output files and use Notepad , Wordpad , or TextPad to create and open these files .
You can also use your editor , if any , to create files .
You use the file stream variables with , or other functions .
The syntax for using or with file stream variables exactly the same as the syntax for using cin and cout .
Instead of using cin and cout , however , you use the file stream variable names that were declared .
For example , the statement : inData .

This statement assumes that the was calculated as .

Once the complete , Step requires closing the files .
Closing file means that the file stream variables are disassociated from the storage area and are freed .
Once these variables are freed , they can be reused for other file .
Moreover , closing an output file ensures that the entire output sent to the file ; that  the buffer emptied .
You close files by using the stream function close .
For example , assuming Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

File .

When the program terminates , the files are closed automatically .
Nevertheless , it good practice to close the files yourself .
Also , if you want to use the same file stream variable to open another file , you must close the first file opened with that file stream variable .

In skeleton form , program that uses file usually takes the following .

Recall that Step requires the file to be opened for file .
Opening file associates file stream variable declared in the program with physical file at the source , such as disk .
In the case of an input file , the file must exist before the open statement executes .

If the file does not exist , the open statement fails and the input stream enters the fail state .
An output file does not have to exist before it opened ; if the output file does not exist , the computer prepares an empty file for output .
If the designated output file already exists , by default , the old contents are erased when the file opened .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : To add the output at the end of an existing file , you can use the option as follows .

Suppose that declared as before and you want to add the output at the end of the existing file , say ,
The statement to open this file 

Movie Tickets Sale and Donation to Charity Watch the Video movie in local theater in great demand .
To help local charity , the theater owner has decided to donate to the charity portion of the gross amount generated from the movie .
This example designs and implements program that prompts the user to input the movie name , adult ticket price , child ticket price , number of adult tickets sold , number of child tickets sold , and percentage of the gross amount to be donated to the charity .
The output of the program as follows .

Journey to Mars Number of Tickets Sold :

Input The input to the program consists of the movie name , adult ticket price , child ticket price , number of adult tickets sold , number of child tickets sold , and percentage of the gross amount to be donated to the charity .

Output The output as shown above .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Movie Tickets Sale and Donation to Charity PROBLEM ANALYSIS AND ALGORITHM DESIGN To calculate the amount donated to the local charity and the net sale , you first need to determine the gross amount .
To calculate the gross amount , you multiply the number of adult tickets sold by the price of an adult ticket , multiply the number of child tickets sold by the price of child ticket , and then add these two numbers .
That  adultTicketPrice noOfAdultTicketsSold + childTicketPrice noOfChildTicketsSold ; Next , you determine the percentage of the amount donated to the charity and then calculate the net sale amount by subtracting the amount donated from the gross amount .
The formulas to calculate the amount donated and the net sale amount are given below .
This analysis leads to the following algorithm :

Get the movie name .

Get the price of an adult ticket .

Get the price of child ticket .

Get the number of adult tickets sold .

Get the number of child tickets sold .

Get the percentage of the gross amount donated to the charity .

Calculate the gross amount using the following formula : adultTicketPrice noOfAdultTicketsSold + childTicketPrice .

Variables From the preceding discussion , it follows that you need variables to store the movie name , adult ticket price , child ticket price , number of adult tickets sold , number of child tickets sold , percentage of the gross amount donated to the charity , gross amount , amount donated , and net sale amount .
Therefore , the following variables are .

Chapter : Because movieName is declared as string variable , you need to the header file string .
Therefore , the program needs , among others , the following statement : Formatting In the output , the first column is and the numbers in the second Output column are .
Therefore , when printing value in the first column , the manipulator left is used ; before printing value in the second column , the manipulator right is used .
The empty space between the first and second columns is filled with dots ; the program uses the manipulator setfill to accomplish this goal .
In the lines showing the gross amount , amount donated , and net sale amount , the space between the sign and the number is filled with blank spaces .
Therefore , before printing the dollar sign , the program uses the manipulator setfill to set the filling character to blank .
The following statements accomplish the desired output : cout cout cout cout cout cout cout MAIN ALGORITHM .

In the preceding sections , we analyzed the problem and determined the formulas to do the calculations .
We also determined the necessary variables and named constants .

We can now expand the previous algorithm to solve the problem given at the beginning of this programming example .

Declare the variables .

Set the output of the numbers to two decimal places in fixed decimal format with decimal point and trailing zeros .

Include the header file iomanip .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Movie Tickets Sale and Donation to Charity .
Prompt the user to enter movie name .

Input the movie name .
Because the name of movie might contain more than one word , therefore , might contain , the program uses the function getline to input the movie name .

Prompt the user to enter the price of an adult ticket .

Input the price of an adult ticket .

Prompt the user to enter the price of child ticket .

Input the price of child ticket .

Prompt the user to enter the number of adult tickets sold .

Input the number of adult tickets sold .

Prompt the user to enter the number of child tickets sold .

Input the number of child tickets sold .

Prompt the user to enter the percentage of the gross amount donated .

Input the percentage of the gross amount donated .

Calculate the gross amount .

Calculate the amount donated .

Calculate the net sale amount .

Output the results .

COMPLETE PROGRAM LISTING .

Programming Example : Movie Tickets Sale and Donation to Charity .

Sample Run : In this sample run , the user input is shaded .

Enter movie name : Journey to Mars Enter the price of an adult ticket : Enter the price of child ticket : Enter number of adult tickets sold : Enter number of child tickets sold : Enter the percentage of donation : Movie Name :
Journey to Mars Number of Tickets Sold :

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the to remove additional content at any time if subsequent rights restrictions require it .

Student Grade Write program that reads student name followed by five test scores .
The program should output the student name , the five test scores , and the average test score .

Output the average test score with two decimal places .

The data to be read is stored in file called .
The output should be stored in file called .

Input file containing the student name and the five test scores .
sample input is : Andrew Miller Output PROBLEM ANALYSIS AND ALGORITHM DESIGN The student name , the five test scores , and the average of the five test scores , saved to file .

To find the average of the five test scores , you add the five test scores and divide the sum by .
The input data is in the following form : the student name followed by the five test scores .
Therefore , you must read the student name first and then read the five test scores .
This problem analysis translates into the following algorithm :

Read the student name and the five test scores .

Output the student name and the five test scores .

Calculate the average .

Output the average .

You output the average test score in the decimal format with two decimal places .

Variables The program needs to read first and last name and five test scores .
Therefore , you need two variables to store the student name and five variables to store the five test scores .

To find the average , you must add the five test scores and then divide the sum by .

Thus , you need variable to store the average test score .
Furthermore , because the input data is in file , you need an ifstream variable to open the input file .
Because the program output will be stored in file , you need an ofstream variable to open the output file .
The program , therefore , needs at least the following .

We also determined the necessary variables and named Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Student Grade constants .
We can now expand the previous algorithm to solve the problem given at the beginning of this programming example :

Declare the variables .

Open the input file .

Open the output file .

To output the numbers in fixed decimal format with decimal point and trailing zeros , set the manipulators fixed and showpoint .
Also , to output the numbers with two decimal places , set the precision to two decimal places .

Read the student name .

Output the student name .

Read the five test scores .

Output the five test scores .

Find the average test score .

Output the average test score .

Close the input and output files .

Because this program reads data from file and outputs data to file , it must include the header file fstream .
Because the program outputs the average test score to two decimal places , you need to set the precision to two decimal places .
Therefore , the program uses the manipulator setprecision , which requires you to include the header file iomanip .

Because firstName and lastName are string variables , we must include the header file string .
The program also includes the header file iostream to print message on the screen so that you will not stare at blank screen while the program executes .

COMPLETE PROGRAM LISTING .

Input File of the file : Andrew Miller Output File of the file : Student name : Andrew Miller Test  Average  Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Quick Review The preceding program uses five , and read the five and then find the .

The Web site accompanying this book contains modified version of this program that uses only one variable , testScore , to read the and another variable , sum , to find the sum of the .
The program is named .

QUICK REVIEW .

stream in is an infinite sequence of characters from source to destination .

An input stream is stream from source to computer .

An output stream is stream from computer to destination .

When the binary operator is used with an input stream object , such as cin , it is called the stream extraction operator .
The operand of must be an input stream variable , such as cin ; the operand must be variable .

When the binary operator is used with an output stream object , such as  it is called the stream insertion operator .
The operand of must be an output stream variable , such as  the operand of must be an expression or manipulator .

When inputting into variable , the operator skips all leading whitespace characters .

To use cin and  the program must include the header file iostream .

The function get is used to read on basis and does not skip any whitespace characters .

The function ignore is used to skip in line .

The function putback puts the last character retrieved by the function get back into the input stream .

The function peek returns the next character from the input stream but does not remove the character from the input stream .

Attempting to read invalid into variable causes the input stream to enter the fail state .

Once an input failure has occurred , you use the function clear to restore the input stream to working state .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : The manipulator setprecision formats the output of numbers to specified number of decimal places .

The manipulator outputs numbers in the decimal format .

The manipulator showpoint outputs numbers with decimal point and trailing zeros .

The manipulator formats the output of an expression in specific number of columns ; the default output is .

If the number of columns specified in the argument of is less than the number of columns needed to print the value of the expression , the output is not truncated and the output of the expression expands to the required number of columns .

The manipulator setfill is used to fill the unused columns on an output device with character other than space .

If the number of columns specified in the manipulator exceeds the number of columns required by the next expression , the output is rightjustified .
To the output , you use the manipulator left .

To use the stream functions get , ignore , putback , peek , clear , and unsetf for standard , the program must include the header file iostream .

To use the manipulators setprecision , setw , and setfill , the program must include the header file iomanip .

The header file fstream contains the definitions of ifstream and ofstream .

For file , you must use the statement to include the header file fstream in the program .
You must also do the following : declare variables of type ifstream for file input and of type ofstream for file output and use open statements to open input and output files .
You can use , get , ignore , peek , putback , or clear with file stream variables .

To close file as indicated by the ifstream variable inFile , you use the statement .
To close file as indicated by the ofstream variable outFile , you use the statement .

EXERCISES The number in parentheses at the end of an exercise refers to the learning objective listed at the beginning of the chapter .

Mark the following statements as true or false .

An input stream is sequence of characters from computer to an input To use cin and cout in program , the program must include the Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Suppose pay is variable of type double .
The statement cin pay ; When the statement cin ; executes , then after inputting number into the variable the program skips all trailing To use the predefined function pow in program , the program must include The statement ; inputs the next character into the variable When the input stream enters the fail state , the program terminates with To use the manipulators fixed and showpoint , the program does not The statement cin right ; sets the input of only the next variable To input data from file , the program must include the header file Suppose and are int variables and symbol is char variable .

Suppose and are int variables and symbol is char variable .
Assume the following input data : What value is assigned to , and symbol after each of the following .

Suppose that num is an int variable and discard is char variable .
Assume the following input data : What value is assigned to num and discard after each of the .

Write statement that uses the manipulator setfill to output line .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

What are the values of age and after the following .

Rewrite the program so that it accomplishes what .

What may cause an input stream to enter the fail state .
What happens when Which header file needs to be included in program that uses the data types Suppose that infile is an ifstream variable and is file that contains employees ' information .
Write the statement that opens program reads data from file called and , after doing some calculations , writes the results to file called .

After the program executes , what are the contents of the file .

After the program executes , what are the contents of the file if this file was empty before the program executed .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : After the program executes , what are the contents of the file if this file contained numbers before the program executed .

What would happen if the file did not exist before the program executed .

Suppose that infile is an ifstream variable and it is associated with the file that contains the following data : savings .
Write the that reads and stores the input in the int variable acctNumber , the input in the string variable accountType , and .

Open the file using the variable .

Write the statement to format your output to two decimal places in fixed form .

Write the values of the variables day ,  and in the file .

Calculate and write the travelTime in the file .

Which header files are needed to process the information in to .

PROGRAMMING EXERCISES .

Write statement that includes the header files fstream , string , and iomanip in this program .

Write statements that declare inFile to be an ifstream variable and outFile to be an ofstream variable .

The program will read data from the file and write output to the file .
Write statements to open both of these files , associate inFile with , and associate outFile with .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In the second line , the first number represents the monthly gross salary , the bonus , and the taxes .

The third line contains the traveled and the traveling time .
The fourth line contains the number of coffee cups sold and the cost of each coffee cup .
Write statements so that after the program executes , the contents of the file are as shown below .
If necessary , declare additional variables .
Your statements should be general enough so that if the content of the input file changes and the program is run again editing and , it outputs the appropriate results .

Name : Giselle Robinson , Department : Accounting Monthly Gross Salary : Monthly Bonus : Taxes : Paycheck : Distance Traveled : miles , Traveling Time : hours Average Speed : miles per hour Number of Coffee Cups Sold : Cost : per cup .

Write statements that close the input and output files .

Write program that tests the statements in parts through .

Consider the following program in which the statements are in the incorrect order .
Rearrange the statements so that the program prompts the user to input the and the radius of the base of and outputs the volume and surface area of the .
Format the output to two decimal places .

Write program that prompts the user to enter the weight of person in kilograms and outputs the equivalent weight in pounds .
Output both the weights rounded to two decimal places .

During each summer , John and Jessica grow vegetables in their backyard and buy seeds and fertilizer from local nursery .
The nursery carries different types of vegetable fertilizers in various bag sizes .
When buying particular fertilizer , they want to know the price of the fertilizer per pound and the cost of fertilizing per square foot .
The following program prompts the user to enter the size of the fertilizer bag , in pounds , the cost of the bag , and the area , in square feet , that can be covered by the bag .
The program should output the desired result .
However , the program contains logic errors .
Find and correct the logic errors so that the program works properly .

The manager of football stadium wants you to write program that calculates the total ticket sales after each game .
There are four types of , sideline , premium , and general admission .
After each game , data is stored in file in the following form : ticketPrice .

Output the number of tickets sold and the total sale amount .

Format your output with two decimal places .

Three employees in company are up for special pay increase .
You are given file , say , with the following data : Miller Andrew Green Sheila Sethi Amit Each input line consists of an last name , first name , current salary , and percent pay increase .
For example , in the first input line , the last name of the employee is Miller , the first name is Andrew , the current salary is , and the pay increase is .
Write program that reads data from the specified file and stores the output in the file .
For each employee , the data must be output in the following form : firstName lastName updatedSalary .
Format the output of decimal numbers to two decimal places .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Write program that accepts as input the mass , in grams , and density , in grams per cubic centimeters , and outputs the volume of the object using the formula : volume mass density .
Format your output to two decimal places .

Interest on credit unpaid balance is calculated using the average daily balance .
Suppose that netBalance is the balance shown in the bill , payment is the payment made , is the number of days in the billing cycle , and is the number of days payment is made before billing cycle .
Then , the average daily balance is : averageDailyBalance ðnetBalance payment If the interest rate per month is , say , then the interest on the unpaid balance is : interest averageDailyBalance .

Write program that accepts as input netBalance , payment , and interest rate per month .
The program outputs the interest .
Format your output to two decimal places .

Linda is starting new and clothing business and would like to make net profit of approximately after paying all the expenses , which merchandise  store rent , employees ' salary , and electricity for the store .
She would like to know how much the merchandise should be marked up so that after paying all the expenses at the end of the year she gets approximately net profit on the merchandise .
Note that after marking up the price of an item she would like to put the item on sale .

Write program that prompts Linda to enter the total of the merchandise , the salary of the employees her own , the yearly rent , and the estimated electricity .
The program then outputs how much the merchandise should be marked up so that Linda gets the desired profit .

Dairy Farm decided to ship milk in containers in the form of cubes rather than cylinders .
Write program that prompts the user to input the radius of the base and the height of cylindrical container and outputs the side of the cube with the same volume as the cylindrical container .

Paula and Danny want to plant evergreen trees along the back side of their yard .
They do not want to have an excessive number of trees .
Write program that prompts the user to input the following :

The length of the yard .

The radius of fully grown tree .

The required space between fully grown trees .

The program outputs the number of trees that can be planted in the yard and the total space that will be occupied by the fully grown trees .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Learn to use the assert function to terminate program Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The programs you have examined so far were simple and straightforward .
To process program , the computer begins at the first executable statement and executes the statements in order until it comes to the end .

In this chapter and Chapter , you will learn how to tell computer that it does not have to follow simple sequential order of statements ; it can also make decisions and repeat certain statements over and over until certain conditions are met .

Control Structures computer can process program in one of the following ways : in sequence ; selectively , by making choice , which is also called branch ; repetitively , by executing statement over and over , using structure called loop ; or by calling function .
Figure illustrates the first three types of program flow .
With such program , the computer starts at the beginning and follows the statements in order to the end .
No choices are made ; there is no repetition .
Control structures provide alternatives to sequential program execution and are used to alter the sequential flow of execution .
The two most common control structures are selection and repetition .
In selection , the program executes particular statements depending on some .
In repetition , the program repeats particular statements certain number of times based on some .

Flow of execution Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Control Structures SELECTION : if AND Figures and show that the execution of selection or repetition statement requires the execution of logical expression .
Therefore , first we need to learn about logical expressions and how to evaluate them .

Logical expression : An expression that evaluates to true or false is called logical expression .

For example , because is greater than " is true , the expression is logical expression .
Note that is an operator in , called the than " and is an example of relational operator .
Table lists the relational operators .

Recall that the is called the assignment .
Remember that the equality  determines whether two expressions are equal , whereas the assignment  assigns the value of an expression to variable .

Each of the relational operators is binary  that is , it requires two operands .

Because the result of comparison is true or false , expressions using these operators always evaluate to true or false .

Relational Operators and Simple Data Types You can use the relational operators with all three simple data types .
In the following example , the expressions use both integers and real numbers : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

EXAMPLE Expression Meaning Value is less than is not equal to is greater than is less than or equal to is less than or equal to true false false true true Comparing Characters For char values , whether an expression using relational operators evaluates to true or false depends on collating sequence .
The collating sequence of some of the characters is : ASCII Value Char ASCII Value .

Now , because , and the ASCII value of   is and the ASCII value of ' is , it follows that   is true .
Similarly , using the previous ASCII values : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Control Structures ' is false ' is false ' is true Note that comparing values of different data types may produce unpredictable results .
For example , the following expression compares an integer and character : In this expression , on particular machine , would be compared with the collating sequence of , which is .
That is , is compared with , which makes this particular expression evaluate to true .

Expressions and ' are logical expressions .
When evaluates logical expression , it returns an integer value of if the logical expression evaluates to true ; it returns an integer value of otherwise .
In , any nonzero value is treated as true .

Chapter introduced the data type bool .
Recall that the data type bool has two values : true and false .
In , true and false are reserved words .
The identifier true is set to , and the identifier false is set to .
For readability , whenever logical expressions are used , the identifiers true and false will be used here as the value of the logical expression .

Now that we know how relational operators work , we can start learning how to implement decisions in program .
Although there are only two logical values , true and false , they turn out to be extremely useful because they permit programs to incorporate decision making that alters the processing flow .
The remainder of this chapter discusses ways to incorporate decisions into program .
In , there are two selections , or branch control structures : if statements and the switch structure .
This section discusses how if and if .
The switch structure is discussed later in this chapter .

Selection bank would like to send notice to customer if her or his checking account balance falls below the required minimum balance .
That is , if the account balance is below the required minimum balance , it should send notice to the customer ; otherwise , it should do nothing .
Similarly , if the policyholder of an insurance policy is nonsmoker , the company would like to apply discount to the policy premium .
Both of these Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In , selections are incorporated using the if statement .
The syntax of selection is : statement Note the elements of this syntax .
It begins with the reserved word if , followed by an expression contained within parentheses , followed by statement .
Note that the parentheses around the expression are part of the syntax .
The expression is sometimes called decision maker because it decides whether to execute the statement that follows it .
The expression is usually logical expression .
If the value of the expression is true , the statement executes .
If the value is false , the statement does not execute .
The statement following the expression is sometimes called the action statement .
Figure shows the flow of execution of the if statement .

If the expression evaluates to false , the assignment statement does not execute .
For example , if the value of is , the value assigned to the variable is .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Control Structures EXAMPLE to compute and output the penalty on an unpaid card balance .
The program assumes that the interest on the unpaid balance is per month .

Sample Run : In this sample run , the user input shaded .

Line : Enter credit card  Line : Enter the payment : Line : The  Line : The to be added to your next month bill  The statements in Lines to declare the variables used in the program .
The statement in Line prompts the user to enter the credit card billing amount .
The statement in Line inputs the amount into the variable creditCardBalance .
The statement in Line Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The statement in Line inputs the payment into the variable payment .
The statement in Line computes the unpaid .
The if statement in Line determines if the unpaid positive .
If the unpaid positive , the statement in Line computes the .
The statements in Lines and output the results .
This program assumes that the interest rate on the unpaid per year  per .
As you can see the interest rate on the unpaid can quickly add up and ruin your credit ratings as well as put you in financial trouble .

EXAMPLE Consider the following .

Putting semicolon after the parentheses following the expression in an if statement  before the semantic error .
If the semicolon immediately follows the closing parenthesis , the if statement will operate on the empty statement .

EXAMPLE Consider the following .

Because there semicolon at the end of the expression Line , the if statement in Line terminates .
The action of this if statement null , and the statement in Line not part of the if statement in Line .
Hence , the statement in Line executes regardless of how the if statement evaluates .

Selection There are many programming situations in which you must choose between two alternatives .
For example , if employee works overtime , the paycheck calculated using the overtime payment formula ; otherwise , the paycheck calculated using the regular formula .
This an example of selection .
To choose between two  to implement provides the if .

selection uses the following syntax : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Control Structures else Take moment to examine this syntax .
It begins with the reserved word if , followed by logical expression contained within parentheses , followed by statement , followed by the reserved word else , followed by second statement .
Statements and are any valid statements .
In selection , if the value of the expression true , executes .
If the value of the expression false , executes .

Figure shows the flow of execution of the if .

FIGURE true selection EXAMPLE Consider the following statements : rate + rate .

If the value of the variable hours greater than , the overtime payment .
Suppose that hours .
The expression in the if statement , in Line , evaluates to true , so the statement in Line executes .
On the other hand , if hours or any number less than or equal to , the expression in the if statement , in Line , evaluates to false .
In this case , the program skips the statement in Line and executes the statement in Line  the statement following the reserved word else executes .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

EXAMPLE The following program determines an weekly .
If the hours worked .

Line : Enter working hours and rate : Line : The The statement in Line declares the variables used in the program .
The statement in Line sets the output of the numbers in decimal format , with decimal point , trailing zeros , and two decimal places .
The statement in Line prompts the user to input the number of hours worked and the pay rate .
The statement in Line inputs these values into the variables hours and rate , respectively .
The statement in Line checks whether the value of the variable hours is greater than .
If hours is greater than , then the calculated by the statement in Line , which includes overtime payment .
Otherwise , the calculated by the statement in Line .
The statement in Line outputs the .

In selection statement , putting semicolon after the expression and before creates syntax error .
If the if statement ends with semicolon , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Control Structures is no longer part of the if statement , and the else part of the if .
There is no else statement in .

That is , it cannot be separated from the if statement .

EXAMPLE The following statements show an example of syntax .

The semicolon at the end of the if statement Line ends the if statement , so the statement in Line separates the else clause from the if statement .

Because there is no else statement in , this code generates syntax error .
As shown in Example , in selection , the semicolon at the end of an if statement is logical error , whereas as shown in this example , in selection , it is syntax error .

Let us now consider another example of an if statement and examine some of the semantic errors that can occur .

EXAMPLE Consider the following .

If the expression evaluates to false , the output statement in Line does not execute .

That is , this set of statements performs the same action as an if .
It will execute the output statement in Line rather than the output statement in Line .
For example , if the value of is , these statements will output the following line : However , if the expression evaluates to true , the program will execute both of the output statements , giving very unsatisfactory result .
For example , if the value of is , these statements will output the following lines : The if statement controls the execution of only the statement in Line .
The statement in Line always executes .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Now the logical expression evaluates to true or false .
So we used two different values of for which the logical expression evaluated to true and the other for which it evaluated to false .
This is an example of thoroughly testing your code .

The correct code to print or  depending on the value of  is : endl ; else " endl ; int Data Type and Logical Expressions values true and false .
Because logical expressions evaluate to either or , the value of logical expression was stored in variable of the data type int .
Therefore , you can use the int data type to manipulate logical expressions .

Recall that nonzero values treated as true .
Now , consider the declarations : int .

If you regard as logical variable , the value of assigned by this .

The assignment statement : assigns the value to if the value of is greater than or equal to .
The statement assigns the value if the value of is less than .

It is interesting to note that evaluates to true .
However , evaluates to because as logical expression evaluates to , so evaluates to .

Recall that in , bool , true , false reserved words .
In addition , the identifier true has the value , the identifier false has the value .
Now , consider the following declaration : bool  int  Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Control Structures .

This statement assigns the value false to if the value of is less than .
For example , if the value of is , the value assigned to is is ,

Similarly , if the value of is , the value assigned to is is ,

You can use either an int variable or bool variable to store the value of logical expression .
For the purpose of clarity , this book uses bool variables to store the values of logical expressions .

Logical Operators Logical Expressions Examples show how to incorporate selection statements in program .

However , the logical expressions used in these examples involve the evaluation of single relational operator .
There are situations when the logical expression is combination of two or more logical expressions .
For example , suppose weight height are double variables .
Consider the following logical expression : weight height This logical expression is combination of the logical expressions weight height , these logical expressions are combined using the word " So how do we evaluate implement such expressions in .

This section describes how to form evaluate logical expressions that are combinations of other logical expressions .
Logical operators enable you to combine logical expressions .
has three logical operators , as shown in Table .

TABLE Logical Operators in .

The operators are binary operators there is no space within these operators .
Tables , define these operators .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Table defines the operator .

EXAMPLE Expression Value .

TABLE The Operator .

EXAMPLE Expression Value .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Control Structures Table defines the operator .
From this table , it follows that is if and only if at least one of the expressions , or , is  otherwise , evaluates to false .

TABLE The Operator .

EXAMPLE Expression Value .

Order of Precedence Complex logical expressions can be difficult to evaluate .
Consider the following logical expression : This logical expression yields different results , depending on whether or is evaluated first .
If is evaluated first , the expression evaluates to false .
If is evaluated first , the expression evaluates to .

An expression might contain arithmetic , relational , and logical operators , as in the expression : + To work with complex logical expressions , there must be some priority scheme for evaluating operators .
Table shows the order of precedence of some operators , including the arithmetic , relational , and logical operators .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The meaning of these operators is different from the meaning of and .
Using in place of or in place of might result from typographical produce very strange results .

Using the precedence rules in an expression , relational and logical operators are evaluated from left to right .

Example illustrates how logical expressions consisting of variables are evaluated .

EXAMPLE Suppose you have the following .

Control Structures Consider the following expressions : Expression Value Explanation .

Therefore , which evaluates to false .

Note that if the value of logical expression true , it evaluates to , if the value of the logical expression false , it evaluates to .
The Web site accompanying this book contains the program , which evaluates these expressions .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

You can insert parentheses into an to clarify its meaning .
You can also use parentheses to override the precedence of operators .
Using the standard order of precedence , the  equivalent to : In this  true , true ,
Substitute these values in the to get true true true .

In , logical expressions can be manipulated or processed in either of two ways : by using int variables or by using bool variables .
The following sections describe these methods .

EXAMPLE more than inches or the weight more than pounds , then the airline may apply additional charges to the passenger .
The following program uses the logical operator in an if statement to determine if additional charges may be applied to suitcase .

Control Structures .

Sample Run : Line : Enter suitcase dimensions + width + in inches : Line : Enter suitcase weight : Line : Additional suitcase charges : Relational Operators the string Type The relational operators can be applied to variables of type string .
Variables of type string are compared character by character , starting with the first character using the ASCII collating sequence .
The comparison continues until either mismatch found or the last characters have been compared are equal .
The following example shows how variables of type string are compared .

EXAMPLE Suppose that you have the following statements : string string string string string .

Value true "
The first characters of are the same , but the second character ' of is less than the second character ' of .

The first two characters of " are the same , but the third character ' of is less than the third character ' of .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The first characters of " are the same , but the second character ' of " is less than is true .

The first character ' of is less than the first character ' of " because the ASCII value of ' is , the ASCII value of ' is .

The first character ' of is less than the first character ' of .

The first character ' of is greater than the first character ' of .

If two strings of different lengths are compared and the comparison is equal until it reaches the last character of the shorter string , the shorter string is evaluated as less than the larger string , as shown next .

Expression false .
It has four characters , and " has five characters .
All four characters of are the same as the corresponding first four characters of , and " is the larger string .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Control Structures Compound Statements The if and if .
Suppose , however , that you want to execute more than one statement if the expression in an if or if .
To permit more complex statements , provides structure called compound statement or block of statements .
compound statement takes the following form :

Thus , instead of having simple selection similar to the following code : to " endl ; else eligible to "

Multiple Selections : Nested if In the previous sections , you learned how to implement and selections in program .
Some problems require the implementation of more than two alternatives .

For example , suppose that if the checking account balance is more than , the interest rate is ; if the balance is between and , the interest rate is ; if the balance is between and , the interest rate is ; otherwise , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

This particular problem has four is , multiple selection paths .
You can include multiple selection paths in program by using an if .
When one control statement is located within another , it is said to be nested .

Example illustrates how to incorporate multiple selections using nested if .

EXAMPLE Suppose that and are variables of type double .
The following statements determine the depending on the value of the  else ; else .

Recall that in , there is no else statement .

The rule to pair an else with an if is as follows : Pairing an else with an if : In nested if statement , associates an else with the most recent incomplete is , the most recent if that has not been paired with an else .

Using this rule , in Example , the else in Line is paired with the if in Line .
The else in Line is paired with the if in Line , and the else in Line is paired with the if in Line .

This means that the block for each else extends from the else all the way to line .

To avoid excessive indentation , the code in Example can be rewritten as follows :

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Control Structures EXAMPLE Assume that is variable of type int .
Based on the value of  the following code outputs the grade : grade grade grade grade else grade .

EXAMPLE Assume that all variables are properly declared , and consider the following statements : day for " endl ; else .

Note that the else in Line cannot be paired with the if in Line .
If you pair the else in Line with the if in Line , the if in Line becomes the action statement part of the if in Line , leaving the else in Line dangling .
Also , the statements in Lines though form the statement part of the if in Line .
The indentation does not determine the pairing , but should be used to communicate the pairing .

EXAMPLE Assume that all variables are properly declared , and consider the following statements : day for "

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Note that for the else in Line , the most recent incomplete if is in Line .
In this code , the if in Line has no else and is selection .
Once again , the indentation does not determine the pairing , but it communicates the pairing .
Note that if the value of is less than , this code renders no decision .

EXAMPLE Assume that all variables are properly declared , and consider the following statements : policyRate else policyRate else if policyRate else policyRate .

Note that for the else in Line , the most recent incomplete if is the if in Line .
The else in Line is paired with the if in Line .
The else in Line is paired with the if in Line .
Once again , the indentation does not determine the pairing , but it communicates the pairing .

Comparing Statements with Series of if Statements Consider the following program segments , both of which accomplish the same task :

All Rights Reserved .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Control Structures .

Both program segments accomplish the same thing .
If is , then both program segments output .
If is , then in program segment , the expression in the if statement in Line evaluates to true .
The statement Line associated with this if then executes ; the rest of the structure , which is the else of this if statement , is skipped ; and the remaining if statements are not evaluated .
In program segment , the computer has to evaluate the expression in each if statement because there is no else statement .
As consequence , program segment executes more slowly than does program segment .

In sequence of statements , such as , if more than one condition is true , only the statements associated with the first true condition will be executed .
On the other hand , in series of if statements , such as , if more than one condition evaluates to true , statements associated with each true condition will execute .

Evaluation Logical expressions in are evaluated using highly efficient algorithm .
This algorithm is illustrated with the help of the following .

In the statement in Line , the two operands of the operator are the expressions is true or the operand is true .
With evaluation , the computer evaluates the logical expression from left to right .
As soon as the final value of the entire logical expression is known , the evaluation stops .
For example , in statement , if the operand evaluates to true , then the entire expression evaluates to true because true true is true and true false is true .
Therefore , the value of the operand has no bearing on the final outcome .

If the operand evaluates to false , then the entire expression evaluates to false because false true is false and false false is false .

Copyright Cengage Learning .
All Rights Reserved .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

evaluation logical : process in which the computer evaluates logical expression from left to right and stops as soon as the final value of the expression is known .

EXAMPLE Consider the following .

For the expression in Line , suppose that the value of is .

Due to evaluation , the computer does not evaluate the expression .

Similarly , for the expression in Line , suppose that the value of is ' is false and the logical operator used in the expression is , the expression evaluates to false .
The computer does not evaluate .

Comparing Numbers for Equality : Precaution Comparison of numbers for equality may not behave as you would expect .

Copyright Cengage Learning .
All Rights Reserved .
Due to electronic rights , some third party content may be suppressed from the eBook .

Control Structures .

Sample Run : + + and are not the .

In this program , is initialized to and is initialized to + +
Now , due to rounding , as shown by the output , this expression evaluates to .
Therefore , the expression evaluates to false .
However , if you evaluate the expression + + by hand using paper and pencil , you will + + + +
That is , the value of should be set to and should be equal to .

The preceding program and its output show that you should be careful when comparing numbers for equality .
One way to check whether two numbers are equal is to check whether the absolute value of their difference is less than certain .
For example , suppose the is .
Then , and are equal if the absolute value of is less than .
To find the absolute value , you can use the function fabs the absolute value of , of the header file cmath , as shown in the program .
Therefore , the expression determines whether the absolute value of is less than .

Associativity of Relational Operators : Precaution Sometimes logical expressions do not behave as you might expect , as shown by the .

Sample Runs : In these sample runs , the user input is shaded .

Sample Run : Enter an integer : is within .

Sample Run : Enter an integer : is within .

Sample Run : Enter an integer : is within .

Clearly , Sample Run is correct Sample Runs are incorrect .
Now , the statement is supposed to determine whether an integer is between .

So the problem is in the expression in the statement .
Let us look at this expression , which is : Although this statement is legal expression , you do not the desired result .
Let us evaluate this expression for certain values of .
Suppose that the value of is .
Then : relational operators is  Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time subsequent rights restrictions require it .

Control Structures Now , suppose that .
Then : relational operators are is  Now , you can see why the evaluates to when is .
Similarly , is , the evaluates to .
In fact , this will always evaluate to  no matter what is .
This is due to the fact that the evaluates to either or , is is .

correct way to write this in is : Using the precedence of operators the is the as .

You must take care when formulating logical expressions .
When creating complex logical  you must use the proper logical operators .

Avoiding Bugs by Avoiding Partially Understood Concepts Techniques The debugging sections in Chapters illustrated how to understand fix syntax logic errors .
In this section , we illustrate how to avoid bugs by avoiding partially understood concepts techniques .

The programs that you have written until now should have illustrated that small error such as the omission of semicolon at the end of variable declaration or using variable without properly declaring it can prevent program from successfully compiling .
Similarly , using variable without properly initializing it can prevent program from running correctly .
Recall that the condition associated with an statement must be enclosed in parentheses .
Therefore , the following will result in syntax error : Example illustrates that an unintended semicolon following the condition of the following .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time subsequent rights restrictions require it .

The approach that you take to solve problem must use concepts techniques correctly ; otherwise , your solution will be either incorrect or deficient .
The problem of using partially understood concepts techniques can be illustrated by the following program .

Suppose that we want to write program that analyzes students ' GPAs .
If the GPA is greater than or equal to , the student makes the honor list .
If the GPA is less than , the student is sent warning letter indicating that the GPA is below the graduation requirement .
So , consider the following .

Sample Run : Enter the GPA : Honor .

Sample Run : Enter the GPA : The GPA is below the graduation requirement .

See your academic .

Sample Run : Enter the GPA : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Control Structures Let us look at these sample runs .
Clearly , the output in Sample Run is correct .
In Sample Run , the input is the output indicates that this GPA is below the graduation requirement .
However , student with GPA of would graduate with some type of honor .
So , the output in Sample Run is incorrect .
In Sample Run , the input is , the output does not show any warning message .
Therefore , the output in Sample Run is also incorrect .

Let us look at these statements , that is : Honor " endl ; else .

In other words , using the correct indentation , the code is : Honor " endl ; else .

Therefore , if the input number is less than , no action will take place , that is , no warning message will be printed .
Now , suppose the input is .
Then , the in Line evaluates to true , so the in Line is evaluated , which evaluates to false .
This means the output statement in Line executes , resulting in an unsatisfactory result .

In fact , the program should print the warning message only if the GPA is less than , it should print the message : Honor .

To achieve that result , the else in Line needs to be paired with the if in Line .
To pair the else in Line with the if in Line , you need to use compound statement , as follows : Honor " endl ; else .

Sample Run : Enter the GPA : Honor .

Sample Run : Enter the GPA : Sample Run : Enter the GPA : The GPA is below the graduation requirement .

See your academic .

In cases such as this one , the general rule is that you cannot look inside of block is , inside the to pair an else with an if .
The else in Line cannot be paired with the if in Line because the if statement in Line is enclosed within braces , and the else in Line cannot look inside those braces .
Therefore , the else in Line is paired with the if in Line .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Control Structures In this book , the programming concepts and techniques are presented in logical order .
Understanding concept or technique completely before using it will save you an enormous amount of debugging time .

Input Failure and the if Statement In Chapter , you saw that an attempt to read invalid data causes the input stream to enter fail state .
Once an input stream enters fail state , all subsequent input statements associated with that input stream are ignored , and the computer continues to execute the program , which produces erroneous results .
You can use if statements to check the status of an input stream variable and , if the input stream enters the fail state , instructions that stop program execution .

In addition to reading invalid data , other events can cause an input stream to enter the fail state .
Two additional common causes of input failure are the .

Attempting to open an input file that does not exist Attempting to read beyond the end of an input file One way to address these causes of input failure is to check the status of the input stream variable .
You can check the status by using the input stream variable as the logical expression in an if statement .
If the last input succeeded , the input stream variable evaluates to true ; if the last input failed , it evaluates to false .

The statement : is " endl ; prints : Input is .

Similarly , if infile is an ifstream variable , the statement : endl ; prints : Input .

Suppose an input stream variable tries to open file for inputting data into program .
If the input file does not exist , you can use the value of the input stream variable , in conjunction with the return statement , to terminate the program .

Recall that the last statement included in the function main is : return ; Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

This statement returns value of to the operating system when the program terminates .

value of indicates that the program terminated normally and that no error occurred during program execution .
Values of type int other than can also be returned to the operating system via the return statement .
The return of any value other than , however , indicates that something went wrong during program execution .

Whenever return statement executes , it immediately exits the function in which it appears .
In the case of the function main , the program terminates when the return statement executes .
You can use these properties of the return statement to terminate the function main whenever the input stream fails .
This technique is especially useful when program tries to open an input file .
Consider the following .

Suppose that the file does not exist .
The operation to open this file fails , causing the input stream to enter the fail state .
As logical expression , the file stream variable infile then evaluates to false .
Because infile evaluates to false , the expression the if evaluates to true , and the body of the if statement executes .
The message : Cannot open the input file .

now use the code that responds to input failure by including these features in the Programming Example : Student Grade from Chapter .
Recall that this program calculates the average test score based on data from an input file and then outputs the results to another file .
The following programming code is the same as the code from Chapter , except that it includes statements to exit the program if the input file does not exist .

Confusion between the and the Recall that if the expression in the if structure evaluates to true , the statement part of the if structure executes .
In addition , the expression is usually logical expression .
However , allows you to use any expression that can be evaluated to either true or false as an expression in the if structure .
Consider the following statement : is " endl ; The is , the decision the if statement is .
The expression is called an assignment expression because the appears in the expression and there is no semicolon at the end .

This expression is evaluated as follows .
First , the right side the is evaluated , which evaluates to .

Moreover , the is , the new becomes the the expression in the if is , the the assignment expression .
Because is nonzero , the expression in the if statement evaluates to true , so the statement part the if statement outputs : The is .

In general , the expression , where is nonzero integer , will always evaluate to true .

However , the expression will evaluate to false .

No matter how experienced programmer is , almost everyone makes the mistake in place at one time or another .
One reason why these two operators are often confused that some programming languages as an equality .
Thus , experience with such programming languages can create confusion .
Sometimes the error merely typographical , another reason to be careful when typing code .

Despite the fact that an assignment expression can be used as an expression , the assignment in place the equality can cause serious problems in program .
For example , suppose that the discount on car insurance policy based on the driving record .
driving record means that the driver and receives discount on the policy .
The statement : discount on the policy " endl ; outputs : The discount on the policy .

However , the statement : discount on the policy " endl ; always outputs : The discount on the policy .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Control Structures because the right side the assignment expression evaluates to , which nonzero and so evaluates to true .
Therefore , the expression in the if statement evaluates to true , outputting the following line text : The discount on the policy .
Also , the assigned to the variable .
Suppose that before the if statement executes , the the variable .
After the if statement executes , not only the output wrong , but the new also replaces the old driving code .

The appearance in place resembles silent killer .
It not syntax error , so the compiler does not warn you an error .
Rather , it logical error .

Chapter discusses looping structures .

The appearance the equality in place the assignment can also cause errors in program .
For example , suppose  and are int variables .

If somewhere else in the program you are counting on the being + logic error will occur , the program output will be incorrect , and you will receive no warning this situation from the compiler .
The compiler only provides feedback about syntax errors , not logic errors .
For this reason , you must extra care when working with the equality and the assignment .

The reader can skip this section without any discontinuation .

The conditional  written as , ternary  which means that it takes three arguments .
The syntax for the conditional 
The conditional expression evaluated as follows : If evaluates to nonzero integer  to , the result the conditional expression .
Otherwise , the result the conditional expression .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Consider the following .

Now that we have started discussing control structures , in this section , we give some general guidelines to properly indent your program .

As you write programs , typos and errors are unavoidable .
If your program properly indented , you can spot and fix errors quickly , as shown by several examples in this chapter .
Typically , the IDE that you will automatically indent your program .
If for some reason your IDE does not indent your program , you can indent your program yourself .

Proper indentation can show the natural grouping and subordination statements .
You should insert blank line between statements that are naturally separate .
In this book , the statements inside braces , the statements selection structure , and an if statement within an if statement are all indented four spaces to the right .
Throughout the book , we four spaces to indent statements , especially to show the levels control structures within other control structures .
Note that for larger more complex programs , there tradeoff with the indentation spacing and readability due to continuation lines .
Some programs indent only two or three spaces if there are several levels subordination .

There are two commonly used styles for placing braces .
In this book , we place braces on line by themselves .
Also , matching left and right braces are in the same column , that  they are the same number spaces away from the left margin .
This style placing braces easily shows the grouping the statements and also matches left and right braces .
You can also follow this style to place and indent braces .

In the second style placing braces , the left brace need not be on line by itself .

Typically , for control structures , the left brace placed after the last right parenthesis the expression , and the right brace on line by itself .
This style might save some vertical space .
However , sometimes this style might not immediately show the grouping or the block the statements and results in slightly poorer readability .

No matter what style indentation you  you should be consistent within your programs , and the indentation should show the structure the program .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Pseudocode to Develop , Test , and Debug Program Pseudocode to Develop , Test , and Debug Program There are several ways to develop program .
One method involves using an informal mixture and ordinary language , called pseudocode or just pseudo .
Sometimes pseudo provides useful means to outline and refine program before putting it into formal code .
When you are constructing programs that involve complex nested control structures , pseudo can help you quickly develop the correct structure the program and avoid making common errors .

One useful program segment determines the larger two integers .
If and are integers , using pseudo , you can quickly write the .

If the statement in is true , then is larger .
However , for this code to work in concert to determine the larger two integers , the computer needs to evaluate both expressions : and even if the first statement is true .
Evaluating both expressions when the first one is true is waste computer time .

rewrite this pseudo as follows : if then is larger else is larger Here , only one condition needs to be evaluated .
This code looks okay , so put it .

The variables were not declared , which is very common oversight , especially for new .
If you examine the pseudo , you will see that the program needs three variables , and you might as well make them .
start the program code again : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Compiling this program will result in the identification of common syntax error Line .
Recall that semicolon cannot appear after the expression in the if .
However , even after you correct this syntax error , the program still would not give satisfactory results because it tries to use identifiers that have no values .
The variables have not been initialized , which is another common error .
In addition , because there are no output statements , you would not be able to see the results of the program .

Because there are so many mistakes in the program , you should try to see whether it works at all .
You should always use wide range of values in several walkthroughs to evaluate the program under as many different circumstances as possible .
For example , does this program work if one number is zero , if one number is negative and the other number is positive , if both numbers are negative , or if both numbers are the same .
Examining the program , you can see that it does not check whether the two numbers are equal .
Taking all of these points into account , you can rewrite the program as follows : Compare Numbers .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Sample Run : In this sample run , the user input shaded .

Enter any two integers : The two integers entered are The number One thing you can learn from the preceding program that you must first develop program using paper pencil .
Although program that first written on piece of paper not guaranteed to run successfully on the first try , this step still good starting point .
On paper , it easier to spot errors improve the program , especially with large programs .

The first selection structure , which implemented with if if .
The second selection structure , which does not require the evaluation of logical expression , called the switch structure .
switch structure gives the computer the power to choose from among many alternatives .

general syntax of the switch statement  case : break ; case :

In switch structure , first the expression evaluated .
The value of the expression then used to choose Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Recall that in syntax , shading indicates an optional part of the definition .

Although it need not be , the expression usually an identifier .
Whether it an identifier or an expression , the value can be only integral .
The expression sometimes called the selector .

Its value determines which statement selected for execution .
particular case value should appear only once .
One or more statements may follow case label , so you do not need to use braces to turn multiple statements into single compound statement .

The general diagram to show the syntax of the switch statement not straightforward because following case label statement break statement may or may not appear .
Keeping these in mind , Figure shows the flow of execution of switch statement .
Note that in the figure following case value , the box containing statement the box containing break may or may not appear .
Following the figure , we give the general rules that switch statement follows .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

When the value of the expression matched against case value called , the statements execute until either break statement found or the end of the switch structure reached .

If the value of the expression does not match any of the case values , the statements following the default label execute .
If the switch structure has no default label if the value of the expression does not match any of the case values , the action of the switch statement null .

break statement causes an immediate exit from the switch structure .

EXAMPLE Consider the following statements , in which grade variable of type char : case : break ; case : break ; case : break ; case : break ; case : cout break ;

In this switch statement , the expression , grade , is variable of type char , which is an integral type .
The possible values of grade are , and .
Each case label specifies different action to take , depending on the value of grade .
If the value of grade is , the output is : The grade point is .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

EXAMPLE The following program illustrates the effect of the break statement .
It asks the user to input number between and .

In each of these sample runs , the user input is shaded .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : Enter an integer between and : The number you entered is switch .

Sample Run : Enter an integer between and : The number you entered is Out of the switch .

Sample Run : Enter an integer between and : The number you entered is This program shows the effect of the break .

Sample Run : Enter an integer between and : The number you entered is of the break .

Sample Run : Enter an integer between and : The number you entered is The number is out of .

of this program , using certain values of the switch expression num , can help you understand how the break functions .
If the value of num is , the value of the switch expression matches the case value .
All statements following case : execute until break appears .

The first break appears in Line , just before the case value of .
Even though the value of the switch expression does not match any of the case values , or , the statements following these values execute .

When the value of the switch expression matches case value , all statements execute until break is encountered , and the program skips all case labels in between .
Similarly , if the value of num is , it matches the case value of , and the statements following this Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

If the value of num is , it matches the case value of .
In this situation , the action is empty because only the break  in Line , follows the case value of .

EXAMPLE Although switch case values are limited , the switch expression can be as complex as necessary .
For example , consider the following switch  case : case : case : case : case : case :

Assume that is an int variable with values between and .

Each of these values corresponds to the .

Therefore , in this switch  the action statements of case , case , case , case , case , and case are all the same .
Rather than write the ; followed by the break statement for each of the case values of , and , you can simplify the programming code by first specifying all of the case values shown in the preceding and then specifying the desired action statement .
The case values of and follow similar conventions .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Consider the following statements : switch case : break ; case :

If the value of is , the expression evaluates to is , true .
If the expression evaluates to , the statements following the case label execute .
If the value of is , the expression evaluates to is , the statements following the case label execute .

You can use true and false , instead of and , respectively , in the case labels , and rewrite the preceding switch statement as follows : switch case true : break ; case false :

As you can see from the preceding examples , the switch statement is an elegant way to implement multiple selections .
You will see the use of switch statement in the programming example at the end of this chapter .
Even though no fixed rules exist that can be applied to decide whether to use an if .
If multiple selections involve range of values , you can use either switch structure you convert each range to finite set of , or an structure .

For instance , in Example , the value of depends on the value of .

Because is an int variable , values correspond to the of .
If you list all values as case values , the switch statement could be very long .
However , dividing by reduces these values to only values : and .

If the range of values consists of infinitely many values and you cannot reduce them to set containing finite number of values , you must use the if .
For example , if happens to be double variable and fractional scores are possible , the number of values between and is infinite .
However , you can use the expression and still reduce this infinite number of values to just six values .

Avoiding Bugs by Avoiding Partially Understood Concepts Earlier in this chapter , we discussed how partial understanding of concept or technique can lead to errors in program .
In this section , we give another example to illustrate the problem of using partially understood concepts and techniques .
In Example , we illustrate how to assign based on test between and .
Next , consider the following program that assigns based on test .

Sample Runs : In these sample runs , the user input is shaded .

Sample Run : Enter the test  Invalid test .

Sample Run : Enter the test  Invalid test .

Sample Run : Enter the test  The grade is The grade is The grade is Invalid test .

From these sample runs , it follows that if the value of testScore is less than or greater than , the program produces correct results , but if the value of testScore is between and , say , the program produces incorrect results .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

As in Sample Run , suppose that the value of is .
So , as we indented , it should print The grade is .

However , the output is : The grade is .

Clearly only at most one statement is associated with each case label .

The problem is result of having only partial understanding of how the switch structure works .

Therefore , after executing the associated with the matching case label , execution continues with the associated with the next case label , resulting in the printing of four unintended lines .

To output results correctly , the switch structure must break statement after each statement , except the last statement .
We leave it as an exercise for you to modify this program so that it outputs correct results .

Once again , we can see that partially understood concept can lead to serious errors in program .
Therefore , taking time to understand each concept and technique completely will save you hours of debugging time .

Terminating Program with the assert Function Certain types of errors that are very difficult to catch can occur in program .
For example , division by zero can be difficult to catch using any of the programming techniques you have examined so far .
includes predefined function , assert , that is useful in stopping program execution when certain elusive errors occur .
In the case of division by zero , you can use the assert function to ensure that program terminates with an appropriate error message indicating the type of error and the program location where the error occurred .

Consider the following .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Terminating Program with the assert Function In the first statement , if the denominator is , logically you should not perform the division .
During execution , however , the computer would try to perform the division .
If the denominator is , the program would terminate with an error message stating that an illegal operation has occurred .

The second statement is designed to compute only if hours is greater than and is positive and less than or equal to .
The third statement is designed to execute certain statements only if is an uppercase letter .

For all of these statements that matter , in any , if conditions are not met , it would be useful to halt program execution with message indicating where in the program an error occurred .
You could handle these types of situations by including output and return statements in your program .
However , provides an effective method to halt program if required conditions are not met through the assert function .

The syntax to use the assert function is : Here , expression is any logical expression .
If expression evaluates to true , the next statement executes .
If expression evaluates to false , the program terminates and indicates where in the program the error occurred .

The specification of the assert function is found in the header file cassert .
Therefore , for program to use the assert function , it must the following statement : statement using the assert function is sometimes called an assert statement .

Returning to the preceding statements , you can rewrite statement numerator using the assert function .
Because should be calculated only if denominator is nonzero , you an assert statement before the assignment statement as follows : numerator denominator ; Now , if denominator is , the assert statement halts the execution of the program with an error message similar to the following : Assertion failed : denominator , file , line This error message indicates that the assertion of denominator failed .
The error message also gives the name of the file containing the source code and the line number where the assertion failed .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Assertion failed : file , line You can also rewrite statement using an assertion statement as .

As you can see , the assert statement not only halts the program , but also identifies the expression where the assertion failed , the name of the file containing the source code , and the line number where the assertion failed .

Although assert statements are useful during program development , after program has been developed and put into use , if an assert statement fails for some reason , an end user would have no idea what the error means .
Therefore , after you have developed and tested program , you might want to remove or disable the assert statements .
In very large program , it could be tedious , and perhaps impossible , to remove all of the assert statements that you used during development .
In addition , if you plan to modify program in the future , you might like to keep the assert statements .
Therefore , the logical choice is to keep these statements but to disable them .
You can disable assert statements by using the following preprocessor directive : NDEBUG This preprocessor directive NDEBUG must be placed before the directive .

Watch the Video Cable Company Billing This programming example demonstrates program that calculates bill for local cable company .
There are two types of customers : residential and business .

There are two rates for calculating cable bill : one for residential customers and one for business customers .
For residential customers , the following rates .

Bill processing fee : Basic service fee : Premium channels : per channel Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Cable Company Billing .

Bill processing fee : Basic service fee : for first connections , for each additional connection Premium channels : per channel for any number of connections The program should ask the user for an account number and customer code .
Assume that or stands for residential customer , and or stands for business customer PROBLEM ANALYSIS AND ALGORITHM DESIGN Input The account number , customer code , number of premium channels to which the user subscribes , and , in the case of business customers , number of basic service connections .

Output account number and the billing amount .

The purpose of this program is to calculate and print the billing amount .
To calculate the billing amount , you need to know the customer for whom the billing amount is calculated the customer is residential or and the number of premium channels to which the customer subscribes .
In the case of business customer , you also need to know the number of basic service connections and the number of premium channels .
Other data needed to calculate the bill , such as the bill processing fees and the cost of premium channel , are known quantities .
The program should print the billing amount to two decimal places , which is standard for monetary amounts .
This problem analysis translates into the following algorithm :
Set the precision to two decimal places .

Prompt the user for the account number and customer type .

Based on the customer type , determine the number of premium channels and basic service connections , compute the bill , and print the bill :
If the customer type is or ,
Prompt the user for the number of premium channels .

Compute the bill .

Print the bill .

If the customer type is or ,
Prompt the user for the number of basic service connections and number of premium channels .

Compute the bill .

Print the bill .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Variables Because the program will ask the user to input the customer account number , customer code , number of premium channels , and number of basic service connections , you need variables to store all of this information .
Also , because the program will calculate the billing amount , you need variable to store the billing amount .
Thus , the program needs at least the following variables to compute and print the .

Named As you can see , the bill processing fees , the cost of basic service connection , and the Constants cost of premium channel are fixed , and these values are needed to compute the bill .

Although these values are constants in the program , the cable company can change them with little warning .
To simplify the process of modifying the program later , instead of using these values directly in the program , you should declare them as named constants .
Based on the problem analysis , you need to declare the following named .

The following statement calculates the billing amount for residential customer : + + numOfPremChannels  To compute the business bill , you need to know the number of basic service connections and the number of premium channels to which the user subscribes .
If the number of basic service connections is less than or equal to , the cost of the Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Cable Company Billing .

If the number of basic service connections exceeds , you must add the cost for each connection over .
The following statement calculates the business billing amount : + + numOfPremChannels  else + + numOfPremChannels  MAIN ALGORITHM Based on the preceding discussion , you can now write the main algorithm .

To output numbers in fixed decimal format with decimal point and trailing zeros , set the manipulators fixed and showpoint .
Also , to output numbers with two decimal places , set the precision to two decimal places .
Recall that to use these manipulators , the program must include the header file iomanip .

Prompt the user to enter the account number .

Get the customer account number .

Prompt the user to enter the customer code .

Get the customer code .

If the customer code is or ,
Prompt the user to enter the number of premium channels .

Get the number of premium channels .

Calculate the billing amount .

Print the account number and the billing amount .

If the customer code is or ,
Prompt the user to enter the number of basic service connections .

Get the number of basic service connections .

Prompt the user to enter the number of premium channels .

Get the number of premium channels .

Calculate the billing amount .

Print the account number and the billing amount .

If the customer code is something other than , or , output an error message .

For Steps and , the program uses switch statement to calculate the bill for the desired customer .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Cable Company Billing case : case .

Sample Run : In this sample run , the user input is shaded .

This program computes cable .

Enter account number : Enter customer  or , or : Enter the number of basic service connections : Enter the number of premium channels : Account number : Amount due : QUICK REVIEW .

Control structures alter the normal flow of control .

The two most common control structures selection repetition .

Selection structures incorporate decisions in program .

The relational , or equal , or equal , equal .

Including space within the relational , creates syntax error .

Characters compared using collating sequence .

Logical expressions evaluate to nonzero or .
The logical value any nonzero is treated as true ; the logical value is treated as false .

There two selection structures in .

selection takes the following form : statement .

If expression is true , the statement executes ; otherwise , the statement does not execute .

selection takes the following form : else Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Including semicolon before the statement in selection creates semantic error .
In this case , the action of the if statement is empty .

Including semicolon before in selection creates syntax error .

There is no else statement in .

An else is paired with the most recent if that has not been paired with any other else .

In , int variables can be used to store the value of logical expression .

In , bool variables can be used to store the value of logical expression .

sequence of statements enclosed between curly braces , is called compound statement or block of statements .
compound statement is treated as single statement .

You can use the input stream variable in an if statement to determine the state of the input stream .

Using the assignment operator in place of the equality operator creates semantic error .
This can cause serious errors in the program .

The switch structure is used to handle multiway selection .

The execution of break statement in switch statement immediately exits the switch structure .

If certain conditions not met in program , the program can be terminated using the assert function .

EXERCISES The number in parentheses at the end of an exercise refers to the learning objective listed at the beginning of the chapter .

Mark the following statements as true or false :

The order in which statements execute in program is called the flow selection , if semicolon is placed after the expression in Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The expression :

The expression in switch statement should evaluate to value of the .

Determine whether the following expressions evaluate to true or .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Suppose that    are int variables ,

How does the output in Exercise change the statement in Line .

Write statements that output First Year the standing ,
Write statements that output First Year or Sophomore the standing ' or , Junior or Senior the standing ' or If the number of items bought less than , then the shipping charges are for each item bought ; the number of items bought at least , but less than , then the shipping charges are for each item bought ; the number of items bought at least , there are no shipping charges .

What the output of the program in Exercise , What the output of the program in Exercise , and Suppose that sale and bonus are double variables .
Assign the value to fine as follows : the value assigned to fine ; the value assigned to fine ; the value assigned to fine ; the value assigned to fine plus per ;  endl ;

What the output the value of .
Justify your answer .

What the output the value of .
Justify your answer .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time subsequent rights restrictions require it .

Answer the following .

What is the output in and the value of is .
What is the value of after the statement executes .

What is the output in and the value of is .
What is the value of after the statement executes .

Rewrite the following expressions using the conditional operator .

What is the value of the value of is .

What is the value of the value of is .

What is the value of the value of is .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

State whether the following are valid switch statements .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

What is the output if the input is .

What is the output if the input is .

What is the output if the input is .

What is the output if the input is .

What What What What is is is is the the the the output output output output if if if if the the the the input input input input is is is is .

What What What What is is is is the the the the output output output output if if if if the the the the input input input input is is is is .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

After correcting the code , answer the following questions .

What is the output if the input is .

What is the output if the input is .

The following program contains errors .
Correct them so that the program .

Write the missing statements in the following program so that it prompts the user to input two numbers .
If one of the numbers is or negative , the program outputs that both numbers must be positive .
If both the numbers are equal , it outputs the sum of the numbers ; if the first number is less than or equal to and both the numbers are not equal , it outputs the second number to the power of .

Suppose that classStanding is char variable , and gpa and dues are double variables .
Write switch expression that assigns the dues as follows : If classStanding is , the dues are ; if classStanding is ' gpa is at least , the dues are ; otherwise , dues are ; if classStanding is ' gpa is at least , the dues are ; otherwise , dues are ; if classStanding is ' gpa is at least , the dues are ; otherwise , dues are .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

If you pay the full amount , you get or of the billingAmount , whichever is smaller , as credit on your next bill ; if you pay at least of the billingAmount , the penalty is of the balance ; if you pay at least of the billingAmount and less than of the billingAmount , the penalty is of the balance ; otherwise , the penalty is of the balance .

Design an algorithm that prompts the user to enter the billing amount and the desired payment .
The algorithm then calculates and outputs the credit or the remaining balance .
If the amount is not paid in full , the algorithm PROGRAMMING EXERCISES .

Write program that prompts the user to input number .
The program should then output the number and message saying whether the number is positive , negative , or zero .

Write program that prompts the user to input three .
The program should then output the in ascending order .

Write program that prompts the user to input an integer between and .
If the number is less than or equal to , the program should output the number ; otherwise , it should output for , for , for .
Rearrange the statements so that they prompt the user to input the shape type , circle , or and the appropriate dimension of the shape .
The program then outputs the following information about the shape : For rectangle , it outputs the area and perimeter ; for circle , it outputs the area and circumference ; and for cylinder , it outputs the volume and surface area .
After rearranging the statements , your program should be properly indented .

In right triangle , the square of the length of one side is equal to the sum of the squares of the lengths of the other two sides .
Write program that prompts the user to enter the lengths of three sides of triangle and then outputs message indicating whether the triangle is right triangle .

box of cookies can hold cookies , and container can hold boxes of cookies .
Write program that prompts the user to enter the total number of cookies , the number of cookies in box , and the number of cookie boxes in container .
The program then outputs the number of boxes and the number of containers to ship the cookies .
Note that each box must contain the specified number of cookies , and each container must contain the specified number of boxes .
If the last box of cookies contains less than the number of specified cookies , you can discard it and output the number of leftover cookies .
Similarly , if the last container contains less than the number of specified boxes , you can discard it and output the number of leftover boxes .

The roots of the quadratic equation + bx + are given by the following formula : pﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ In this formula , the term is called the discriminant .
If , then the equation has single root .
If , the equation has two real roots .
If , the equation has two complex roots .
Write program that prompts the user to input the value of coefficient of , coefficient of , and constant and outputs the type of roots of the equation .
Furthermore , if , the program should output the roots of the quadratic equation .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Write program that mimics calculator .
The program should take as input two integers and the operation to be performed .
It should then output the  the operator , and the result .

Redo Exercise to .

If you do not spend any money to buy savings bonds , then because you had summer job , your parents buy savings bonds for you in an amount equal to of the money you save after paying taxes and buying clothes , other accessories , and school supplies .

If you spend up to of your net income to buy savings bonds , your parents spend for each dollar you spend to buy savings bonds , plus money equal to of the money you save after paying taxes and buying clothes , other accessories , and school supplies .

If you spend more than of your net income to buy savings bonds , your parents spend for each dollar you spend to buy savings bonds , plus money equal to of the money you save after paying taxes and buying clothes , other accessories , and school supplies .

Write program that implements the algorithm given in Example , which determines the monthly wages of salesperson .

Write program that implements the algorithm that you designed in Exercise of this chapter .

The number of lines that can be printed on paper depends on the paper size , the point size of each character in line , whether lines are or , the top and bottom margin , and the left and right margins of the paper .
Assume that all characters are of the same point size , and all lines are either or .
Note that points .

Moreover , assume that the lines are printed along the of the paper .
For example , if the length of the paper is inches and is inches , then the maximum length of line is inches .
Write program that calculates the number of characters in line and the number of lines that can be printed on paper based on the following input from the user :

The length and  in inches , of the paper The top , bottom , left , and right margins The point size of line If the lines are , then double the point size of each character Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The company offers two types of service : regular and premium .

Its rates vary , depending on the type of service .
The rates are computed as follows : Regular service : Premium service :

Charges for over minutes are per minute .

Your program should prompt the user to enter an account number , service code , and the number of minutes the service was used .
service code of or means regular service ; service code of or means premium service .
Treat any other character as an error .

Your program should output the account number , type of service , number of minutes the telephone service was used , and the amount due from the user .

For the premium service , the customer may be using the service during the day and the night .
Therefore , to calculate the bill , you must ask the user to input the number of minutes the service was used during the day and the number of minutes the service was used during the night .

Write program to implement the algorithm that you designed in Exercise of Chapter .
Also save the account balance after withdrawal in the file .

new is in the process of negotiating contract for new romance novel .
The publisher is offering three options .
In the first option , the is paid upon delivery of the final manuscript and when the novel is published .
In the second option , the is paid of the net price of the novel for each copy of the novel sold .
In the third option , the is paid of the net price for the first copies sold , and of the net price for the copies sold over .
The has some idea about the number of copies that will be sold and would like to have an estimate of the royalties generated under each option .
Write program that prompts the to enter the net price of each copy of the novel and the estimated number of copies that will be sold .
The program then outputs the royalties under each option and the best option the could choose .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Samantha and Vikas are looking to buy house in new .
After looking at various models , the three models they like are colonial , and .
The builder gave them the base price and the finished area in square feet of the three models .
They want to know the with the least price per square foot .
Write program that accepts as input the base price and the finished area in square feet of the three models .
The program outputs the with the least price per square foot .

One way to determine how healthy person is by measuring the body fat of the person .
The formulas to determine the body fat for female and male are as follows : Body fat formula for women : weight + wrist measurement fullest waist measurement hip measurement fullest forearm measurement fullest + + Body fat body weight Body fat percentage body fat body weight Body fat formula for men : weight + wrist measurement Body fat body weight Body fat percentage body fat body weight .

Write program to calculate the body fat of person .

Ron bought several acres of farm to grow and sell vegetables .
Suppose that Ron wants to grow maximum of two types of vegetables .
Write program that prompts Ron or the user to do the following :
Enter the total farm area in acres .

The number of vegetables or that the user wants to grow .

If the user wants to grow two types of vegetables , then specify the portion , as percentage , of the farm land used for each type of vegetable .

Enter the seed cost , plantation cost , fertilizing cost , labor cost , for each acre .

Enter vegetable selling price per acre .

Output the total revenue .

Output the .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

For special occasions , such as wedding or conference , the hotel offers special discount as follows : If the number of rooms booked is at least , the discount is ; at least , the discount is ; and at least , the discount is .
Also if rooms are booked for at least days , then there is an additional discount .
Write program that prompts the user to enter the cost of renting one room , the number of rooms booked , the number of days the rooms are booked , and the sales tax .
The program outputs the cost of renting one room , the discount on each room as percent , the number of rooms booked , the number of days the rooms are booked , the total cost of the rooms , the sales tax , and the total billing amount .
Your program must use appropriate named constants to store special values such as various discounts .

Let be line in the plane .
If is vertical line , its equation is for some real number .
Suppose is not vertical line and its slope is .
Then the equation of is mx , where is the .
If passes through the point , the equation of can be written as .
If , and , are two points in the plane and , the slope of the line passing through these points is .
Write program that prompts the user to enter two points in the plane .
The program outputs the equation of the line and uses if statements to determine and output whether the line is vertical , horizontal , increasing , or decreasing .
If is nonvertical line , output its equation in the form mx .

The first prime integers are , and .
positive integer between and , other than the first prime integers , is prime if it is not divisible by , and .
Write program that prompts the user to enter positive integer between and and that outputs whether the number is prime .
If the number is not prime , then output all the numbers , from the list of the first prime integers , which divide the number .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Explore how to construct and use , and repetition structures .

Learn how to debug loops Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

This chapter discusses how repetitions are incorporated in programs .

Why Is Repetition Needed .

David needs to lower his cholesterol count to stay physically fit and reduce the risk of heart attack , and he wants to accomplish this by doing regular exercises .
He decided to join gym and , among other measures , keep track of the number of calories burned each time he uses the gym .
At the end of each week he wants to determine the average number of calories burned each day .
We need to write program that David can use to enter the number of calories burned each day and get as output the average number of calories burned each day .
Suppose that the numbers of calories burned each day in particular week are : and .
To find the average number of calories burned each day , we must add these numbers and divide the total by .

From what we have learned so far , we can write the following program to find the average number of calories burned each day .

Why Is Repetition Needed .

Sample Run : In this sample run , the user input is shaded .

Enter calories burned day : Enter calories burned day : Enter calories burned day : Enter calories burned day : Enter calories burned day : Enter calories burned day : Enter calories burned day : Average number of calories burned each day : As you can see , this program requires us to declare seven variables to store seven numbers .

Now if David wants to determine the average number of calories burned each day of month , then we need to add and average about numbers , which will require us to declare at least variables , list them again in cin statements , and , perhaps , again in the output statements .
This takes an exorbitant amount of lines and time .
Also , if you want to run this program again with different number of values , you have to rewrite the program .

Next , let us see if there is better alternative .
The numbers we want to add are : and .

Consider the following statements , in which and calBurnedInOneDay .

Next , let us execute statements and three times .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

If we execute these two statements seven times , then contains the sum of the calories burned in week .

If you want to find the calories burned in days , then you can repeat statements and thirty times , and if you want to find the calories burned in days , you can repeat statements and one hundred times .
In either case , you do not have to declare any additional variables , as you did in the previous program .
However , as it is written now , we would have to rewrite statements and for each value of we want to add to .
We need structure that will tell the computer to repeat these same statements times , or times , or times , however many repetitions we want .
Then we can use this code to add any number of values , whereas the earlier code adds specific number of values and requires you to drastically change the code to change the number of values .

There are many other situations in which it is necessary to repeat set of statements .
For example , for each student in class , the formula for determining the course grade is the same .
has three repetition , or looping , structures that let you repeat statements over and over until certain conditions are met .
This chapter introduces all three looping structures .
The next section discusses the first repetition structure , called the while loop .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

has three repetition , or looping , structures that allow you to repeat set of statements until certain conditions are met .
This section discusses the first looping structure , called while loop .

The general form of the while statement is : statement In , while is reserved word .
Of course , the statement can be either simple or compound statement .
The expression acts as decision maker and is usually logical expression .
The statement is called the body of the loop .
Note that the parentheses around the expression are part of the syntax .
Figure shows the flow of execution of while loop .

If it initially evaluates to true , the statement executes .
The loop then reevaluated .
If it again evaluates to true , the statement executes again .
The statement of the continues to execute until the expression is no longer true .

loop that continues to execute endlessly is called an infinite loop .
To avoid an infinite loop , make sure that the body contains that assure that the entry expression in the while eventually be false .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : In this sample run , the user input is shaded .

Enter calories burned : Enter calories burned : Enter calories burned : Enter calories burned : Enter calories burned : Enter calories burned : Enter calories burned : Average number of calories burned each  Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

EXAMPLE Consider the following program .

The statements from Line to Line forms the while loop .
The expression in the while statement , is in Line , and the body of the while loop is from Line to Line .
The body of the while loop continues to execute as long as the expression evaluates to true .
The following table shows the iterations of the while loop .

The loop terminates The preceding while loop produces the following output : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Also , let us note the following :
In the sixth iteration , becomes but is not printed because the entry condition is false .

If you omit the statement : + from the body of the loop , you will have an infinite loop , continually printing rows of zeros .

You must initialize the loop control variable before you execute the loop .
If the statement : Line is omitted , the loop may not execute at all .
If the two statements in the body of the loop , Lines and , are interchanged , it may drastically alter the result .
For example , consider the following statements :

If you put semicolon at the end of the while loop the logical , then the action statement of the while loop is empty or null .
For example , the action statement of the following while loop is empty .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Typically , the expression checks whether variable , called the loop control variable , satisfies certain conditions .
For example , in Example , the expression in the while statement checks whether .
The LCV must be properly initialized before the while loop is encountered , and it should eventually make the expression evaluate to false .
We do this by updating or assigning new to the LCV in the body of the while loop .
Therefore , generally while loops are written in the following form : while tests the LCV .

The expression , in Line , checks whether is less than or equal to .
The statement in Line updates the of  which eventually makes greater than and the expression , evaluates to false .

It is possible that the expression in the while statement may contain more than one variable to control the loop .
In that case , the loop has more than one LCV and all LCVs must be properly initialized and updated .

EXAMPLE Consider the following program segment :

In this example , at Line , is initialized to , which makes the expression in the while statement evaluate to false .
Because initially the loop entry condition , is false , the body of the while loop never executes .
Hence , no values are output and the of remains .
This example demonstrates the importance of the to which the LCV is initialized .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The next few sections describe the various forms of while loops .

Case : while Loops Suppose you know exactly how many times certain statements need to be executed .
For example , suppose you know exactly how many pieces of data need to be read .

In such cases , the while loop assumes the form of while loop .

That is , the LCV serves as " Suppose that set of statements needs to be executed times .
You can set up to before the while to track how many items have been read .
Before executing the body of the while statement , the is compared with .
If , the body of the while statement executes .

The body of the loop continues to execute until the of .
Thus , inside the body of the while statement , the of increments by after it reads new item .
In this case , the while loop might look like the .

The program can prompt you to enter the number of items in the file and an input statement can read the you entered ; or you can specify the first item in the file as the number of items in the file , so that you need not remember the number of input values .

This is useful if someone other than the programmer enters the data .

EXAMPLE Students at local middle school volunteered to sell fresh baked cookies to raise funds to increase the number of computers for the computer lab .
Each student reported the number of boxes sold .
We will write program that will output the total number of boxes of cookies sold , the total revenue generated by selling the cookies , and the average number of boxes sold by each student .
The data provided is in the following form : studentName numOf BoxesSold Consider the following program : Loop program computes and outputs the total number of boxes of sold , the total revenue , and the average number of sold by each volunteer .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : In this sample run , the user is shaded .

Line : Enter the number of volunteers : Line : Enter the name and the number of boxes sold : Sara Line : Enter the name and the number of boxes sold : Lisa Line : Enter the name and the number of boxes sold : Cindy Line : Enter the name and the number of boxes sold : Nicole Line : Enter the name and the number of boxes sold : Blair Line : The total number of boxes sold : Line : Enter the cost of one box : Line : The total money made by selling cookies : Line : The average number of boxes sold by each volunteer : This program works as follows .
The statements in Lines to declare the variables used in the program .
The statement in Line prompts the user to enter the number of student volunteers .

The statement in Line inputs this number into the variable numOfVolunteers .
The statements in Lines and initialize the variables and The while statement in Line checks the value of to determine how many students ' data have been read .
If is less than numOfVolunteers , the while loop proceeds for the next iteration .
The statement in Line prompts the user to the name and the number of boxes sold by the student .

The statement in Line inputs the name into the variable name and the number of boxes sold by the student into the variable numOfBoxesSold .
The statement in Line updates the value of by adding the value of numOfBoxesSold to its current value and the statement in Line increments the value of by .
The statement in Line outputs the total number of boxes sold , the statement in Line prompts the user to the cost of one box of cookies , and the statement in Line inputs the cost in the variable .
The statement in Line outputs the total money made by selling cookies , and the statements in Lines through output the average number of boxes sold by each volunteer .

Note that is initialized to in Line in this program .
In Line , after reading the number of boxes sold by student , the program adds it to the sum of all the boxes sold before the current number of boxes sold .
The first numOfBoxesSold Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

To find the average , divide by .
If is , then dividing by zero will terminate the program and you will get an error message .
Therefore , before dividing by  you must check whether or not is .

Notice that in this program , the statement in Line initializes the LCV to .

The expression numOfVolunteers in Line evaluates whether is less than numOfVolunteers .
The statement in Line updates the value of .

Case : while Loops You do not always know how many pieces of data need to be read , but you may know that the last entry is special value , called sentinel , that will tell the loop to stop .
In this case , you must read the first item before the while statement so the test expression will have valid value to test .
If this item does not equal the sentinel , the body of the while statement executes .
The while loop continues to execute as long as the program has not read the sentinel .
Such while loop is called sentinelcontrolled while loop .
In this case , while loop might look like the .

However , the program assumes that the programmer knows the exact number of volunteers .
Now suppose that the programmer does not know the exact number of volunteers .
Once again , assume that the data is in the following form : name followed by space and the number of boxes sold by the student .
Because we do not know the exact number of volunteers , we assume that reading value of for name will mark the end of the data , since it is highly unlikely name to run into .
So consider the following program : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : In this sample run , the user is shaded .

Line : Enter each and the number of boxes sold by each volunteer , ending : Sara Lisa Cindy Nicole Blair Abby Amy Megan Elizabeth Meredith Leslie Chelsea Line : The total number of boxes sold : Line : Enter the cost of one box : Line : The total money made by selling cookies : Line : The average number of boxes sold by each volunteer : This program works as follows .
The statements in Lines to declare the variables used in the program .
The statement in Line prompts the user to enter the data ending .

The statements in Lines and initialize the variables and The statement in Line reads the first and stores it in .

The while statement in Line checks whether is not equal to .
The statement in Line reads and stores the number of boxes sold by the student in the numOfBoxesSold and the statement in Line updates the value of by adding numOfBoxesSold to it .
The statement in Line increments the value of by , and the statement in Line reads and stores the next into .
The statements in Lines through repeat until the program reads the .
The statement in Line outputs the total number of boxes sold , the statement in Line prompts the user to the cost of one box of cookies , and the statement in Line inputs the cost in the .
The statement in Line outputs the total money made by selling cookies , and the statements in Lines through output the average number of boxes sold by each volunteer .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Notice that the statement in Line initializes the LCV .
The expression in Line checks whether the value of is not equal to .
The statement in Line updates the LCV .

Next , consider another example of while loop .
In this example , the user is prompted to enter the value to be processed .
If the user wants to stop the program , he or she can enter the sentinel .

EXAMPLE Telephone Digits The following program reads the letter codes to and prints the corresponding telephone digit .
This program uses while loop .
To stop the program , the user is prompted for the sentinel , which is .
This is also an example of nested control structure , where and the while loop are nested .

Program to convert uppercase letters to their corresponding telephone digits .

Enter   Corresponding telephone  Enter another uppercase to find its corresponding telephone .

Enter   Corresponding telephone  Enter another uppercase to find its corresponding telephone .

Enter   Corresponding telephone  Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time subsequent rights restrictions require it .

Enter another uppercase to find its corresponding telephone .

Enter   Corresponding telephone  Enter another uppercase to find its corresponding telephone .

Enter   Corresponding telephone  Enter another uppercase to find its corresponding telephone .

Enter  This program works as follows .
The statements in Lines and tell the user what to do .

The statement in Line prompts the user to  the statement in Line reads and stores that into the variable .
The while loop at Line checks is .
If the entered by the user is not , the body of the while loop executes .
The statement at Line outputs the entered by the user .
The statement in Line determines the position of the in the English alphabet .
If the entered by the user is uppercase , the statements between Lines and determine and output the corresponding telephone .
If the entered by the user is not valid , the else executes .

Let us see how the statements in Lines to determine the corresponding telephone digits .
Now , the letters , and correspond to the telephone , letters , and correspond to the telephone , and so on .
Note that the letters , and correspond to telephone , and the letters , and correspond to the telephone .
The ASCII values of the letters , and , are , and , respectively .
We subtract from these values to get , and .
If we divide each of these numbers by , then the quotient is , so we add to the quotient to get the corresponding telephone Similarly , the ASCII values of the letters , and are , and , respectively .

We subtract from these values , to get , and .
Again we divide , and by to get the quotient , and then add to get the corresponding telephone  which is .

The statements in Lines to handle the cases when four letters , such as , and , correspond to telephone .
We leave the details as an exercise .

Once the current is processed , the statements at Lines and again inform the user what to do next .
The statement at Line prompts the user to  the statement at Line reads and stores that into the variable .
After the statement at Line the end of the while executes , the control goes back to the top of the while loop and the same process begins again .
When the user enters , the program terminates .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time subsequent rights restrictions require it .

First , it is initialized in Line , by the statement , and then updated in Line .
The expression in Line checks whether is .

The statements in Lines to can be written using switch statement by checking each and outputting the corresponding telephone as follows : case : case : case : endl ; break ; case .

However , this code will be very long and occupy considerable amount of space .

Case : while Loops while loop uses bool variable to control the loop .
It is generally named for the true state of that condition : for example ,  isTallEnough , and isFull .
Suppose is bool variable .
The while loop takes the following .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Example further illustrates the use of while loop .

EXAMPLE Number Guessing Game The following program randomly generates an integer greater than or equal to and less than .
The program then prompts the user to guess the number .
If the user guesses the number correctly , the program outputs an appropriate message .
Otherwise , the program checks whether the guessed number is less than the random number .
If the guessed number is less than the random number generated by the program , the program outputs the message guess is lower than the number .
Guess ; otherwise , the program outputs the message guess is higher than the number .
The program then prompts the user to enter another number .
The user is prompted to guess the random number until the user enters the correct number .

To generate random number , you can use the function from the header file cstdlib .
For example , the expression returns an int value between and .
Therefore , the statement :  endl ; will output two numbers that appear to be random .
However , each time the program is run , this statement will output the same random numbers .
This is because the function uses an algorithm that produces the same sequence of random numbers each time the program is executed on the same system .
To generate different random numbers each time the program is executed , you also use the function srand from the header file cstdlib .
The function srand takes as input an unsigned int , which acts as the seed for the algorithm .
By specifying different seed values , each time the program is executed , the function will generate different sequence of random numbers .
To specify different seed , you can use the function time from the header file ctime , which returns the number of seconds elapsed since January ,
For example , consider the following statements : The first statement sets the seed , and the second statement generates random number greater than or equal to and less than .
Note how the function time is used .
It is used with an argument , that is , parameter , which is .

The program uses the bool variable isGuessed to control the loop .
The bool variable isGuessed is initialized to false .
It is set to true when the user guesses the correct number .

Sample Run : In this sample run , the user input is shaded .

Enter an integer greater than or equal to and less than : Your is higher than the .

Enter an integer greater than or equal to and less than : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Enter an integer greater than or equal to and less than : Your is higher than the .

Enter an integer greater than or equal to and less than : Your is lower than the .

Enter an integer greater than or equal to and less than : You guessed the correct .

The preceding program works as follows : The statement in Line creates an integer greater than or equal to and less than and stores this in the variable .

The statement in Line sets the bool variable to false .
The expression in the while loop at Line evaluates the expression .

We could also have used false as the test expression , but .

The statement in Line prompts the user to enter an integer greater than or equal to and less than .
The statement in Line stores the entered by the user in the variable .
The expression in the if statement in Line determines whether the value of is the same as  that is , if the user guessed the correctly .

If the value of is the same as  the statement in Line outputs the message : You guessed the correct .

The statement in Line sets the variable to true .
The control then goes back to Line .
If the expression in Line evaluates to false , then the else statement in Line determines whether the value of is less than or greater than and outputs the appropriate message .

Case : while Loops If the data file is frequently altered example , if data is frequently added or , best not to read the data with sentinel value .
Someone might accidentally erase the sentinel value or add data past the sentinel , especially if the programmer and the data entry person are different people .
Also , it can be difficult at times to select good sentinel value .
In such situations , you can use an while loop .

Until now , we have used an input stream variable , such as cin , and the extraction operator , to read and store data into variables .
However , the input stream variable can also return value after reading data , as follows : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

If the program has reached the end of the input data , the input stream variable returns the logical value false .

If the program reads any faulty data as char value into an int , the input stream enters the fail state .
Once stream enters the fail state , any further operations using that stream are considered to be null operations ; that is , they have no effect .
Unfortunately , the computer does not halt the program or give any error messages .
It just continues executing the program , silently ignoring each additional attempt to use that stream .
In this case , the input stream variable returns the value false .

In cases other than and , the input stream variable returns the logical value true .

You can use the value returned by the input stream variable to determine whether the program has reached the end of the input data .
Because the input stream variable returns the logical value true or false , in while loop , it can be considered logical expression .

The following is an example of an while .

This function is called eof .
Like the as get , ignore , and peek , discussed in Chapter the function eof is member of the data type istream .

The syntax to use the function eof is : in which istreamVar is an input stream variable , such as cin .

Suppose you have the declaration : ifstream infile ; Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

This is logical expression .
The value of this expression is true if the program has read past the end of the input file , infile ; otherwise , the value of this expression is false .

Using the function eof to determine the status works best if the input is text .

The earlier method of determining the status works best if the input consists of numeric data .

Suppose you have the .

In the Windows console environment , the marker is entered using the Ctrl key and press .
In the UNIX environment , the marker is entered using the Ctrl key and press .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

EXAMPLE Suppose we are given file consisting of students ' names and their test scores , number between and .
Each line in the file consists of student name followed by the test score .
We want program that outputs each name followed by the test score followed by the grade .
The program also needs to output the average test score for the class .
Consider the following .

This program reads data from file consisting of students ' names and their test scores .
The program outputs each name followed by the test score followed by the grade .
The program also outputs the average test score for all the students .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Line the case : case : case : case : case : case .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : Input File : Steve Gill Rita Johnson Randy Brown Seema Arora Samir Mann Samantha McCoy Output File : Steve Rita Randy Seema Samir Samantha Gill Johnson Brown Arora Mann McCoy Class  Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the to remove additional content at any time if subsequent rights restrictions require it .

The preceding program works as follows .
The statements in Lines to declare and initialize variables needed by the program .
The statements in Lines and declares inFile to be an ifstream variable and to be an ofstream variable .
The statement in Line opens the input file using the variable inFile .
If the input file does not exist , the statements in Lines to output an appropriate message and terminate the program .
The statement in Line opens the output file using the variable .

The statement in Line sets the output of numbers to two decimal places in form with trailing zeros .

The statements in Lines and and the while loop in Line read each first name , last name , and test and then output the name followed by the test followed by the .
Specifically , the statements in Lines and read the first and last name ; the statements in Lines and read the test .
The statement in Line updates the value of sum .
The statement in Line outputs first name , last name , test  and .

The statement in Lines to outputs the class average and the statements in Lines and close the files .

The Programming Example : Checking Account Balance , available on the Web site accompanying this book , further illustrates how to use an while loop in program .

More on Expressions in while Statements In the examples of the previous sections , the expression in the while statement is quite simple .
In other words , the while loop is controlled by single variable .
However , there are situations when the expression in the while statement may be more complex .

For example , the program in Example uses while loop to implement the Number Guessing Game .
However , the program gives as many tries as the user needs to guess the number .
Suppose you want to give the user no more than five tries to guess the number .
If the user does not guess the number correctly within five tries , then the program outputs the random number generated by the program as well as message that you have lost the game .
In this case , you can write the while loop as follows that noOfGuesses is an int variable initialized to :

Programming Example : Fibonacci Number .

The correct number  endl ; Programming Exercise at the end of this chapter asks you to write complete program to implement the Number Guessing Game in which the user has , at most , five tries to the number .

As you can see from the preceding while loop , the expression in while statement can be complex .
The main objective of while loop to repeat certain until certain conditions are met .

PROGRAMMING EXAMPLE : Fibonacci Number So far , you have seen several examples of loops .
Recall that in , while loops are used when certain statements must be executed repeatedly until certain conditions are met .
Following program that uses while loop to find Fibonacci number .

Watch the Video Consider the following sequence of numbers :

This sequence called the Fibonacci sequence .
Given the first two numbers of the sequence , and , the nth number an , of this sequence given by : an Thus : and so on .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

However , given any first two numbers , using this process , you can determine the nth number , an , of the sequence .
We will call such sequence Fibonacci sequence .

Then : Next , we write program that determines the nth Fibonacci number given the first two numbers .

PROBLEM ANALYSIS AND ALGORITHM DESIGN Input .

The nth Fibonacci number .

To find , say , the tenth Fibonacci number of sequence , you must first find and , which requires you to find and , and so on .
Therefore , to find , you must first find ,
This discussion translates into the following algorithm :
Get the first two Fibonacci numbers .

Get the desired Fibonacci position .
That  get the position ,  of the Fibonacci number in the sequence .

Calculate the next Fibonacci number by adding the previous two elements of the Fibonacci sequence .

Repeat Step until the nth Fibonacci number found .

Output the nth Fibonacci number .

Note that the program assumes that the first number of the Fibonacci sequence less than or equal to the second number of the Fibonacci sequence , and both numbers are nonnegative .
Moreover , the program also assumes that the user enters valid value for the position of the desired number in the Fibonacci sequence ; that  it positive Variables Because the previous two numbers must be known in order to find the current Fibonacci number , you need the following variables : two , and to hold the previous two numbers of the Fibonacci sequence ; and one , hold the current Fibonacci number .
The number of times that Step of the algorithm repeats depends on the position of the Fibonacci number you are calculating .
For example , if you want to calculate the tenth Fibonacci number , you must execute Step eight times .
You also need variable to track the number of times Step has executed , the loop control variable .
You therefore need five variables for the data manipulation : int ; int .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Fibonacci Number .

To calculate the third Fibonacci number , add the values of and and store the result in current .
To calculate the fourth Fibonacci number , add the value of the second Fibonacci number  and the value of the third Fibonacci number 
Thus , when the fourth Fibonacci number calculated , you no longer need the first Fibonacci number .
Instead of declaring additional variables , which could be too many , after calculating Fibonacci number to determine the next Fibonacci number , set to and set to current .
Therefore , you can use the variable current to store the next Fibonacci number .
This process repeated until the desired Fibonacci number calculated .
Initially , and are the first two elements of the sequence , supplied by the user .
From the preceding discussion , it follows that you need five variables .

Prompt the user for the first two  and .

Read the first two numbers into and .

Prompt the user for the position of the desired Fibonacci number .

Read the position of the desired Fibonacci number into .

The desired Fibonacci number is the first Fibonacci number .

Copy the value of into current .

The desired Fibonacci number is the second Fibonacci number .

Copy the value of into current .

Initialize counter to to keep track of the calculated Fibonacci numbers .

Calculate the next Fibonacci number , as follows :

Assign the value of to .

Assign the value of to .

Repeat Steps through until the Fibonacci number you want is calculated .

The following while loop executes Steps through and determines the nth Fibonacci number .

Sample Runs : In these sample runs , the user input is shaded .

Sample Run : Enter the first two Fibonacci numbers : The first two Fibonacci numbers are and Enter the position of the desired Fibonacci number : The Fibonacci number at position is Sample Run : Enter the first two Fibonacci numbers : The first two Fibonacci numbers are and Enter the position of the desired Fibonacci number : The Fibonacci number at position is for Looping Structure The while loop discussed in the section is general enough to implement most forms of repetitions .
The for looping structure discussed here is specialized form of the while loop .
Its primary purpose is to simplify the writing of loops .
For this reason , the for loop is typically called counted or indexed for loop .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The general form of the for statement is : statement The initial statement , loop condition , and update statement for of the for statement .
Figure shows the flow of execution of for loop .

The initial statement executes .

The loop condition is evaluated .
If the loop condition evaluates to true :
Execute the for loop statement .

Execute the update statement third expression in the .

Repeat Step until the loop condition evaluates to false .

The initial statement usually initializes variable the for loop control , or for indexed ,

In , for is reserved word .

As the name implies , the initial statement in the for loop is the first statement to execute ; it executes only once .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Next , the loop condition , is evaluated .
Because is true , the print statement executes and outputs .
The update statement , then executes , which sets the value of to .

Once again , the loop condition is evaluated , which is still true , and so on .
When becomes , the loop condition evaluates to false , the for loop terminates , and the first statement following the for loop executes .

for loop can have either simple or compound statement .

The following examples further illustrate how for loop executes .

EXAMPLE five .

Therefore , the first output statement executes five times because the for loop body executes five times .
After the for loop executes , the second output statement executes only once .
The indentation , which is ignored by the compiler , is nevertheless misleading .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Example , the indentation of Line is misleading .

The preceding examples show that care is required in getting for loop to perform the desired action .

The following are some comments on for .

If the loop condition is initially false , the loop body does not execute .

The update expression , when executed , changes the value of the loop control variable by the initial , which should change in such way that eventually sets the value of the loop condition to false .
The for loop body executes indefinitely if the loop condition is always true .

allows you to use fractional values for loop control variables of the double type any real data .
Because different computers can give these loop control variables different results , you should avoid using such variables .

semicolon at the end of the for statement before the body of the is semantic error .
In this case , the action of the for loop is empty .

In the for statement , if the loop condition is omitted , it is assumed to be true .

In for statement , you can omit all three statement , loop condition , and update statement .
However , the for statement must contain two semicolons .
The following is legal for loop : endl ; This is an infinite for loop , continuously printing the word .

Following are more examples of for loops .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

For example , consider the following for loop :   

After each iteration of the loop , is decremented by .
The loop continues to execute as long as .

EXAMPLE You can increment the loop control variable by any fixed number .
In the following for loop , the variable is initialized to ; at the end of the for loop , is incremented by .
This for loop outputs the first positive odd integers .

Consider the following for loop : 

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Because initially the loop condition is false , nothing happens .

Consider the following for .

Next , the update statement increments the value of by , so the value of becomes .
Now the loop condition evaluates to false and the for loop terminates .
Note that the output statement in Line executes only once .

Consider the following for .

This for loop has no effect on the output statement in Line .
The semicolon at the end of the for statement terminates the for loop ; the action of the for loop is thus empty .
The output statement is all by itself and executes only once .

Consider the following for loop :  endl ; In this for loop , because the loop condition is omitted from the for statement , the loop condition is always true .
This is an infinite loop .

The following for loop outputs the positive powers of up to .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Consider the following program code , in which  newNum ,  and average are int variables :

In the preceding for loop , after reading newNum , this value added to the previously calculated of all the numbers read before the current number .

Thus , after the program reads the first number and adds it to the value of  the variable holds the correct of the first number .

The syntax of the for loop , which  statement functionally equivalent to the following while statement : initial expression statement update expression For example , the following for and while loops are .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

You can replace the while loop with an equivalent for loop as .

The complete program listing of the program that uses for loop to determine the desired Fibonacci number given at the Web site accompanying this book .
The program named .

In the following program , we recommend that you walk through each step .

EXAMPLE The following program finds the of the first positive integers .

Programming Example : Classifying Numbers .

Line : Enter the number of positive integers to be added : Line : The of the first positive integers The statement in Line prompts the user to enter the number of positive integers to be added .

The statement in Line stores the number entered by the user in , and the statement in Line initializes to .
The for loop in Line executes times .
In the for loop , initialized to and incremented by after each iteration of the loop .
Therefore , ranges from to .
Each time through the loop , the value of added to .
The variable was initialized to , ranges from to , and the value of added to the value of .
Therefore , after the for loop executes , contains the of the first values , which in the sample run positive integers .

Recall that putting one control structure statement inside another called nesting .
The following programming example demonstrates simple instance of nesting .
It also nicely demonstrates counting .

PROGRAMMING EXAMPLE : Classifying Numbers This program reads given set of integers and then prints the number of odd and even integers .
It also outputs the number of zeros .

The program reads integers , but you can easily modify it to read any set of numbers .
In fact , you can modify the program so that it first prompts the user to specify how many integers are to be read .

PROBLEM ANALYSIS AND ALGORITHM DESIGN Input .

The number of zeros , even numbers , and odd numbers .

After reading number , you need to check whether it even or odd .
Suppose the value stored in number .
Divide number by and check the remainder .
If the remainder , number even .
Increment the even count and then check whether number .
If it  increment the zero count .
If the remainder not , increment the odd count .

The program uses switch statement to decide whether number odd or even .

Suppose that number odd .
Dividing by gives the remainder if number positive and the remainder if it negative .
If number even , dividing by gives the remainder whether number positive or negative .
You can use the mod operator , to find the remainder .
For example : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Repeat the preceding process of analyzing number for each number in the list .

This discussion translates into the following algorithm :
For each number in the list :

Analyze the number .

Increment the appropriate count .

Print the results .

Variables Because you want to count the number of zeros , even numbers , and odd numbers , you need three variables of type , zeros , evens , and track the counts .
You also need , read and store the number to be analyzed and another , count the numbers analyzed .

Therefore , you need the following variables in the program : int int int int int .

You can initialize these variables when you declare them .

Declare and initialize the variables .

Prompt the user to enter numbers .

For each number in the list :
Read the number .

Output the number .

Print the results .

Before writing the program , let us describe Steps in greater detail .
Then it will be much easier for you to write the instructions in .

Initialize the variables .
You can initialize the variables zeros , evens , and odds when you declare them .

Use an output statement to prompt the user to enter numbers .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Classifying Numbers .

For Step , you can use for loop to process and analyze the numbers .
In pseudocode , this step is written as .

Sample Run : In this sample run , the user input is shaded .

Please enter integers , positive , negative , or .

The numbers you entered  There  which includes .

The of odd numbers is : We recommend that you do of this program using the above sample input .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The general form of do .
If it is compound statement , enclose it between braces .
Figure shows the flow of execution of do .

The statement executes first , and then the expression is evaluated .
If the expression evaluates to true , the statement executes again .
As long as the expression in statement is true , the statement executes .
To avoid an infinite loop , you must , once again , make sure that the loop body contains statement that ultimately makes the expression false and assures that it exits properly .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

After is output , the statement : + changes the value of to and so becomes false , which halts the loop .

In while and for loop , the loop condition is evaluated before executing the body of the loop .
Therefore , while and for loops called pretest loops .
On the other hand , the loop condition in do .

Because the while and for loops both have entry conditions , these loops may never activate .
The loop , on the other hand , has an exit condition and therefore always executes the statement at least once .

EXAMPLE Consider the following two loops :

In , the while loop produces nothing , the statement never executes .
In , the loop outputs the and also changes the value of to .
This is expected because in , the statement must always execute at least once .

loop can be used for input validation .
Suppose that program prompts user to enter test score , which must be greater than or equal to and less than or equal to .
If the user enters score less than or greater than , the user should be prompted to the score .
The following loop can be used to accomplish this objective : int .

Divisibility Test by and Suppose that and integers and is nonzero .

It is known is divisible by and if is divisible by and .
In other words , an integer is divisible by and if and only if the sum of its digits is divisible by and .

For example , suppose .
Because is divisible by both and , it follows is divisible by both and .

Next , we write program determines whether positive integer is divisible by and by first finding the sum of its digits and then checking whether the sum is divisible by and .

To find the sum of the digits of positive integer , we need to extract each digit of the Consider the .
Also note ; is , when the is divided by , it removes the last digit .
Next , we repeat this process on the number .
Of course , we need to add the extracted digits .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

We thus have the following algorithm to find the of the .

Sample Runs : In these sample runs , the user input is shaded .

Sample Run Enter positive integer : The of the is divisible by Sample Run Enter positive integer : The of the is divisible by , but Sample Run Enter positive integer : The of the is divisible by Choosing the Right Looping Structure All three loops have their place in .
If you know , the program can determine in advance , the number of repetitions needed , the for loop is the correct choice .
If you do know , the program cannot determine in advance the number of repetitions needed , it could be , the while loop is the right choice .
If you do know , the program cannot determine in advance the number of repetitions needed , it is at least , the loop is the right choice .

The break statement is typically used for two .

To exit early from loop .

To skip the remainder of the switch structure .

After the break statement executes , the program continues to execute with the first statement after the structure .
The use of break statement in loop can eliminate the use of certain variables .
The following code segment helps illustrate this idea .

Copyright Cengage Learning .
All Rights Reserved .
May be copied , scanned , duplicated , in whole in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed any suppressed content does materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

This while loop is supposed to find the of set of positive numbers .
If the set contains negative number , the loop terminates with an appropriate error message .
This while loop uses the flag variable to signal the presence of negative number .

The variable is initialized to false before the while loop .
Before adding to  check is made to see if is negative .
If is negative , an error message appears on the screen is set to true .
In the next iteration , when the expression in the while statement is evaluated , it evaluates to false because is false .

In this form of the while loop , when negative number is found , the expression in the if statement evaluates to true ; after printing an appropriate message , the break statement terminates the loop .
All Rights Reserved .
May be copied , scanned , duplicated , in whole in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed any suppressed content does materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

However , break statements must be used very sparingly within loop .
An excessive use of these statements in loop will produce with many exit can be very hard to understand manage .
You should be extra careful in using break statements ensure that the use of the break statements makes the code more readable less readable .

The continue statement is used in while , for , do .
When the continue statement is executed in loop , it skips the remaining statements in the loop proceeds with the next iteration of the loop .

In for structure , the update statement is executed after the continue statement , then the loop condition is , the loopcontinue executes .

If the previous program segment encounters negative number , the while loop terminates .
If you want to discard the negative number read the next number rather than terminate the loop , replace the break statement with the continue statement , as shown in the following example : cin .

It was stated earlier that all three loops have their place in that one loop can often replace another .
The execution of continue statement , however , is where the while do .

When the continue statement is executed in while do .
In for structure , the update statement always executes .

Copyright Cengage Learning .
All Rights Reserved .
May be copied , scanned , duplicated , in whole in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Nested Control Structures In this section , we give examples that illustrate how to use nested loops to achieve useful results and process .

EXAMPLE Suppose you want to create the following pattern : Clearly , you want to print five lines of stars .
In the first line , you want to print one star , in the second line , two stars , and so on .
Because five lines will be printed , start with the following for statement : The value of in the first iteration is , in the second iteration it is , and so on .
You can use the value of as the limiting condition in another for loop nested within this loop to control the number of stars in line .
little more thought produces the following code :

When is , the inner for loop in Line outputs one star and the insertion point moves to the next line .
Then becomes , the inner for loop outputs two stars , and the output statement in Line moves the insertion point to the next line , and so on .
This process continues until becomes and the loop stops .

What pattern does this code produce if you replace the for statement in Line with the following .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Nested Control Structures EXAMPLE Suppose you want to create the following multiplication table : The multiplication table has five lines .
Therefore , as in Example , we use for statement to output these lines as follows : line of numbers In the first line , we want to print the multiplication table of , in the second line we want to print the multiplication table of , and so on .
Notice that the first line starts with and when this line is printed , is .
Similarly , the second line starts with and when this line is printed , the value of is , and so on .

Therefore , to print line of numbers , we can use the value of as the starting number and as the limiting value .
That is , consider the following for loop :  Let us take look at this for loop .

Then we are printing the first line of the multiplication table .
Also , goes from to and so this for loop outputs the numbers through , which is the first line of the multiplication table .
Similarly , if is , we are printing the second line of the multiplication table .
Also , goes from to , and so this for loop outputs the second line of the multiplication table , and so on .

little more thought produces the following nested loops to output the desired grid :

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The number at the end of each line acts as sentinel and therefore is not part of the data .
Our objective is to find the sum of the numbers in each line and output the sum .
Moreover , assume that this data is to be read from file , say ,
We assume that the input file has been opened using the input file stream variable infile .

This particular data set has five lines of input .
So we can use for loop or countercontrolled while loop to process each line of data .
Let us use while loop to process these five lines .
It follows that the while loop takes the following form :

Let us now concentrate on processing line .
Each line has varying number of data items .
For example , the first line has six numbers , the second line has eight numbers , and so on .
Because each line ends with , we can use while loop to find the of the numbers in each line with as the sentinel value .
Consider the following while loop :

The Boolean expression in Line checks whether the number is .
If is not , the statements in Lines and execute .

The statement in Line updates the value of  the statement in Line reads and stores the next number into .
The loop continues to execute as long as is not .

It now follows that the nested loop to process the data is as follows .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Nested Control Structures .

EXAMPLE Suppose that we want to process data similar to the data in Example , but the input file is of an unspecified length .
That is , each line contains the same data as the data in each line in Example , but we do not know the number of input lines .

Because we do not know the number of input lines , we must use an while loop to process the data .
In this case , the required code is as follows .

EXAMPLE Consider the following data : John Smith Peter Gupta Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Buddy Friend Doctor Miller .

The number at the end of line acts as sentinel and therefore is not part of the data .

Assume that this is the data of certain candidates seeking the student presidential seat .

For each candidate , the data is in the following form : ID Name Votes The objective is to find the total number of votes received by the candidate .
We assume that the data is input from the file of unknown size .
We also assume that the input file has been opened using the input file stream variable infile .

Because the input file is of an unspecified length , we use an while loop .

For each candidate , the first data item is the ID of type int on line by itself ; the second data item is the name , which may consist of more than one word ; and the third line contains the votes received from the various departments .

To read the ID , we use the extraction operator ; to read the name , we use the stream function getline .
Notice that after reading the ID , the reading marker is after the ID and the character after the ID is the newline character .
Therefore , after reading the ID , the reading marker is after the ID and before the newline character the line containing the .

The function getline reads until the end of the line .
Therefore , if we read the name immediately after reading the ID , then what is stored in the variable name is the newline character the .
It follows that to read the name , we must read and discard the newline character after the ID , which we can accomplish using the stream function get .

Therefore , the statements to read the ID and name are as .

Avoiding Bugs by Avoiding Patches .

Avoiding Bugs by Avoiding Patches Debugging sections in the previous chapters illustrated how to debug syntax and logical errors , and how to avoid partially understood concepts .
In this section , we illustrate how to avoid software patch to fix code .
software patch is piece of code written on top of an existing piece of code intended to fix bug in the original code .

Suppose that the following data is in the file .

For each line , output the numbers together with their .
Let us consider the following program : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : The sample run shows that there is bug in the program because the file contains three lines of input and the output contains four lines .
Also , the number in the last line repeats four times .
Clearly , there is bug in the program and we must fix the code .
Some programmers , especially some beginners , address the symptom of the problem by adding software patch .
In this case , the output should contain only three lines of output .
beginning programmer might fix the code by adding software patch to manually cut off the unwanted fourth line , as shown in the following modified program : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Avoiding Bugs by Avoiding Patches .

Sample Run : Clearly , the program is working correctly now .

As we can see , the programmer merely observed the symptom and addressed the problem by adding software patch .
However , if you look at the code , not only does the program execute extra statements , it is also an example of partially understood concept .
It appears that the programmer does not have good grasp of why the earlier program produced four lines rather than three .
Adding patch eliminated the symptom , but it is poor programming practice .
The programmer must resolve why the program produced four lines .
Looking at the program closely , we can see that the four lines are produced because the outer loop executes four times .
The values assigned to loop control variable are , and .
This is an example Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

For example , we can rewrite the loops as follows :

The complete modified program is available at the Web site accompanying this book and is named .

Debugging Loops As we have seen in the earlier debugging sections , no matter how careful program is designed and coded , errors are likely to occur .

However , if there are logical errors , we must carefully look at the code or even maybe at the design and try to find the errors .
To increase the reliability of the program , errors must be discovered and fixed before the program is released to the users .

Once an algorithm is written , the next step is to verify that it works properly .
If the algorithm is simple sequential flow or contains branch , it can be hand traced or you can use the debugger , if any , provided by the IDE .
Typically , loops are harder to debug .
The correctness of loop can be verified by using loop invariants .
loop invariant is set of statements that remains true each time the loop body is executed .
Let be loop invariant and be the expression in loop statement .
Then remains true before each iteration of the loop and is true after the loop terminates .
The full discussion of loop invariants is beyond the scope of the book .
However , you can learn about loop invariants in the book : Discrete Mathematics : Theory and Applications ,

Sen , Cengage Learning Asia , Singapore ,
Here , we give few tips that you can use to debug loop .

As discussed in the previous section , the most common error associated with loops is .
If loop turns out to be an infinite loop , the error is most likely in the logical expression that controls the execution of the loop .
Check the logical expression carefully and see if you have reversed an inequality , an assignment statement symbol appears in place of the equality operator , or appears in place of .
If the loop changes the values of variables , you can print the values of the variables before after each iteration or you can use your debugger , if any , and watch the values of variables during each iteration .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Quick Review The debugging sections in this book are designed to help you understand the debugging process .
However , as you will realize , debugging can be tiresome process .
If your program is very bad , do not debug .
Throw it away and start over .

QUICK REVIEW .

has three looping structures : while , for , and do .

The syntax of the while statement is : statement .

In , while is reserved word .

In the while statement , the parentheses around the expression decision are important ; they mark the beginning and end of the expression .

The statement is called the body of the loop .

The body of the while loop must contain statement that eventually sets the expression to false .

while loop uses counter to control the loop .

In while loop , you must initialize the counter before the loop , and the body of the loop must contain statement that changes the value of the counter variable .

sentinel is special value that marks the end of the input data .
The sentinel must be similar to , yet differ from , all the data items .

while loop uses sentinel to control the loop .
The while loop continues to execute until the sentinel is read .

An while loop uses an marker to control the loop .
The while loop continues to execute until the program detects the marker .

In the Windows console environment , the marker is entered using the Ctrl key and press .
In the UNIX environment , the marker is entered using the Ctrl key and press .

for loop simplifies the writing of while loop .

In , for is reserved word .

The syntax of the for loop is : statement statement is called the body of the for loop .

Putting semicolon at the end of the for loop the body of the for is semantic error .
In this case , the action of the for loop is empty .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Both while and for loops are called pretest loops .

The while and for loop bodies may not execute at all , but the do .

Executing break statement in the body of loop immediately terminates the loop .

Executing continue statement in the body of loop skips the remaining statements and proceeds with the next iteration .

When continue statement executes in while or do .

After continue statement executes in for loop , the update statement is the next statement executed .

EXERCISES The number in parentheses at the end of an exercise refers to the learning objective listed at the beginning of the chapter .

Mark the following statements as true or false .

loop is control structure that causes certain statements to execute In while loop , it is not necessary to initialize the In an infinite while loop , the while expression decision is The while loop :

while loop is an while loop To read data from file of an unspecified length , an Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Suppose that the input is .
What is the output of the following int int cin .

What is the output if the .
What is the output if the c .
What is the output if the .
What is the output if the Suppose that the input is :

The following program is designed to input two numbers and output their It asks the user if would like to run the program .
If the answer is or , it prompts the user to enter two numbers .
After adding the numbers and displaying the results , it again asks the user if would like to add more .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

What type of loop , such as or , will you use .

Update the employee ' salary .

In this for loop , identify the loop control variable , the initialization statement , the loop condition , the update statement , and the statement that updates the value of .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

What is the final value of .

What is the output of the following program segment .

Which of the following apply to the while loop only .

It is considered conditional loop .

The body of the loop executes at least once .

The logical expression controlling the loop is evaluated before the loop is entered .

The body of the loop may not execute at all .

The following program contains errors that prevent it from compiling .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

What is the output of this loop .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

It is supposed to add all of the numbers except for the sentinel .
If the data looks like :

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

What What What What the the the the output output output output if if if if the the the the input input input input .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

To learn how nested for loops work , do of the following .

PROGRAMMING EXERCISES .

Write program that prompts the user to input an integer and then outputs both the individual digits of the number and the sum of the digits .
For example , it should output the individual digits of as , output the individual digits of as , output the individual digits of as , output the individual digits of as , and output the individual digits of as .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The value of can be approximated by using the following series :  The following program uses this series to find the approximate value of .
However , the statements are in the incorrect order , and there is also bug in this program .

Rearrange the statements and remove the bug so that this program can be used to approximate .

The program Telephone Digits outputs only telephone digits that correspond to uppercase letters .
Rewrite the program so that it processes both uppercase and lowercase letters and outputs the corresponding telephone digit .
If the input is something other than an uppercase or lowercase letter , the program must output an appropriate error message .

To make telephone numbers easier to remember , some companies use letters to show their telephone number .
For example , using letters , the telephone number can be shown as GET LOAN .
In some cases , to make telephone number meaningful , companies might use more than seven letters .

For example , can be displayed as CALL HOME , which uses eight Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Write program that prompts the user to enter telephone number expressed in letters and outputs the corresponding telephone number in digits .
If the user enters more than seven letters , then process only the first seven letters .

Also output the after the third digit .
Allow the user to use both uppercase and lowercase letters as well as spaces between words .
Moreover , your program should process as many telephone numbers as the user wants .

Write program that reads set of integers and then finds and prints the sum of the even and odd integers .

Write program that prompts the user to input positive integer .
It should then output message indicating whether the number is prime number .

An odd integer is prime if it is not divisible by any odd integer less than or equal to the square root of the .
It is known that is divisible by if and only if is divisible by .
For example , suppose that .
Because is divisible by , it follows that is divisible by .

Because is not divisible by , is not divisible by .
Write program that prompts the user to enter positive integer and then uses this criterion to determine whether the number is divisible by .

Write program that uses while loops to perform the following steps :

Output all odd numbers between firstNum and secondNum .

Output the sum of all even numbers between firstNum and secondNum .

Output the numbers and their squares between and .

Output the sum of the square of the odd numbers between firstNum and secondNum .

Output all uppercase letters .

Redo Programming Exercise using for loops .

Redo Programming Exercise using do .

The program in the Programming Example : Fibonacci Number does not check whether the first number entered by the user is less than or equal to the second number and whether both the numbers are nonnegative .
Also , the program does not check whether the user entered valid value for the position of the desired number in the Fibonacci sequence .
Rewrite that program so that it checks for these things .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The population of town is less than the population of town .

However , the population of town is growing faster than the population of town .
Write program that prompts the user to enter the population and growth rate of each town .
The program outputs after how many years the population of town will be greater than or equal to the population of town and the populations of both the towns at that time .

Define ; if an is even ; an + if an is odd .

Write program that prompts the user to input the value of .
The program output the integer such that ak and the numbers ,

Enhance your program from Programming Exercise by outputting the position of the largest number and the largest number of the sequence ,

The program in Example implements the Number Guessing Game .

However , in that program , the user is given as many tries as needed to guess the correct number .
Rewrite the program so that the user has no more than five tries to guess the correct number .
Your program should print an appropriate message , such as " or .

Example implements the Number Guessing Game program .
If the guessed number is not correct , the program outputs message indicating whether the guess is low or high .
Modify the program as follows : Suppose that the variables num and guess are as declared in Example and is an int variable .
If is , then guess is correct and the program outputs message indicating that the user guessed the correct number .

If is greater than or equal to , the program outputs the message indicating that the guess is very high guess is greater than or very low guess is less than .

If is greater than or equal to and less than , the program outputs the message indicating that the guess is high guess is greater than or low guess is less than .

If is greater than or equal to and less than , the program outputs the message indicating that the guess is moderately high guess is greater than or moderately low guess is less than .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

As in Programming Exercise , give the user no more than five tries to guess the number .

Write program to implement the algorithm that you designed in Exercise of Chapter .
Your program should allow the user to buy as many items as the user desires .

The program in Example uses sentinel control loop to process cookies sales data .
Assume that the data is provided in file and the first line in the file specifies the cost of one box .
Modify the program so that it uses an loop to process the data .

Enhance the program that you wrote in Exercise by modifying it as follows : When the students started selling cookies , they were told that the students who sell the maximum number of boxes will have of the money they generate donated to their favorite charitable organization .
So , in addition to the output your program generated in Exercise , your program should output the names of all the students selling the maximum number of boxes and the amount that will be donated to their charitable organization .

When you borrow money to buy house , car , or for some other purpose , you repay the loan by making periodic payments over certain period of time .

Of course , the lending company will charge interest on the loan .
Every periodic payment consists of the interest on the loan and the payment toward the principal amount .
To be specific , suppose that you borrow at the interest rate of per year and the payments are monthly .
Suppose that your monthly payment is .
Now , the interest is per year and the payments are monthly , so the interest rate per month is .
The first interest on is .
Because the payment is and interest for the first month is , the payment toward the principal amount is .
This means after making the first payment , the loan amount is .
For the second payment , the interest is calculated on .

So the interest for the second month is , that is , approximately .
This implies that the payment toward the principal is and the remaining balance after the second payment is .
This process is repeated until the loan is paid .
Write program that accepts as input the loan amount , the interest rate per year , and the monthly payment .
For example , if the interest rate is per year , then enter The program then outputs the number of months it would take to repay the loan .
In this case , the program must warn the borrower that the monthly payment is too low , and with Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Enhance your program from Exercise by first telling the user the minimum monthly payment and then prompting the user to enter the monthly payment .
Your last payment might be more than the remaining loan amount and interest on it .
In this case , output the loan amount before the last payment and the actual amount of the last payment .
Also , output the total interest paid .

Write complete program to test the code in Example .

Write complete program to test the code in Example .

Write complete program to test the code in Example .

Write complete program to test the code in Example .

Write complete program to test the code in Example .

These cups are to be made from circular waxed paper of inches in radius by removing sector of length Figure .
By closing the remaining part of the circle , conical cup is made .
Your objective is to remove the sector so that the cup is of maximum volume .

Conical paper cup Write program that prompts the user to enter the radius of the circular waxed paper .
The program should then output the length of the removed sector so that the resulting cup is of maximum volume .
Calculate your answer to two decimal places .

When the rent is , say , per month , all the units are occupied .
However , for each , say , increase in rent , one unit becomes vacant .
Moreover , each occupied unit requires an average of per month for maintenance .

How many units should be rented to maximize the profit .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The total number of units .

The rent to occupy all the units .

The increase in rent that results in vacant unit .

Amount to maintain rented unit .

The program then outputs the number of units to be rented to maximize the profit .

Let be nonnegative integer .
The factorial of  written , is defined by .
Write program that prompts the user to enter nonnegative integer and outputs the factorial of the number .

Let be an integer .
The value of the expression is written as .

This number appears in many places in mathematics .
It also appears in problems relating to exponential growth and decay .
It is known that is an irrational number .
The value of to nine decimal places is .
Write program that computes the value of the expression between certain values of and then compare the values with .

Exercise defines the number .
The value of can be approximated using the following expression : 

Write program that uses this formula to approximate the value of .
Test your program for , and .

Exercise defines the number and Exercise shows how to approximate the value of using different expression .
Interestingly , the value of can also be approximated using the following expression : +

Test your program for , and .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Explore functions with default parameters Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The programs in Chapters through use only the function main ; the programming instructions are packed into one function .
This technique , however , is good only for short programs .
You must learn to break the problem into manageable pieces .
This chapter first discusses the functions previously defined and then discusses functions .

Let us imagine an automobile factory .
When an automobile is manufactured , it is not made from basic raw materials ; it is put together from previously manufactured parts .

Some parts are made by the company itself ; others , by different companies .

Functions are like building blocks .
They let you divide complicated programs into manageable pieces .

While working on one function , you can focus on just that part of the program and construct it , debug it , and perfect it .

Different people can work on different functions simultaneously .

If function is needed in more than one place in program or in different programs , you can write it once and use it many times .

Using functions greatly enhances the readability because it reduces the complexity of the function main .

Functions are often called modules .
They are like miniature programs ; you can put them together to form larger program .
When functions are discussed , you will see that this is the case .
This ability is less apparent with predefined functions because their programming code is not available to us .
However , because predefined functions are already written for us , you will learn these first so that you can use them when needed .

Predefined Functions Before formally discussing predefined functions in , let us review concept from college algebra course .
In algebra , function can be considered rule or correspondence between values , called the arguments , and the unique values of the function associated with the arguments .
Thus , if + then , and , where , and are the arguments of  and , and are the corresponding values of the function .

In , the concept of function , either predefined or , is similar to that of function in algebra .
For example , every function has name and , depending on the values specified by the user , it does some computation .
This section discusses various predefined functions .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Predefined Functions .

Because the value of , is of type double , we say that the function is of type double or that the function returns value of type double .
Moreover , and are called the parameters of the function .
Function has two parameters .

The square root function , calculates the nonnegative square root of for .

The function sqrt is of type double and has only one parameter .

The floor function , calculates the largest whole number that is less than or equal to .

The function floor is of type double and has only one parameter .

In , predefined functions are organized into separate libraries .
For example , the header file iostream contains functions , and the header file cmath contains math functions .
Table lists some of the more commonly used predefined functions , the name of the header file in which each specification can be found , the data type of the parameters , and the function type .
The function type is the data type of the value returned by the function .

For example , to use the function  the program must  Example shows you how to use some of the predefined functions .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Predefined Functions .

Chapter : Functions Sample Run : In this sample run , the user input is shaded .

The statements in Lines to the header files that are necessary to use the functions used in the program .
The statements in Lines to declare the variables used in the program .
The statement in sets the output decimal numbers in fixed decimal format with two decimal places .
The statement in uses the function islower to determine and output whether is lowercase letter .

The statement in uses the function toupper to output the uppercase letter that corresponds to , which is .
Note that the function toupper returns an int value .

Therefore , the value the expression is , which is the ASCII value .
To print the character rather than the value , you need to apply the cast operator as shown in the statement in .
The statement in uses the function to output .
In terminology , it is said that the function is called with the parameters and .
The statements in Lines to prompt the user to enter two decimal numbers and store the numbers entered by the user in the variables and .
In the statement in , the function is used to output firstNumsecondNum .
In this case , the function is called with the parameters and and the values and are passed to the function .
The other statements have similar meanings .
Once again , note that the program includes the header files cctype and cmath , because it uses the functions islower , toupper ,  abs , and from these header files .

Functions As Example illustrates , using functions in program greatly enhances the readability because it reduces the complexity the function main .
Also , once you write again and again without having to rewrite the same code repeatedly .
For instance , in Example , the function is used more than once .

Because does not provide every function that you will ever need and designers cannot possibly know specific needs , you must learn to write your own functions .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Functions functions in are classified into two .

that have return type .
These functions return value specific data type using the return statement , which we will explain shortly .
Note that the function main has used return statement to return the value in every program seen so far .

Void that do not have return type .
These functions do not use return statement to return value .

We will first discuss functions .
Many the concepts discussed in regard to functions also apply to void functions .

Functions The previous section introduced some predefined functions such as  abs , islower , and toupper .
These are examples functions .
To use these functions in your programs , you must know the name the header file that contains the functions ' specification .
You need to include this header file in your program using the include statement and know the following items :

The name the function The parameters , if any The data type each parameter The data type the value computed is , the value by the function , called the type the function Because function returns only one value , the natural thing for you to do is to use the value in one three .

This suggests that function is .

In an assignment statement .

In an output statement .

That is , function is used in an expression .

Before we look at the syntax , function , let us consider the things associated with such functions .
In addition to the four properties described previously , one more thing is associated with functions and :
The code required to accomplish the task The first four properties form , what is called , the heading the function called the function ; the fifth property is called the body the function .
Together , these Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Functions .

The variable declared in the heading the function is called formal parameter the function .
Thus , the formal parameter is .

The program in Example contains several statements that use the function pow .
That is , in terminology , the function pow is called several times .
Later in this chapter , we discuss what happens when function is called .

Suppose that the heading the function pow .

In Line , the function pow is called with the parameters and .
In this case , the values and are passed to the function pow .
In fact , the value is copied into base , and the value is copied into exponent .
The variables and that appear in the call to the function pow in Line are called the actual parameters that call .
In Line , the function pow is called with the parameters and .
In this call , the value is copied into base , and is copied into exponent .
Moreover , in this call the function pow , the actual parameters are and , respectively .
Similarly , in Line , the actual parameters the function pow are and ; the value is copied into base , and is copied into exponent .

We can now formally present two definitions : Formal Parameter : variable declared in the function heading .

Actual Parameter : variable or expression listed in call to function .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Functions For predefined functions , you only need to be concerned with the first four properties .

Software companies , typically , do not give out the actual source code , which is the body the function .

Syntax : Function The syntax function .

In this syntax , functionType is the type the value that the function returns .
The functionType is also called the data type or the return type the function .
Moreover , statements enclosed between curly braces form the body the function .

Syntax : Formal Parameter List The syntax the formal parameter list is : dataType identifier , dataType identifier ,

Consider the definition the function given earlier in this chapter .
Figure identifies various parts this function .

Function return type Function name .

Formal parameter list .

Various parts the function .

Chapter : Functions Syntax : Actual Parameter List The syntax the actual parameter list is : expression or variable , expression or variable ,

formal parameter list can be empty .
However , if the formal parameter list is empty , the parentheses are still needed .
The function heading the function thus takes , if the formal parameter list is empty , the following form : If the formal parameter list function is empty , the actual parameter is also empty in function call .
In this case is , an empty formal parameter , in function call , the empty parentheses are still needed .
Thus , call to function with an empty formal parameter list is : In function call , the actual parameters , together with their data types , must match with the formal parameters in the order given .
That is , actual and formal parameters have correspondence .
The expression can be part either an assignment statement or an output statement , or parameter in function call .
function call in program causes the body the called function to execute .

In other words , it passes this value outside the function via the return statement .

Syntax : return Statement The return statement has the following syntax : return expr ; in which expr is variable , constant value , or expression .
The expr is evaluated , and its value is returned .
The data type the value that expr computes must match the function type .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Functions In , return is reserved word .

When return statement executes in function , the function immediately terminates and the control goes back to the calling function .
Moreover , the function call statement is replaced by the value returned by the return statement .
When return statement executes in the function main , the program terminates .

To put the ideas in this discussion to work , let us write function that determines the larger two numbers .
Because the function compares two numbers , it follows that this function has two parameters and that both parameters are numbers .
Let us assume that the data type these numbers is , double .
Because the larger is type double , the data type is also double .
Let us name this function larger .
The only thing you need to complete this function is the body the function .
Thus , following the syntax function , you can write this function as .

Figure describes various parts of the function larger .

Function Function return type name Function heading Formal .

Various parts of the function larger Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Figure shows various ways the function larger can be called .

Function call Actual parameters .

Function calls In Figure , in the first statement , the function larger determines the larger of and , and the assignment statement stores the result in .
The meaning of the other two statements is similar .

You can also write the definition of the function larger as follows :

In the definition of the function larger , and are formal parameters .

Recall that once return statement executes , all subsequent statements are skipped .
Thus , good idea to return the value as soon as it is computed .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The expression , in Line function call .

The expression , in Line also function call .
When the expression , executes , the value of copied into  and copied into .
Therefore , the statement in Line outputs the larger of and .
Note that the first parameter , variable , while the second parameter , constant value .

The expression , in Line function call .
In this call , the actual parameters are and .
In this statement , the value returned by the function larger assigned to the variable .

In function call , you specify only the actual parameter , not its data type .
For example , in Example , the statements in Lines , and show how to call the function larger with the actual parameters .
However , the following statements contain incorrect calls to the function .

Chapter : Functions Once function written , you can use it anywhere in the program .
The function larger compares two numbers and returns the larger of the two .
Let us now write another function that uses this function to determine the largest of three numbers .
We call this function compareThree .

This expression has two calls to the function larger .
The actual parameters to the outer call are and , the actual parameters to the inner call are and .
It follows that , first , the expression , evaluated ; that  the inner call executes first , which gives the larger of Next , the outer call determines the larger of and .
Finally , the return statement returns the largest number .
It thus follows that to execute function call , the parameters must be evaluated first .
For example , the actual parameter , of the outer call evaluated first to render resulting value that sent with to the outer call to larger .

Note that the function larger much more general purpose than the function compareThree .
Here , we are merely illustrating that once you have written function , you can use it to write other functions .
Later in this chapter , we will show how to use the function larger to determine the largest number from set of numbers .

Function Prototype Now that you have some idea of how to write and use functions in program , the next question relates to the order in which functions should appear in program .

For example , do you place the function larger before or after the function main .

Should larger be placed before compareThree or after it .
Following the rule that you must declare an identifier before you can use it and knowing that the function main uses the identifier larger , logically you must place larger before main .

In reality , programmers customarily place the function main before all other userdefined functions .
However , this organization could produce compilation error because functions are compiled in the order in which they appear in the program .
For example , if the function main placed before the function larger , the identifier larger will be undefined when the function main compiled .
To work around this problem of undeclared identifiers , we place function prototypes before any function definition the definition of .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Functions The function prototype not definition .
It gives the program the name of the function , the number and data types of the parameters , and the data type of the returned value : just enough information to let use the function .
It also promise that the full definition will appear later in the program .
If you neglect to write the definition of the function , the program may compile , but it will not execute .

Function Prototype : The function heading , terminated by semicolon , without the body of the function .

The general syntax of the function prototype of function .

FINAL PROGRAM You now know enough to write the entire program , compile it , and run it .
The following program uses the functions larger , compareThree , and main to determine the largest of two or three numbers .

Sample Run : In this sample run , the user input shaded .

Line : The of and Line : Enter numbers : Line : The of and Line : The largest of , and is In the previous program , the function prototypes of the functions and compareThree appear before their function definitions .
Therefore , the definition of the functions and compareThree can appear in any order .

Functions : Some Peculiarities function must return value .
Consider the following function , secret , that takes as parameter an int value .
If the value of the parameter ,  is greater than , it returns twice the value of .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Because this is function of type int , it must return value of type int .

Suppose the value of is .
Then the expression in Line evaluates to true .
So the return statement in Line returns the value .
Now suppose that is .
The expression in Line now evaluates to false .
The if statement therefore fails , and the return statement in Line does not execute .
However , there are no more statements to be executed in the body of the function .
In this case , the function returns strange value .
It thus follows that if the value of is less than or equal to , the function does not contain any valid return statements to return value of type int .

correct definition of the function secret .

Here , if the value of is less than or equal to , the return statement in Line executes , which returns the value of .
On the other hand , if the value of is , say , the return statement in Line executes , which returns the value and also terminates the function .

Recall that in function , the return statement returns the value .

Consider the following return statement : return  the value of will be returned This is legal return statement .
You might think that this return statement is returning the values of and .

Remember , return statement returns only one value , even if the return statement contains more than one expression .
If return statement contains more than one expression , only the value of the last expression is returned .

Therefore , in the case of the above return statement , the value of is returned .
The following program further illustrates this .

This program illustrates that function returns only one value , even if the return statement contains more than one expression .
This is legal , but not recommended code .

Line : The value returned by : Line : The value returned by : Even though return statement can contain more than one expression , return statement in your program should contain only one expression .
Having more than one expression in return statement may result in redundancy , wasted code , and confusing syntax .

More Examples of Functions EXAMPLE In this example , we write the definition of the function courseGrade .
This function takes as parameter an int value specifying the score for course and returns the grade , value of type char , for the course .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In this example , we write function that rolls pair of dice until the sum of the numbers rolled is specific number .
We also want to know the number of times the dice are rolled to get the desired sum .

The smallest number on each die is , and the largest number is .
So the smallest sum of the numbers rolled is , and the largest sum of the numbers rolled is .
Suppose that we have the following declarations : int int int int .

We use the random number generator , discussed in Chapter , to randomly generate number between and .
Then , the following statement randomly generates number between and and stores that number into , which becomes the number rolled by .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Chapter : Functions .

Next , we determine whether contains the desired of the numbers rolled by the dice .
This can be accomplished by the following loop .

The number of times the dice are rolled to get the The number of times the dice are rolled to get the We leave it as an exercise for you to modify this program so that it allows the user to enter the Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Functions In the first programming example in Chapter , we designed and implemented an algorithm to find the number of Fibonacci sequence .
In this example , we modify the main program by writing function that computes and returns the desired number of Fobinacci sequence .
Because we have already designed and discussed how to determine specific number of Fibonacci sequence , next , we give the definition of the function to implement the algorithm .

Given the first number , the second number , and the position of the desired Fibonacci number , the following function returns the Fibonacci .

Chapter : Functions Sample Runs : In these sample runs , the user input is shaded .

Sample Run : Enter the two Fibonacci numbers : The two Fibonacci numbers are and Enter the position of the desired Fibonacci number : The Fibonacci number at position is Sample Run : Enter the two Fibonacci numbers : The two Fibonacci numbers are and Enter the position of the desired Fibonacci number : The Fibonacci number at position is The following is an example of function that returns Boolean value .

In this example , function , isPalindrome , is designed that returns true if string is palindrome and false otherwise .
string is palindrome if it reads forward and backward in the same way .
For example , the strings , and " are all palindromes .

Suppose str is string .
To determine whether str is palindrome , compare the and the last characters of str .
If they are not the same , str is not palindrome and so the function should return false .
If the and the last characters of str are the same , then we compare the character with the character from the end , and so on .

Note that if , the number of characters in str , then we need to compare with , with , and in general with ,

The following algorithm implements this discussion :

Chapter contains program to calculate the bill for cable company .
In that program , all of the programming instructions are packed in the function main .
Here , we rewrite the same program using functions , further illustrating structured programming .

Because there are two types of customers , residential and business , the program contains two separate functions : one to calculate the bill for residential customers and one to calculate the bill for business customers .
Both functions calculate the billing amount and then return the billing amount to the function main .
The function main prints the amount due .
Let us call the function that calculates the residential bill residential and the function that calculates the business bill business .
The formulas to calculate the bills are the same as before .

Function residential : To compute the residential bill , you need to know the number of premium channels to which the customer subscribes .
Based on the number of premium channels , you can calculate the billing amount .
After calculating the billing amount , the function returns the billing amount using the return statement .
The following four steps describe this function :
Prompt the user for the number of premium channels .

Read the number of premium channels .

Calculate the amount due .

Return the amount due .

This function contains statement to prompt the user to enter the number of premium channels and statement to read the number of premium channels .
Other items needed to calculate the billing amount , such as the cost of basic service connection and bill processing fees , are defined as named constants the definition of the function .
Therefore , to calculate the billing amount , this function does not need to get any value from the function main .
This function , therefore , has no parameters .

From the previous discussion , it follows that the function residential requires local variables to store both the number of premium channels and the billing amount .
This function needs only these two local variables to calculate the billing amount : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Function business : To compute the business bill , you need to know the number of both the basic service connections and the premium channels to which the customer subscribes .

Then , based on these numbers , you can calculate the billing amount .
The billing amount is then returned using the return statement .
The following six steps describe this function :

Prompt the user for the number of basic service connections .

Read the number of basic service connections .

Prompt the user for the number of premium channels .

Read the number of premium channels .

Calculate the amount due .

Return the amount due .

This function contains the statements to prompt the user to enter the number of basic service connections and premium channels and .
The function also contains statements to input the number of basic service connections and premium channels and .
Other items needed to calculate the billing amount , such as the cost of basic service connections and bill processing fees , are defined as named constants the definition of the function .
It follows that to calculate the billing amount this function does not need to get any values from the function main .

From the preceding discussion , it follows that the function business requires variables to store the number of basic service connections and the number of premium channels , as well as the billing amount .
In fact , this function needs only these three local variables to calculate the billing .

The algorithm for the main program is as follows :
To output numbers in fixed decimal format with the decimal point and trailing zeros , set the manipulators fixed and showpoint .

To output numbers to two decimal places , set the precision to two decimal places .

Prompt the user for the account number .

Get the account number .

Prompt the user to enter the customer type .

Get the customer type .

If the customer type is or , Call the function residential to calculate the bill .

Print the bill .

If the customer type is or , Call the function business to calculate the bill .

Print the bill .

If the customer type is other than , or , it is an invalid customer type .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Functions case : case :

Sample Run : In this sample run , the user input is shaded .

This program computes cable bill .

Enter account  Enter customer type : Enter the of basic service connections : Enter the of premium channels used : Flow of Compilation and Execution As stated earlier , program is collection of functions .
Recall that functions can appear in any order .
The only thing that you have to remember is that you must declare an identifier before you can use it .
The program is compiled by the compiler sequentially from beginning to end .
Thus , if the function main appears before any other functions , it is compiled first .
However , if main appears at the end of the program , all functions whose definitions appear before the function main are compiled before the function main , in the order they are placed .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The compiler can then correctly translate function call .
However , when the program executes , the first statement in the function main always executes first , regardless of where in the program the function main is placed .
Other functions execute only when they are called .

function call transfers control to the first statement in the body of the function .
In general , after the last statement of the called function executes , control is passed back to the point immediately following the function call .
function returns value .
Therefore , after executing the function , when the control goes back to the caller , the value that the function returns replaces the function call statement .
The execution continues at the point immediately following the function call .

Suppose that program contains functions funcA and funcB , and funcA contains statement that calls funcB .
Suppose that the program calls funcA .
When the statement that contains call to funcB executes , funcB executes , and while funcB is executing , the execution of the current call of funcA is on hold until funcB is done .

PROGRAMMING EXAMPLE : Largest Number In this programming example , the function larger is used to determine the largest from set of numbers .
For the purpose of illustration , this program determines the largest from set of numbers .
You can easily enhance this program to accommodate any set of numbers .

PROBLEM ANALYSIS AND ALGORITHM DESIGN Input .

The largest of numbers .

Suppose that the input data is : Read the first of the data set .
Because this is the only read to this point , you may assume that it is the largest so far and call it max .

Read the second and call it num .
Now compare max and num and store the larger into max .
Now max contains the larger of the first two numbers .
Read the third .
Compare it with max and store the larger into max .
At this point , max contains the largest of the first three numbers .
Read the next  compare it with max , and store the larger into max .
Repeat this process for each remaining in the data set .

Eventually , max will contain the largest in the data set .
This discussion translates into the following algorithm : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Largest Number .

Read the first .
Because this is the only that you have read so far , it is the largest so far .
Save it in variable called .

For each remaining in the list :
Read the next .
Store it in variable called num .

Compare num and .

Because now contains the largest  print it .

To find the larger of two numbers , the program uses the function larger .

COMPLETE PROGRAM LISTING .

Sample Run : In this sample run , the user input is shaded .

In this section , you will explore functions in general and , in particular , those functions that do not have data type , called void functions .

Void functions and functions have similar structures .
Both have heading and body .
Like functions , you can place void functions either before or after the function main .
However , the program execution always begins with the first statement in the function main .
void function does not have data type .
Therefore , is , the return the heading part and the return statement in the body of the void functions are meaningless .

However , in void function , you can use the return statement without any value ; it is typically used to exit the function early .
Like functions , void functions may or may not have formal parameters .

Because void functions do not have data type , they are not used in an expression .

call to void function is statement .
Thus , to call void function , you use the function name together with the actual parameters in statement .

Before giving examples of void functions , next we give the syntax of void function .

FUNCTION DEFINITION The function definition of void functions with parameters has the following .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Void Functions in which statements are usually declaration executable statements .
The formal parameter list may be empty , in which case , in the function heading , the empty parentheses are still needed .

FORMAL PARAMETER LIST The formal parameter list has the following syntax : variable , variable ,

You must specify both the data type and the variable name in the formal parameter list .

The symbol after dataType has special meaning ; some parameters will have and some will not , and we will explain why later in this chapter .

FUNCTION CALL The function call has the following syntax : parameter ; ACTUAL PARAMETER LIST The actual parameter list has the following syntax : expression or variable , expression or variable ,

As with functions , in function call , the number of actual parameters together with their data types must match the formal parameters in the order given .
Actual and formal parameters have correspondence .

Example shows void function with parameters .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Functions PARAMETER TYPES and the called function .
They enable functions to manipulate different data each time they are called .
In general , there are two types of formal parameters : value parameters and reference parameters .

Value parameter : formal parameter that receives copy of the content of the corresponding actual parameter .

Reference parameter : formal parameter that receives the location of the corresponding actual parameter .

When you attach after the dataType in the formal parameter list of function , the variable following that dataType becomes reference parameter .

Example shows void function with value and reference parameters .

EXAMPLE Consider the following function definition : void length , double .

The function areaAndPerimeter has four parameters : length and width are value parameters of type double ; and and are reference parameters of type double .

Figure describes various parts of the function areaAndPerimeter .

Function name Value parameters Function heading void length , double width , length .

Various parts of the function areaAndPerimeter Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Void Functions EXAMPLE Consider the following definition : void testScore , int progScore , +

The function averageAndGrade has four parameters : testScore and progScore are value parameters of type int , is reference parameter of type double , and is reference parameter of type char .
Using visual diagrams , Examples , and explicitly show how value and reference parameters work .

EXAMPLE We write program to print pattern triangle of similar to the following : The first line has one star with some blanks before the star , the second line has two stars , some blanks before the stars , and blank between the stars , and so on .

write the function printStars that has two parameters , parameter to specify the number of blanks before the stars in line and second parameter to specify the number of stars in line .
To be specific , the definition of the function printStars is : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

If the value of the parameter blanks is , for instance , then the first for loop in the function printStars executes times and prints blanks .
Also , because you want to print space between the stars , every iteration of the second for loop in the function printStars prints the string  blank followed by star .

Next , consider the following statements : int .

The for loop calls the function printStars .
Every iteration of this for loop specifies the number of blanks followed by the number of stars to print in line , using the variables and .
Every invocation of the function printStars receives one fewer blank and one more star than the previous call .
For example , the first iteration of the for loop in the function main specifies blanks and star are passed as the parameters and to the function .

The for loop then decrements the number of blanks by by executing the statement ,
At the end of the for loop , the number of stars is incremented by for the next iteration .
This is done by executing the update statement in the for statement , which increments the value of the variable by .
In other words , the second call of the function printStars receives blanks and stars as parameters .

Thus , the previous statements will print triangle of stars consisting of lines .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Void Functions .

Chapter : Functions Sample Run : In this sample run , the user input is shaded .

Enter the number of star lines to to be printed : In the function main , the user is first asked to specify how many lines of stars to print .

Value Parameters The previous section defined two types of parameters reference parameters .
Example showed program that uses function with parameters .

Before considering more examples of void functions with parameters , let us make the following observation about value reference parameters .
When function is called , the value of the actual parameter is copied into the corresponding formal parameter .
If the formal parameter is value parameter , then after copying the value of the actual parameter , there is no connection between the formal parameter actual parameter ; that is , the formal parameter is separate variable with its own copy of the data .

Therefore , during program execution , the formal parameter manipulates the data stored in its own memory space .
The program in Example further illustrates how value parameter works .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : Line Line Line Line : Before calling the function funcValueParam , In the function funcValueParam , before changing , In the function funcValueParam , after changing , After calling the function funcValueParam , This program works as follows .
The execution begins at the function main .
The statement in Line declares initializes the int variable .
The statement in Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The value of the variable is then passed to the formal parameter .
Control now transfers to the function funcValueParam .

The statement in Line outputs the value of before changing its value .
The statement in Line changes the value of to ; the statement in Line outputs the value of .
After this statement executes , the function funcValueParam exits control goes back to the function main .

The statement in Line outputs the value of after calling the function remains the same even though the value of its corresponding formal parameter was changed within the function funcValueParam .

The output shows the sequence in which the statements execute .

After copying data , value parameter has no connection with the actual parameter , so value parameter cannot pass any result back to the calling function .
When the function executes , any changes made to the formal parameters do not in any way affect the actual parameters .
The actual parameters have no knowledge of what is happening to the formal parameters .
Thus , value parameters cannot pass information outside of the function .

Value parameters provide only link from the actual parameters to the formal parameters .
Hence , functions with only value parameters have limitations .

Reference Variables as Parameters The program in Example illustrates how value parameter works .
On the other hand , suppose that formal parameter is reference parameter .
Because reference parameter receives the address of the actual parameter , reference parameters can pass one or more values from function and can change the value of the actual parameter .

Reference parameters are useful in three .

When the value of the actual parameter needs to be changed When you want to return more than one value from function .

When passing the address would save memory space and time relative to copying large amount of data The first two situations are illustrated throughout this book .
Chapters and discuss the third situation , when arrays and classes are introduced .

Recall that when you attach after the dataType in the formal parameter list of function , the variable following that dataType becomes reference parameter .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Reference Variables as Parameters .

This will prevent the formal parameter from being able to change the value of the corresponding actual parameter .
Chapters and discuss constant reference parameters .
Until then , the reference parameters that you use will be nonconstant as defined in this chapter .
From the definition of reference parameter , it follows that constant value or an expression cannot be passed to nonconstant reference parameter .

If formal parameter is nonconstant reference parameter , during function call , its corresponding actual parameter must be variable .

EXAMPLE Calculate Grade The following program takes course score value between and and determines course grade .
This program has three functions : main , getScore , and printGrade , as follows :
Get the course score .

Print the course grade .

Prompt the user for the input .

Print the course score .

Calculate the course grade .

Print the course grade .

The complete program is as follows : program reads course score and prints the .

Chapter : Functions .

Sample Run : In this sample run , the user input is shaded .

Line : Based on the course  this program computes the course .

Line : Enter course  Line : Course is Line : Your for the course is .

This program works as follows .
The program starts to execute at Line , which prints the first line of the output the sample .
The statement in Line calls the function getScore with the actual parameter courseScore variable declared in .
Because the formal parameter of the function getScore is reference parameter , the address is , the memory location of the variable passes to .

Thus , both and courseScore now refer to the same memory location , which is courseScore Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Reference Variables as Parameters .

Variable courseScore and the parameter Any changes made to immediately change the value of courseScore .

Control is then transferred to the function getScore , and the statement in Line executes , printing the second line of output .
This statement prompts the user to enter the course .
The statement in Line reads and stores the value entered by the user in the sample in  which is actually courseScore is reference .
Thus , at this point , the value of both variables and courseScore is Figure .

After Line executes , control goes back to the function main Figure .

It is function call to the function printGrade with the actual parameter courseScore .
Because the formal parameter of the function printGrade is value parameter , the parameter receives the value of the corresponding actual parameter courseScore .

After copying the value of courseScore into  no communication exists between and courseScore Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Functions main courseScore FIGURE printGrade .

Variable courseScore and the parameter The program then executes the statement in Line , which outputs the fourth line .
Because the output statement in Line does not contain the newline character or the manipulator endl , the output of the if .

Because the next statement to execute in the function main is the last statement of the function main , the program terminates .

In this program , the function main first calls the function getScore to obtain the course from the user .
The function main then calls the function printGrade to calculate and print the based on this course .
The course is retrieved by the function getScore ; later , this course is used by the function printGrade .

Because the value retrieved by the getScore function is used later in the program , the function getScore must pass this value outside .
Because getScore is written as void function , the formal parameter that holds this value must be reference parameter .

Value and Reference Parameters and Memory Allocation When function is called , memory for its formal parameters and variables declared in the body of the function local is allocated in the function data area .

Recall that in the case of value parameter , the value of the actual parameter is copied into the memory cell of its corresponding formal parameter .
In the case of reference parameter , the address of the actual parameter passes to the formal parameter .
That is , the content of the formal parameter is an address .
During data manipulation , the address stored in the formal parameter directs the computer to manipulate the data of the memory cell at that address .
Thus , in the case of reference parameter , both the actual and formal parameters refer to the same memory location .
Consequently , during program execution , changes made by the formal parameter permanently change the value of the actual parameter .

Stream variables example , ifstream and should be passed by reference to function .
After opening the file or after reading outputting data , the state of the input output stream can then be passed outside the function .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Value and Reference Parameters and Memory Allocation .

Each covers different scenario .

EXAMPLE The following program shows how reference and value parameters work .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : Line Line Line Line Line : Inside main : and : Inside funOne : and : After funOne : and : Inside funTwo : and : After funTwo : and Let us walk through this program .
The values of the variables are shown before after each statement executes .

Just before the statement in Line executes , memory is allocated only for the variables of the function main ; this memory is not initialized .
After the statement in Line executes , the variables are as shown in Figure .

Values of the variables after the statement in Line executes The statement in Line produces the following output : Line : Inside main : and The statement in Line is function call to the function funOne .
Now function funOne has three parameters ,  and and local variable .
Memory for the parameters and the local variable of function funOne is allocated .
Because the formal parameter is reference parameter , it receives the address of the corresponding actual parameter , which is .
The other two formal parameters are value parameters , so they copy the values of their corresponding actual parameters .

Just before the statement in Line executes , the variables are as shown in Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Value and Reference Parameters and Memory Allocation .

FIGURE Values of the variables just before the statement in Line executes The following shows how the variables are manipulated after each statement from Line to executes .

Because is the reference parameter and contains the address of  the value of is updated .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Functions The statement in Line produces the following output : Line : Inside funOne : and After the statement in Line executes , control goes back to Line in main and the memory allocated for the variables of function funOne is deallocated .
Figure shows the values of the variables of the function main .

Values of the variables after the statement in Line Line produces the following output : Line : After funOne : and The statement in Line is function call to the function funTwo .
Now funTwo has three parameters : and .
Also , and are reference parameters , and is value parameter .

Thus , receives the address of its corresponding actual parameter , which is , and receives the address of its corresponding actual parameter , which is .
The variable copies the value into its memory cell .
Figure shows the values before the statement in Line executes .

Values of the variables before the statement in Line executes The following shows how the variables are manipulated after each statement from Line to executes .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Value and Reference Parameters and Memory Allocation St .

Because is the reference parameter and contains the address of , the value of is incremented by .

Because is the reference parameter and contains the address of  the value of is updated .

Line produces the following output : Line : Inside funTwo : and After the statement in Line executes , control goes to Line .
The memory allocated for the variables of function funTwo is deallocated .
The values of the variables of the function main are as shown in Figure .

Values of the variables after the statement in Line The statement in Line produces the following output : Line : After funTwo : and After the statement in Line executes , the program terminates .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Functions .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Sample Run : Line Line Line Line Line Line Line Line Line Line Line Line Line : Inside main : Inside addFirst : Inside addFirst : Inside addFirst : Inside main after addFirst : Inside doubleFirst : Inside doubleFirst : Inside doubleFirst : Inside main after doubleFirst : Inside squareFirst : Inside squareFirst : Inside squareFirst : Inside main after squareFirst : Both parameters of the function addFirst are reference parameters , and both parameters of the function doubleFirst are value parameters .
The statement : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Chapter : Functions in the function main passes the reference of to both formal parameters and of the function addFirst , because the corresponding actual parameters for both formal parameters are the same .
That is , the variables and refer to the same memory location , which is .
Figure illustrates this situation .

Parameters of the function addFirst Any changes that makes to its value immediately change the value of and Similarly , any changes that makes to its value immediately change and  because all three variables refer to the same memory location .
So the statement : in the function main copies the value of into and because the corresponding actual parameters for both formal parameters are the same .
Figure illustrates this scenario .

Parameters of the function doubleFirst Because both and are value parameters , any changes that makes to its value do not affect the values of and .
Similarly , any changes that makes to its value do not affect and .
The variable receives the address of its corresponding actual parameter , which is  and the variable copies the value of its Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Scope of an Identifier corresponding actual parameter , which is also .
Thus , both and refer to the same memory location , which is .
Figure illustrates this situation .

Parameters of the function squareFirst Any changes that makes immediately change .
Any changes made by do not We recommend that you walk through the program in Example .
The output shows the order in which the statements execute .

Reference Parameters and Functions Earlier in this chapter , in the discussion of functions , you learned how to use value parameters only .
You can also use reference parameters in function , although this approach is not recommended .
By definition , function returns single value ; this value is returned via the return statement .
If function needs to return more than value , as rule of good programming style , you should change it to void function and use the appropriate reference parameters to return the values .

Scope of an Identifier The previous sections presented several examples of programs with functions .

Identifiers are declared in function heading , within block , or outside block .
question naturally arises : Are you allowed to access any identifier anywhere in the program .

You must follow certain rules to access an identifier .
The scope of an identifier refers to where in the program an identifier is accessible .
Recall that an identifier is the name of something in , such as variable or function name .

This section examines the scope of an identifier .
First , we define the following terms : Local identifier : Identifiers declared within function .

Local identifiers are not accessible outside of the function .

Global identifier : Identifiers declared outside of every function definition .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Functions Also , does not allow the nesting of functions .
That is , you cannot include the definition of one function in the body of another function .

In general , the following rules apply when an identifier is accessed :
Global identifiers as are accessible by function or block if :
The identifier is declared before the function definition ,
The function name is different than the identifier , c .
All parameters of the function have names different than the name of the identifier , and .
All local identifiers as local have names different than the name of the identifier .

Only within the block from the point at which it is declared until the end of the block , and .
By those blocks that are nested within that block if the nested block does not have an identifier with the same name as that of the outside block block that encloses the nested .

The scope of function name is similar to the scope of an identifier declared outside any block .
That is , the scope of function name is the same as the scope of global variable .

Before considering an example to explain these scope rules , first note the scope of the identifier declared in the for statement .
allows the programmer to declare variable in the initialization statement of the for statement .
For example , the following for statement : endl ; declares the variable and initializes it to .
The scope of the variable is limited to only the body of the for loop .

This scope rule for the variable declared in for statement may not apply to Standard , that is , non Standard .
In Standard , the scope of the variable declared in the initialize statement may extend from the point at which it is declared until the end of the block that immediately surrounds the for statement .

Scope of an Identifier .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Chapter : Functions Table summarizes the scope of the identifiers .

TABLE Scope of the Identifiers Identifier Visibility in one Visibility in two Visibility Visibility in in Block three four Visibility in main .

local .

local .

one formal formal formal Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Global Variables , Named Constants , and Side Effects Note that function three cannot call function one , because function three has formal parameter named one .
Similarly , the block marked four in function three cannot use the int variable , which is declared in function three , because block four has an identifier named .

Before closing this section , let us note the following about global variables :
Chapter stated that does not automatically initialize variables .

However , some compilers initialize global variables to their default values .
For example , if global variable is of type int , char , or double , it is initialized to zero .

In , is called the scope resolution operator .
By using the scope resolution operator , global variable declared before the definition of function can be accessed by the function even if the function has an identifier with the same name as the variable .
In the preceding program , by using the scope resolution operator , the function main can refer to the global variable as .

Similarly , suppose that global variable is declared before the definition of the , funExample .
Then , funExample can access the variable using the scope resolution operator even if funExample has an identifier .
Using the scope resolution operator , funExample refers to the variable as .
Also , in the preceding program , using the scope resolution operator , function three can call function one .

provides way to access global variable declared after the definition of function .
In this case , the function must not contain any identifier with the same name as the global variable .
In the preceding program , the global variable is declared after the definition of function one .
The function one does not contain any identifier named ; therefore , can be accessed by function one only if you declare as an external variable inside one .
To declare as an external variable inside function one , the function one must contain the following statement : extern int ; In , extern is reserved word .
The word extern in the above statement announces that is global variable declared elsewhere .

Thus , when function one is called , no memory for , as declared inside one , is allocated .
In , external declaration also has another use , but it is not discussed in this book .

Global Variables , Named Constants , and Side Effects program can contain global variables and you might be tempted to make all of the variables in program global variables so that you do not have to worry about what function knows about which variable .
Using global variables , however , has side effects .
If Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Functions more than one function uses the same global variable and something goes wrong , it is difficult to discover what went wrong and where .
Problems caused by global variables in one area of program might be misunderstood as problems caused in another area .

For example , consider the following .

Sample Run : Line Line Line Line Line : In main : In funOne : and : In funOne : and : In funOne : and : In main after funOne : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Global Variables , Named Constants , and Side Effects This program has variable that is declared before the definition of any function .
Because none of the functions has an identifier  the variable is accessible anywhere in the program .

Also , the program consists of void function with reference parameter .

In Line , the function main calls the function funOne , and the actual parameter passed to funOne is .
So ,  the formal parameter of funOne , receives the address of .
Any changes that makes to its value immediately change .
Because can be directly accessed anywhere in the program , in Line , the function funOne changes the value of by using itself .
Thus , you can manipulate the value of by using either reference parameter or itself .

In the previous program , if the last value of is incorrect , it would be difficult to determine what went wrong and in which part of the program .
We strongly recommend that you do not use global variables ; instead , use the appropriate parameters .

In the programs given in this book , we typically placed named constants before the function main , outside of every function definition .
That is , the named constants we used are global named constants .
Unlike global variables , global named constants have no side effects because their values cannot be changed during program execution .
Moreover , placing named constant in the beginning of the program can increase readability , even if it is used only in one function .
If you need to later modify the program and change the value of named constant , it will be easier to find if it is placed in the beginning of the program .

In an algebra course , one learns how to factor polynomial by using various techniques .
In this example , we write program to factor second degree polynomial of the form bx c , write bx c ðx uÞðx vÞ .
For simplicity , we restrict this program to factor polynomials , where , c , and are integers .

For example , ðx , ðx , and ðx .

It can be shown that the values of and are given by pﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ pﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ If , then and are complex numbers ; if and is not the square of an integer , then ﬃu and are not integers .

Also , if is the square of an pﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ integer and and are not divisible by , then andﬃ are pﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ and not integers .

It follows that for and to be integers , pﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ must be divisible by .
The following function takes as parameter , the values of and c , and returns the values of and as well as indicating whether the polynomial is factorable .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Global Variables , Named Constants , and Side Effects .

Sample Runs : In these sample runs , the user input is shaded .

Sample Run : Enter the coefficient of  Enter the constant term : Sample Run .

Enter the constant term : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Chapter : Functions Sample Run : Enter the coefficient of  Enter the constant term : Sample Run : Enter the coefficient of  Enter the constant term : The polynomial is not .

The following is an example of program .
When the program executes , it gives the user list of choices to choose from .
This program further illustrates how value and reference parameters work .
It converts length from feet and inches to meters and centimeters and vice versa .
The program contains three functions : showChoices , feetAndInchesToMetersAndCent , and metersAndCentToFeetAndInches .
The function showChoices informs the user how to use the program .
The user has the choice to run the program as long as the user wishes .

Global Variables , Named Constants , and Side Effects .

Chapter : Functions .

Sample Run : In this sample run , the user is shaded .

The preceding output is .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , whole or part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Static and Automatic Variables Static and Automatic Variables The variables discussed so far have followed two simple rules :
Memory for global variables remains allocated as long as the executes .

Memory for variable declared within block is allocated at block entry and deallocated at block exit .
For example , memory for the formal parameters and local variables of function is allocated when the function is called and deallocated when the function exits .

variable for which memory is allocated at block entry and deallocated at block exit is called an automatic variable .
variable for which memory remains allocated as long as the executes is called static variable .
Global variables are static variables , and by default , variables declared within block are automatic variables .
You can declare static variable within block by using the reserved word static .
The syntax for declaring static variable is : static dataType .

Static variables declared within block are local to the block , and their scope is the same as that of any other local identifier of that block .

Most compilers initialize static variables to their default values .
For example , static int variables are initialized to .
However , it is good practice to initialize static variables yourself , especially if the initial value is not the default value .
In this case , static variables are initialized when they are declared .
The statement : static int ; declares to be static variable of type int and initializes to , the first time the function is called .

EXAMPLE The following shows how static and automatic variables behave .

Sample Run : Inside Inside Inside Inside Inside test test test test test and and and and and In the function test , is static variable initialized to , and is an automatic variable initialized to .
The function main calls the function test five times .
Memory for the variable is allocated every time the function test is called and deallocated when the function exits .
Thus , every time the function test is called , it prints the same value for .
However , because is static variable , memory for remains allocated as long as the executes .
The variable is initialized once to , the first time the function is called .
The subsequent calls of the function test use the value had when the last left the function test .

Because memory for static variables remains allocated between function calls , static variables allow you to use the value of variable from one function call to another function call .
Even though you can use global variables if you want to use certain values from one function call to another , the local scope of static variable prevents other functions from manipulating its value .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , whole or part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Debugging : Using Drivers and Stubs Debugging : Using Drivers and Stubs In this and the previous chapters , you learned how to write functions to divide problem into subproblems , solve each subproblem , and then combine the functions to form the complete program to get solution of the problem .
program may contain number of functions .
In complex program , usually , when function is written , it is tested and debugged alone .
You can write separate program to test the function .
The program that tests function is called driver program .
For example , the program in Example contains functions to convert the length from feet and inches to meters and centimeters and vice versa .
Before writing the complete program , you could write separate driver programs to make sure that each function is working properly .

Sometimes , the results calculated by one function are needed in another function .
In that case , the function that depends on another function cannot be tested alone .
For example , consider the following program that determines the time needed to fill swimming pool .

Sample Run : In this sample run , the user input is shaded .

Enter the length , width , the depth of the pool : Enter the rate of the water , gallons per : The time to fill the pool is approximately :

As you can see , the program contains the function poolCapacity to find the amount of water needed to fill the pool , the function poolFillTime to find the time to fill the pool , some other functions .
Now , to calculate the time to fill the pool , you must know the amount of the water needed the rate at which the water is released in the pool .
Because the results of the function poolCapacity are needed in the function poolFillTime , the function poolFillTime cannot be tested alone .
Does this mean that we must write the functions in specific order .
Not necessarily , especially when different people are working on different parts of the program .
In situations such as these , we use function stubs .

function stub is function that is not fully coded .
For void function , function stub might consist of only function header set of empty braces , for valuereturning function it might contain only return statement with plausible easy to use return value .
For example , the function stub for the function poolCapacity can .

Function Overloading : An Introduction .

Ultimately , the stub for function poolCapacity is replaced with function that properly calculates the amount of water needed to fill the pool based on the values of the parameters .
In the meantime , the function stub allows work to continue on other parts of the program that call the function poolCapacity .

Because stub looks lot like viable function , it must be properly documented in way that would remind you to replace it with the actual definition .
If you forget to replace stub with the actual definition , the program will generate erroneous results , which sometimes might be embarrassing .

Before we look at some programming examples , another concept about functions is worth mentioning : function overloading .

Function Overloading : An Introduction In program , several functions can have the same name .
This is called function overloading , or overloading function name .
Before we state the rules to overloading function , let us define the following : Two functions are said to have different formal parameter lists if both functions .

different number of formal parameters or The same number of formal parameters the data types of the formal parameters , in the order listed , differ in at least one position .

The functions functionSix functionSeven both have three formal parameters , the data type of the corresponding parameters is the same .
Therefore , these functions have the same formal parameter list .
Note that it is the data types not the parameter names or the return type that are examined .

To overload function name , any two definitions of the function must have different formal parameter lists .

Function overloading : Creating several functions with the same name .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Functions The signature of function consists of the function name its formal parameter list .
Two If function ' name is overloaded , then all of the functions in the set have the same name .

Therefore , all the functions in the overloaded set must have different formal parameter lists .

Thus , the following function headings correctly overload the function functionXYZ : void void void void .

Both of these function headings have the same name same formal parameter list .

Therefore , these function headings to overload the function functionABC are incorrect .

In this case , the compiler will generate syntax error .

Some authors define the signature of function as the formal parameter list , some consider the entire heading of the function as its signature .
However , in this book , the signature of function consists of the function ' heading its formal parameter list .
If the function ' names are different , then , of course , the compiler would have no problem in identifying which function is called , it will correctly translate the code .
However , if function ' name is overloaded , then , as noted , the function ' formal parameter list determines which function ' body executes .

Suppose you need to write function that determines the larger of two items .
Both items can be integers , numbers , characters , or strings .

The function largerInt determines the larger of two integers ; the function largerChar determines the larger of two characters , so on .
All of these functions perform similar operations .
Instead of giving different names to these functions , you can use the same , each function ; that is , you can overload the function larger .

Thus , you can write the previous function prototypes simply as : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Functions with Default Parameters .

If the call is , for example , the version having int parameters is executed .
If the call is , the version having char parameters is executed , so on .

Function overloading is used when you have the same action for different sets of data .

Of course , for function overloading to work , you must give separate definition for each function .

Functions with Default Parameters This section is not needed until Chapter .

Recall that when function is called , the number of actual and formal parameters must be the same .
relaxes this condition for functions with default parameters .
You specify the value of default parameter when the function name appears for the first time , usually in the prototype .

In general , the following rules apply for functions with default .

If you do not specify the value of default parameter , the default value is used for that parameter .

All of the default parameters must be the parameters of the function .

Suppose function has more than one default parameter .
In function call , if value to default parameter is not specified , then you must omit all of the arguments to its right .

Default values can be constants , global variables , or function calls .

The caller has the option of specifying value other than the default for any default parameter .

You cannot assign constant value as default value to reference parameter .

Consider the following function prototype : void , int , double , char , int , char , double ; The function funcExp has seven parameters .
The parameters    and are default parameters .
If no values are specified for    and in call to the function funcExp , their default values are used .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In statement , the default value of is replaced by , the default value of is replaced by , the default value of is replaced by the value of ch , and the default value of is used .
In statement , the default value of is replaced by , and the default values of   and are used .

The following function calls are illegal :

In statement , because the first parameter is default parameter , all parameters must be default parameters .
In statement , constant value cannot be assigned to because is reference parameter .

Example further illustrates functions with default parameters .

Functions with Default Parameters .

Sample Run : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Functions In programs in this book , and as is recommended , the definition of the function main is placed before the definition of any functions .
You must , therefore , specify the default value for parameter in the function prototype and in the function prototype only , not in the function definition because this must occur at the first appearance of the function name .

PROGRAMMING EXAMPLE : Classify Numbers In this example , we use functions to rewrite the program that determines the number of odds and evens from given list of integers .
This program was first written in Chapter .

The main algorithm remains the same :
Initialize the variables , zeros , odds , and evens to .

Read number .

If the number is even , increment the even count , and if the number is also zero , increment the zero count ; otherwise , increment the odd count .

Repeat Steps and for each number in the list .

The main parts of the program are : initialize the variables , read and classify the numbers , and then output the results .
To simplify the function main and further illustrate parameter passing , the program .

function initialize to initialize the variables , such as zeros , odds , and evens .

function getNumber to get the number .

function classifyNumber to determine whether the number is odd or even whether it is also .
This function also increments the appropriate count .

function printResults to print the results .

Let us now describe each of these functions .

The variables that we need to initialize are zeros , odds , and evens .
As before , their initial values are all zero .
Clearly , this function has three parameters .
Because the values of the formal parameters initializing these variables must be passed outside of the function , these formal parameters must be reference parameters .
Essentially , this function .

Programming Example : Classify Numbers .

Because you need to pass only one number , this function has only one parameter .
The formal parameter of this function must be reference parameter because the number read is passed outside of the function .
Essentially , this function .

It also updates the values of some of the variables , zeros , odds , and evens .
This function needs to know the number to be analyzed ; therefore , the number must be passed as parameter .
Because this function also increments the appropriate count , the variables is , zeros , odds , and evens declared in holding the counts must be passed as parameters to this function .
Thus , this function has four parameters .

Because the number will only be analyzed and not altered , you need to pass only its value .
Thus , the formal parameter corresponding to this variable is value parameter .

After analyzing the number , this function increments the values of some of the variables , zeros , odds , and evens .
Therefore , the formal parameters corresponding to these variables must be reference parameters .
The algorithm to analyze the number and increment the appropriate count is the same as before .
The definition of this function is : void   

The function printResults prints the final results .
To print the results is , the number of zeros , odds , and , this function must have access to the values of the variables , zeros , odds , and evens declared in the function main .
Therefore , this function has three parameters .
Because this function change the values of Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Functions .

We now give the main algorithm and show how the function main calls these functions .

Call the function initialize to initialize the variables .

Prompt the user to enter numbers .

For each number in the list :
Call the function getNumber to read number .

Output the number .

Call the function classifyNumber to classify the number and increment the appropriate count .

Call the function printResults to print the final results .

COMPLETE PROGRAM LISTING .

Chapter : Functions .

Sample Run : In this sample run , the user input is shaded .

Please enter integers .

The numbers you entered are : There are evens , which includes zeros The of odd numbers is : In the previous program , because the data is assumed to be input from the standard input device and the function getNumber returns only one value , you can also write the function getNumber as function .
If written as function , the definition of the function getNumber .

Of course , you also need to change the function prototype .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Data Comparison .

This programming example illustrates : Watch the Video .

How to read data from more than one file in the same program .

How to send output to file .

How to generate bar graphs .

With the help of functions and parameter passing , how to use the same program segment on different sets of data .

How to use structured design to solve problem and how to perform parameter passing .

This program is broken into two parts .
First , you learn how to read data from more than one file .
Second , you learn how to generate bar graphs .

Two groups of students at local university are enrolled in certain special courses during the summer semester .
The courses are offered for the first time and are taught by different teachers .
At the end of the semester , both groups are given the same tests for the same courses , and their scores are recorded in separate files .
The data in each file is in the following form : courseNo courseNo .

The output is of the following form : Course No CSC ENG Group No Course Average .

Avg for group : Avg for group : Input Because the data for the two groups are recorded in separate files , the input data appears in two separate files .

Output As shown above .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Suppose the data is stored in the file for group and file for group .
After processing the data for one group , we can process the data for the second group for the same course and continue until we run out of data .
Processing data for each course is similar and is process :
Sum the scores for the course .

Count the of students in the course .

Divide the total score by the of students to find the course average .

Output the results .

We are comparing only the averages of the corresponding courses in each group , and the data in each file is ordered according to course ID .
To ensure that only the averages of the corresponding courses are compared , we compare the course IDs for each group .
If the corresponding course IDs are not the same , we output an error message and terminate the program .

This discussion suggests that we should write function , calculateAverage , to find the course average .
We should also write another function , printResult , to output the data in the form given .
By passing the appropriate parameters , we can use the same functions , calculateAverage and printResult , to process each data for both groups .

The preceding discussion translates into the following algorithm :

Variables Initialize the variables .

Get the course IDs for group and group .

If the course IDs are different , print an error message and exit the program .

Calculate the course averages for group and group .

Print the results in the form given above .

Repeat Steps through for each course .

Print the final results .

The preceding discussion suggests that the program needs the following variables for .

Programming Example : Data Comparison .

Then , we will put the function main together .

Because the input is stored in file and the input file is opened in the function main , we must pass the ifstream variable associated with the input file to this function .
Furthermore , after calculating the course average , this function must pass the course average to the function main .
Therefore , this function has two parameters , and both parameters must be reference parameters .

To find the course average , we must first find the sum of all scores for the course and the number of students who took the course and then divide the sum by the number of students .
Thus , we need variable to find the sum of the scores , variable to count the number of students , and variable to read and store score .
Of course , we must initialize the variable to find the sum and the variable to count the number of students to zero .

Local Variables calculate In the previous discussion of data manipulation , we identified three variables for the .

Declare and initialize variables .

Get the course score , score .

Update by adding the course score .

Get the course .

The function printResult prints the course ID , group  and course average .
The output is stored in file .
So we must pass four parameters to this function : the ofstream variable associated with the output file , the group  the course ID , and the course average for the group .
The ofstream variable must be passed by reference .
Because the function uses only the values of the other variables , the remaining three parameters should be value parameters .
Also , from the output , it is clear that we print the course ID only before the group .

In pseudocode , the algorithm is : print course ID else print blank print group and course average The definition of the function printResult follows : void  string courseID , int  else .

Now that we have designed and defined the functions calculateAverage and printResult , we can describe the algorithm for the function main .
Before outlining the algorithm , however , we note the following : It is quite possible that in both input files , the data is ordered according to the course IDs , but one file might have one or more additional courses that are not in the other file .
We do not discover this error until after we have processed both files and discovered that one file has unprocessed data .
Make sure to check for this error before printing the final is , the averages for group and group .

MAIN ALGORITHM : Function main .
Declare the variables .

Open the input files .

Print message if you are unable to open file and terminate the program .

Open the output file .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Data Comparison .

To output numbers in fixed decimal format with the decimal point and trailing zeros , set the manipulators fixed and showpoint .
Also , to output numbers to two decimal places , set the precision to two decimal places .

Initialize the course average for group to .

Initialize the course average for group to .

Initialize the of courses to .

Print the heading .

Get the course ID , for group .

Get the course ID , for group .

For each course in group and group .

Calculate the course average for group the function calculateAverage and pass the appropriate .

Calculate the course average for group the function calculateAverage and pass the appropriate .

Print the results for group the function printResult and pass the appropriate .

Print the results for group the function printResult and pass the appropriate .

Update the average for group .

Update the average for group .

Increment the of courses .

Get the course ID , for group .

Get the course ID , for group .

Close the input and output files .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Data Comparison .

Course No CSC Group No Course ENG HIS MTH PHY Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Data Comparison .

Many currently available software packages can analyze data in several forms and then display the results in visual form , such as bar graphs or pie charts .
The second part of this program aims to display the results found earlier in the form of bar graphs , as shown below : Course ID CSC ENG Course Average .

Group Group Avg for group : Avg for group : Each symbol or in the bar graph represents two points .
If course average is less than , no symbol is printed .

Because the output is in the form of bar graph , we need to modify the function printResult .

Print Bars The function printResult prints the course ID and the bar graph representing the average for course .
The output is stored in file .
So we must pass four parameters to this function : the ofstream variable associated with the output file , the group Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Functions number print or , the course ID , and the course average for the department .

To print the bar graph , we can use loop to print one symbol for every two points .

If the average is , we must print symbols to represent this average .

Following this discussion , the definition of the function printResult is : void  string 

Replace the function printResult in the preceding program , include the function printHeading , include the statements to output Group and Group  and rerun the program .
Your program should generate bar graph similar to the bar graph shown earlier .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Quick Review QUICK REVIEW .

Functions , also called modules , are like miniature programs .

Functions enable you to divide program into manageable tasks .

The system provides the standard functions .

To use standard function , you must :

Know the name of the header file that contains the specification , Include that header file in the program , and Know the name and type of the function and number and types of the parameters .

There are two types of functions : functions and void functions .

Variables defined in function heading are called formal parameters .

Expressions , variables , or constant values used in function call are called actual parameters .

In function call , the number of actual parameters and their types must match with the formal parameters in the order given .

To call function , use its name together with the actual parameter list .

function returns value .
Therefore , function is used in either an expression or an output statement or as parameter in function call .

The general syntax of function .

The line functionType parameter is called the function heading function .
Statements enclosed between braces and are called the body of the function .

The function heading and the body of the function are called the definition of the function .

If function has no parameters , you still need the empty parentheses in both the function heading and the function call .

function returns its value via the return statement .

However , whenever return statement executes in function , the remaining statements are skipped and the function exits .

return statement returns only one value .

function prototype is the function heading without the body of the function ; the function prototype ends with the semicolon .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Functions function prototype announces the function type , as well as the type and number of parameters , used in the function .

In function prototype , the names of the variables in the formal parameter list are optional .

Function prototypes help the compiler correctly translate each function call .

In program , function prototypes are placed before every function definition , including the definition of the function main .

When you use function prototypes , functions can appear in any order in the program .

When the program executes , the execution always begins with the first statement in the function main .

Functions execute only when they are called .

call to function transfers control from the caller to the called function .

In function call statement , you specify only the actual parameters , not their data type or the function type .

When function exits , control goes back to the caller .

function that does not have data type is called void function .

return statement without any value can be used in void function .
If return statement is used in void function , it is typically used to exit the function early .

The heading of void function starts with the word void .

In , void is reserved word .

void function may or may not have parameters .

call to void function is statement .

To call void function , you use the function name together with the actual parameters in statement .

There are two types of formal parameters : value parameters and reference parameters .

value parameter receives copy of its corresponding actual parameter .

reference parameter receives the address of its corresponding actual parameter .

The corresponding actual parameter of value parameter is an expression , variable , or constant value .

constant value cannot be passed to reference parameter .

The corresponding actual parameter of reference parameter must be variable .

When you include after the data type of formal parameter , the formal parameter becomes reference parameter .

The stream variables should be passed by reference to function .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Quick Review .

The scope of an identifier refers to those parts of the program where it is accessible .

Variables declared within function are called local variables .

Variables declared outside of every function definition are called global variables .

The scope of function name is the same as the scope of an identifier declared outside of any block .

See the scope rules in this chapter , Scope of an .

does not allow the nesting of function definitions .

An automatic variable is variable for which memory is allocated on function entry and deallocated on function exit .

static variable is variable for which memory remains allocated throughout the execution of the program .

By default , global variables are static variables .

In , function can be overloaded .

Two functions are said to have different formal parameter lists if both functions .

different number of formal parameters , or The same number of formal parameters and the data types of the formal parameters , in the order listed , differ in at least one position .

The signature of function consists of the function name and its formal parameter list .
Two functions have different signatures if they have either different names or different formal parameter lists .

If function is overloaded , then in call to that function the formal parameter list of the function determines which function to execute .

allows functions to have default parameters .

If you do not specify the value of default parameter , the default value is used for that parameter .

All of the default parameters must be the parameters of the function .

Suppose function has more than one default parameter .
In function call , if value to default parameter is not specified , then you must omit all arguments to its right .

Default values can be constants , global variables , or function calls .

The calling function has the option of specifying value other than the default for any default parameter .

You cannot assign constant value as default value to reference parameter .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Functions EXERCISES The number in parentheses at the end of an exercise refers to the learning objective listed at the beginning of the chapter .

Mark the following statements as true or false :

To use predefined function in program , you need to know only the Parameters allow you to use different values each time the function is When return statement executes in function , the If function does not use parameters , parentheses around the In , the names of the corresponding formal and actual parameters function that changes the value of reference parameter also changes Whenever the value of reference parameter changes , the value of the In , function definitions can be nested ; that is , the definition of Using global variables in program is better programming style than The memory for static variable remains allocated between function .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Using the functions described in Table , write each of the following as expression .

What What What What What is is is is is the the the the the output output output output output if if if if if the the the the the input input input input input is is is is is .

Which of the following statements are valid .

How many parameters does the function have .
What is the type of the function .

How many parameters does function have .
What is the type of function .

How many parameters does function have .
What is the type of function .

How many parameters does function join have .
What is the type of function join .

How many actual parameters are needed to call the function .

What is the type of each actual parameter , and in what order should you use these parameters in call to the function .

Write statement that prints the value returned by the function with the actual parameters and .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Functions Write statement that prints the value returned by function join with the actual parameters " and , respectively .

Write statement that prints the next character returned by Why do you need to include function prototypes in program that contains Write the definition of function that takes as input char value and Consider the following function :

What is the output of the following statements .

Write the definition of function that takes as input the three numbers .

The function returns true if the number to the power of the number equals the third number ; otherwise , it returns false .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

What is the output of this program .

Chapter : Functions Write the definition of function that takes as input three decimal numbers and returns the first number multiplied by the second number to the power .

Function prototype , function heading , function body , and function definitions .

Function call statements , formal parameters , and actual parameters .

Value parameters and reference parameters .

Local variables and global variables .

Explain the difference between value and reference parameter .

Explain the difference between local and global variable .

What What What What is is is is the the the the output output output output if if if if the the the the input input input input is is is is .

Write the definition of void function that takes as input decimal number and outputs times the value of the decimal number .
Format your output Write the definition of void function that takes as input two decimal numbers .
If the first number is nonzero , it outputs the number divided by the first number ; otherwise , it outputs message indicating that the number cannot be divided by the first number because the first Write the definition of void function with three reference parameters of type int , double , and string .
The function sets the of the int and double Write the definition of void function that takes as input three parameters of type int , say sum , prod , and .
The function updates the value of sum by adding the value of  and the value of prod by multiplying the value of .
The new of sum and prod are reflected in the calling .

In the following program , number the marked statements to show the order in which they will execute logical order of .

All Rights Reserved .
May not be copied , scanned , duplicated , in whole in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

What is the output if the input is .

What is the output if the input is .

What is the output if the input is .

The function traceMe in Exercise outputs the of   and .

Modify the definition of this function so that rather than print these  int .

Consider the following function .

Write program that uses the function isPalindrome given in Example .
Test your program on the following strings : and .

Modify the function isPalindrome of Example so that when determining whether string is palindrome , cases are ignored , that is , uppercase and lowercase letters are considered the same .

Write function , isVowel , that returns the value true if given character is vowel and otherwise returns false .

Write program that prompts the user to input sequence of characters and outputs the number of vowels .
The program should use and the functions listed in Table to accomplish the following : pﬃﬃﬃ Output the value of .

Prompt the user to input the value of double variable , which stores the radius of sphere .
The program then outputs the following :

The value of , which is the surface area of the sphere .

The value of , which is the volume of the sphere .

The following program is designed to find the area of rectangle , the area of circle , or the volume of cylinder .
However , the statements are in the incorrect order ; the function calls are incorrect ; the logical expression in the while loop is incorrect ; and the function definitions are incorrect .

Rewrite the program so that it works correctly .
Your program must be properly indented .

Modify the roll dice  Example , so that it allows the user to the desired sum of the numbers to be rolled .
Also allow the user to call the rollDice function as many times as the user desires .

The following formula gives the distance between two points , and , in the Cartesian plane : qﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ Given the center and point on the  you can use this formula to find the radius of the .
Write that prompts the user to the center and point on the .
The should then output the radius , diameter , circumference , and area .
Your must have at least the following functions :

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Rewrite the in Programming Exercise of Chapter phone so that it uses the following functions to calculate the billing amount .

Chapter : Functions regularBill : This function calculates and returns the billing amount for regular service .

Write that takes as input five numbers and outputs the mean and standard deviation of the numbers .
If the numbers are , and , then the mean is + + + + and the standard deviation is : sﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ Your must contain at least the following functions : function that calculates and returns the mean and function that calculates the standard deviation .

When you borrow money to buy house , car , or for some other purposes , then you typically repay it by making periodic payments .
Suppose that the loan amount is , is the interest rate per year , is the number of payments in year , and the loan is for years .
Suppose that and is in decimal .
Then the periodic payment is : Li  You can also calculate the unpaid loan balance after making certain payments .

For example , the unpaid balance after making payments is : Programming Exercises .

The then outputs the apropriate values .
Your must contain at least two functions , with appropriate parameters , to calculate the periodic payments and the unpaid balance after certain payments .
Make the menu driven and use loop so that the user can repeat the for different values .

During the tax season , every Friday , the accounting firm provides assistance to people who prepare their own tax returns .
Their charges are as follows :

If person has low income and the consulting time is less than or equal to minutes , there are no charges ; otherwise , the service charges are of the regular hourly rate for the time over minutes .

For others , if the consulting time is less than or equal to minutes , there are no service charges ; otherwise , service charges are of the regular hourly rate for the time over minutes .

Write program that prompts the user to enter the hourly rate , the total consulting time , and whether the person has low income .
The program should output the billing amount .
Your program must contain function that takes as input the hourly rate , the total consulting time , and value indicating whether the person has low income .
The function should return the billing amount .
Your program may prompt the user to enter the consulting time in minutes .

During winter when it is very cold , typically , everyone would like to know the windchill factor , especially , before going out .
Meteorologists use the following formula to compute the windchill factor ,  +

Write program that prompts the user to input the wind speed , in miles per hour , and the temperature in degrees Fahrenheit .

The program then outputs the windchill factor .
Your program must contain at least two functions : one to get the user input and the other to determine the windchill factor .

Consider the definition of the function .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Chapter : Functions The variables , rate , and hours referred to in items through below are the variables of the function main .
Each of the functions described must have the appropriate parameters to access these variables .
Write the following definitions : Write the definition of the function initialize that initializes and to and to the blank character .

Write the definition of the function getHoursRate that prompts the user to input the hours worked and rate per hour to initialize the variables hours and rate of the function main .

Write the definition of the function payCheck that calculates and returns the amount to be paid to an employee based on the hours worked and rate per hour .
The hours worked and rate per hour are stored in the variables hours and rate , respectively , of the function main .
The formula for calculating the amount to be paid is as follows : For the first hours , the rate is the given rate ; for hours over , the rate is times the given rate .

Write the definition of the function printCheck that prints the hours worked , rate per hour , and the salary .

Write the definition of the function funcOne that prompts the user to input number .
The function then changes the value of by assigning the value of the expression times the value of plus the value of minus the value entered by the user .

Write the definition of the function nextChar that sets the value of to the next character stored in .

Write the definition of function main that tests each of these functions .

Consider the following code :

Write the definition of so that its action is as follows :

Prompt the user to input two integers and store the numbers in and , respectively .

Otherwise , the value assigned to c is .

The values of  and c are passed back to the calling environment .

After completing the definition of the and writing its function prototype , test run your program .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Functions The statements in the following program are not in the correct order .

Rearrange the statements so that the program outputs the total time an employee spent on the job each day .
The program asks the user to the name , the arrival time hour , arrival minute , AM or , and departure time hour , departure minute , AM or .
The program also allows the user to run the program as long as the user wishes .

After rearranging the statements , your program must be properly indented .

The function printGrade in Example is written as void function to compute and output the course grade .
The course score is passed as parameter to the function printGrade .
Rewrite the function printGrade as function so that it computes and returns Also , change the name of the function to calculateGrade .

In this exercise , you are to modify the Classify Numbers programming example in this chapter .
As written , the program inputs the data from the standard device and outputs the results on the standard output device .
The program can process only numbers .
Rewrite the program to incorporate the following requirements : Data to the program is from file of an unspecified length ; that is , the program does not know in advance how many numbers are in the file .

Save the output of the program in file .

Modify the function getNumber so that it reads number from the file in the function , outputs the number to the output file in the function , and sends the number read to the function main .
Print only numbers per line .

Have the program find the sum and average of the numbers .

Modify the function printResult so that it outputs the final results to the output file in the function .
Other than outputting the appropriate counts , this new of the function printResult should also output the sum and average of the numbers .

Write program that prints the day number of the year , given the date in the form .
For example , if the is , the day number is ; if the is , the day number is .
The program should check for leap year .
year is leap year if it is divisible by , but not divisible by .
For example , and are divisible by .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

year that is divisible by is leap year if it is also divisible by .
For example , and are divisible by .
However , is not leap year because is not divisible by .

Write progam that reads string and outputs the number of times each lowercase vowel appears in it .
Your program must contain function with one of its parameters as string variable and return the number of times each lowercase vowel appears in it .
Also write program to test your function .
Write progam that reads string and outputs the number of times each lowercase vowel appears in it .
Your program must contain function with one of its parameters as char variable , and if the character is vowel , it increments that count .

Also write program to test your function .

The cost to become member of fitness center is as follows : the senior citizens discount is ; if the is bought and paid for or more months , the discount is ; and if more than five personal training sessions are bought and paid for , the discount on each session is .
Write program that determines the cost of new .

Your program must contain function that displays the general information about the fitness center and its charges , function to get all of the necessary information to determine the cost , and function to determine the cost .
Use appropriate parameters to pass information in and Write program that outputs inflation rates for two successive years and whether the inflation is increasing or decreasing .
Ask the user to the current price of an item and its price one year and two years ago .
To calculate the inflation rate for year , subtract the price of the item for that year from the price of the item one year ago and then divide the result by the price year ago .
Your program must contain at least the following functions : function to get the  function to calculate the results , and function to output the results .
Use appropriate parameters to pass the information in and out of the function .

Write program to convert the time from notation to notation and vice versa .
Your program must be menu driven , giving the user the choice of converting the time between the two notations .
Furthermore , your program must contain at least the following functions : function to convert the time from notation to notation , function to convert the time from notation to notation , function to display the choices , to get the  and to display the results .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Functions Jason opened coffee shop at the beach and sells coffee in three sizes : small , medium , and large .
The cost of one small cup is , one medium cup is , and one large cup is .
Write program that will make the coffee shop operational .
Your program should allow the user to do the following : Buy coffee in any size and in any number of cups .

At any time show the total number of cups of each size sold .

At any time show the total amount of coffee sold .

At any time show the total money made .

Your program should consist of at least the following functions : function to show the user how to use the program , function to sell coffee , function to show the number of cups of each size sold , function to show the total amount of coffee sold , and function to show the total money made .
Your program should not use any global variables and special values such as coffee cup sizes and cost of coffee cup must be declared as named constants .

Your objective is to determine the dimensions , that is , the length and width , and the side of the square to be cut from the corners so that the resulting box is of maximum length .

The program then outputs the length and width of the cardboard and the length of the side of the square to be cut from the corner so that the resulting box is of maximum volume .
Calculate your answer to three decimal places .
Your program must contain function that takes as input the length and width of the cardboard and returns the side of the square that should be cut to maximize the volume .
The function also returns the maximum volume .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

It costs per foot to run power lines over land and per foot to run them under water .
Your objective is to determine the most economical path to lay the power line .
That is , determine how long the power line should run under water and how long it should run over land to achieve the minimum total cost of laying the power line .

The The The The width of the river distance of the factory downstream on the other side of the river cost of laying the power line under water cost of laying the power line over land The program then outputs the length of the power line that should run under water and the length that should run over land so the cost of constructing the power line is at the minimum .
The program should also output the total cost of constructing the power line .

Suppose that the widths of the two intersecting corridors are feet and feet Figure .
Your objective is to find the length of the longest pipe , rounded to the nearest foot , that can be carried level around the rightangled corner .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Pipe problem Write program that prompts the user to input the widths of both of the hallways .
The program then outputs the length of the longest pipe , rounded to the nearest foot , that can be carried level around the corner .
The greatest common divisor , written , of and is the largest positive integer that divides both and .
Your program must contain function that takes as input two integers and returns the gcd of the integers .

Example shows how to write program to factor polynomial of the form + bx + c , where and c are integers .
Modify the program so that it can also factor polynomials of the form + bx + c , where , and c are integers .
Note that the polynomial + can be factored as : + + + +

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Explore how the assignment statement , and arithmetic and relational operators work with enum types .

Explore the string data type , and learn how to use string functions to manipulate strings Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In subsequent chapters , you worked mainly with integral and data types .
In this chapter , you will learn about the enum type .
Moreover , the statement using namespace std ; in Chapter is used in every program that uses Standard style header files .
The second half of this chapter examines the purpose of this statement .
In fact , you will learn what the namespace mechanism is .
You will also learn about the string type and many useful functions that you can use to effectively manipulate strings .

Enumeration Type This section may be skipped without any loss of continuity .

Chapter defined data type as set of values together with set of operations on them .

For example , the int data type consists of integers from to and the set of operations on these , the arithmetic operations , and .
Because the main objective of program is to manipulate data , the concept of data type becomes fundamental to any programming language .
By providing data types , you specify what values are legal and tell the user what kinds of operations are allowed on those values .
The system thus provides you with checks against errors .

The data types that you have worked with until now were mostly int , bool , char , and double .
Even though these data types are sufficient to solve just about any problem , situations occur when these data types are not adequate to solve particular problem .

provides mechanism for users to create their own data types , which greatly enhances the flexibility of the programming language .

In this section , you will learn how to create your own simple data types , known as the enumeration types .
In ensuing chapters , you will learn more advanced techniques to create complex data types .

To define an enumeration type , you need the following .

name for the data type set of values for the data type set of operations on the values lets you define new data type wherein you specify its name and values , but not the operations .
Preventing users from creating their own operations helps to avoid potential system failures .

The values that you specify for the data type must be identifiers .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Enumeration Type .

In , enum is reserved word .

By listing all of the values between the braces , you also specify an ordering between the values .

Thus , the enumeration type is an ordered set of values .
Moreover , the default value assigned to these enumerators starts at .
That is , the default value assigned to is , the default value assigned to is , and so on .

EXAMPLE The statement : enum colors , BLUE , RED , GREEN , defines new type called colors , and the values belonging to this type are BROWN , BLUE , RED , GREEN , and YELLOW .

EXAMPLE The statement : enum standing , SOPHOMORE , JUNIOR , defines standing to be an enumeration type .
The values belonging to standing are FRESHMAN , SOPHOMORE , JUNIOR , and SENIOR .

Chapter : Simple Data Types , Namespaces , and the string Type .

The same rules apply to enumeration types declared outside of any blocks .
Example illustrates this concept .

EXAMPLE Consider the following statements : enum mathStudent , BILL , CINDY , LISA , enum compStudent , CATHY , JOHN ,

Declaring Variables Once type is defined , you can declare variables of that type .
The syntax for declaring variables of an enum type is the same as before : dataType identifier ,

Assignment Once variable is declared , you can store values in it .
Assuming the previous declaration , the statement : FOOTBALL ; Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Enumeration Type .

Thus , the preceding statement is compiled , and during execution , it advances the value of to the next value in the list .
Consider the following statements : FOOTBALL ; +

Relational Operators Because an enumeration is an ordered set of values , the relational operators can be used with the enumeration type .
Once again , suppose you have the enumeration type sports and the variables and as defined earlier .
Then : SOCCER is true HOCKEY BASKETBALL is true BASEBALL is false Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Therefore , you can use these enumeration types in loops .
Suppose is variable as declared earlier .
Consider the following for loop : for 

This for loop has five iterations .

Using enumeration types in loops increases the readability of the program .

Input of Enumeration Types Because input and output are defined only for types such as int , char , double , and so on , the enumeration type can be neither input nor output .

However , you can input and output enumeration indirectly .
Example illustrates this concept .

EXAMPLE Suppose you have the following .

The first statement defines an enumeration type , courses ; the second declares variable registered of type courses .
You can read is , the enumeration type with the help of the char type .
Note that you can distinguish between some of the values in the enumeration type courses just by reading the first character and others by reading the first two characters .
For example , you can distinguish between ALGEBRA and BASIC just by reading the first character ; you can distinguish between ALGEBRA and ANALYSIS by reading the first two characters .
To read these values from , say , the keyboard , you read two characters and then use selection structure to assign the value to the variable registered .
Thus , you need to declare two variables of type char .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Enumeration Type .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Similarly , you can output the enumeration type .

For example , suppose that .

The following statement will output the value because the value assigned to ALGEBRA is .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Enumeration Type Functions and Enumeration Types You can pass the enumeration type as parameter to functions just like any other simple data is , by either value or reference .
Also , just like any other simple data type , function can return value of the enumeration type .
Using this facility , you can use functions to and output enumeration types .

The following function inputs data from the keyboard and returns value of the enumeration type .
Assume that the enumeration type courses is defined as .

The following function outputs an enumeration type value :

Declaring Variables When Defining the Enumeration Type In previous sections , you first defined an enumeration type and then declared variables of that type .
allows you to combine these two steps into one .
That is , you can declare variables of an enumeration type when you define an enumeration type .
For example , the statement : enum grades , courseGrade ; defines an enumeration type , grades , and declares variable courseGrade of type grades .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Enumeration Type .

Anonymous Data Types data type wherein you directly specify values in the variable declaration with no type name is called an anonymous type .
The following statement creates an anonymous type : enum , FOOTBALL , BASEBALL , mySport ; This statement specifies the values and declares variable mySport , but no name is given to the data type .

Creating an anonymous type , however , has drawbacks .
First , because there is no name for the type , you cannot pass an anonymous type as parameter to function , and function cannot return an anonymous type value .
Second , values used in one anonymous type can be used in another anonymous type , but variables of those types are treated differently .

Consider the following statements : enum , FRENCH , SPANISH , GERMAN ,  enum , FRENCH , SPANISH , GERMAN ,

To avoid confusion , first define an enumeration type and then declare the variables .

We now describe the typedef statement in .

The general syntax of the typedef statement is : typedef existingTypeName newTypeName ; In , typedef is reserved word .
Note that the typedef statement does not create any new type ; it only creates an alias to an existing type .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Simple Data Types , Namespaces , and the string Type .

Using the typedef statement , you can create your own type , as shown in Example .

EXAMPLE From Chapter , recall that logical expressions in evaluate to or , which are , in fact , int values .
As logical value , represents true and represents false .
Consider the following .

The statements in Lines and declare the named constants and and initialize them to and , respectively .
The statement in Line declares to be variable of type .
Because is variable of type  the following statement is legal :  Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Programming Example : The Game of Rock , Paper , and Scissors PROGRAMMING EXAMPLE : Watch the Video The Game of Rock , Paper , and Scissors Children often play the game of rock , paper , and scissors .
This game has two players , each of whom chooses one of the three objects : rock , paper , or scissors .
If player chooses rock and player chooses paper , player wins the game because paper covers the rock .
The game is played according to the following .

If both players choose the same object , this play is tie .

If one player chooses rock and the other chooses scissors , the player choosing the rock wins this play because the rock breaks the scissors .

If one player chooses rock and the other chooses paper , the player choosing the paper wins this play because the paper covers the rock .

If one player chooses scissors and the other chooses paper , the player choosing the scissors wins this play because the scissors cut the paper .

Write an interactive program that allows two people to play this game .

Input This program has two types of .

The users ' responses when asked to play the game .

The players ' choices .

The players ' choices and the winner of each play .
After the game is over , the total number of plays and the number of times that each player won should be output as well .

Two players play this game .
Players enter their choices via the keyboard .
Each player enters or for Rock , or for Paper , or or for Scissors .
While the first player enters choice , the second player looks elsewhere .
Once both entries are in , if the entries are valid , the program outputs the players ' choices and declares the winner of the play .
The game continues until one of the players decides to quit the game .
After the game ends , the program outputs the total number of plays and the number of times that each player won .
This discussion translates into the following algorithm : Output PROBLEM ANALYSIS AND ALGORITHM DESIGN .

Provide brief explanation of the game and how it is played .

Ask the users if they want to play the game .

Get plays for both players .

If the plays are valid , output the plays and the winner .

Update the total game count and winner count .

Repeat Steps through while the users agree to play the game .

Output the number of plays and times that each player won .

We will use the enumeration type to describe the objects .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Chapter : Simple Data Types , Namespaces , and the string Type Variables It is clear that you need the following variables in the function main : int gameCount ; to store the number of played int ; to store the number of games .

The only valid selections are , and .

Function This function has no parameters .
It consists only of output statements to explain the displayRules game and rules of play .
Essentially , this definition .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Programming Example : The Game of Rock , Paper , and cout cout cout cout cout cout cout .

Function Because the enumeration type cannot be read directly , this function converts the entered retrievePlay choice , or and returns the appropriate object type .
This function thus has one parameter , of type char .
It is function , and it returns value of type objectType .
In pseudocode , the algorithm of this function is : if selection is ' or ' return ROCK ; if selection is ' or ' return PAPER ; if selection is ' or ' return SCISSORS ; Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Clearly , this function has three parameters : player choice , player choice , and parameter to return the winner .
In pseudocode , this function is :

Output choice .

Determine the winning player .

Return the winning player via reference parameter to the function main so that the function main can update the winning win count .

Function Because enumeration types cannot be output directly , write the function convertEnum convertEnum to output objects of the enum type objectType .
This function has one parameter , of type objectType .
It outputs the string that corresponds to the objectType .
In pseudocode , this function is : if is ROCK The definition of the function convertEnum .

Function To decide the of the game , you look at the players ' selections and then at the winningObject rules of the game .
For example , if one player chooses and another chooses PAPER , the player who chose PAPER .
In other words , the winning is PAPER .
The function winningObject , given two objects , decides and returns the winning .
Clearly , this function has two parameters of type objectType , and the value returned by this function is also of type objectType .
The definition of this function .

Function After the game is over , this function outputs the final is , the total displayResults number of plays and the number of plays won by each player .
The total number of plays is stored in the variable gameCount , the number of plays won by player is stored in the variable , and the number of plays won by player is stored in the variable .
This function has three parameters corresponding to these three variables .
Essentially , the definition of this function .

Declare the variables .

Initialize the variables .

Display the rules .

Prompt the users to the game .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : The Game of Rock , Paper , and Scissors .

Prompt player to make selection .

Prompt player to make selection .

If both plays are legal :
Increment the total game count .

Increment the game win count by .

Namespaces In July , Standard was officially approved .
Most recent compilers are also compatible with Standard .
The Standard language has some features that are not available in Standard , which the remainder of this chapter addresses .

In subsequent chapters , unless specified otherwise , the syntax applies to both standards .
First , we discuss the namespace mechanism of the Standard , which was introduced in Chapter .

When header file , such as iostream , is included in program , the global identifiers in the header file also become the global identifiers in the program .
Therefore , if global identifier in program has the same name as one of the global identifiers in the header file , the compiler generates syntax error as .
The same problem can occur if program uses libraries .
To overcome this problem , vendors begin their global identifiers with special symbol .
In Chapter , you learned that because compiler vendors begin their global identifier names with an underscore , to avoid linking errors , you should not begin identifier names in your program with an underscore .

Standard tries to solve this problem of overlapping global identifier names with the namespace mechanism .

The general syntax of the statement namespace is : namespace members where members is usually named constants , variable declarations , functions , or another namespace .
Note that is identifier .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Simple Data Types , Namespaces , and the string Type In , namespace is reserved word .

EXAMPLE The statement : namespace globalType .

The scope of namespace member is local to the namespace .
You can usually access namespace member outside the namespace in one of two ways , as described below .

The general syntax for accessing namespace member is : Recall that in , is called the scope resolution operator .

To access the member of the namespace globalType , the following statement is required : To access the member printResult is , the following statement is required : Thus , to access member of namespace , you use the , followed by the scope resolution operator , followed by the member name .

To simplify the accessing of namespace member , Standard provides the use of the statement using .
The syntax to use the statement using is as follows :

To simplify the accessing of all namespace .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

In , using is reserved word .

You typically put the using statement after the namespace declaration .
For the namespace globalType , for example , you usually write the code as follows : namespace globalType .

After the using statement , to access namespace member , you do not have to put the and the scope resolution operator before the namespace member .

However , if namespace member and global identifier in program have the same name , to access this namespace member in the program , the and the scope resolution operator must precede the namespace member .
Similarly , if namespace member and an identifier in block have the same name , to access this namespace member in the block , the and the scope resolution operator must precede the namespace member .

Examples through help clarify the use of the namespace mechanism .

EXAMPLE Consider the following code : using namespace .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Simple Data Types , Namespaces , and the string Type In this example , you can refer to the global identifiers of the header file iostream , such as cin , cout , and endl , without using the prefix : before the identifier name .
The obvious restriction is that the block that refers to the global identifier the header file must not contain any identifier with the same name as this global identifier .

EXAMPLE Consider the following code :

In this example , the function main can refer to the global identifiers of the header file iostream without using the prefix : before the identifier name .
The using Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Therefore , other functions should use the prefix : before the name of the global identifier of the header file iostream unless the function has similar using statement .

To refer to the variable in Line in main , use the scope resolution operator , which is : is , refer to as , because the function main has variable named in Line .
For example , to copy the value of into  you can use the statement :

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Simple Data Types , Namespaces , and the string Type .
To refer to the member in Line of the namespace expN because there is global variable named in Line and variable named in main .

To refer to the member in Line of the namespace expN because there is global variable named in Line .

You can reference the member in Line of the namespace expN in main as either or : because there is no global identifier named and the function main does not contain any identifier named .

The definition of function that is member of namespace , such as printResult , is usually written outside the namespace as in the preceding program .
To write the definition of the function printResult , the name of the function in the function heading can be either printResult or no other global identifier is named .

The identifiers in the header files , such as iostream , cmath , and iomanip , are defined in the namespace std .
For this reason , to simplify the accessing of identifiers from these header files , we have been using the following statement in the programs that we write : using namespace std ; string Type In Chapter , you were introduced to the data type string .
Recall that prior to the language standard , the Standard library did not provide string data type .
Compiler vendors often supplied their own string type , and the syntax and semantics of string operations often varied from vendor to vendor .

The data type string is type and is not part of the language ; the standard library supplies it .
Before using the data type string , the program must the header file string , as follows : Recall that in , string is sequence of zero or more characters , and strings are enclosed in double quotation marks .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The position of the first character , in is ; the position of the second character , is ; and so on .
That is , the position of the first character in string variable starts with , not .

The variable can store any size string .

Chapter discussed operations on the string type ; Chapter explained relational operations on the string type .
We recommend that you revisit Chapters and and review the and relational operations on the string type .

Other operators , such as the binary operator + allow the string concatenation and the array index operator , have also been defined for the data type string .
see how these operators work on the string data type .

Suppose you have the following declarations : string ,

Therefore , the new of is .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Simple Data Types , Namespaces , and the string Type .

Recall that the position of the first character in string variable is .
Therefore , because is the seventh character in , its position is .

In , is called the array subscript operator .

As illustrated previously , using the array subscript operator together with the position of the character , you can access an individual character within string .

EXAMPLE The following program shows the effect of the preceding statements .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : In the following sample run , the user input is shaded .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The following table describes some of these functions .
In this table , we assume that strVar is string variable and is string variable , string constant , or character array .

TABLE Some string functions .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The search starts at pos .

Returns string that is substring of starting at pos .
The length of the substring is at most len characters .
If len is too large , it means the end " of the string in .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Simple Data Types , Namespaces , and the string Type Next , we show how some of these functions work .

Consider the following statements : string string string string string string string .

Returns false Returns true ; Outputs Outputs Outputs Outputs The value of is .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : computer science : After clear ,

The details are left as an exercise for you .

Notice that this program uses the static cast operator to output the value returned by the Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Simple Data Types , Namespaces , and the string Type function .
This is because the function returns value of the type .
Without the cast operator , some compilers might give the following warning message : conversion from ' to , possible loss of data Suppose and are of type string .
The following are valid calls to the .

Effect Outputs Outputs Outputs Outputs value of Outputs Assigns to Note that search case sensitive .
Therefore , of in string .

Sample Run : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from eBook .

Editorial review has deemed that any suppressed content does not materially affect overall learning experience .
Cengage Learning reserves right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Simple Data Types , Namespaces , and string Type The output of this program .
The details are left as an exercise for you .

Notice that this program uses static cast operator to output value returned by function find .
This because function find returns value of type .
Without cast operator , some compilers might give following warning message : conversion from ' to , possible loss of data Suppose that you have following statements : string string string string string .

Sample Run : Cloudy and warm .

The output of this program is .
The details are left as an exercise for you .

Chapter : Simple Data Types , Namespaces , and the string Type .

Effect Outputs : It is Outputs : cloudy Outputs : cloudy and warm .

Outputs : is clo .

The output of this program is .
The details are left as an exercise for you .

The swap function is used to is , contents of two string variables .

Suppose you have the following statements : string ; string .

Additional string functions are described in Appendix File .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Pig Latin Strings In this programming example , we write program that prompts the user to input string and then outputs the string in the pig Latin form .
The rules for converting string into pig Latin form are as follows :
If the string begins with vowel , add the string " at the end of the string .
For example , the pig Latin form of the string " is .

If the string does not begin with vowel , first add " at the end of the string .
Then rotate the string one character at time ; that is , move the first character of the string to the end of the string until the first character of the string becomes vowel .
Then add the string " at the end .
For example , the pig Latin form of the string " is .

Strings such as " contain no vowels .
In cases like this , the letter can be considered vowel .
So , for this program , the vowels are , and .
Therefore , the pig Latin form of " is .

Strings such as " contain no vowels .
The pig Latin form of the string " is .
That is , the pig Latin form of string that has no vowels in it is the string followed by the string .

PROBLEM ANALYSIS AND ALGORITHM DESIGN Input .

Output of the program is the string in the pig Latin form .

Suppose that denotes string .
To convert into pig Latin , check the first character , of .
If is vowel , add " at the end of that is , +

Suppose that the first character of  is not vowel .
First , add " at the end of the string .
Then , remove the first character of from and put it at the end of .
Now , the second character of becomes the first character of .

This process of checking the first character of and moving it to the end of if the first character of is not vowel is repeated until either the first character of is vowel or all the characters of are processed , in which case does not contain any vowels .

In this program , we write function isVowel to determine whether character is vowel , function rotate to move the first character of to the end of  and Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Pig Latin Strings function pigLatinString to find the pig Latin form of .
The previous discussion translates into the following algorithm :

Find the pig Latin form of by using the function pigLatinString .

Output the pig Latin form of .

Before writing the main algorithm , each of these functions is described in detail .

Function This function takes character as parameter and returns true if the character is isVowel vowel and false otherwise .
The definition of the function isVowel is : case : case : case : case : case : case : case : case : case : case : case : case : return .

This is done by extracting the substring , starting at position is the second until the end of the  and then adding the first character of the .
The new is returned as the value of this .

Chapter : Simple Data Types , Namespaces , and the Type Function This function takes  pStr , as parameter and returns the pig Latin form pigLatinString of pStr .
Suppose pStr denotes the to be converted to its pig Latin form .

There are three possible cases : is vowel , pStr contains vowel and the first character of pStr is not vowel , or pStr contains no vowels .
Suppose that is not vowel .
Move the first character of pStr to the end of pStr .
This process is repeated until either the first character of pStr has become vowel or all the characters of pStr are checked , in which case pStr does not contain any vowels .

This discussion translates into the following algorithm :
If is vowel , add " at the end of pStr .

Suppose is not vowel .

Move the first character of pStr to the end of pStr .
The second character of pStr becomes the first character of pStr .
Now pStr may or may not contain vowel .
We use bool variable , foundVowel , which is set to true if pStr contains vowel and false otherwise .

Suppose that denotes the length of pStr .

Initialize foundVowel to false .

If is not vowel , move to the end of pStr by calling the function rotate .

Repeat Step until either the first character of pStr becomes vowel or all the characters of have been checked .

Convert into the pig Latin form .

The definition of the function pigLatinString .

Programming Example : Pig Latin Strings .

Call the function pigLatinString to find the pig Latin form of the .

Output the pig Latin form of the .

Sample Runs : In these sample runs , the user input is shaded .

Sample Run : Enter  eye The pig Latin form of eye is : Sample Run : Enter  There The pig Latin form of There is : Sample Run : Enter  why The pig Latin form of why is : Sample Run : Enter  The pig Latin form of is : QUICK REVIEW .

An enumeration type is set of ordered values .

reserved word enum is used to create an enumeration type .

The syntax of enum is : enum typeName ,

No arithmetic operations are allowed on the enumeration type .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Quick Review .

Enumeration type values cannot be input or output directly .

Enumeration types can be passed as parameters to functions either by value or by reference .

function can return value of the enumeration type .

An anonymous type is one in which values are specified without any type name .

reserved word typedef is used to create synonyms or aliases to previously defined data types .

Anonymous types cannot be passed as parameters to functions .

The namespace mechanism is feature of Standard .

namespace member is usually named constant , variable , function , or another namespace .

The scope of namespace member is local to the namespace .

One way to access namespace member outside the namespace is to precede the namespace member name with the namespace name and scope resolution operator .

In , namespace is reserved word .

To use the namespace mechanism , the program must the ISO Standard header is , the header files without the extension .

The using statement simplifies the accessing of namespace members .

In , using is reserved word .

The keyword namespace must appear in the using statement .

When accessing namespace member without the using statement , the namespace name and the scope resolution operator must precede the name of the namespace member .

To use an identifier declared in the standard header files without the namespace name , after including all the necessary header files , the following statement must appear in the program : using namespace std ;

string is sequence of zero or more characters .

Strings in are enclosed in double quotation marks .

To use the type string , the program must the header file string .
The other header files used in the program should be ISO Standard style header files .

The assignment operator can be used with the string type .

The operator + can be used to concatenate two values of the type string .

For the operator + to work with the string data type , one of the operands of + must be string variable .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Simple Data Types , Namespaces , and the string Type Relational operators , discussed in Chapter , can be applied to the string type .

In string , the position of the first character is , the position of the second character is , and so on .

The length of string is the number of characters in the string .

In , is called the array subscript operator .

To access an individual character within string , use the array subscript operator together with the position of the character .

The string type contains functions such as at , append , clear , compare , erase , find , insert , length , replace , size , substr , and swap to manipulate strings .
These functions are described in Table .

EXERCISES The number in parentheses at the end of an exercise refers to the learning objective listed at the beginning of the chapter .

The only arithmetic operations allowed on the enumeration type are You can input the value of an enumeration type directly from standard The following are legal statements in the same block of enum mathStudent , JOHN , LISA , RON , CINDY ,

You can use the namespace mechanism with header files with the Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

After the statement , the value .
After the statement : +

Define an enum type , birdType , with the values PEACOCK , SPARROW , CANARY , PARROT , PENGUIN , OSTRICH , EAGLE , CARDINAL , and HUMMINGBIRD .

Declare variable bird of the type birdType .

Assign CANARY to the variable bird .

Advance bird to the next value in the list .

Decrement bird to the previous value in the list .

Output the value of the variable bird .

Input value in the variable bird .

What is the value , if any , of the following expression .

What is the value , if any , of the expression : KIWI What is the output , if any , of the following code .

Chapter : Simple Data Types , Namespaces , and the string Type that the enum birdType is as defined in Exercise .
Write function that can be used to input value in variable of type that the enum birdType is as defined in Exercise .
Write function that can be used to ouput the value of variable of type Define an enumeration type triangleType with values EQUILATERAL , RIGHT , ISOSCELES , and SCALENE .
Also declare the variable triangle of .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

What is the output if the input is Hello There .

What is the output if the input is Diamond Gold .

What is the output if the input is Java .

Suppose that you have the following .

What is the output if the input is Programming Project .

What is the output if the input is Summer Trip .

What is the output if the input is Winter Cold .

Chapter : Simple Data Types , Namespaces , and the string Type PROGRAMMING EXERCISES .

Define an enumeration type , triangleType , that has the values scalene , isosceles , equilateral , and noTriangle .

Write function , triangleShape , that takes as parameters three numbers , each of which represents the of side of the triangle .
The function should return the shape of the triangle .
Write program that prompts the user to input the of the sides of triangle and outputs the shape of the triangle .

Redo Programming Exercise of Chapter phone so that all of the named constants are defined in namespace .

The Programming Example : Pig Latin Strings converts string into the pig Latin form , but it processes only one word .
Rewrite the program so that it can be used to process text of an unspecified .
If word ends with punctuation mark , in the pig Latin form , put the punctuation at the end of the string .
For example , the pig Latin form of Hello .

Assume that the text contains the following punctuation marks : 
The program then uses the function to remove all the vowels from the string .
For example , if , then after removing all the vowels ,
After removing all the vowels , output the string .
Your program must contain function to remove all the vowels and function to determine whether character is vowel .

Write program that can be used to calculate the federal tax .
The tax is calculated as follows : For single people , the standard exemption is ; for married people , the standard exemption is .
person can also put up to of his or her gross income in pension plan .
The tax rates are as follows : If the taxable income .

Between and , the tax rate is .

Between and , the tax is plus of the taxable income over .

Over , the tax is plus of the taxable income over .

Prompt the user to enter the following .

Marital status If the marital status is " ask for the number of children under the age of Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Gross salary the marital status is " and both spouses have .

Percentage of gross income contributed to pension fund Your program must consist of at least the following functions :

Function getData : This function asks the user to enter the relevant data .

Function taxAmount : This function computes and returns the tax owed .

To calculate the taxable income , subtract the sum of the standard exemption , the amount contributed to pension plan , and the personal exemption , which per person .

Double the number .

Reverse the digits of the number .

Raise the number to the power of , or .

Sum the digits of the number .

If the number two digit number , then raise the first digit to the power of the second digit .

If the number three digit number and the last digit less than or equal to , then raise the first two digits to the power of the last digit .

After performing an operation if the number less than , add to the number .
Also , after each operation determine if the number prime .

Each successive operation should be performed on the number generated by the last operation .
Your program should not contain any global variables and each of these operations must be implemented by separate function .
Also , your program should be menu driven .

Fractions are of the form , in which and are integers and .
Your program must be menu driven , allowing the user to select the operation , or and input the numerator and denominator of each fraction .

Furthermore , your program must consist of at least the following functions :

Function menu : This function informs the user about the purpose , explains how to enter data , and allows the user to select the operation .

Function addFractions : This function takes as input four integers representing the numerators and denominators of two fractions , adds the fractions , and returns the numerator and denominator of the result .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Simple Data Types , Namespaces , and the string Type Function subtractFractions : This function takes as input four integers representing the numerators and denominators of two fractions , subtracts the fractions , and returns the numerator and denominator of the Function multiplyFractions : This function takes as input four integers representing the numerators and denominators of two fractions , multiplies the fractions , and returns the numerators and denominators of Function divideFractions : This function takes as input four integers representing the numerators and denominators of two fractions , divides the fractions , and returns the numerator and denominator of the result .

Some sample outputs are : +

Your answer need not be in the lowest terms .

Write program that reads in line consisting of name , Social Security number , user ID , and password .
The program outputs the string in which all the digits of the Social Security number and all the characters in the password are replaced by .
Use the appropriate functions described in Table .

You are given file consisting of students ' names in the following form : lastName , firstName middleName .
Your program must read each entire name in variable and must consist of function that takes as input string , consists of name , and returns the string consisting of the altered name .
Use the string function find to find the index of ; the function length to find the length of the string ; and the function substr to extract the firstName , middleName , and lastName .

An oil slick occurs when an underwater refinery pipe ruptures , pumping oil into the water .
The spilled oil sits on top of the water and causes natural disaster .
For simplicity , suppose that the oil sits on top of the water in the form of circle .
Write program that prompts the user to enter the rate at which the ruptured pipe pumps oil per minute , the thickness of the oil on top of the water , and the number of days for which the area and the volume of oil on top of the water after each day .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Learn about multidimensional arrays Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In Chapter , you learned that data types fall into three categories : simple , structured , and pointers .
One of these categories is the structured data type .
This chapter and the next few chapters focus on structured data types .

Recall that data type is called simple if variables of that type can store only one value at time .
In contrast , in structured data type , each data item is collection of other data items .

Simple data types are building blocks of structured data types .
The first structured data type that we will discuss is an array .
In Chapters and , we will discuss other structured data types .

Before formally defining an array , let us consider the following problem .
We want to write program that reads five numbers , finds their sum , and prints the numbers in reverse order .

In Chapter , you learned how to read numbers , print them , and find the sum and average .
Suppose that you are given five test scores and you are asked to write program that finds the average test score and output all the test scores that are less than the average test score .
After introducing to find the average test score and output the average score and all the test scores that are less than .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : In this sample run , the user input is shaded .

Enter five scores : The is less than the .

This program works fine .
However , if you need to read and process scores , you would have to declare variables and write many cin ,  and if statements .
Thus , for large amounts of data , this type of program is not efficient .

Note the following in the previous program :
Five variables must be declared because scores less than the scores need to be printed .

All scores are of the same data type , int .

The way in which these variables are declared indicates that the variables to store these numbers all have the same the last character , which is number .

All the if statements are similar , except the name of the variables to store the scores .

Now , tells you that you have to declare five variables .
Next , and tell you that it would be convenient if you could somehow put the last character , which is number , into counter variable and use one for loop to count from to for reading and another for loop to process the if statements .
Finally , because all variables are of the same type , you should be able to specify how many variables must be their data simpler statement than brute force set of variable declarations .

The data structure that lets you do all of these things in is called an array .

Arrays An array is collection of number of components called all of the same data type and in contiguous is , memory space .
array is an array in which the components are arranged in list form .
This section discusses only onedimensional arrays .
Arrays of two dimensions or more are discussed later in this chapter .

The general form for declaring array is : dataType ; Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Chapter : Arrays and Strings in which intExp specifies the number of components in the array and can be any constant expression that evaluates to positive integer .

EXAMPLE The statement : int ; declares an array num of five components .

The component names are , and .
Figure illustrates the array num .

Array num Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The index value specifies the position of the component in the array .

In , is an operator called the array subscripting operator .
Moreover , in , the array index starts at .

Consider the following statement : int ; This statement declares an array list of components .

In other words , we have declared variables Figure .

Now , If is , then the assignment statement : stores in because evaluates to .
The index expression is evaluated first , giving the position of the component in the array .

EXAMPLE You can also declare arrays as follows : const int ; int .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The statement in Line asks the user to enter the size of the array when the program executes .
The statement in Line inputs the size of the array into arraySize .
When the compiler compiles Line , the value of the variable arraySize is unknown .
Thus , when the compiler compiles Line , the size of the array is unknown and the compiler will not know how much memory space to allocate for the array .
In Chapter , you will learn how to specify the size of an array during program execution and then declare an array of that size using pointers .
Arrays that are created by using pointers during program execution are called dynamic arrays .
For now , whenever you declare an array , its size must be known .

Processing Arrays Some of the basic operations performed on array are initializing , inputting data , outputting data stored in an array , and finding the largest smallest element .
Moreover , if the data is numeric , some other basic operations are finding the sum and average of the elements of the array .
Each of these operations requires the ability to step through the elements of the array .
This is easily accomplished using loop .

For example , suppose that we have the following statements : int .

The following for loop steps through each element of the array  starting at the first element of .

If processing the requires inputting data into  the statement in Line takes the form of an input statement , such as the cin statement .
For example , the following statements read numbers from the keyboard and store the numbers in .

For example , the following statements output the numbers stored in .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Example further illustrates how to process arrays .

EXAMPLE This example shows how loops are used to process arrays .
The following declaration is used throughout this .

The meaning of the other statements is clear .

Initializing an array : The following loop initializes every component of the array sales to .

Reading data into an array : The following loop inputs the data into the array sales .
For simplicity , we assume that the data is entered from the keyboard .

Printing an array : The following loop outputs the array sales .

Finding the and of an array : Because the array sales , as its name implies , represents certain sales data , it is natural to find the total sale and sale amounts .
The following code finds the of the elements of the array sales and the sale amount :

Largest element in the array : We now discuss the algorithm to find the first occurrence of the largest element in an is , the first array component with the largest value .
However , in general , the user is more interested in determining the location of the largest Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Of course , if you know the location is , the of the largest element in the , you can easily determine the value of the largest element in the array .
So let us describe the algorithm to determine the of the first occurrence of the largest element in an particular , the of the largest sale amount in the array sales .
We will use the of the first occurrence of the largest element in the array to find the largest sale .

We assume that will contain the of the first occurence of the largest element in the array sales .
The general algorithm is straightforward .
Initially , we assume that the first element in the is the largest element , so is initialized to .
We then compare the element pointed to by with every subsequent element in the .
Whenever we find an element in the array than the element pointed to by  we update so that it points to the new element .
The algorithm is as follows :

Array sales Here , we determine the largest element in the array sales .
Before the for loop begins , is initialized to , and the for loop initializes to .
In the following , we show the values of   and certain array elements during each iteration of the for loop .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

You can write an algorithm to find the smallest element in the array that is similar to the algorithm for finding the largest element in an array .
Recall that this program reads five test scores , finds the average test score , and outputs all the test scores that are less than the average test score .

EXAMPLE to find the average test score and output the average score and all the test scores that are less than the .

Sample Run : In this sample run , the user input is shaded .

Enter five test scores : The test is less than the test .

Array Index Out of Bounds .

The , an array in bounds if between and SIZE , that 
If negative or greater than , then we say that the out of bounds .

Unfortunately , does not check whether the value within  between and .
If the goes out of bounds and the program tries to access the component specified by the  then whatever memory location indicated by the that location accessed .
This situation can result in altering or accessing the data of memory location that you never intended to modify or access , or in trying to access protected memory that causes the program to instantly halt .

Consequently , several strange things can happen if the goes out of bounds during execution .
It solely the responsibility to make sure that the within bounds .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Logically , does not exist .

On some new  if an array goes out of bounds in progam , it possible that the program terminates with an error message .
For example , see the programs and at the Web site accompanying this book .

Array Initialization during Declaration Like any other simple variable , an array can be initialized while it being declared .
For example , the following statement declares an array ,  of five components and initializes these components .

When initializing arrays as they are declared , it not necessary to specify the size of the array .

The size determined by the number of initial values in the braces .
However , you must the brackets following the array name .
The previous statement  therefore , equivalent to : double , Although it not necessary to specify the size of the array if it initialized during declaration , it good practice to do so .

Partial Initialization of Arrays during Declaration When you declare and initialize an array simultaneously , you do not need to initialize all components of the array .
This procedure called partial initialization of an array during declaration .
However , if you partially initialize an array during declaration , you must exercise some caution .
The following examples help to explain what happens when you declare and partially initialize an array .

The statement : int ; Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

The statement : int , declares to be an array of components and initializes to , to , to , and all other components to .
Note that , here , the size of the array in the declaration statement does matter .
For example , the statement : int ,

The first two components are initialized to and , respectively , and all other components are initialized to .

Suppose that you have the following statement : int .
Then some may initialize each element of the array to .

When you partially initialize an array , then all of the elements that follow the last uninitialized element must be uninitialized .
Therefore , the following statement will result in syntax error : int ,  In this initialization , because the fourth element uninitialized , all elements that follow the fourth element must be left unintialized .

Some Restrictions on Array Processing .

The statement in Line declares and initializes the array  and the statement in Line declares the array .
Note that these arrays are of the same type and have the same number of components .
Suppose that you want to copy the elements of into the corresponding elements of .
The following statement .

An aggregate operation on an array any operation that manipulates the entire array as single unit .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Arrays and Strings To copy one array into another array , you must copy it  one component at time .
For example , the following statements copy into .

Note that the following statements are legal in the sense that they do not generate syntax error ; however , they do not give the desired results .

We will comment on these statements in the section Base Address of an Array and Array in Computer Memory later in this chapter .

Arrays as Parameters to Functions Now that you have seen how to work with arrays , question naturally arises : How are arrays passed as parameters to functions .

By reference only : In , arrays are passed by reference only .

Because arrays are passed by reference only , you do not use the symbol when declaring an array as formal parameter .

When declaring array as formal parameter , the size of the array is usually omitted .
If you specify the size of array when it is declared as formal parameter , the size is ignored by the compiler .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Consider the following function :

In this declaration , the size of both arrays is unspecified .

Sometimes , the number of elements in the array might be less than the size of the array .
For example , the number of elements in an array storing student data might increase or decrease as students drop or add courses .
In such situations , we want to process only the components of the array that hold actual data .
To write function to process such arrays , in addition to declaring an array as formal parameter , we declare another formal parameter specifying the number of elements in the array , as in the following .

Constant Arrays as Formal Parameters Recall that when formal parameter is reference parameter , then whenever the formal parameter changes , the actual parameter changes as well .
However , even though an array is always passed by reference , you can still prevent the function from changing the actual parameter .
You do so by using the reserved word const in the declaration of the formal parameter .
Consider the following function :

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Chapter : Arrays and Strings Here , the function example can modify the array , but not the array .
Any attempt to change results in error .
It is good programming practice to declare an array to be constant as formal parameter if you do not want the function to modify the array .

EXAMPLE This example shows how to write functions for array processing and how to declare an array as formal parameter .

The parameter listSize specifies the .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Starting at the position specified src , the elements of are copied into at the position specified by tar .
The parameter specifies the number of elements of to copied into .
Starting at the position specified tar , the must have enough components to copy the of .
The following call copies all of the of into the corresponding positions in : void , int src , int .

Base Address of an Array and Array in Computer Memory The base address of an array is the address is , the memory of the first array component .
For example , if list is array , then the base address of list is the address of the component .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

This statement declares myList to be an array of five components of type int .

The computer allocates five memory spaces , each large enough to store an int value , for these components .
Moreover , the five memory spaces are contiguous .

The base address of the array myList is the address of the component .

Suppose that the base address of the array myList is .
Then , the address of the component is .
Typically , the memory allocated for an int variable is four bytes .
Recall from Chapter that main memory is an ordered sequence of cells , and each cell has unique address .
Typically , each cell is one byte .
Therefore , to store value into , starting at the address , the next four bytes are allocated for .
It follows that the starting address of is , the starting address of is , and so on Figure .

Memory addresses myList .

FIGURE Address of myList Address of myList Address of myList Address of myList Address of myList Array myList and the addresses of its components Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

There is also memory space associated with the identifier  and the base address of the array is stored in that memory space .

Earlier , we said that this statement will not give the desired result .
That is , this statement will not output the values of the components of .
In fact , the statement outputs the value stored in  which is the base address of the array .
This is why the statement will not generate syntax error .

Suppose that you also have the following statement : int ; Then , in the .

It does not determine whether the elements of are less than or equal to the corresponding elements of yourList .

The Web site accompanying this book contains the program , which clarifies statements such as those in Lines and .

You might be wondering why the base of an array is so important .
The reason is that when you declare an array , the only things about the array that the computer remembers are the name of the array , its base  the data type of each component , and the number of components .
Using the base of the array , the index of an array component , and the size of each component in bytes , the computer calculates the of particular component .
For example , suppose you want to access the value of .
Now , the base of is .
Each component of is of type int , so it uses four bytes to store value , and the index of the desired component is .
To access the value of , the computer calculates the + +

So , starting at , the computer accesses the next four bytes : and .

When you pass an array as parameter , the base of the actual array is passed to the formal parameter .
For example , suppose that you have the following function : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In this statement , the base of is passed to the formal parameter .

The definition of the function contains the statement .
This statement stores into .
To access , the computer calculates the as  +
So , starting at the , the computer accesses the next four bytes and stores .

Note that , in fact , is the of Figure .
It that during the execution of the statement in Line , the statement in Line stores the value into .
It also that during the execution of the function call statement in Line , and refer to the same memory space , index and index .

If allowed arrays to be passed by value , the computer would have to allocate memory for the components of the formal parameter and copy the contents of the actual array into the corresponding formal parameter when the function is called .
If the array size was large , this process would waste memory as well as the computer time needed for copying the data .
That is why in arrays are always passed by reference .

Functions Cannot Return Value of the Type Array does not allow functions to return value of the type array .
Note that the functions sumArray and indexLargestElement described earlier return values of type int .

EXAMPLE Suppose that the distance traveled by an object at time is and at time is ,
Then the average speed of the object from time to , that is , over the interval , is .
Suppose that the distance traveled by an object at certain times is given by the following table : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Then the average speed over the interval , over the interval , and so on .

The following program takes as input the distance traveled by an object at time , and .
The program then outputs the average speed over the intervals  + and .
The program also outputs the maximum and minimum average speed over these intervals .
Programming Exercise , at the end of this chapter , asks you to modify this program so that the distance traveled by an object recorded , but not necessarily after every time units .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any if subsequent rights restrictions require it .

Enter the total distance traveled after every units of .

Enter total distance traveled at units : Enter total distance traveled at units : Enter total distance traveled at units : Enter total distance traveled at units : Enter total distance traveled at units : Enter total distance traveled at units : Distance Traveled Average Speed , Maximum average speed : Minimum average speed : The output of this program straightforward .
We leave the details as an exercise .

Integral Data Type and Array Indices The sections Type " and Statement " from Chapter are required to understand this section .

Other than integers , allows any integral type to be used as an array .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Chapter : Arrays and Strings As you can see , the above code much easier to follow than the code that used integers for the For this reason , you should use the enumeration type for the array or other integral data types wherever possible .
Note that when using the enumeration type for array indices , use the default values of the identifiers in the enumeration type .
That  the value of the first identifier must be , and so on .
Because the number of students can change from semester to semester , instead of specifying the size of the array while declaring it , you can declare the array as follows : const int .

As the name implies , you search the array sequentially , starting from the first array element .
You compare searchItem with the elements in the array and continue the search until either you find the item or no more data is left in the to compare with searchItem .

Consider the of seven elements shown in Figure .

List of seven elements Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Searching an Array for Specific Item Suppose that you want to determine whether is in the .
sequential search works as follows : First , you compare with , that is , compare with , you then compare with , that is , with , the second item in the .
This search is successful .

Let us now search for .
As before , the search starts at the first element in the  that is , at .
Proceeding as before , we see that , this time , the search item , which is , is compared with every item in the .
Eventually , no more data is left in the to compare with the search item .
This is an unsuccessful search .

It now follows that , as soon as you find an element in the that is equal to the search item , you must stop the search and report success .

Suppose that the name of the array containing the elements is .
The previous discussion translates into the following algorithm for the sequential search : found is set to false ; found is set to true else increment return  else return .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

If the function seqSearch returns value greater than or equal to , it is successful search ; otherwise , it is an unsuccessful search .

As you can see from this code , you start the search by comparing searchItem with the first element in the .
If searchItem is equal to the first element in the  you exit the loop ; otherwise , is incremented by to point to the next element in the You then compare searchItem with the next element in the  and so on .

EXAMPLE This program illustrates how to use sequential search in .

Searching an Array for Specific Item .

Sample Run : In this sample run , the user input is shaded .

Line : Enter .

In this section , we discuss how to sort an array using the algorithm , called selection sort .
Additional searching and sorting algorithms are discussed in Chapter .

As the name implies , in the selection sort algorithm , we rearrange the by selecting an element in the and moving it to its proper position .
This algorithm finds the location of the smallest element in the unsorted portion of the and moves it to the top of the unsorted portion of the .
The first time , we locate the smallest item in the entire .

The second time , we locate the smallest item in the starting from the second element in the  and so on .

List of eight elements Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Suppose you have the shown in Figure .

FIGURE swap unsorted Elements of during the first iteration Figure shows the elements of in the first iteration .

Initially , the entire is unsorted .
So , we find the smallest item in the .
The smallest item is at position , as shown in Figure .
Because this is the smallest item , it must be moved to position .
So , we swap is , with is , as shown in Figure .
After swapping these elements , the resulting is as shown in Figure .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Searching an Array for Specific Item Figure shows the elements of list during the second iteration .

Now the unsorted list is .
So , we find the smallest element in the unsorted list .
The smallest element is at position , as shown in Figure .
Because the smallest element in the unsorted list is at position , it must be moved to position .
So , we swap is , with is , as shown in Figure .
After swapping with , the resulting list is as shown in Figure .

Now , the unsorted list is .
So , we repeat the preceding process of finding the of smallest element in the unsorted portion of the list and moving it to the beginning of the unsorted portion of the list .
Selection sort thus involves the following steps .

In the unsorted portion of the list :
Find the location of the smallest element .

Move the smallest element to the beginning of the unsorted list .

Initially , the entire list is , is the unsorted list .
After executing Steps and once , the unsorted list is .
After executing Steps and second time , the unsorted list is , and so on .
In this way , we can keep track of the unsorted portion of the list and repeat Steps and with the help of for loop , as shown in the following pseudocode :
Find the location , smallestIndex , of the smallest element in .

Swap the smallest element with .
That is , swap with .

The second time through the loop , we locate the smallest element in and swap the smallest element with , and so on .

Step is similar to the algorithm for finding the of the largest item in the list , as Here , we find the of the smallest item in the list .
The general form of Step is :  first element is the smallest .

Step swaps the contents of with .
The following statements accomplish this task : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Auto Declaration and For Loops .

Sample Run : After sorting , the elements are : The statement in Line declares and initializes to be an array of components of type int .
The statement in Line uses the function selectionSort to sort .

Notice that both and its length number of elements in it , which is are passed as parameters to the function selectionSort .
The for loop in Lines and outputs the elements of .

To illustrate the selection sort algorithm in this program , we declared and initialized the array However , you can also prompt the user to input the data during program execution .

Therefore , if , then to sort the  selection sort makes about key comparisons and about item assignments .
The next section presents the insertion sort algorithm that reduces the number of comparisons .

Auto Declaration and For Loops introduces auto declaration of elements , which allows programmer to declare and initialize variable without specifying its type .
For example , the following statement declares the variable and stores in it : auto ; Because the initializer , which is , is an int value , the type of will be int .

One way to process the elements of an array , starting at the first element , is to use an variable , initialized to , and loop .
For example , to process the elements of an array ,  you can use for loop such as the following : This chapter uses these types of loops to process the elements of an array .
provides special type of for loop to process the elements of an array .
The syntax to use this for loop to process the elements of an array is : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

This form of the for loop is called for loop .

The for statement in Line is read as each in " The variable is initialized to .
In the next iteration , the value of is , and so on .
It follows that the variable is assigned the contents of each array element , not its value , and that the loop by default starts at and traverses the entire array .

You can also use auto declaration in loop to process the elements of an array .
For example , using the for loop , the for loop to find the largest element in the array can be written as :

Then in the definition of the function doSomething , for loop cannot be applied to .
Recall that in , arrays as parameters are passed by reference .
Therefore , when the function doSomething is called , gets the base address of the actual parameters , that is , the base address of the actual parameter is copied into the memory space So formal parameter is , in fact , not an array , it is variable to store the address of memory  so it has no first is , and last elements .

Until now , we have avoided discussing character arrays for simple reason : Character arrays are of special interest , and you process them differently than you process other arrays .
provides many functions that you can use with character arrays .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Character array : An array whose components are of type char .

Recall that the most widely used character sets are ASCII and EBCDIC .
The first character in the ASCII character set is the null character , which is nonprintable .
Also , recall that in , the null character is represented as , backslash followed by zero .

The statement : stores the null character in  wherein is char variable .

As you will see , the null character plays an important role in processing character arrays .

Because the collating sequence of the null character is , the null character is less than any other character in the char data set .

The most commonly used term for character arrays is .
However , there is subtle difference between character arrays and .
Recall that string is sequence of zero or more characters , and strings are enclosed in double quotation marks .
In , are null terminated ; that is , the last character in is always the null character .
character array might not contain the null character , but the last character in is always the null character .
As you will see , the null character should not appear anywhere in the except the last position .
Also , are stored in character arrays .

The following are examples of : From the definition of , it is clear that there is difference between ' and .
The first one is character ; the second is .
Because are null terminated , represents two characters : and .
Similarly , the " represents six characters : and .
To store , we need only one memory cell of type char ; to store , we need two memory cells of type for ' and one for .
Similarly , to store the " in computer memory , we need six memory cells of type char .

Consider the following statement : char ; This statement declares an array of components of type char .
Because are null terminated and has components , the largest string that can be stored in is of length , to leave room for the terminating .
If you store of length in  the first components of are used and the last are left unused .

The statement : char , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Chapter : Arrays and Strings declares an array containing components of type char and stores the " in it .
During char array variable declaration , also allows the notation .

There is difference between the last two statements : Both statements store " in  but the size of in the statement in Line is , and the size of in the statement in Line is .

Most rules that apply to other arrays also apply to character arrays .
Consider the following statement : char ; Suppose you want to store .

; provides set of functions that can be used for manipulation .
The header file cstring defines these functions .
We often use three of these functions : strcpy copy , to copy into is , strcmp comparison , to compare ; and strlen length , to find the length of .
Table summarizes these functions .

TABLE strcpy , strcmp , and strlen Functions Function .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

That is , the following statement must be included in the program : String Comparison In , are compared character by character using the collating sequence .
Let us assume that you use the ASCII character set .

The " is less than the " because the first character of " is less than the first character of .

The " is less than the " because the first characters of both strings are the same , but the second character ' of " is less than the second character ' of .

The " is less than the " because the first four characters of " and " are the same , but the fifth character of , which is ' null , is less than the fifth character of , which is .
The " is less than " because the first character ' of the " is less than the first character ' of the .

As you can see , the function strcmp compares its first argument with its second argument character by character .

EXAMPLE Suppose you have the following .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Returns value In this chapter , we defined to be sequence of zero or more characters .

are enclosed in double quotation marks .
We also said that are null terminated , so the " has six characters even though only five are enclosed in double quotation marks .
Therefore , to store the " in computer memory , you must use character array of size .
The length of is the number of actual characters enclosed in double quotation marks ; for example , the length of the " is .
Thus , in logical sense , is sequence of zero or more characters , but in the physical sense is , to store the in computer , has at least one character .
Because the length of the is the actual number of characters enclosed in double quotation marks , we defined to be sequence of zero or more characters .
However , you must remember that the null character stored in computer memory at the end of the plays key role when we compare , especially such as " and .

Reading and Writing Strings As mentioned earlier , most rules that apply to arrays apply to as well .
Aggregate operations , such as assignment and comparison , are not allowed on arrays .
Even the output of arrays is done .
However , the one place where allows aggregate operations on arrays is the input and output of is , character .

We will use the following declaration for our discussion : char .

The length of the input must be less than or equal to .
If the length of the input string is , the computer stores the four characters that are input and the null character .
If the length of the input is more than , then because there is no check on the array index bounds , the computer continues storing the string in whatever memory cells follow name .
This process can cause serious problems , because data in the adjacent memory cells will be corrupted .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

For example , the " is entered as Hello .

Recall that the extraction operator , skips all leading whitespace characters and stops reading data into the current variable as soon as it finds the first whitespace character or invalid data .
As result , that contain blanks cannot be read using the extraction operator ,
For example , if first name and last name are separated by blanks , they cannot be read into name .

How do you input with blanks into character array .
Once again , the function get comes to our rescue .
Recall that the function get is used to read character data .
Until now , the form of the function get that you have used read only single character .

However , the function get can also be used to read strings .
To read , you use the form of the function get that has two parameters .
The first parameter is variable ; the second parameter specifies how many characters to read into the string variable .

To read , the general form of the get function , together with an input stream variable such as cin , is : + This statement stores the next characters , or all characters until the newline character ' is found , into str .
The newline character is not stored in str .
If the input has fewer than characters , then the reading stops at the newline character .

Consider the following statements : char ;

Johnson then .
Johnson " is stored in str .
Suppose that the input is : Hello there .
My name is Mickey Blair .

Because str can store , at most , characters , the there .
My name is Mickey " is stored in str .

Summer is warm .

Winter will be cold .

Further , suppose that we want to store the first in and the second in .
Both and can store that are up to characters in length .
Because Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Arrays and Strings the number of characters in the first line is , the reading stops at .
Now the newline character remains in the input buffer and must be manually discarded .
Therefore , you must read and discard the newline character at the end of the first line to store the second line into .

The following sequence of statements stores the first line into and the second line into .

You can output by using an output stream variable , such as  together with the insertion operator ,
For example , the statement : name ; outputs the contents of on the screen .
The insertion operator , continues to write the contents of until it finds the null character .
Thus , if the length of is , the above statement outputs only four characters .
If does not contain the null character , then you will see strange output because the insertion operator continues to output data from memory adjacent to until ' is found .
For example , see the output of the .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In subsequent chapters , the of the input file was included in the open statement .
By doing so , the program always received data from the same input file .
In applications , the data may actually be collected at several locations and stored in separate files .
Also , for comparison purposes , someone might want to process each file separately and then store the output in separate files .
To accomplish this task efficiently , the user would prefer to specify the of the input output file at execution time rather than in the programming code .
allows the user to do so .

Consider the following .

We now want to point out that values is , of type string are not null terminated .
Variables of type string can also be used to read and store the names of files .
However , the argument to the function open must be is ,
Therefore , if we use variable of type string to read the of an file and then use this variable to open file , the value of the variable must be converted to is ,

The header file string contains the function , which converts value of type string to character array is ,
The syntax to use the function is : in which strVar is variable of type string .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Arrays and Strings .

Parallel Arrays Two arrays are called parallel if their corresponding components hold related information .

Suppose you need to keep track of students ' course grades , together with their ID numbers , so that their grades can be posted at the end of the semester .
Further , suppose that there is maximum of students in class and their IDs are digits long .
Because there may be students , you need variables to store the students ' IDs and variables to store their grades .

You can declare two arrays : studentId of type int and courseGrade of type char .
Each array has components .
Furthermore , and will store the ID and course grade of the first student , and will store the ID and course grade of the second student , and so on .

The statements : int ; char ; declare these two arrays .

Suppose you need to input data into these arrays , and the data is provided in file in the following form : studentId courseGrade For example , sample data set is :

Suppose that the input file is opened using the ifstream variable infile .
Because the size of each array is , maximum of elements can be stored into each array .

Moreover , it is possible that there may be fewer than students in the class .
Therefore , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

and Multidimensional Arrays .

The following loop reads the data into the parallel arrays studentId and courseGrade : int .

and Multidimensional Arrays The remainder of this chapter discusses arrays and ways to work with multidimensional arrays .

In the previous section , you learned how to use arrays to manipulate data .
If the data is provided in list form , you can use arrays .

However , sometimes data is provided in table form .
For example , suppose that you want to track the number of cars in particular color that are in stock at local dealership .
The dealership sells six types of cars in five different colors .
Figure shows sample data .

Table inStock Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Arrays and Strings You can see that the data is in table format .
The table has entries , and every entry is an integer .
Because the table entries are all of the same type , you can declare onedimensional array of components of type int .
The first five components of the onedimensional array can store the data of the first row of the table , the next five components of the array can store the data of the second row of the table , and so on .
In other words , you can simulate the data given in table format in array .

If you do so , the algorithms to manipulate the data in the array will be somewhat complicated , because you must know where one row ends and another begins .
You must also correctly compute the index of particular element .

simplifies the processing of manipulating data in table form with the use of arrays .
This section first discusses how to declare twodimensional arrays and then looks at ways to manipulate data in array .

array : collection of fixed number of components arranged in rows and columns is , in two , wherein all components are of the same type .

The syntax for declaring array .

The two expressions , and , specify the number of rows and the number of columns , respectively , in the array .

The statement : double ; declares array sales of rows and columns , in which every component is of type double .
As in the case of array , the rows are numbered .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

and Multidimensional Arrays .

The syntax to access component of array is : wherein and are expressions yielding nonnegative integer values .

The statement : stores into row number and column number is , the sixth row and the fourth of the array Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

So the indices can also be variables .

Array Initialization during Declaration Like arrays , arrays can be initialized when they are declared .

This statement declares to be array of four rows and three columns .
The elements of the first row are , and ; the elements of the second row are , and ; the elements of the third row are , and ; and the elements of the fourth row are , and , respectively .
Figure shows the array .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

and Multidimensional Arrays FIGURE .

array To initialize array when it is declared :
The elements of each row are all enclosed within one set of curly braces and separated by commas .

The set of all rows is enclosed within curly braces .

For number arrays , if all components of row are not specified , the unspecified components are initialized to .
In this case , at least one of the values must be given to initialize all the components of row .

Arrays and Enumeration Types The section Type " in Chapter is required to understand this section .

These statements define the carType and colorType enumeration types and define inStock as array of six rows and five columns .
Suppose that each row in inStock corresponds to car type , and each column in inStock corresponds to color type .
That is , the first row corresponds to the car type GM , the second row corresponds to the car type FORD , and so on .
Similarly , the first column corresponds to the color type RED , the second column corresponds to the color type BROWN , and so on .

Suppose further that each entry in inStock represents the number of cars of particular type and color Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

This example illustrates that enumeration types can be used effectively to make the program readable and easy to manage .

PROCESSING ARRAYS array can be processed in three ways :
Process single element .

Process the entire array .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

and Multidimensional Arrays .

Process particular row of the array , called row processing .

Process particular column of the array , called column processing .

Processing single element is like processing single variable .
Initializing and printing the array are examples of processing the entire array .
Finding the largest element in row or finding the sum of row are examples of row processing .
We will use the following declaration for our discussion : const int ; can be set to any number .

If row is looked at by itself , it can be seen to be just array .
column seen by itself is also array .
Therefore , when processing particular row or column of array , we use algorithms similar to those that process arrays .
We further explain this concept with the help of the array matrix , as declared previously .

Suppose that we want to process row number of matrix is , the sixth row of .
The elements of row number of matrix are : We see that in these components , the first index row is fixed at .
The second index column ranges from to .
Therefore , we can use the following for loop to process row number : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Arrays and Strings process Clearly , this for loop is equivalent to the following for loop : process Similarly , suppose that we want to process column number of matrix , that is , the third column of matrix .
The elements of this column are : Here , the second index is , the column is fixed at .
The first index is , the ranges from to .
In this case , we can use the following for loop to process column of matrix : process Clearly , this for loop is equivalent to the following for loop : process Next , we discuss specific processing algorithms .

Initialization Suppose that you want to initialize number , that is , the fifth  to .
As explained earlier , the following for loop does this : If you want to initialize the entire matrix to , you can also put the first index , that is , the position , in loop .
By using the following nested for loops , we can initialize each component of matrix to : Print By using nested for loop , you can output the elements of matrix .
The following nested for loops print the elements of matrix , one per line : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

and Multidimensional Arrays .

The following for loop inputs data into each component of matrix : cin ; Sum by Row .

Once again , by putting the number in loop , we can find the of each .

As in the case of by  the following nested for loop finds the of each individual column : of each individual column .

Largest Element in Each Row and Each Column As stated earlier , two other operations on array are finding the element in each and each column and finding the of both diagonals .
Next , we give the code to perform these operations .

The following for loop determines the element in number : that the first element of is the .

Passing Arrays as Parameters to Functions arrays can be passed as parameters to function , and they are passed by reference .
The base address is , the address of the first component of the actual is passed to the formal parameter .
If matrix is the name of array , then is the first component of matrix .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

and Multidimensional Arrays .

That is , the first is stored first , followed by the second  followed by the third  and so on .

In the case of array , when declaring it as formal parameter , we usually omit the size of the array .
Because stores arrays in order form , to compute the address of component correctly , the compiler must know where one ends and the next begins .
Thus , when declaring array as formal parameter , you can omit the size of the first dimension , but not the second ; that is , you must specify the number of columns .

Suppose we have the following declaration : const int ; const int .

This function takes as parameter array of an unspecified number of rows and five columns , and outputs the content of the array .
During the function call , the number of columns of the actual parameter must match the number of columns of the formal parameter .

Similarly , the following function outputs the of the elements of each of twodimensional array whose elements are of type .

Chapter : Arrays and Strings The following function determines the element in each  void .

Likewise , you can write function to find the of the elements of each column , read the data into array , find the smallest element in each or column , and so on .

Example shows how the functions printMatrix , sumRows , and largestInRows are used in program .

EXAMPLE The following program illustrates how arrays are passed as parameters to functions .

and Multidimensional Arrays .

Sample Run : Sum Sum Sum Sum Sum Sum of of of of of of The The The The The The element element element element element element in in in in in in row row row row row row In this program , the statement in Line declares and initializes board to be twodimensional array of six rows and five columns .
The statement in Line uses the function printMatrix to output the elements of board the first six lines of the Sample .
The statement in Line uses the function sumRows to calculate and print the sum of each row .
The statement in Line uses the function largestInRows to find and print the largest element in each row .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Because every name is string , convenient way to store the list of names is to use an array .
Strings in can be manipulated using either the data type string or character arrays .
Also , on some compilers , the data type string may not be available in Standard is , Standard .
This section illustrates both ways to manipulate list of strings .

Arrays of Strings and the string Type Processing list of strings using the data type string is straightforward .
Suppose that the list consists of maximum of names .
You can declare an array of components of type string as follows : string ; Basic operations , such as assignment , comparison , and , can be performed on values of the string type .
Therefore , the data in list can be processed just like any array discussed in the first part of this chapter .

Suppose that the largest string example , in your list is characters long and your list has strings .
You can declare array of characters of rows and columns as follows Figure : char ; list .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

and Multidimensional Arrays .

The following statement stores White " in Figure : list .

The following for loop accomplishes this task :

The data type string has operations such as assignment , concatenation , and relational operations defined for it .
If you use Standard header files and the data type string is available on your compiler , we recommend that you use the data type string to manipulate lists of strings .

Another Way to Declare Array This section may be skipped without any loss of continuity .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Arrays and Strings If you know the size of the tables with which the program will be working , then you can use typedef to first define array data type and then declare variables of that type .

For example , consider the .

By first defining data type , you do not need to keep checking the exact number of columns when you declare array as variable or formal parameter , or when you pass an array as parameter during function call .

Multidimensional Arrays In this chapter , we defined an array as collection of fixed number of elements of the same type .
array is an array in which the elements are arranged in list form ; in array , the elements are arranged in table form .
We can also define or larger arrays .
In , there is no limit , except the limit of the memory space , on the dimension of arrays .
Following is the general definition of an array .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

and Multidimensional Arrays .

The syntax to access component of an array is :

For example , the statement : double ; declares to be array .
The size of the first dimension , the size of the second dimension , and the size of the third dimension .
The first dimension ranges from to , the second dimension ranges from to , and the third dimension ranges from to .
The base address of the array the address of the first array  the address of .
The total number of components in the array .

The statement : sets the value of to .

You can use loops to process multidimensional arrays .
For example , the nested for loops : initialize the entire array to .

When declaring multidimensional array as formal parameter in function , you can omit the size of the first dimension but not the other dimensions .
As parameters , multidimensional arrays are passed by reference only , and function cannot return value of the array type .
There no check to determine whether the array indices are within bounds , so it often advisable to include some form of " checking .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Code Detection When message transmitted in secret code over transmission channel , it usually sent as sequence of bits , that  and .
Due to noise in the transmission channel , the transmitted message may become corrupted .
That  the message received at the destination not the same as the message transmitted ; some of the bits may have been changed .
There are several techniques to check the validity of the transmitted message at the destination .
One technique to transmit the same message twice .
At the destination , both copies of the message are compared bit by bit .
If the corresponding bits are the same , the message received .

write program to check whether the message received at the destination .
For simplicity , assume that the secret code representing the message sequence of digits to and the maximum length of the message digits .

Also , the first number in the message the length of the message .
For example , if the secret code  then the actual message digits long .

The above message transmitted as : Input file containing the secret code and its copy Output The secret code , its copy , and the received code the following form : Code Digit Code Digit Copy Message transmitted OK .

PROBLEM ANALYSIS AND ALGORITHM DESIGN Because we have to compare the corresponding digits of the secret code and its copy , we first read the secret code and store it in an array .
Then we read the first digit of the copy and compare it with the first digit of the secret code , and so on .
If any of the corresponding digits are not the same , we indicate this fact by printing message next to the digits .
Because the maximum length of the message , we use an array of size .
The first number in both the secret code and the copy of the secret code indicates the length of the code .
This discussion translates into the following algorithm : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Code Detection .

Open the input and output files .

If the input file does not exist , exit the program .

Read the length of the secret code .

If the length of the secret code greater than , terminate the program because the maximum length of the code in this program .

Read and store the secret code into an array .

Read the length of the copy .

If the length of the secret code and its copy are the same , compare the codes and output an appropriate message .

To simplify the function main , let us write function , readCode , to read the secret code and another function , compareCode , to compare the codes .

If the length of the secret code is greater than , bool variable lenCodeOk , which is reference parameter , is set to false and the function terminates .
The value of lenCodeOk is passed to the calling function to indicate whether the secret code was read successfully .
If the length of the code is less than , the readCode function reads and stores the secret code into an array .
Because the input is stored into file and the file was opened in the function main , the input stream variable corresponding to the input file must be passed as parameter to this function .

Furthermore , after reading the length of the secret code and the code itself , the readCode function must pass these values to the function main .
Therefore , this function has four parameters : an input file stream variable , an array to store the secret code , the length of the code , and the bool parameter .
The definition of the function readCode is as follows : void infile , int ,

Therefore , it must have access to the array containing the secret code and the length of the secret code .
The copy of the secret code and its length are stored in the input file .
Thus , the input stream variable corresponding to the input file must be passed as parameter to this function .

Also , the compareCode function compares the secret code with the copy and prints an appropriate message .
Because the output will be stored in file , the output stream variable corresponding to the output file must also be passed as parameter to this function .
Therefore , the function has four parameters : an input file stream variable , an output file stream variable , the array containing the secret code , and the length of the secret code .
This discussion translates into the following algorithm for the function compareCode :

Declare the variables .

Set bool variable codeOk to true .

Read the length of the copy of the secret code .

If the length of the secret code and its copy are not the same , output an appropriate error message and terminate the function .

For each digit in the input file :
Read the next digit of the copy of the secret code .

Output the corresponding digits from the secret code and its copy .

If the corresponding digits are not the same , output an error message and set the bool variable codeOk to false .

If the bool variable codeOk is true Output message indicating that the secret code was transmitted correctly .

Following this algorithm , the definition of the function compareCode is : void infile ,

Programming Example : Code Detection .

Declare the variables .

Open the files .

Call the function readCode to read the secret .

Call the function compareCode to compare the codes .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Code Detection .

Sample Run : In this sample run , the user input is shaded .

Enter the input name : Enter the output name : Code Digit Code Digit Copy Message transmitted OK .

Copyright Cengage Learning .
All Rights Reserved .
May not copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Text Processing and letter Let us now write program that reads given text , outputs the text as is , and also prints the number of lines and the number of times each letter appears in the text .
An uppercase letter and lowercase letter are treated as being the same ; that is , they are tallied together .

Watch the Video Because there are letters , we use an array of components to perform the letter We also need variable to store the line .

The text is stored in  which we will call .
The output will stored in  which we will call .

PROBLEM ANALYSIS AND ALGORITHM DESIGN Input .

Output containing the text , number of lines , and the number of times letter appears in the text .

Based on the desired output , it is clear that we must output the text as is .
That is , if the text contains any whitespace characters , they must output as well .
Furthermore , we must count the number of lines in the text .
Therefore , we must know where the line ends , which means that we must trap the newline character .
This requirement suggests that we cannot use the extraction operator to process the input .
Because we also need to perform the letter count , we use the get function to read the text .

Let us first describe the variables that are necessary to develop the program .
This will simplify the discussion that follows .

Variables We need to store the line count and the letter count .
Therefore , we need variable to store the line count and variables to perform the letter count .
We will use an array of components to perform the letter count .
We also need variable to read and store each character in turn , because the input is to read character by character .
Because data is to read from an input and output is to saved in  we need an input stream variable to open the input and an output stream variable to open the output .
These statements indicate that the function main needs the following .

Clearly , the variable lineCount and the array letterCount must initialized to .

Copyright Cengage Learning .
All Rights Reserved .
May not copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Text Processing The algorithm for the program is :

Declare the variables .

Open the input and output files .

Initialize the variables .

While there is more data in the input 
For each character in line :
Read and write the character .

Increment the appropriate letter count .

Increment the line count .

Output the line count and letter counts .

Close the files .

To simplify the function main , we divide it into four .

Function Function Function Function initialize copyText characterCount writeTotal The following sections describe each of these functions in detail .
Then , with the help of these functions , we describe the algorithm for the function main .

It , therefore , has two parameters : one corresponding to the variable lineCount and one corresponding to the array letterCount .
Clearly , the parameter corresponding to lineCount must be reference parameter .
The definition of this function .

Clearly , this function has four parameters : an input file stream variable , an output file stream variable , char variable , and the array to update the letter count .

Note that the copyText function does not perform the letter count , but we still pass the array letterCount to it .
We take this step because this function calls the function characterCount , which needs the array letterCount to update the appropriate Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Arrays and Strings letter count .
Therefore , we must pass the array letterCount to the copyText function so that it can pass the array to the function characterCount .

Therefore , the characterCount function has two parameters : char variable and the array to update the letter count .
In pseudocode , this function is :
Convert the letter to uppercase .

Find the index of the array corresponding to this letter .

If the index is valid , increment the appropriate count .
At this step , we must ensure that the character is letter .
We are counting only letters , so other as commas , hyphens , and ignored .

Following this algorithm , the definition of this function .

The definition of this function is : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time subsequent rights restrictions require it .

Programming Example : Text Porcessing .

Declare the variables .

Open the input file .

If the input file does not exist , exit the program .

Open the output file .

Initialize the variables , such as lineCount and the array letterCount .

Read the first character .

While end of input :
Process the next line ; call the function copyText .

Read the next character .

Output the line and letter counts .
Call the function writeTotal .

Close the files .

COMPLETE PROGRAM LISTING .

Programming Example : Text Porcessing .

Through computers , the technological revolution is drastically changing the way we live and communicate with one another .
Terms such as " which were unfamiliar just few years ago , are very common today .
With the help of computers you can send letters to , and receive letters from , loved ones within seconds .
You no longer need to send by mail to apply for job ; in many cases you can simply submit your job application via the Internet .
You can watch how stocks perform in real time , and instantly buy and sell them .
Students regularly " the Internet and use computers to design their classroom projects .
They also use powerful software to complete their term papers .

Many people maintain and balance their checkbooks on computers .

The number of Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time subsequent rights restrictions require it .

Quick Review QUICK REVIEW .

In structured data type , each data item is collection of other data items .

An array is structured data type with fixed number of components .

Every component is of the same type , and components are accessed using their relative positions in the array .

Elements of array are arranged in the form of list .

There is no check on whether an array is out of bounds .

In , an array starts with .

An array can be any expression that evaluates to nonnegative integer .

The value of the must always be less than the size of the array .

There are no aggregate operations on arrays , except for the of character arrays .

Arrays can be initialized during their declaration .
If there are fewer initial values than the array size , the remaining elements are initialized to .

The base address of an array is the address of the first array component .
For example , list is array , the base address of list is the address of .

When declaring array as formal parameter , you usually omit the array size .
If you specify the size of array in the formal parameter declaration , the compiler will ignore the size .

In function call statement , when passing an array as an actual parameter , you use only its name .

As parameters to functions , arrays are passed by reference only .

Because as parameters , arrays are passed by reference only , when declaring an array as formal parameter , you do not use the symbol after the data type .

Although as parameters , arrays are passed by reference , when declaring an array as formal parameter , using the reserved word const before the data type prevents the function from modifying the array .

Individual array components can be passed as parameters to functions .

The sequential search algorithm searches list for given item , starting with the first element in the list .
It continues to compare the search item with the other elements in the list until either the item is found or the list has no more elements left to be compared with the search item .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Chapter : Arrays and Strings In , string is any sequence of characters enclosed between double quotation marks .

In , are null terminated .

In , the null character is represented as .

In the ASCII character set , the collating sequence of the null character is .

are stored in character arrays .

Character arrays can be initialized during declaration using string notation .

Input and output of is the only place where allows aggregate operations .

The header file cstring contains the specifications of the functions that can be used for manipulation .

Commonly used manipulation functions include strcpy , strcmp , and strlen .

are compared character by character .

Because are stored in arrays , individual characters in the can be accessed using the array component access notation .

Parallel arrays are used to hold related information .

In array , the elements are arranged in table form .

To access an element of array , you need pair of indices : one for the row position and one for the column position .

In array , the rows are numbered to and the columns are numbered to .

If matrix is array , then the base address of matrix is the address of the array component .

In row processing , array is processed one row at time .

In column processing , array is processed one column at time .

When declaring array as formal parameter , you can omit the size of the first dimension but not the second .

When array is passed as an actual parameter , the number of columns of the actual and formal arrays must match .

stores , in computer memory , arrays in row order form .

EXERCISES The number in parentheses at the end of an exercise refers to the learning objective listed at the beginning of the chapter .

Mark the following statements as true or false .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

If an array index goes out of bounds , the program always terminates in The only aggregate operations allowable on int arrays are the increment Arrays can be passed as parameters to function either by value or by The declaration : char .
; declares to be an array of characters because the string .

As parameters , arrays are passed either by value or by int ; In this declaration , identify the following :

The array size .

The data type of each array component .

The range of values for the index of the array .

The index of the first element .

The index of the last element .

Identify , if any , in the following array declarations .

What would be valid range for the index of an array of size .

Declare an array alpha of components of type int .

Initialize each component of alpha to .

Output the value of the first component of the array alpha .

Set the value of the component of the alpha to .

Set the value of the tenth component of alpha to three times the value of the fiftieth component of alpha plus .

Use for loop to output the value of component of alpha if its index is multiple of or .

Output the value of the last component of alpha .

Output the value of the alpha so that components per line are printed .

Use for loop to increment every other element even indexed .

Use for loop to create new  diffAlpha , whose elements are the differences between consecutive elements in alpha .

Correct the following code so that it correctly sets the value of each .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Chapter : Arrays and Strings Correct the following code so that it correctly initializes and outputs the int .

What is index out of bounds .
Does check for indices .

However , there are errors in the code .
Find and correct for ; if .

Initialize this to the following values :

Array weights of components of type int .
Initialize this to the following values :

Array specialSymbols of type char .
Initialize this to the following values :

Array seasons of components of type string .
Initialize this to the following values :

Determine whether the following declarations are valid .

Write code that will output the value stored in each component of .

Write code that will set the values of the first five components of as follows : The value of the ith component is the value of the ith component minus three times the value of the component .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

car dealer has salespersons .
Each salesperson keeps track of the number of cars sold each month and reports it to the management at the end of the month .

The management keeps the data in file and assigns number , to , to each salesperson .
The following statement declares an array , cars , of components of type int to store the number of cars sold by each salesperson : int ; Write the code to store the number of cars sold by each salesperson in the array cars , output the total numbers of cars sold at the end of each month , and output the salesperson number selling the maximum number of cars .

When an array is passed as an actual parameter to function , what is actually .

Sort the following using the selection sort algorithm as discussed in this , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In the definition of the function modifyList , can you use for loop to process the elements of .
Justify your answer .

Given the .

Chapter : Arrays and Strings Mark the following statements as valid or invalid .
If statement is invalid , explain .

Mark the following statements as " if they output Shelly .

Write statement that stores Day " in .

Write statement that stores the of into the int variable .

Write statement that copies the value of into .

Write code that outputs if is less than or equal to , and otherwise outputs .

Define array named temp of three rows and four columns of type int such that the first row is initialized to , the second row is .

Suppose that array temp is as defined in Exercise .
Write statements .

Output the contents of the first row and last column element of temp .

Output the contents of the last row and first column element of temp .

Output the contents of the last row and last column element of temp .

How many components does the array sales have .

What is the number of rows in the array sales .

What is the number of columns in the array sales .

To sum the sales by  what kind of processing is required .

To sum the sales by  what kind of processing is required .

Declare an array alpha of rows and columns of type int .

Initialize the array alpha to .

Store in the first row and in the remaining rows .

Store in the first column , and make sure that the value in each subsequent column is twice the value in the previous column .

Print the array alpha one row per line .

Print the array alpha one column per line .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Write the definition of the function print that can be used to output the contents of these arrays .

Write the statements that calls the function print to output the contents of the arrays times , speed , trees , and students .

PROGRAMMING EXERCISES .

Write program that declares an array alpha of components of type double .
Initialize the array so that the first components are equal to the square of the index variable , and the last components are equal to three times the index variable .
Output the array so that elements per line are printed .

Write function , smallestIndex , that takes as parameters an int array and its size and returns the index of the first occurrence of the smallest element in the array .
Also , write program to test your function .

Write function , lastLargestIndex , that takes as parameters an int array and its size and returns the index of the last occurrence of the largest element in the array .
Also , write program to test your function .

Write program that reads file consisting of students ' test scores in the range .
It should then determine the number of students having scores in each of the following ranges : and .
Output the score ranges and the number of students .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The students ' IDs and test answers are stored in file .
The first entry in the file contains answers to the test in the form : TFFTFFTTTTFFTFTFTFTT Every other entry in the file is the student ID , followed by blank , followed by the responses .
For example , the entry : TFTFTFTT TFTFTFFTTFT .

This student did not answer question .

The exam has questions , and the class has more than students .
Each correct answer is awarded two points , each wrong answer gets one point deducted , and no answer gets zero points .
Write program that processes the test data .
The output should be the ID , followed by the answers , followed by the test score , followed by the test grade .
Assume the following grade scale : and ,

Write program that allows the user to enter the last names of five candidates in local election and the number of votes received by each candidate .
The program should then output each name , the number of votes received , and the percentage of the total votes received by the candidate .
Your program should also output the winner of the election .
sample output is : Candidate Johnson Miller Duffy Robinson Ashtony Total Votes Received of Total Votes The Winner of the Election is Duffy .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Chapter : Arrays and Strings Write the definition of the function setZero that initializes any onedimensional array of type int to .

Write the definition of the function inputArray that prompts the user to input numbers and stores the numbers into alpha .

Write the definition of the function doubleArray that initializes the elements of beta to two times the corresponding elements in alpha .
Make sure that you prevent the function from modifying the elements of alpha .

Write the definition of the function copyGamma that sets the elements of the first row of inStock to and the remaining rows of inStock to three times the previous row of inStock .
Make sure that you prevent the function from modifying the elements of .

Write the definition of the function copyAlphaBeta that stores alpha into the first five rows of inStock and beta into the last five rows of inStock .
Make sure that you prevent the function from modifying the elements of alpha and beta .

Write the definition of the function printArray that prints any onedimensional array of type int .
Print elements per line .

Write the definition of the function setInStock that prompts the user to input the elements for the first column of inStock .
The function should then set the elements in the remaining columns to two times the corresponding element in the previous column , minus the corresponding element in .

Write statements that call each of the functions in parts through .

Write program that tests the function main and the functions discussed in parts through .
The program should output the average high , average low , and the highest and lowest temperatures for the year .
Your program must consist of the following functions :

Function getData : This function reads and stores data in the twodimensional array .

Function averageHigh : This function calculates and returns the average high temperature for the year .

Function averageLow : This function calculates and returns the average low temperature for the year .

Function indexHighTemp : This function returns the index of the highest high temperature in the array .

Function indexLowTemp : This function returns the index of the lowest low temperature in the array .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Exercises .

Programming Exercise in Chapter asks you find the mean and standard deviation of five numbers .
Extend this programming exercise to find the mean and standard deviation of up to numbers .
Suppose that the mean of numbers ,
Then , the standard deviation of these numbers is : sﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ ðxi ðxn .

So , an integer larger than this cannot be stored and processed as an integer .

Similarly , if the sum or product of two positive integers is greater than , the result will be incorrect .
One way to store and manipulate large integers is to store each individual digit of the number in an array .

Write program that inputs two positive integers of , at most , digits and outputs the sum of the numbers .
If the sum of the numbers has more than digits , output the sum with an appropriate message .
Your program must , at least , contain function to read and store number into an array and another function to output the sum of the numbers .
Each day of the week , they run certain number of miles and write them into notebook .
At the end of the week , they would like to know the number of miles run each day , the total miles for the week , and average miles run each day .
Write program to help them analyze their data .
Your program must contain parallel arrays : an array to store the names of the runners and array of five rows and seven columns to store the number of miles run by each runner each day .
Furthermore , your program must contain at least the following functions : function to read and store the runners ' names and the numbers of miles run each day ; function to find the total miles run by each runner and the average number of miles run each day ; and function to output the results .

You may assume the following input data :

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Arrays and Strings Blair Clark Kennedy Bronson Sunny Smith .

Use three arrays : array to store the students ' names , array to store the test scores , and parallel onedimensional array to store grades .
Your program must contain at least the following functions : function to read and store data into two arrays , function to calculate the average test score and grade , and function to output the results .
Have your program also output the class average .

company hired temporary workers who are paid hourly and you are given data file that contains the last name of the employees , the number of hours each employee worked in week , and the hourly pay rate of each employee .
You are asked to write program that computes each weekly pay and the average salary of all the workers .
The program then outputs the weekly pay of each employee , the average weekly pay , and the names of all the employees whose pay is greater than or equal to the average pay .
If the number of hours worked in week is more than hours , then the pay rate for the hours over is times the regular hourly rate .
Use two parallel arrays : array to store the names of all the employees , and array of rows and columns to store the number of hours an employee worked in week , the hourly pay rate , and the weekly pay .
Your program must contain at least the following function to read the data from the file into the arrays , function to determine the weekly pay , function to output the names of all the employees whose pay is greater than or equal to the average weekly pay , and function to output each data .

Children often play memory game in which deck of cards containing matching pairs is used .
The cards are shuffled and placed face down on table .
The players then take turns and select two cards at time .
If both cards match , they are left face up ; otherwise , the cards are placed face down at the same positions .
Once the players see the selected pair of cards and if the cards do not match , then they can memorize the cards and use their memory to select the next pair of cards .
The game continues until all the cards are face up .
Write program to play the memory game .
Use twodimensional array of rows and columns for deck of cards with matching pairs .
You can use numbers to to mark the cards .
Use appropriate functions in your program , and the main program should be merely call to functions .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The airplane has rows , with six seats in each row .
Rows and are first class , rows through are business class , and rows through are economy class .
Your program must prompt the user to enter the following information :

Desired seat Output the seating plan in the following form : Row Row Row Row Row Row Row Row Row Row Row Row Row .

Here , indicates that the seat is available ; indicates that the seat is occupied .
Make this program ; show the choices and allow the user to make the appropriate choices .

The program in Example outputs the average speed over the intervals of length .
Modify the program so that the user can store the distance traveled at the desired times , such as times ,
The program then computes and outputs the average speed of the object over the successive time intervals specified by the time when the distance was recorded .
For example , for the previous list of times , the average speed is computed over the time intervals to , to , to , to , and to .

positive integer is called prime if and the only factors of are and .
It is known that positive integer is prime if is not divisible pﬃﬃﬃ by any prime integer .
The prime number is .
Let be an integer such that .
Then is prime if either is equal to one of the first prime numbers or is not divisible by any of the first prime numbers .
Write program that declares an array of size Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Arrays and Strings and stores the first prime numbers in this array .
The program then uses the first prime numbers to determine if number between and is prime .
If number is not prime , then output at least one of its prime factors .

positive integer is called composite if ab , where and are positive integers such that and .
If is composite , then can be written as product of prime numbers .
Let be an integer such that .
Modify the program in Exercise so that if is not prime , the program outputs as product of prime numbers .

Write program that uses array and randomly place each integer from to into the nine squares .
The program calculates the magic number by adding all the numbers in the array and then dividing the sum by .
The array is magic square if the sum of each row , each column , and each diagonal is equal to the magic number .
Your program must contain at least the following functions : function , to randomly fill the array with the numbers and function to determine if the array is magic square .
Run these functions for some large number of times , say , or times and see the number of times the array is magic square .

Write program that randomly generate array , board , of type int .
An element is peak maximum or if all its neighbors should be either , or neighbors for any are less than , or greater than .
The program should output all elements in board , with their indices , which are peak .
It should also output if peak is maximum or minimum .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Learn how to create structs within struct Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

You also learned how to process data stored in an array and how to perform list operations , such as searching and sorting .

This chapter may be skipped without experiencing any discontinuation .

In this chapter , you will learn how to group related values that are of different types .
provides another structured data type , called struct languages use the term , to group related items of different types .
An array is homogeneous data structure ; struct is typically heterogeneous data structure .
The treatment of struct in this chapter is similar to the treatment of struct in .
struct in this chapter , therefore , is struct .
Chapter introduces and discusses another structured data type , called class .

Suppose that you want to write program to process student data .
student record consists of , among other things , the name , student ID , GPA , courses taken , and course grades .
Thus , various components are associated with student .
However , these components are all of different types .
For example , the name is string , and the GPA is number .
Because these components are of different types , you cannot use an array to group all of the items associated with student .
provides structured data type called struct to group items of different types .

Grouping components that are related but of different types offers several advantages .

For example , single variable can pass all the components as parameters to function .

The components may be of different types .

The components of struct are called the members of the struct .
The general syntax of struct in is : struct structName ;

Thus , semicolon the right is essential to end the Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Records .

semicolon at the end of the struct definition is , therefore , part of the syntax .

The member style is of type string , the members numOfBedrooms , numOfBathrooms , numOfCarsGarage , yearBuilt , and finishedSquareFootage are of type int , and the members price and tax are of type double .

Like any type definition , struct is definition , not declaration .
That is , it defines only data type ; no memory is allocated .

Once data type is defined , you can declare variables of that type .

For example , the following statement defines newHouse to be struct variable of type houseType : declaration houseType .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

You can also declare struct variables when you define the struct .
For example , consider the following .

These statements define the struct houseType and also declare tempHouse to be variable of type houseType .

Typically , in program , struct is defined before the definitions of all the functions in the program , so that the struct can be used throughout the program .
Therefore , if you define struct and also simultaneously declare struct variable in the preceding , then that struct variable becomes global variable and thus can be accessed anywhere in the program .
Keeping in mind the side effects of global variables , you should first only define struct and then declare the struct variables .

Accessing struct Members In arrays , you access component by using the array name together with the relative position of the component .
The array name and index are separated using square brackets .
To access structure member , you use the struct variable name together with the member name ; these names are separated by dot .
The syntax for accessing struct member is : The is just like any other variable .
For example , is variable of type char , is string variable , and so on .
As result , you can do just about anything with struct members that you normally do with variables .
You can , for example , use them in assignment statements or statements .

In , the dot is an operator called the member access operator .

Consider the following statements : struct studentType .

Records .

After the preceding three assignment statements execute , newStudent is as shown in Figure .

Brown courseGrade testScore programmingScore FIGURE .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

The statement : cin ; reads two integer values from the keyboard and stores them in .

Suppose that is variable of type int .
The statement : + assigns the average of and to .

Records The first two statements declare ryanHouse and anitaHouse to be variables of houseType .

The next eight statements store the string " into , into , into , and so on .

Next , consider the following statements : cin anitaHouse .

Assignment We can assign the value of one struct variable to another struct variable of the same type by using an assignment statement .
Suppose that newStudent is as shown in Figure .

After this assignment statement executes , the values of are as shown in Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

To compare struct variables , you compare them .
As with an array , no aggregate relational operations are performed on struct .
For example , suppose that newStudent and are declared as shown earlier .
Furthermore , suppose that you want to see whether and newStudent refer to the same .
Now newStudent and refer to the same if they have the same first name and the same last name .
To compare the values of and newStudent , you must compare them , as follows : if .

Although you can use an assignment statement to copy the contents of one struct into another struct of the same type , you cannot use relational operators on struct variables .
Therefore , the following would be illegal : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Records .

Input No aggregate operations are allowed on struct variable .
Data in struct variable must be read one member at time .
Similarly , the contents of struct variable must be written one member at time .

We have seen how to read data into struct variable .
Let us now see how to output struct variable .
The statement : cout newStudent .

struct variable can be passed as parameter either by value or by reference , and function can return value of type struct .

The following function reads and stores first name , last name , test  programming  and .
It also determines the course grade and stores it .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

The function readIn stores the appropriate information in the variable newStudent .

Similarly , we can write function that will print the contents of struct variable .
For example , the following function outputs the contents of struct variable of type studentType on the screen : cout .

TABLE Arrays vs .

Yes Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Records Arrays in structs list is set of elements of the same type .
Thus , list has two things associated with it : the values is , and the length .
Because the values and the length are both related to list , we can define struct containing both items .

Consider the following .

The statement in Line stores in the first component of the array .
The statement in Line increments the value of by .
The meaning of the other statements is similar .
After these statements execute , intList is as shown in Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

If searchItem is in the list , then the function returns its location in the .

In this function , because is member of list , we access this by .
Similarly , we can access an element of list via .

Notice that the formal parameter list of the function seqSearch is declared as constant reference parameter .
This means that list receives the address of the corresponding actual parameter , but list cannot modify the actual parameter .

Recall that when variable is passed by value , the formal parameter copies the value of the actual parameter .
Therefore , if the formal parameter modifies the data , the modification has no effect on the data of the actual parameter .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Records Suppose that struct has several data members requiring large amount of memory to store the data , and you need to pass variable of that struct type by value .
The corresponding formal parameter then receives copy of the data of the variable .
The compiler must then allocate memory for the formal parameter in order to copy the value of the actual parameter .
This operation might require , in addition to large amount of storage space , considerable amount of computer time to copy the value of the actual parameter into the formal parameter .

On the other hand , if variable is passed by reference , the formal parameter receives only the address of the actual parameter .
Therefore , an efficient way to pass variable as parameter is by reference .
If variable is passed by reference , then when the formal parameter changes , the actual parameter also changes .
Sometimes , however , you do not want the function to be able to change the values of the actual parameter .
In , you can pass variable by reference and still prevent the function from changing its value .

This is done by using the keyword const in the formal parameter declaration , as shown in the definition of the function seqSearch .

Likewise , we can also rewrite the sorting , binary search , and other functions .

We need to print their monthly paychecks and keep track of how much money has been paid to each employee in the .
First , define an record : struct employeeType .

Each employee has the following members : first name , last name , personal ID , department ID , yearly salary , monthly salary , paid , and monthly bonus .

Because we have employees and the data type of each employee is the same , we can use an array of components to process the employees ' data .

Every element of employees is struct .
For example , Figure also shows .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

For our discussion , we assume that each data is stored in file , say ,
The following code loads the data into the employees ' array .
We assume that , initially , yearToDatePaid is and that the monthly bonus is determined each month based on performance .

The following loop computes and prints the paycheck for the month : double payCheck ; to calculate the paycheck Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Records .

You also saw examples wherein member of struct is an array , and the array type is struct .
In this section , you will learn about situations for which it is beneficial to organize data in struct by using another struct .

Let us consider the following employee record : struct employeeType .

Some members of this struct will be accessed more frequently than others , and some members are more closely related than others .
Moreover , some members will Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

For example , the hire date and the quit date are of the data type int .
Let us reorganize this struct as .

We have separated the name , address , and contact type into subcategories .

Furthermore , we have defined struct dateType .
Let us rebuild the record as follows : struct employeeType .

The information in this struct is easier to manage than the previous one .

Some of this struct can be reused to build another struct .
For example , suppose that you want to define record .
Every customer has first name , last name , and Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Records middle name , as well as an address and way to be contacted .
You can , therefore , quickly put together record by using the structs nameType , addressType , contactType , and the members specific to the customer .

Next , let us declare variable of type employeeType and discuss how to access its members .

Consider the following statement : employeeType newEmployee ; This statement declares newEmployee to be struct variable of type employeeType Figure .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Note that newEmployee has member called name .
We access this member via .
Note also that is struct and has three members .
We apply the member access criteria to access the member of the struct .

The statement : cin .

Because employees is an array , to access component , we use the index .
For example , is the component of the array employees that an array index starts with .
Because is struct , we apply the member access criteria to select particular member .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Sales Data Analysis .

Sales Data Analysis company has six salespeople .
Every month , they go on road trips to sell the product .
At the end of each month , the total sales for each salesperson , together with that ID and the month , is recorded in file .
At the end of each year , the manager of the company wants to see this report in this following tabular format : Annual Sales Report .

Total Max Sale by  Max Sale by  In this report , stands for quarter to , for quarter to , for quarter to , and for quarter to .

The IDs are stored in one file ; the sales data is stored in another file .
The sales data is in the following form : salesPersonID .

sample sales data is :

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Let us write program that produces the output in the specified format .

PROBLEM ANALYSIS AND ALGORITHM DESIGN Input One file containing each and second file containing the sales data .

Output file containing the annual sales report in the above format .

Based on the requirements , it is clear that the main components for each salesperson are the  quarterly sales amount , and total annual sales amount .
Because the components are of different types , we can group them with the help of struct , defined as follows : struct salesPersonRec .

Because the program requires us to find the total sales for each quarter , we need an array of four components to store the data .
Note that this data will be used to determine the quarter in which the maximum sales were made .
Therefore , the program also needs the following array : double ; Recall that in , the array index starts with .
Therefore , stores data for quarter , stores data for quarter , and so on .

We will refer to these variables throughout the discussion .

The array salesPersonList is as shown in Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Sales Data Analysis .

After this step , the array salesPersonList is as shown in Figure .

Array salesPersonList after initialization Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The next step is to process the sales data .
Processing the sales data is quite straightforward .
For each entry in the file containing the sales data :
Read the ID , month , and sale amount for the month .

Search the array salesPersonList to locate the component corresponding to this salesperson .

Determine the quarter corresponding to the month .

Update the sales for the quarter by adding the sale amount for the month .

Once the sales data file is processed :
Calculate the total sales by salesperson .

Calculate the total sales by quarter .

Print the report .

This discussion translates into the following algorithm :

Initialize the array salesPersonList .

Process the sales data .

Calculate the total sales by quarter .

Calculate the total sales by salesperson .

Print the report .

Calculate and print the maximum sales by salesperson .

Calculate and print the maximum sales by quarter .

To reduce the complexity of the main program , let us write separate function for each of these seven steps .

Function This function reads the ID from the input file and stores the ID initialize in the array salesPersonList .
It also initializes the quarterly sales amount and the total sales amount for each salesperson to .
The definition of this function is : void indata , salesPersonRec ,

Programming Example : Sales Data Analysis .

The algorithm for this function is :
Read the ID , month , and sales amount for the month .

Search the array salesPersonList to locate the component corresponding to the salesperson .
Determine the corresponding to the month .

Update the sales for the by adding the sales amount for the month .

Suppose that the entry read is : Here , the ID is , the month is , and the sale amount is .

Suppose that the array salesPersonList is as shown in Figure .

Array salesPersonList Now , ID corresponds to the array component , and month corresponds to .

After processing this entry , the array salesPersonList is as shown in Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Array salesPersonList after processing entry The definition of the function getData is : void infile , salesPersonRec .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Programming Example : Sales Data Analysis .

Function This function finds the total sales for each .
To find the total sales for saleByQuarter each  we add the sales of each salesperson for that .
Clearly , this function must have access to the array salesPersonList and the array totalSaleByQuarter .
This function also needs to know the number of rows in each array .
Thus , this function has three parameters .
The definition of this function is : void , int .

Clearly , this Person function must have access to the array salesPersonList .
This function also needs to know the size of the array .
Thus , this function has two parameters .

Print the is , the first three lines of output .

Print the data for each salesperson .

Print the last line of the table .

Note that the next two functions will produce the final two lines of output .

Clearly , the printReport function must have access to the array salesPersonList and the array totalSaleByQuarter .
Also , because the output will be stored in file , this function must have access to the ofstream variable associated with the output file .
Thus , this function has four parameters : parameter corresponding to the array salesPersonList , parameter corresponding to the array totalSaleByQuarter , parameter specifying the size of the array , and parameter corresponding to the ofstream variable .
The definition of this function is : void outfile , salesPersonRec , int  int  outfile outfile outfile outfile 

Programming Example : Sales Data Analysis .

Function This function prints the name of the salesperson who produces the maximum sales maxSaleBy amount .
To identify this salesperson , we look at the sales total for each salesperson Person and find the largest sales amount .
Because each sales total is maintained in the array salesPersonList , this function must have access to the array salesPersonList .
Also , because the output will be stored in file , this function must have access to the ofstream variable associated with the output file .

Therefore , this function has three parameters : parameter corresponding to the array salesPersonList , parameter specifying the size of this array , and parameter corresponding to the output file .

The algorithm to find the largest sales amount is similar to the algorithm to find the largest element in an array in Chapter .
The definition of this function is : void outData , salesPersonRec , int .

Function This function prints the in which the maximum sales were made .
To identify maxSaleBy this  we look at the total sales for each and find the largest sales amount .

Quarter Because the sales total for each is in the array totalSaleByQuarter , this function must have access to the array totalSaleByQuarter .
Also , because the output will be stored in file , this function must have access to the ofstream variable associated with the output file .
Therefore , this function has two parameters : parameter corresponding to the array totalSaleByQuarter and parameter corresponding to the output file .

The algorithm to find the largest sales amount is the same as the algorithm to find the largest element in an array in Chapter .
The definition of this function is : void outData , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

We are now ready to write the algorithm for the function main .

Declare the variables .

Prompt the user to enter the name of the file containing the data .

Read the name of the input file .

Open the input file .

If the input file does not exist , exit the program .

Initialize the array salesPersonList .
Call the function initialize .

Close the input file containing the data and clear the input stream .

Prompt the user to enter the name of the file containing the sales data .

Read the name of the input file .

Open the input file .

If the input file does not exist , exit the program .

Prompt the user to enter the name of the output file .

Read the name of the output file .

Open the output file .

To output numbers in fixed decimal format with the decimal point and trailing zeroes , set the manipulators fixed and showpoint .
Also , to output numbers to two decimal places , set the precision to two decimal places .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Sales Data Analysis .

Call the function getData .

Calculate the total sales by .
Call the function saleByQuarter .

Calculate the total sales for each salesperson .
Call the function totalSaleByPerson .

Print the report in tabular format .
Call the function printReport .

Find and print the salesperson who produces the maximum sales for the year .
Call the function maxSaleByPerson .

Find and print the that produces the maximum sales for the year .
Call the function maxSaleByQuarter .

Close the files .

For each salesperson , it outputs the  the total sales by each  and the total sales for the year .
It also outputs the generating the maximum sale for the year and the sales amount .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Programming Example : Sales Data Analysis .

Sample Run : In this sample run , the user input is shaded .

Enter the salesPerson ID file name : Enter the sales data file name : Enter the output file name : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Input File : IDs Input File : Data Sample Run : Annual Sales Report ID Total .

Total Max Sale by  Max Sale by  Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

struct is collection of fixed number of components .

Components of struct can be of different types .

The syntax to define struct is : struct structName ;

In , struct is reserved word .

In , struct is definition ; no memory is allocated .
Memory is allocated for the struct variables only when you declare them .

Components of struct are called members of the struct .

Components of struct are accessed by name .

In , the dot operator is called the member access operator .

Members of struct are accessed by using the dot operator .
For example , if employeeType is struct , employee is variable of type employeeType , and name is member of employee , then the expression accesses the member name .
That is , is variable and can be manipulated like other variables .

The only operations on struct are the assignment and member access operations .

Neither arithmetic nor relational operations are allowed on .

As parameter to function , struct can be passed either by value or by reference .

function can return value of type struct .

struct can be member of another struct .

EXERCISES The number in parentheses at the end of an exercise refers to the learning objective listed at the beginning of the chapter .

Mark the following statements as true or false .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The only allowable operations on struct are assignment and member .

Some aggregate operations are allowed on struct .
struct variable can be passed as parameter either by value or by .

Define struct , carType , to store the following data about car : Manufacturer , model , model type , color , number of doors , miles per gallon in city , miles per gallon on Assume the definition of Exercise .
Declare carType variable and write statements to store the following information : number of , miles per gallon in , miles per gallon on , year when the car Define struct , fruitType , to store the following data about fruit : Fruit name Assume the definition of Exercise .
Declare variable of type fruitType to store the following data : Fruit , Consider the declaration of the struct houseType given in this chapter .

Declare variables oldHouse and newHouse of type houseType .

Store the following information into oldHouse : number of , number of , number of cars , year , finished square , and .

Copy the values of the components of oldHouse into the corresponding components of newHouse .

Consider the declaration of the struct houseType given in this chapter .

Suppose firstHouse and secondHouse are variables of houseType .

Write to compare the style and price of firstHouse and secondHouse .
Output true if the corresponding values are the same ;

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Write function , printHouseInfo to output data stored into variable of houseType .
Use appropriate labels to identify each Which aggregrate operations allowed on struct variables are not allowed Consider the following statements :

Assume the declarations of Exercise .
Write statements to store the  Linda Brown   Calculus call number :  grade : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Assume the declarations of Exercise .
Write statements that do the .

Store the following information in   Programming   In the array  initialize each to .

Copy the information of the component of the array into student .

Update the of the tenth student in the array by adding to its previous value .

Consider the following statements is as defined in Exercise :

Store the following information in newEmployee :  Mickey Doe   dept : ACCT 

In the array  initialize each to .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Update the of the employee in the array by adding to its previous value .

Assume that you have the following definition of struct : c .

Write code to initialize each component of inventory as follows : partName to null string , partNum to , price to , and quantitiesInStock to .

Write code that uses loop to output the data stored in inventory .
Assume that the variable length indicates the number of elements in inventory .

Assume the definition and declaration of Exercise .
Write the definition of void function that can be used to input data in variable of type partsType .
Also write code that uses your function to input data in .

Declare the variable destination of type tourType .

Write statements to store the following data in destination : miles , hours and minutes .

Write the definition of function to output the data stored in variable of type tourType .

Write the definition of function that inputs data into variable of type tourType .

Write the definition of void function with reference parameter of type tourType to input data in variable of type tourType .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

PROGRAMMING EXERCISES .

Assume the definition of Exercise , which defines the struct fruitType .

Write program that declares variable of type fruitType , prompts the user to input data about fruit , and outputs the fruit data .

Write program that reads students ' names followed by their test scores .
The program should output each followed by the test scores and the relevant grade .
It should also find and print the highest test score and the of the students having the highest test score .

Student data should be stored in struct variable of type studentType , which has four components : studentFName and studentLName of type string , testScore of type int is between and , and grade of type char .
Suppose that the class has students .
Use an array of components of type studentType .

Your program must contain at least the following functions : function to read the students ' data into the array .

function to assign the relevant grade to each student .

function to find the highest test score .

function to print the names of the students having the highest test score .

Your program must output each in this form : last followed by comma , followed by space , followed by the first  the must be left justified .
Moreover , other than declaring the variables and opening the input and output files , the function main should only be collection of function calls .

Define struct , menuItemType , with two components : menuItem of type string and menuPrice of type double .

Write program to help local restaurant automate its breakfast billing system .
The program should do the following :

Show the customer the different breakfast items offered by the restaurant .

Allow the customer to select more than one item from the menu .

Calculate and print the bill .

Assume that the restaurant offers the following breakfast items price of each item is shown to the right of the : Plain Egg Bacon and Egg Muffin French Toast Fruit Basket Cereal Coffee Tea Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Your program must contain at least the following .

Function getData : This function loads the data into the array menuList .

Function showMenu : This function shows the different items offered by the restaurant and tells the user how to select the items .

Function printCheck : This function calculates and prints the check .

sample output is : Welcome to Restaurant Bacon and Egg Muffin Coffee Tax Amount Due .

Format your output with two decimal places .
The name of each item in the output must be left justified .
You may assume that the user selects only one item of particular type .

Redo Exercise so that the customer can select multiple items of particular type .
sample output in this case is : Welcome to Restaurant Bacon and Egg Muffin Coffee Tax Amount Due .

Write program whose main function is merely collection of variable declarations and function calls .
This program reads text and outputs the letters , together with their counts , as explained below in the function printResult .
All information must be Your program must consist of at least the following .

Function openFile : Opens the input and output files .
You must pass the file streams as parameters reference , of .
If the file does not exist , the program should print an appropriate message and exit .
The program must ask the user for the names of the input and output files .

Function count : Counts every occurrence of capital letters and small letters in the text file opened in the function openFile .
This information must go into an array of structures .
The array must be passed as parameter , and the file identifier must also be passed as parameter .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Function printResult : Prints the number of capital letters and small letters , as well as the percentage of capital letters for every letter and the percentage of small letters for every letter .
The percentages should look like this :
This information must come from an array of structures , and this array must be passed as parameter .

Write program that declares struct to store the data of football player name , position , number of touchdowns , number of catches , number of passing yards , number of receiving yards , and the number of rushing .
Declare an array of components to store the data of football players .
Your program must contain function to input data and function to output data .
Add functions to search the array to find the index of specific player , and update the data of player .
Your program should be menu driven , giving the user various choices .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Learn about the static members of class Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The definition of struct given in Chapter is similar to the definition of .
However , the members of struct can be data items as well as functions .

provides another structured data type , called class , which is specifically designed to group data and functions .
This chapter first introduces classes and explains how to use them and then discusses the similarities and differences between struct and class .

In fact , struct and class have similar capabilities , as discussed in the section struct versus class " in this chapter .

Classes Chapter introduced the methodology called design .
In OOD , the first step is to identify the components , called objects .
An object combines data and the operations on that data in single unit .
In , the mechanism that allows you to combine data and the operations on that data in single unit is called class .
Now that you know how to store and manipulate data in computer memory and how to construct your own functions , you are ready to learn how objects are constructed .

This and subsequent chapters develop and implement programs using OOD .
This chapter first explains how to define class and use it in program .

class is collection of fixed number of components .
The components of class are called the members of the class .

The general syntax for defining class is : class classIdentifier classMembersList ; in which classMembersList consists of variable declarations functions .
That is , member of class can be either variable store or function manipulate .

For example , the following statements define the class courseType , with variables and functions , to implement the basic properties of course .

If member of class is variable , you declare it just like any other variable .
Also , in the definition of the class , you cannot initialize variable when you declare it .

If member of class is function , you typically use the function prototype to declare that member .

If member of class is function , it can access any member of the variables and member functions .
That is , when you write the definition of member function , you can directly access any member variable of the class without passing it as parameter .
The only condition is that you must declare an identifier before you can use it .

In , class is reserved word , and it defines only data type ; no memory is allocated .
It announces the declaration of class .
Moreover , note the semicolon after the right brace .
The semicolon is part of the syntax .
missing semicolon , therefore , will result in syntax error .

The members of class are classified into three categories : private , public , and protected .
This chapter mainly discusses the first two types , private and public .

In , private , protected , and public are reserved words and are called member access specifiers .

Following are some facts about public and private members of .

By default , all members of class are private .

If member of class is private , you cannot access it directly from .

public member is accessible outside of the class .

To make member of class public , you use the member access specifier public with colon ,

Suppose that we want to define class to implement the time of day in program .

Because clock gives the time of day , let us call this class clockType .
Furthermore , to represent time in computer memory , we use three int variables : one to represent the hours , one to represent the minutes , and one to represent the seconds .

Suppose these three variables .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Set the time .

Retrieve the time .

Print the time .

Increment the time by one second .

Increment the time by one minute .

Increment the time by one hour .

Compare the two times for equality .

To implement these seven operations , we will write seven , getTime , printTime , incrementSeconds , incrementMinutes , incrementHours , and equalTime .

From this discussion , it is clear that the class clockType has members : three member variables and seven member functions .

Some members of the class clockType will be private ; others will be public .

Deciding which member to make public and which to make private depends on the nature of the member .
The general rule is that any member that needs to be directly accessed outside of the class is declared public ; any member that should not be accessed directly by the user should be declared private .
For example , the user should be able to set the time and print the time .
Therefore , the members that set the time and print the time should be declared public .

Similarly , the members to increment the time and compare the time for equality should be declared public .
On the other hand , to prevent the direct manipulation of the member variables hr , min , and sec , we will declare them private .
Furthermore , note that if the user has direct access to the member variables , member functions such as setTime are not explains why some members need to be public and others should be private .

The following statements define the class clockType : class clockType .

The class clockType has seven member functions : setTime , getTime , printTime , incrementSeconds , incrementMinutes , incrementHours , and equalTime .
It has three member variables : hr , min , and sec .

The three member , min , and private to the class and cannot be accessed outside of the class .

They can also directly access the member variables , min , and .

In other words , when we write the definitions of these functions , we do not pass these member variables as parameters to the member functions .

In the function equalTime , the formal parameter is constant reference parameter .
That is , in call to the function equalTime , the formal parameter receives the address of the actual parameter , but the formal parameter cannot modify the value of the actual parameter .

You could have declared the formal parameter as value parameter , but that would require the formal parameter to copy the value of the actual parameter , which could result poor performance .

The private and public members can appear any order .
If you want , you can declare the private members first and then declare the public ones .
The section of public and private Members of  this chapter discusses this issue .

In the definition of the class clockType , all member variables are private and all member functions are public .

For example , if member function is used only to implement other member functions of the class and the user does not need to access this function , you make it private .
Similarly , member variable of class can also be public .

Note that we have not yet written the definitions of the member functions of the class .

You will learn how to write them shortly .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , whole or part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The given values are passed as parameters to the function setTime .
The function printTime prints the time , that is , the values of hr , min , and sec .
The function incrementSeconds increments the time by one second , the function incrementMinutes increments the time by one minute , the function incrementHours increments the time by one hour , and the function equalTime compares two times for equality .

Note that the function equalTime has only one parameter , although you need two things to make comparison .
We will explain this point with the help of an example the section of Member " later this chapter .

Unified Modeling Language Diagrams class and its members can be described graphically using notation known as the Unified Modeling Language notation .
For example , Figure shows the UML class diagram of the class clockType .

UML class diagram of the class clockType The top box contains the name of the class .
The middle box contains the member variables and their data types .
The last box contains the member function name , parameter list , and the return type of the function .
+ sign front of member name indicates that this member is public member ; sign indicates that this is private member .
The symbol before the member name indicates that the member is protected member .

Variable Declaration Once class is defined , you can declare variables of that type .
In terminology , class variable is called class object or class instance .
To help you become familiar with this terminology , from now on we will use the term class object , or simply object , for class variable .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , whole or part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Each object has separate memory allocated for hr , min , and sec .

In actuality , memory is allocated only for the member variables of each class object .
The compiler generates only one physical copy of member function of class , and each class object executes the same copy of the member function .
Therefore , whenever we draw the figure of class object , we will show only the member variables .
As an example , Figure shows the objects myClock and yourClock with values their member variables .

The general syntax for an object to access member of class is : The class members that class object can access depend on where the object is declared .

If the object is declared the definition of member function of the class , then the object can access both the public and private members .

If the object is declared elsewhere example , then the object can access only the public members of the class .

Recall that , the .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , whole or part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

These statements are legal ; that is , they are syntactically correct .

In the first statement , the member function setTime is executed .
The values , and are passed as parameters to the function setTime , and the function uses these values to set the values of the three member variables hr , min , and sec of myClock to , and , respectively .

Similarly , the second statement executes the member function printTime and outputs the contents of the three member variables of myClock .
In the third statement , the values of the variables , and are used to set the values of the three member variables of yourClock .

In the fourth statement , the member function equalTime executes and compares the three member variables of myClock to the corresponding member variables of yourClock .
Because in this statement equalTime is member of the object myClock , it has direct access to the three member variables of myClock .
So it needs one more object , which in this case is yourClock , to compare .
In essence , equalTime needs two objects to compare .
The object to which it is dotted , myClock , is one and the argument , yourClock , is the other .
This explains why the function equalTime has only one parameter .

The objects myClock and yourClock can access only public members of the class clockType .
Thus , the following statements are illegal because and are declared as private members of the class clockType and , therefore , cannot be accessed by the objects myClock and .

You cannot use arithmetic operators to perform arithmetic operations on class objects they are overloaded ; see Chapter .
For example , you cannot use the operator + to add two class objects of , say , type clockType .
Also , you cannot use relational operators to compare two class objects for equality they are overloaded ; see Chapter .

The two operations that are valid for class objects are member access and .
You have seen how to access an individual member of class by using the name of the class object , then dot , and then the member name .

Assignment Operator and Classes Suppose that myClock and yourClock are clockType objects , as defined previously .

Furthermore , suppose that the values of myClock and yourClock are as shown in Figure .

In other words , the values of the three member variables of yourClock are copied into the corresponding member variables of .
Therefore , an statement Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

After the statement in Line executes , the values of and yourClock are as shown in Figure .

Class Scope class object can be either automatic is , created each time the control reaches its declaration and destroyed when the control exits the surrounding or static is , created once , when the control reaches its declaration , and destroyed when the program .
Also , you can declare an array of class .
class object has the same scope as other variables .
member of class has the same scope as member of struct .
That is , member of class is local to the class .
You access class member outside of the class by using the class object name and the member access operator .

Functions and Classes The following rules describe the relationship between functions and .

Class can be passed as parameters to functions and returned as function values .

As parameters to functions , class can be passed either by value or by reference .

If class object is passed by value , the contents of the member variables of the actual parameter are copied into the corresponding member variables of the formal parameter .

Recall that when variable is passed by value , the formal parameter copies the value of the actual parameter .
That is , memory space to copy the value of the actual parameter is allocated for the formal parameter .
As parameter , class object can be passed by value .

Suppose that class has several member variables requiring large amount of memory to store data , and you need to pass variable by value .
The corresponding formal parameter then receives copy of the data of the variable .
That is , the compiler must allocate memory for the formal parameter , so as to copy the value of the member variables of the actual parameter .

This operation might require , in addition to large amount of storage space , considerable amount of computer time to copy the value of the actual parameter into the formal parameter .

On the other hand , if variable is passed by reference , the formal parameter receives only the address of the actual parameter .
Therefore , an efficient way to pass variable as parameter is by reference .
If variable is passed by reference , then when the formal parameter changes , the actual parameter also changes .
Sometimes , however , you do not want the function to be able to change the values of the member variables .
In , you can pass variable by reference and still prevent the function from changing its value by using the keyword const in the formal parameter declaration .
As an example , consider the following function definition : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The parameter otherClock is declared using the keyword const .
Thus , in call to the function testTime , the formal parameter otherClock receives the address of the actual parameter , but otherClock cannot modify the contents of the actual parameter .
For example , after the following statement executes , the value of will not be altered : In fact , if the function testTime attempts to modify otherClock , the compiler will generate syntax errors .

Generally , if you want to declare class object as value parameter , you declare it as reference parameter using the keyword const , as described previously .

Recall that if formal parameter is value parameter , within the function definition , you can change the value of the formal parameter .
That is , you can use an assignment statement to change the value of the formal parameter , of course , would have no effect on the actual .
However , if formal parameter is constant reference parameter , you cannot use an assignment statement to change its value within the function , nor can you use any other function to change its value .
Therefore , within the definition of the function testTime , you cannot alter the value of For example , the following would be illegal in the definition of the function .

Implementation of Member Functions When we defined the class clockType , we included only the function prototype for the member functions .
For these functions to work properly , we must write the related algorithms .
One way to implement these functions is to provide the function definition rather than the function prototype in the class itself .
Unfortunately , the class definition would then be very long and difficult to comprehend .
Another reason for providing function prototypes instead of function definitions relates to information hiding ; that is , we want to hide the details of the operations on the data .
We Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

That is , we will write the definitions of the functions setTime , getTime , printTime , incrementSeconds , equalTime , and so on .
Because the identifiers setTime , outside of the class .
In order to reference these identifiers , we use the scope resolution operator ,
In the function heading , the name of the function is the name of the class , followed by the scope resolution operator , followed by the function name .
For example , the definition of the function setTime is as follows :

Note that the definition of the function setTime checks for the valid values of hours , minutes , and seconds .
If these values are out of range , the member variables   and are initialized to .
Let us now explain how the member function setTime works when accessed by an object of type clockType .

The member function setTime is void function and has three parameters .

call to this function is statement .

We must use three parameters in call to this function .

Furthermore , recall that because setTime is member of the class clockType , it can directly access the member variables   and  as shown in the definition of setTime .

Suppose that myClock is an object of type clockType declared .
The object myClock has three member variables , as shown in Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time subsequent rights restrictions require it .

Now the function setTime is called with parameters , and .
So the values of the formal parameters hours , minutes , and seconds of the function setTime are , and , respectively .
Next , in the statement , setTime is accessed by the object myClock .
Therefore , the three ,  and to in the body of the function setTime are the three member variables of myClock .
When the body of the function setTime executes , the value of hours is copied into , the value of minutes is copied into , and the value of seconds is copied into .
In essence , the values , and , which are passed as parameters in the preceding statement , are assigned to the three member variables of myClock by the function setTime the body of the function .
After the previous statement executes , the object myClock is as shown in Figure .

Next , let us give the definitions of the other member functions of the class clockType .

The definitions of these functions are simple and easy to follow : void   const .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time subsequent rights restrictions require it .

From the definitions of the functions incrementMinutes and incrementSeconds , it is clear that member function of class can call other member functions of the class .

The function equalTime has the following definition : bool const .

Suppose that myClock and yourClock are objects of type clockType , as declared previously .
Further suppose that we have myClock and yourClock , as shown in Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time subsequent rights restrictions require it .

Objects myClock and yourClock Consider the following .

In the expression : the object myClock accesses the member function equalTime .
Because otherClock is reference parameter , the address of the actual parameter yourClock is passed to the formal parameter otherClock , as shown in Figure .

Object myClock and parameter otherClock The member variables   and of otherClock have the values , and , respectively .
In other words , when the body of the function equalTime executes , the value of otherClock .
The function equalTime is member of myClock .
When the function equalTime executes , the variables   and in the body of the function equalTime are the member variables of the object myClock .
Therefore , the member of myClock is compared with , the member of myClock is compared with , and the member of myClock is compared with .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Let us again take look at the definition of the function equalTime .
Notice that within the definition of this function , the object otherClock accesses the member variables   and .
However , these member variables are private .

The function equalTime is member of the class clockType , and   and are the member variables .
Moreover , otherClock is an object of type clockType .
Therefore , the object otherClock can access its private member variables within the definition of the function equalTime .

The same is true for any member function of class .
In general , when you write the definition of member function , say , dummyFunction , of class , say , dummyClass , and the function uses an object , dummyObject of the class dummyClass , then within the definition of dummyFunction , the object dummyObject can access its private member variables fact , any private member of the .

Once class is properly defined and implemented , it can be used in program .
program or software that uses and manipulates the objects of class is called client of that class .

When you declare objects of the class clockType , every object has its own copy of the member variables   and .
In terminology , variables such as   and are called instance variables of the class because every object instance has its own copy of the data .

Accessor and Mutator Functions Let us look at the member functions of the class clockType .
The function setTime sets the values of the member variables to the values specified by the user .
In other words , it alters or modifies the values of the member variables .
Similarly , the functions incrementSeconds , incrementMinutes , and incrementHours also modify the member variables .
On the other hand , functions such as getTime , printTime , and equalTime only access the values of the member variables .
They do not modify the member variables .
We can , therefore , categorize the member functions of the class clockType into two categories : member functions that modify the member variables and member functions that only access , but do not modify , the member variables .

This is typically true for any class .
That is , every class has member functions that only access but do not modify the member variables , called accessor functions , and member functions that modify the member variables , called mutator functions .

Accessor function : member function of class that only accesses is , does not the of the member .

Mutator function : member function of class that modifies the of the member .

Moreover , constant member function of class cannot modify the member variables of that class .
For example , see the headings of the member functions getTime , printTime , and equalTime of the class clockType .

member function of class is called constant function if its heading contains the reserved word const at the end .
For example , the member functions getTime , printTime , and equalTime of the class clockType are constant functions .
constant member function of class cannot modify the member variables of that class , so these are accessor functions .

One thing that should be remembered about constant member functions is that constant member function of class can only call other constant member functions of that class .

Therefore , you should be careful when you make member function constant .

Example shows how to use the class clockType in program .
Note that we have combined the definition of the class , the definition of the member functions , and the main function to create complete program .
Later in this chapter , you will learn how to separate the definition of the class clockType , the definitions of the member functions , and the main program , using three files .

EXAMPLE program listing of the program that defines uses the class clockType .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : In this sample run , the user input is shaded .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time subsequent rights restrictions require it .

The only thing you need to remember is that , by default , all members of class are private .
You must use the member access specifier public to make member available for public access .
Member access remains as set for all declared members until explicitly reset , so public sets all members public until explicitly changed to private .
Therefore , you decide to declare the private members after the public members is done in the case of , you must use the member access specifier private to begin the declaration of the private members .

We can declare the class clockType in one of three ways , as shown in Examples through .

EXAMPLE This declaration is the same as before .
For the sake of completeness , we the class definition : class clockType .

Classes public : void void void void void void bool .

In Example , because the identifiers   and do not follow any member access specifier , they are by default private .

It is common practice to list all of the public members first and then the private members .
This way , you can focus your attention on the public members .

Constructors In the program in Example , when we printed the value of yourClock without calling the function setTime , the output was some strange numbers the output of in the sample .
This is due to the fact that does not automatically initialize the variables .
Because the private members of class cannot be accessed outside of the class our case , the member , the user forgets to initialize these variables by calling the function setTime , the program will produce erroneous results .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time subsequent rights restrictions require it .

There are two types of constructors : with parameters and without parameters .
The constructor without parameters is called the default constructor .

Constructors have the following .

The name of constructor is the same as the name of the class .

constructor is function and it has no type .
That is , it is neither function nor void function .

class can have more than one constructor .
However , all constructors of class have the same name .

If class has more than one constructor , the constructors must have different formal parameter lists .
That is , either they have different number of formal parameters or , if the number of formal parameters is the same , then the data type of the formal parameters , in the order you list , must differ in at least one position .
In other words , like function overloading , name is overloaded .

Constructors execute automatically when class object is declared and enters its scope .
Because they have no types , they cannot be called like other functions .

Which constructor executes depends on the types of values passed to the class object when the class object is declared .

Let us extend the definition of the class clockType by including two constructors : class clockType .

Let us now write the definitions of these constructors : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time subsequent rights restrictions require it .

From the definitions of these constructors , it follows that the default constructor sets the three member ,  and .
Also , the constructor with parameters sets the member variables to whatever values are assigned to the formal parameters .

Moreover , we can write the definition of the constructor with parameters by calling the function setTime , as .

Invoking Constructor Recall that when class object is declared , constructor is automatically executed .

Because class might have more than one constructor , including the default constructor , next we discuss how to invoke specific constructor .

Invoking the Default Constructor Suppose that class contains the default constructor .
The syntax to invoke the default constructor is : className classObjectName ; For example , the .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time subsequent rights restrictions require it .

In this case , the default constructor executes because no arguments are included in the declaration and the member variables of yourClock are initialized to .

If you declare an object and want the default constructor to be executed , the empty parentheses after the object name are not required in the object declaration statement .
In fact , you accidentally include the empty parentheses , the compiler generates syntax error message .
For example , the following statement to declare the object yourClock is .

Note the .

The number of arguments and their type should match the formal parameters the order of one of the constructors .

If the type of the arguments does not match the formal parameters of any constructor the order , uses type conversion and looks for the best match .
For example , an integer value might be converted to value with zero decimal part .
Any ambiguity will result in error .

Consider the statement : clockType , This statement declares an object myClock of type clockType .
Here , we are passing three values of type int , which matches the type of the formal parameters of the constructor with parameter .
Therefore , the constructor with parameters of the class clockType executes , and the three member variables of the object myClock are set to , and .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time subsequent rights restrictions require it .

EXAMPLE Consider the following class definition : class inventory .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time subsequent rights restrictions require it .

Consider the following declarations : inventory inventory inventory inventory .

For , the default constructor in Line executes because no value is passed to this variable .
For , the constructor in Line executes because only one parameter , which is of type string , is passed , and it matches with the constructor in Line .
For , the constructor in Line executes because three parameters are passed to , and they match with the constructor in Line .
Similarly , for , the constructor in Line executes Figure .

Effect of constructors on objects If the values passed to class object do not match the parameters of any constructor and if no type conversion is possible , error will be generated .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In such cases , the rules for declaring formal parameters are the same as those for declaring default formal parameters in function .
Moreover , actual parameters to constructor with default parameters are passed according to the rules for functions with default parameters .

In the implementation file , the definition of this constructor is the same as the definition of the constructor with parameters .

If you replace the constructors of the class clockType with the constructor in Line constructor with the default , then you can declare clockType objects with zero , one , two , or three arguments , as follows : clockType clockType clockType clockType .

The member variable hr of is initialized to , and the member variables min and sec of are initialized to .

The member variable hr of is initialized to , the member variable min of is initialized to , and the member variable sec of is initialized to .

The member variable hr of is initialized to , the member variable min of is initialized to , and the member variable sec of is initialized to .

Using these conventions , we can say that constructor that has no parameters , or has all default parameters , is called the default constructor .

Classes and Constructors : Precaution As discussed in the preceding section , constructors provide guaranteed initialization of the member variables .
Typically , the default constructor is used to initialize the member variables to some default values , and this constructor has no parameters .
constructor with parameters is used to initialize the member variables to some specific values .

We have seen that if class has no , then the object created is uninitialized because does not automatically initialize variables when they are declared .
In reality , if class has no , then automatically provides the default constructor .

However , this default constructor does not initialize the object being declared .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

If class has no , automatically provides the default constructor .
However , the object declared is still uninitialized .

On the other hand , suppose class , say , dummyClass , includes with and does not include the default constructor .
In this case , does not provide the default constructor for the class dummyClass .
Therefore , when an object of the class dummyClass is declared , we must include the appropriate arguments in its declaration .

The following code further explains this .
Consider the definition of the following class : class dummyClass .

The class dummyClass has constructor with parameters .
It does not have default constructor written for it and will not provide one automatically because at least one constructor has been written for it .
Given this definition of the class dummyClass , the following object declaration is .

initialization of Data Members and the Default Constructor standard allows the initialization of data members when they are declared in class .
For example , the definition of the class clockType can also be written as follows : class clockType .

In this class definition , the data members   and are declared as well as initialized .
This is called initialization of the data members and in many situations eliminates the declaration of the default constructor .
When an object of the class clockType is declared without parameters , then the object is initialized using the initialized values .
If an object is declared with parameters , then the default values are overridden by the constructor with the parameters .
For example , consider the following statements : clockType myTime ; clockType , The   and of myTime are each set to , while the   and of yourTime are set to , and , respectively .

At the time of the writing of this book , the compiler that we used to create and test code had not implemented this feature of .
Therefore , we will continue to include the default constructor in the definition of class .

Arrays of Class and Constructors If class has constructors and you declare an array of that objects , the class should have the default constructor .
The default constructor is typically used to initialize each class object .

For example , if you declare an array of class objects , then it is impractical not to specify different constructors for each component .
You can declare two and components each , wherein each component is an object of type clockType .

Consider the following .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Array arrivalTimeEmp You can now use the functions of the class clockType to manipulate the time for each employee .
For example , the following statement sets the arrival time , that is ,

Array arrivalTimeEmp after setting the time of employee To output the arrival time of each employee , you can use loop , such as the .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Similarly , you can use arrays to manage list of names or other objects .

Before leaving our discussion of arrays of class objects , we would like to point out the following : The beginning of this section stated that if you declare an array of class objects and the class has , then the class should have the default constructor .
The compiler uses the default constructor to initialize the array of objects .
If the array size is large , then it is impractical to specify different constructor with parameters for each object .

For array , we can manage to specify different constructor with parameters .

For example , the following statement declares to be an array of two components .
The member variables of the first component are initialized to , and , respectively .
The member variables of the second component are initialized to , and , respectively .

Consider the following statement , which creates the object and initializes its member variables to , and , respectively .
This is how we have been creating and initializing objects .

It does not first require that an anonymous object be created and then copied in order to initialize .

The main point that we are stressing here , and that we discussed in the preceding section , is the following : To avoid any pitfalls , if class has , it should also have the default constructor .

Destructors Like constructors , destructors are also functions .
Moreover , like constructors , destructor does not have type .
That is , it is neither function nor void function .

However , class can have only one destructor , and the destructor has no parameters .
The name of destructor is the tilde character , followed by the name of the class .
For example , the name of the destructor for the class clockType is : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The use of destructors is discussed in subsequent chapters .

Data Abstraction , Classes , and Abstract Data Types For the car that we drive , most of us want to know how to start the car and drive it .

Most people are not concerned with the complexity of how the engine works .
By separating the design details of engine from its use , the manufacturer helps the driver focus on how to drive the car .
Our daily life has other similar examples .
For the most part , we are concerned only with how to use certain items , rather than with how they work .

Separating the design details is , how the engine from its use is called abstraction .
In other words , abstraction focuses on what the engine does and not on how it works .
Thus , abstraction is the process of separating the logical properties from the implementation details .
Driving the car is logical property ; the construction of the engine constitutes the implementation details .
We have an abstract view of what the engine does but are not interested in the actual implementation .

Abstraction can also be applied to data .
Earlier sections of this chapter defined data type clockType .
The data type clockType has three member variables and the following basic operations :

Set the time .

Return the time .

Print the time .

Increment the time by one second .

Increment the time by one minute .

Increment the time by one hour .

Compare two times to see whether they are equal .

The actual implementation of the operations , that is , the definitions of the member functions of the class clockType , was postponed .

Data abstraction is defined as process of separating the logical properties of the data from its implementation .
The definition of clockType and its basic operations are the logical properties ; the storing of clockType objects in the computer and the algorithms to perform these operations are the implementation details of clockType .

Abstract data type : data type that separates the logical properties from the implementation details .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Data Abstraction , Classes , and Abstract Data Types Like any other data type such as int , an ADT has three things associated with it : the name of the ADT , called the type name ; the set of values belonging to the ADT , called the domain ; and the set of operations on the data .

Return the time .

Print the time .

Increment the time by one second .

Increment the time by one minute .

Increment the time by one hour .

Compare the two times to see whether they are equal .

EXAMPLE list is defined as set of values of the same type .
Because all values in list are of the same type , convenient way to represent and process list is to use an array .
You can define list as an ADT as follows : dataTypeName listType domain Every listType value is an array of , say , numbers operations Check to see whether the list is empty .

Check to see whether the list is full .

Search the list for given item .

Delete an item from the list .

Insert an item in the list .

Sort the list .

Destroy the list .

Print the list .

The next obvious question is how to implement an ADT in program .
To implement an ADT , you must represent the data and write algorithms to perform the operations .

The previous section used classes to group data and functions together .
Furthermore , our definition of class consisted only of the specifications of the operations ; functions to implement the operations were written separately .
Thus , we see that classes are convenient way to implement an ADT .
In fact , in , classes were specifically designed to handle ADTs .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Typically in list , not only do we store the elements , but we also keep track of the number of elements in the list .
Therefore , our class listType has two member variables : one to store the elements and another to keep track of the number of elements in the list .
The following class , listType , defines the list as an ADT .

UML class diagram of the class listType struct Versus class Chapter defined struct as fixed collection of components , wherein the components can be of different types .
This definition of components in struct included only member variables .
However , struct is very similar to class .
As with Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Information Hiding class , members of struct can also be functions , including constructors and destructor .
The only difference between struct and class is that , by default , all members of struct are public , and all members of class are private .
You can use the member access specifier private in struct to make member private .

In , the definition of struct is similar to the definition of struct in , as given in Chapter .
Because evolved from , the standard are perfectly acceptable in .
However , the definition of struct in was expanded to include member functions and constructors and destructors .
In the future , because class is syntactically separate entity , specially designed to handle an ADT , the definition of class may evolve in completely different way than the definition of struct .

Both classes and structs have the same capabilities .
However , most programmers restrict their use of structures to adhere to their structure form and thus do not use them to include member functions .
In other words , if all of the member variables of class are public and the class has no member functions , you typically use struct to group these member variables .

Information Hiding The previous section defined the class clockType to implement the time in program .
We then wrote program that used the class clockType .
In fact , we combined the class clockType with the function definitions to implement the operations and the function main so as to complete the program .
That is , the specification and implementation details of the class clockType were directly incorporated into the program .

Is it good practice to include the specification and implementation details of class in the program .

Suppose the definition of the class and the definitions of the member functions are directly included in the program .
The user then has direct access to the definition of the class and the definitions of the member functions .
Therefore , the user can modify the operations in any way the user pleases .
The user can also modify the member variables of an object in any way the user pleases .
Thus , in this sense , the private member variables of an object are no longer private to the object .

If several programmers use the same object in project and if they have direct access to the internal parts of the object , there is no guarantee that every programmer will use the same object in exactly the same way .
Thus , we must hide the implementation details .
The user should know only what the object does , not how it does it .
Hiding the implementation details frees the user from having to fit this extra piece of code in the program .
Also , by hiding the details , we can ensure that an object will be used in exactly the same way throughout the project .
Furthermore , once an object has been written , debugged , and tested properly , it becomes .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

For illustration purposes , we will use the class clockType .

To implement clockType in program , the user must declare objects of type clockType and know which operations are allowed and what the operations do .

So , the user must have access to the specification details .
Because the user is not concerned with the implementation details , we must put those details in separate file called an implementation file .
Also , because the specification details can be too long , we must free the user from having to include them directly in the program .
However , the user must be able to look at the specification details so that he or she can correctly call the functions , and so forth .
We must , therefore , put the specification details in separate file .

The file that contains the specification details is called the header file interface .

The implementation file contains the definitions of the functions to implement the operations of an object .
This file contains , among other things as the preprocessor , the statements .
Because program can have only one function , main , the implementation file does not contain the function main .
Only the user program contains the function main .
Because the implementation file does not contain the function main , we cannot produce the executable code from this file .
In fact , we produce what is called the object code from the implementation file .
The user then links the object code produced by the implementation file with the object code of the program that uses the class to create the final executable code .

Finally , the header file has an extension , whereas the implementation file has an extension cpp .
Suppose that the specification details of the class clockType are in file called clockType .
The complete name of this file should then be .
If the implementation details of the class clockType are in , name of this file must be .

The file contains only the definitions of the functions , not the definition of the class .
Thus , to resolve the problem of an undeclared identifier as the function names and variable , we include the header file in the file with the help of the include statement .
The following include statement is required by any program that uses the class clockType , as well as by the implementation file that defines the operations for the class clockType : Note that the header file is enclosed in double quotation marks , not angular brackets .
The header file is called the header file .

Typically , all header files are enclosed in double quotation marks , whereas the header files as are enclosed between angular brackets .
Also , note that the preceding include statement assumes that the header file is in the same directory as the file .

The implementation contains the definitions of the functions , and these definitions are hidden from the user because the user is typically provided only the object code .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Information Hiding However , the user of the class should be aware of what particular function does and how to use it .
Therefore , in the specification file with the function prototypes , we include comments that briefly describe the function and specify any preconditions or postconditions .

Precondition : statement specifying the that must be true before the function is called .

Following are the specification and implementation files for the class clockType : the specification file for the class clockType class clockType .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Next , we describe the user file containing the program that uses the class clockType .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

To save space , we have not provided the complete details of the implementation file and the file that contains the user program .
However , you can find these files and the specification file at the Web site accompanying this book .

Executable Code The previous section discussed how to hide the implementation details of class .
To use an object in program , during execution , the program must be able to access the implementation details of the object is , the algorithms to implement the operations on the .
This section discusses how program obtains access to the implementation details of an object .
For illustration purposes , we will use the class clockType .

As explained previously , to use the class clockType , the program must include the header file via the include statement .
For example , the following program segment includes the header file :

To create the executable code to run the program , the following steps are required :
We separately compile the file and create the object code file .
The object code file contains the machine language code , but the code is not in an executable form .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The command : cc clockTypeImp .

To create the executable code for the source code file testClock , we compile the source code file , create the object code file , and then link the files and to create the executable file .
The following command on the system command line creates the executable file : cc testClockClass .

To create the object code file for any source code file , we use the command line option on the system command line .
For example , to create the object code file for the source code file , called , we use the following command on the system command line : cc exercise .

To link more than one object code file with source code file , we list all of the object code files on the system command line .
For example , to link and with the source code file , we use the command : cc test .

If source code file is modified , it must be recompiled .

If modifications in one source file affect other files , the other files must be recompiled and relinked .

The user must have access to the header file and the object code file .
Access to the header file is needed to see what the objects do and how to use them .
Access to the object code file is needed so that the user can link the program with the object code to produce an executable code .
The user does not need access to the source code file containing the implementation details .

As stated in Chapter , IDEs Visual Express , Visual Studio , and Builder put the editor , compiler , and linker all into one package .
With one command , the program is compiled and linked with the other necessary files .
These systems also manage programs in the form of project .
Thus , project consists of several files , called the project files .
These systems usually have command , called build , rebuild , or make .
When one or more files in the project change , you can use these commands to recompile and relink the files .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

More Examples of Classes .

EXAMPLE The following statements define the class circleType to implement the basic properties of circle : class circleType .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : In this sample run , the user input is shaded .

Line :    Line :    Line : Enter the of circle : Line : After setting the .

Line :    The preceding program works as follows .
The statements in Lines and create the objects and .
The of is set to ; and the of is set to by using the default value by the constructor .
The statements in Lines and output the of and .
The statements in Lines and prompt the user to enter the of circle and store the in the variable .

The statement in Line uses the member function setRadius and the value of to set the of .
The statement in Line ouputs the of .

EXAMPLE In Example , in Chapter , the function rollDice rolls pair of dice until the sum of the numbers rolled is given number and returns the number of times the dice are rolled to get the desired sum .
In fact , we can design class that implements the basic properties of die .
Consider the definition of the following class die .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : Line Line Line Line Line Line : After rolling : After rolling : The sum of the numbers rolled by the dice is : After again rolling , the sum of the numbers rolled is : The preceding program works as follows .
The statements in Lines and create the objects and , and using the default constructor set both dice to .
The statements in Lines and output the number of both dice .
The statement in Line rolls and the statement in Line outputs the number rolled .
Similarly , the statement in Line rolls and the statement in Line outputs the number rolled .
The statement in Line outputs the sum of the numbers rolled by and .
The statements in Lines and again rolls both dice and the statement in Line outputs the sum of the numbers rolled .

The class personType that is designed in Example is very useful ; we will use this class in subsequent chapters .

EXAMPLE The most common attributes of person are the first and last name .
The typical operations on name are to set the name and print the name .
The following statements define class with these properties .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

More Examples of Classes .

EXAMPLE In this example , we design and implement class to manipulate an integer .

Some of the operations that can be performed on this integer are : count the number of even digits , odd digits , and zeros ; find the sum of the digits ; reverse the digits ; split the number in the block of numbers ; and find the sum of these numbers .
The following class defines some of these operations .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

More Examples of Classes .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : In this sample run , the user input is shaded .

Enter an integer : The number of even digits : The number of zeros : The number of odd digits : Programming Exercise , at the end of this chapter , asks you to write the definition of the functions of the class integerManipulation that are not given .

Static Members of Class This section may be skipped without any loss of continuation .

In , we described two types of variables : automatic and static .
Recall that if local variable of function is static , it exists between function calls .
Similar to static variables , class can have static members , functions , or variables .
Let us note the following about the static members of .

If function of class is static , in the class definition it is declared using the keyword static in its heading .

If member variable of class is static , it is declared using the keyword static , as discussed in and also illustrated in Example .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Static Members of .

Example clarifies the effect of the keyword static .

EXAMPLE Consider the following definition of the class illustrate : class illustrate .

Suppose that the static member variables and the definitions of the member functions of the class illustrate are as follows .
Also , notice that all static member variables are initialized , as .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Suppose that you have class , say , myClass , with member variables as well as .
When you create objects of type myClass , only member variables of the class myClass become the member variables of each object .
For each static member variable of class , allocates only one memory space .
All myClass objects refer to the same memory space .
In fact , static member variables of class exist even when no object of that class type exists .
You can access the public static member variables outside of the class , as explained earlier in this section .

Next , we explain how memory space is allocated for static and member variables of class .

Suppose that you have the class illustrate , as given in Example .
Memory space then exists for the static member variables and .

Consider the following .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Static Members of FIGURE .

Similarly , the output of the statement :

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Now consider the statement : After this statement executes , the objects and static members are as shown in Figure .

The program in Example further illustrates how static members of class work .

Sample Run : Line : using , Line : using , The preceding program works as follows .
The static member variables and are initialized to .
The statement in Line declares to be an object of the class illustrate and initializes its member variable to .
The statement in Line declares to be an object of the class illustrate and initializes its member variable to .

The statement in Line uses the name of the class illustrate and the function incrementY to increment .
Now , is public static member of the class illustrate .
So the statement in Line uses the name of the class illustrate to directly access and increments it by .
The statements in Lines and output the data stored in the objects and .
Notice that the value of for both objects is the same .
Similarly , the value of for both objects is the same .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The statement in Line uses the object and the function incrementY to increment .
The statement in Line sets the value of the member variable of to .
Lines and output the data stored in the objects and .
Notice that the value of for both objects is the same .
Similarly , the value of for both objects is the same .
Moreover , notice that the statement in Line changes only the value of the member variable of because is not static member of the class illustrate .

The statement in Line uses the object and the function incrementY to increment .
The statement in Line sets the value of the member variable of to .
Lines and output the data stored in the objects and .
Notice that the value of for both objects is the same .
Similarly , the value of for both objects is the same .
Moreover , notice that the statement in Line changes only the value of the member variable of , because is not static member of the class illustrate .

Here are some additional comments on static members of class .
As you have seen in this section , static member function of class does not need any object to be invoked .
It can be called using the name of the class and the scope resolution operator , as illustrated .
Therefore , static member function cannot use anything that depends on calling object .
In other words , in the definition of static member function , you cannot use member variable or function unless there is an object declared locally that accesses the member variable or the nonstatic member function .

Let us again consider the class illustrate , as defined in Example .
This class contains both static and member variables .
When we declare objects of this class , each object has its own copy of the member variable  which is , and all objects share the member variables and  which are static .
Earlier in this chapter , we defined the terminology instance variables of class using the class clockType .
However , at that point , we did not discuss static member variables of class .
class can have static as well as member variables .
We can , therefore , make the general statement that member variables of class are called the instance variables of the class .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Juice Machine PROGRAMMING EXAMPLE : Watch the Video Juice Machine common place to buy is from machine .
new machine has been purchased for the gym , but it is not working properly .
The machine sells the following types of juices : orange , apple , mango , and .
You have been asked to write program for this machine so that it can be put into operation .

The program should do the following :

PROBLEM ANALYSIS AND ALGORITHM DESIGN Input Show the customer the different products sold by the machine .

Let the customer make the selection .

Show the customer the cost of the item selected .

Accept money from the customer .

Release the item .

The item selection and the cost of the item .

Output The selected item .

machine has two main components : cash register and several dispensers to hold and release the products .

Cash Register Let us first discuss the properties of cash register .
The register has some cash on hand , it accepts the amount from the customer , and if the amount deposited is more than the cost of the item , returns the change .
For simplicity , we assume that the user deposits the money greater than or equal to the cost of the product .
The cash register should also be able to show to the owner the amount of money in the register at any given time .
The following class defines the properties of cash register : class cashRegister public : int .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

UML class diagram of the class cashRegister Next , we give the definitions of the functions to implement the operations of the class cashRegister .
The definitions of these functions are very simple and easy to follow .

The function getCurrentBalance shows the current amount in the cash register .

In the definition of the class cashRegister , the constructor is declared with default value .
Therefore , if the user does not specify any value when the object is declared , the default value is used to initialize the member variable .
Recall that because we have specified the default value for the parameter in the Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Juice Machine .

The definition of the constructor is as .

Note that the definition of the constructor checks for valid values of the parameter If the value of is less than , the value assigned to the member variable is .

Dispenser The dispenser releases the selected item if it is not empty .
It should show the number of items in the dispenser and the cost of the item .
The following class defines the properties of dispenser .
Let us call this class dispenserType : class dispenserType public : const ; to show the number of items in the machine .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Figure shows the UML class diagram of the class dispenserType .

UML class diagram of the class dispenserType .

For example , the statement : dispenserType , declares apple to be an object of type dispenserType , sets the number of apple juice bottles in the dispenser to , and sets the of each apple juice bottle to cents Figure .

Object apple Next , we discuss the definitions of the functions to implement the operations of the class dispenserType .

The function getNoOfItems returns the number of items of particular product .

Because the number of items currently in the dispenser is stored in the private member variable  the function returns the value of The definition of this function .

Programming Example : Juice Machine The function getCost returns the of product .
Because the of product is stored in the private member variable  the function returns the value of .

MAIN PROGRAM When the program executes , it must do the following :
Show the different products sold by the juice machine .

Show how to select particular product .

Show how to terminate the program .

Furthermore , these instructions must be displayed after processing each selection exiting the so that the user need not remember what to do if he or she wants to buy two or more items .
Once the user has made the appropriate selection , the juice machine must act accordingly .
If the user has opted to buy product and that product is available , the juice machine should show the of the product and ask the user to deposit the money .
If the amount deposited is at least the of the item , the juice machine should sell the item and display an appropriate message .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Show the selection menu to the customer .

If the selection is valid and the dispenser corresponding to the selection is not empty , sell the product .

We divide this program into three functions : showSelection , sellProduct , and main .

This definition of the function showSelection .

The first thing that this function does is check whether the dispenser holding the product is empty .
If the dispenser is empty , the function informs the customer that this product is sold out .
If the dispenser is not empty , it tells the user to deposit the necessary amount to buy the product .

If the user does not deposit enough money to buy the product , sellProduct tells the user how much additional money must be deposited .
If the user fails to deposit enough money in two tries to buy the product , the function simply returns the money .

Selling the product means to decrement the number of items in the dispenser by and to update the money in the cash register by adding the of the product .

Therefore , this function has two parameters : one corresponding to the dispenser and the other corresponding to the cash register .
Furthermore , both parameters must be referenced .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Juice Machine In pseudocode , the algorithm for this function is :
If the dispenser is not empty ,
Show and prompt the customer to the of the item .

Get the amount entered by the customer .

If the amount entered by the customer is less than the of the product ,
Show and prompt the customer to the additional amount .

Calculate the total amount entered by the customer .

If the amount entered by the customer is at least the of the product ,

Update the amount in the cash register by adding the amount entered by the user .

Sell the is , decrement the number of items in the dispenser by .

Display an appropriate message .

If the amount entered by the user is less than the of the item , return the amount .

If the dispenser is empty , tell the user that this product is sold out .

This definition of the function sellProduct is : void product , int  to hold the entered .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Create the cash is , declare an object of type cashRegister .

Create four is , declare four objects of type dispenserType and initialize these objects .
For example , the statement : dispenserType ,

The number of items in the dispenser is , and the cost of an item is .

Declare additional variables as necessary .

Show the selection ; call the function showSelection .

While not done selection of exits the ,
Sell the product ; call the function sellProduct .

Show the selection ; call the function showSelection .

Programming Example : Juice Machine .

In the previous sections , we designed the classes to implement cash registers and dispensers to implement juice machine .
In this section , for the sake of completeness , we give complete definitions of the classes , the implementation file , and the user program to implement juice machine .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Juice Machine .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Juice Machine .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : In this sample run , the user input is shaded .

However , you can also place the definitions of these classes in separate header files and those header files in the files that use these classes , such as the implementation file of these classes and the file that contains the main program .
Similarly , you can also create separate implementation files for these classes .
The Web site accompanying this book contains these header and implementation files .

QUICK REVIEW .

class is collection of fixed number of components .

Components of class are called the members of the class .

Members of class are accessed by name .

In , class is reserved word .

Members of class are classified into one of three categories : private , protected , and public .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Quick Review .

The public members of class are directly accessible outside of the class .

By default , all members of class are private .

The public members are declared using the member access specifier public and the colon ,

The private members are declared using the member access specifier private and the colon ,

member of class can be function or variable .

If any member of class is function , you usually use the function prototype to declare it .

If any member of class is variable , it is declared like any other variable .

In the definition of class , you cannot initialize variable when you declare it .

member function of class is called constant function if its heading contains the reserved word const at the end .
Moreover , constant member function of class cannot modify the member variables of the class .

In the Unified Modeling Language diagram of class , the top box contains the name of the class .
The middle box contains the member variables and their data types .
The last box contains the member function name , parameter list , and the return type of the function .

+ sign in front of member indicates that this member is public member .
sign preceding member indicates that this is private member .
The symbol before the member name indicates that the member is protected member .

In , class is definition .
No memory is allocated for the class itself ; memory is allocated for the class variables when you declare them .

In , class variables are called class objects or class instances or , simply , objects .

class member is accessed using the class variable name , followed by the dot operator , followed by the member name .

The only operations on classes are the assignment and member selection .

As parameters to functions , classes can be passed either by value or by reference .

function can return value of type class .
For example , function can return value of clockType .

Any program that uses class is called client of the class .

member function of class that modifies the of the member is called mutator function .

constant member function of class can only call the other constant member functions of the class .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Classes and Data Abstraction Constructors guarantee that the member variables are initialized when an object is declared .

The name of constructor is the same as the name of the class .

class can have more than one constructor .

constructor without parameters is called the default constructor .

Constructors automatically execute when class object enters its scope .

Destructors automatically execute when class object goes out of scope .

class can have only one destructor , and the destructor has no parameters .

The name of destructor is the tilde , followed by the class name spaces in .

Constructors and destructors are functions without any type ; that is , they are neither nor void .
As result , they cannot be called like other functions .

data type that separates the logical properties from the implementation details is called an abstract data type .

Classes were specifically designed in to handle ADTs .

To implement an ADT , you must represent the data and write related algorithms to implement the operations .

precondition is statement specifying the that must be true before the function is called .

postcondition is statement specifying what is true after the function call is completed .

public static member , function or variable , of class can be accessed using the class name and the scope resolution operator ,

For each static variable of class , allocates only one memory space .
All objects of the class refer to the same memory space .

member variables of class are called the instance variables of the class .

EXERCISES The number in parentheses at the end of an exercise refers to the learning objective listed at the beginning of the chapter .

Mark the following statements as true or false .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

How many members does class bagType have .

How many private members does class bagType have .

How many constructors does class bagType have .

How many constant functions does class bagType have .

Which constructor is used to initialize the object newBag .

Assume the definition of class bagType as given in Exercise .
Answer the .

Write the definition of the member function set so that private members are set according to the parameters .

Write the definition of the member function print that prints the values of the data members .

Write the definition of the default constructor of the class bagType so that the private member variables are initialized to , respectively .

Write statement that prints the value of the object newBag .

Write statement that declares the object tempBag of type bagType , and initializes the member variables of tempBag to , and , respectively .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Write the definition of the constructor in Line so that the instance variables are initialized to , and , respectively .

Write the definition of the constructor in Line so that the instance variables are initialized according to the parameters .

Write the definition of the constructor in Line so that the instance variable name is initialized to the empty string and the remaining instance variables are initialized according to the parameters .

Consider the definition of the class employee as given in Exercise .
Which Consider the definition of the class employee as given in Exercise .
Answer the .

Write the definition of the function setData so that the instance variables are set according to the parameters .

Write the definition of the function print to output the values of the instance variables .

Write the definition of the function updateSalary to update the value of the instance variable salary by adding the value of the parameter .

Write the definition of the function getNumOfServiceYears to return the value of the instance variable numOfServiceYears .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Classes and Data Abstraction Write the definition of the function getSalary to return the value of the instance variable salary .

Write program to test the class employee .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Write the definition of the member function print that prints the values of the data members .

Write the definition of the constructor of the class houseType so that the private member variables are initialized according to the parameters .

Write statement that prints the value of the object newHouse .

Write statement that declares an object house of type newHouse , and initializes the member variables of house to , and , respectively .

Which function members are accessors and which are mutators .

How many members does class temporary have .

How many private members does class temporary have .

How many constructors does class temporary have .
Can this constructor be used to initialize an object without specifying any parameters .

If yes , then illustrate with an example ; otherwise , explain why it cannot be used to initialize an object witout specifying any parameters .

Assume the definition of class temporary as given in Exercise .

Write the definition of the member function set so that the instance variables are set according to the parameters .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Classes and Data Abstraction Write the definition of the member function manipulate that returns decimal number as follows : If the value of description is , it returns first second ; if the value of description is , it returns the of the circle with radius first ; if the value of description is , it returns the volume of the sphere with radius first ; if the value of description is , it returns the volume of the cylinder with radius first and height second ; otherwise , it returns the value .

Write the definition of the function print to print the values of the instance variables and the values returned by the function manipulate .

For example , if description , first , and second , it should print : rectangle :

Write the definition of the constructor so that it initializes the instance variables using the function set .

Write the definition of the remaining functions to set or retrieve the values of the instance variables .
Note that the function get returns the values of all instance variables .

Assume the definition of class temporary as given in Exercise .
What is the temporary temporary temporary temporary .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Write the definitions of the member functions as described in the definition of the class testClass .

Write test program to test the various operations of the class testClass .

Given the definition of the class clockType with constructors described in .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Classes and Data Abstraction Assume the definition of the class personType as given in this chapter .

Write statement that declares student to be personType object , and initialize its first name to " and last name to .

Write statement that outputs the data stored in the object student .

Write statement that changes the first name of student to " and the last name to .

Explain why you would need both public and private members in class .

The name of the class is secretType .

The class secretType has four member variables : name of type string , age and weight of type int , and height of type double .

The class secretType has the following member functions .

Write the definition of the member functions of the class secretType , as described in Part c .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Write statement that initializes the member variable count to .

Write statement that increments the value of count by .

Write statement that outputs the value of count .

Write the definitions of the functions of the class myClass as described in its definition .

Write statement that declares to be myClass object and initializes its member variable to .

Write statement that declares to be myClass object and initializes its member variable to .

Which of the following statements are valid .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In Example , we designed the class die .
Using this class , declare an array named rolls of components of type die .
Write statements to roll each die of the array rolls , find and output the highest number rolled and the number of times this number was rolled , and find and output the number that is rolled the maximum number of times together with its count .
Also write program to test your PROGRAMMING EXERCISES .

Chapter defined the struct studentType to implement the basic properties of student .
Define the class studentType with the same components as the struct studentType , and add member functions to manipulate the data members .

Write program to illustrate how to use the class temporary , designed in Exercises and of this chapter .
Your program should not use the statements given in Exercises and .
Also , your program must contain statements that would ask the user to enter data of an object and use the member function set to initialize the object .

Write program that converts number entered in Roman numerals to positive integer .
Your program should consist of class , say , romanType .

An object of type romanType should do the .

Store the number as Roman numeral .

Convert and store the number as positive integer .

Print the number as Roman numeral or positive integer as requested by the user .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Design and implement class dayType that implements the day of the week in program .
The class dayType should store the day , such as Sun for Sunday .
The program should be able to perform the following operations on an object of type .

Set the day .

Print the day .

Return the day .

Return the next day .

Return the previous day .

Calculate and return the day by adding certain days to the current day .

For example , if the current day is Monday and we add days , the day to be returned is Friday .
Similarly , if today is Tuesday and we add days , the day to be returned is Monday .

Add the appropriate constructors .

Write the definitions of the functions to implement the operations for the class dayType as defined in Programming Exercise .
Also , write program to test various operations on this class .

This chapter defines the class clockType to implement time in program .
Add functions to this class so that program that uses this class can set only the hours , minutes , or seconds and retrieve only the hours , minutes , or seconds .
Also write program to test your class .

Enhance Programming Exercise by adding functions to the class clockType so that program that uses this class can perform the following operations :

Returns the elapsed time of the day of clock in seconds .

Returns the remaining time of the day of clock in seconds .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Classes and Data Abstraction Determine and output how far apart in time two clocks are .
Output the time in the form .

Also write program to test your class .

Example defined class personType to store the name of person .
The member functions that we included merely print the name and set the name of person .
Redefine the class personType so that , in addition to what the existing class does , you can :

Set the first name only .

Set the last name only .

Store and set the middle name .

Check whether given first name is the same as the first name of this person .

Check whether given last name is the same as the last name of this person .

Write the definitions of the member functions to implement the operations for this class .
Also , write program to test various operations on this class .

Some of the characteristics of book are the title , publisher , ISBN , price , and year of publication .
Design class bookType that defines the book as an ADT .

Each object of the class bookType can hold the following information about book : title , up to four authors , publisher , ISBN , price , and number of copies in stock .
To keep track of the number of authors , add another member variable .

Include the member functions to perform the various operations on objects of type bookType .
For example , the usual operations that can be performed on the title are to show the title , set the title , and check whether title is the same as the actual title of the book .

Similarly , the typical operations that can be performed on the number of copies in stock are to show the number of copies in stock , set the number of copies in stock , update the number of copies in stock , and return the number of copies in stock .
Add similar operations for the publisher , ISBN , book price , and authors .

Add the appropriate constructors and destructor one is .

Write the definitions of the member functions of the class bookType .

Write program that uses the class bookType and tests various operations on the objects of the class bookType .
Declare an array of components of type bookType .
Some of the operations that you should perform are to search for book by its title , search by ISBN , and update the number of copies of book .

In this exercise , you will design class memberType .

Each object of memberType can hold the name of person , member ID , number of books bought , and amount spent .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Exercises .

Similarly , update , modify , and show the number of books bought and the amount spent .

Add the appropriate constructors .

Write the definitions of the member functions of memberType .

Write program to test various operations of your class memberType .

Using the classes designed in Programming Exercises and , write program to simulate bookstore .
The bookstore has two types of customers : those who are members of the bookstore and those who buy books from the bookstore only occasionally .
Each member has to pay yearly membership fee and receives discount on each book purchased .

For each member , the bookstore keeps track of the number of books purchased and the total amount spent .
For every eleventh book that member buys , the bookstore takes the average of the total amount of the last books purchased , applies this amount as discount , and then resets the total amount spent to .

Write program that can process up to book titles and members .
Your program should contain menu that gives the user different choices to effectively run the program ; in other words , your program should be user driven .

The method sellProduct of the Juice Machine programming example gives the user only two chances to enter enough money to buy the product .

Rewrite the definition of the method sellProduct so that it keeps prompting the user to enter more money as long as the user has not entered enough money to buy the product .
Also , write program to test your method .

Write the definition of class , swimmingPool , to implement the properties of swimming pool .
Your class should have the instance variables to store the length , width , depth , the rate gallons per at which the water is filling the pool , and the rate gallons per at which the water is draining from the pool .
Add appropriate constructors to initialize the instance variables .
Also add member functions to do the following : determine the amount of water needed to fill an empty or partially filled pool , determine the time needed to completely or partially fill or empty the pool , and add or drain water for specific amount of time .

Your program must contain the class ticTacToe to implement ticTacToe object .
Include array , as private member variable , to create the board .
If needed , include additional member variables .
Some of the operations on ticTacToe object are printing the current board , getting move , checking if move is valid , and determining the winner after each move .
Add additional operations as needed .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Classes and Data Abstraction The equation of line in standard form is ax + by c , wherein both and cannot be zero , and , and c are real numbers .
If , then is the slope of the line .
If , then it is horizontal line , and if , then it is vertical line .
The slope of vertical line is undefined .
Two lines are parallel if they have the same slope or both are vertical lines .
Two lines are perpendicular if either one of the lines is horizontal and the other is vertical or the product of their slopes is .
Design the class lineType to store line .
To store line , you need to store the values of of , of , and c .
Your class must contain the following operations :

If line is nonvertical , then determine its slope .

Determine if two lines are equal .

Determine if two lines are perpendicular .

If two lines are not parallel , then find the point of intersection .

Add appropriate constructors to initialize variables of lineType .
Also write program to test your class .

Typically , everyone saves money periodically for retirement , buying house , or for some other purposes .
If you are saving money for retirement , then the money you put in retirement fund is tax sheltered and your employer also makes some contribution into your retirement fund .
In this exercise , for simplicity , we assume that the money is put into an account that pays fixed interest rate , and money is deposited into the account at the end of the specified period .
Suppose that person deposits dollars times year into an account that pays interest compounded times year for years .

Then ithe total accumulated at the end of years is given by For example , suppose that you deposit at the end of each month into an account that pays interest per year compounded monthly for years .
Then the total money accumulated into the account is +

On the other hand , suppose that you want to accumulate dollars in years and would like to know how much money , times year , you should deposit into an account that pays interest compounded times year .

The periodic payment is given by the formula mt Design class that uses the above formulas to determine the total accumulated into an account and the periodic deposits to accumulate specifc amount .
Your class should have instance variables to store the periodic deposit , the value of , the interest rate , and the number of years Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Add appropriate constructors to initialize instance variables , functions to set the values of the instance variables , functions to retrieve the values of the instance variables , and functions to do the necessary calculations and output results .

Define the class bankAccount to implement the basic properties of bank account .
An object of this class should store the following data : Account name , account number , account type , balance , and interest rate .

Use static member in the class to automatically assign account numbers .
Also declare an array of components of type bankAccount to process up to customers and write program to illustrate how to use your class .

Suppose you roll set of dice .
Then the smallest sum is and the largest sum is .
For example , if , then the smallest sum is and the largest sum is .
Let be the desired sum of the numbers rolled .

Write program that uses the class die , of The program prompts the user to enter the desired sum and the number of times the dice are to be rolled .
The program outputs the number of times the desired sum was rolled and the probability of rolling the desired sum .
Test run your program to roll the dice , and times with the desired sums , and .
How many times was the sum rolled .
How many times was the sum rolled .

Programming Exercise prompted the user to input the number of times the dice were to be rolled and the desired sum , and the program output the number of times the desired sum occurred .
Modify Programming Exercise as follows : Suppose you roll dice times .
Store the sum of the numbers rolled in each roll into an array , and then use this array to print bar graph to the bar graph in the Programming Example Data Comparison .
Test run your program using , and dice and the number of rolls , and .
What type of curve does the shape of your bar graph resemble .

Write the definitions of the member functions of the class integerManipulation not given in Example .
Also add the following operations to this class : Split the number into blocks of numbers starting from right to left and find the sum of these numbers .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Become familiar with the three basic principles of design Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

By using  you can combine data and operations in single unit .
An object , therefore , becomes entity .
Operations can directly access the data , but the internal state of an object cannot be manipulated directly .

In addition to implementing ADT , have other features .
For instance , can create new from existing .
This important feature encourages code reuse .

Two common ways to relate in meaningful way .

Inheritance Suppose that you want to design class , partTimeEmployee , to implement and process the characteristics of employee .
The main features associated with employee are the name , pay rate , and number of hours worked .
In Example Chapter , we designed class to implement name .

Every employee is person .
Therefore , rather than design the class partTimeEmployee from scratch , we want to be able to extend the definition of the class personType Example by adding additional members .

Of course , we do not want to make the necessary changes directly to the class is , edit the class personType and add delete members .

In fact , we want to create the class partTimeEmployee without making any physical changes to the class personType by adding only the members that are necessary .
For example , because the class personType already has members to store the first name and last name , we will not include any such members in the class partTimeEmployee .
In fact , these member variables will be inherited from the In Chapter , we extensively studied and designed the class clockType to implement the time of day in program .
The class clockType has three member variables to store the hours , minutes , and seconds .
Certain applications , in addition to the hours , minutes , and seconds , might also require us to store the time zone .
In this case , we would like to extend the definition of the class clockType and create class , extClockType , to accommodate this new .
That is , we want to derive the class extClockType by adding member , the necessary member functions to manipulate the time Programming Exercise at the end of this .
In , the mechanism that allows us to accomplish this task is the principle of inheritance .
Inheritance is Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The derived inherit the properties of the base .
So rather than create completely new from scratch , we can take advantage of inheritance and reduce software development complexity .

Each derived class , in turn , can become base class for future derived class .
Inheritance can be either single inheritance or multiple inheritance .
In single inheritance , the derived class is derived from single base class ; in multiple inheritance , the derived class is derived from more than one base class .
This chapter concentrates on single inheritance .

Inheritance can be viewed as treelike , or hierarchical , structure wherein base class is shown with its derived .
Consider the tree diagram shown in Figure .

Inheritance hierarchy In this diagram , shape is the base class .
The circle and rectangle are derived from shape , and the class square is derived from rectangle .
Every circle and every rectangle is shape .
Every square is rectangle .

The general syntax of derived class is : class className : memberAccessSpecifier baseClassName member list ; in which memberAccessSpecifier is public , protected , or private .
When no memberAccessSpecifier is specified , it is assumed to be private inheritance .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The following statements specify that the class circle is derived from shape , and it is public inheritance .

In this definition , the public members of shape become private members of the class circle .
So any object of type circle cannot directly access these members .
The previous definition of circle is equivalent to : class circle : shape .

The following facts about the base and the derived should be kept in mind .

The private members of base class remain private to the base class ; hence , the members of the derived class cannot directly access them .
In other words , when you write the definitions of the member functions of the derived class , even though the private members of the base class are members of the derived class , the derived class cannot directly access them .

The public members of base class can be inherited either as public members or as private members by the derived class .
That is , the public members of the base class can become either public or private members of the derived class .
This means that what were public members in the base class can either remain public members or become private members in the derived class .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The derived class can include additional functions .

The derived class can redefine the public member functions of the base class .
That is , in the derived class , you can have member function with the same name , number , and types of parameters as function in the base class , but with different code in the function body .
However , this redefinition applies only to the objects of the derived class , not to the objects of the base class .

All member variables of the base class are also member variables of the derived class .
Similarly , the member functions of the base class are also member functions of the derived class .
The first issue is the redefinition of the member functions of the base class in the derived class .
While discussing this issue , we will also address how to access the private members of the base class in the derived class .
The second key inheritance issue is related to the constructor .
The constructor of derived class cannot directly access the private member variables of the base class .
Thus , we need to ensure that the private member variables that are inherited from the base class are also initialized when constructor of the derived class executes .

Redefining Member Functions of the Base Class Suppose that class derivedClass is derived from the class baseClass .

Further assume that both derivedClass and baseClass have some member variables .
It then follows that the member variables of the class derivedClass are its own member variables , together with the member variables of baseClass .

Suppose that baseClass contains function , print , that prints the values of the member variables of baseClass .
Now derivedClass contains member variables in addition to the member variables inherited from baseClass .
Suppose that you want to include function that prints the values of the member variables of derivedClass .
You can give any name to this function .
However , in the class derivedClass , you can also name this function print same name used by .
This is called redefining the member function of the base class .
Next , we illustrate how to redefine the member functions of base class with the help of an example .

To redefine public member function of base class in the derived class , the corresponding function in the derived class must have the same name , number , and types of parameters .
In other words , the name of the function being redefined in the derived class must have the same name and the same set of parameters .
If the corresponding functions in the base class and the derived class have the same name but different sets of parameters , then this is function overloading in the derived class , which is also allowed .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

UML class diagram of the class rectangleType The class rectangleType has members .

Suppose that the definitions of the member functions of the class rectangleType are as follows :

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

UML class diagram of the class boxType and the inheritance hierarchy From the definition of the class boxType , it is clear that the class boxType is derived from the class rectangleType , and it is public inheritance .
Therefore , all public members of the class rectangleType are public members of the class boxType .
The class boxType also overrides the functions print and area .

In general , while writing the definitions of the member functions of derived class to specify call to public member function of the base class , we do the .

If the derived class overrides public member function of the base class , then to specify call to that public member function of the base class , you use the name of the base class , followed by the scope resolution operator , followed by the function name with the appropriate parameter list .
For example , to call the function area of the class rectangleType the statement is :

If the derived class does not override public member function of the base class , you may specify call to that public member function by using the name of the function and the appropriate parameter list .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

See the definition of the function setDimension the class , given later in this section , for an example .

Next , let us write the definition of the member function print of the class boxType .

The class boxType has three member variables :   and .
The member function print of the class boxType prints the values of these member variables .
To write the definition of the function print of the class boxType , keep in mind the .

The member variables and are private members of the class rectangleType , so they cannot be directly accessed in the class boxType .
Therefore , when writing the definition of the function print of the class boxType , we cannot access and directly .

The member variables and of the class rectangleType are accessible by the class boxType only through the public member functions of the class rectangleType .
Therefore , when writing the definition of the member function print of the class boxType , we must call the member function print of the class rectangleType to print the values of and .
After printing the values of and  we can directly output the value of because it is member of class boxType .

To call the member function print of rectangleType in the definition of the member function print of boxType , we must use the following statement : This statement ensures that we call the member function print of the base class .

The definition of the member function print of the class boxType is : void const .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Notice that in the preceding definition of the function setDimension , call to the member function setDimension of the class rectangleType is preceded by the name of the class and the scope resolution operator , even though the class boxType function setDimension .

The definition of the function getHeight .

The member function area of the class boxType determines the surface area of box .

To determine the surface area of box , we need to access the and of the box , which are declared as private members of the class rectangleType .
Therefore , we use the member functions getLength and getWidth of the class rectangleType to retrieve the and  respectively .
Because the class boxType does not contain any member functions that have the names getLength or getWidth , we can call these member functions of the class rectangleType without coupling them to the name of the base class .

The member function volume of the class boxType determines the volume of box .

To determine the volume of box , you multiply the   and of the box or multiply the area of the base of the box by its .
Let us write the definition of the member function volume by using the second alternative .
To do this , you can use the member function area of the class rectangleType to determine the area of the base .
Because the class boxType overrides the member function area , to specify call to the member function area of the class rectangleType , we use the name of the base class and the scope resolution operator , as shown in the following .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Constructors of Derived and Base Classes derived class can have its own private member variables , so derived class can explicitly include its own constructors to initialize them .
When we declare derived class object , this object inherits the members of the base class , but the derived class object cannot directly access the private members of the base class .

That is , the member functions of derived class cannot directly access the private members of the base class .

As consequence , the constructors of derived class can initialize only the members inherited from the base class of the derived class .
Thus , when derived class object is declared , it must also trigger the execution of one of the base constructors .
Furthermore , this triggering of the base constructor is specified in the heading of the definition of derived class constructor .

First , let us write the definition of the default constructor of the class boxType .

Recall that , if class contains default constructor and no values are specified when the object is declared , the default constructor executes and initializes the object .
Because the class rectangleType contains the default constructor , we do not specify any constructor of the base class when writing the definition of the default constructor of the class boxType .

To write the definition of class boxType constructor with parameters , we first write the class boxType constructor heading including all of the parameters needed for both the base class and derived class constructors ; that is , all the parameters needed for both boxType and rectangleType .
Then , to trigger the execution of the base class constructor with parameters , we add colon to the heading followed by the name of the constructor of the base class with its parameters in the heading of the definition of the constructor of the derived class .
In effect , we on " the base class constructor to the derived class constructor via colon .
The derived class constructor gets all of the parameters needed for itself and the base class constructor , then passes on the base class parameters to its constructor .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In this definition , we specify the constructor of rectangleType with two parameters .

When this constructor of boxType executes , it triggers the execution of the constructor of the class rectangleType with two parameters of type double .

Consider the following .

The statement in Line creates the rectangleType object myRectangle .
Thus , the object myRectangle has two member variables : length and width .
The statement in Line creates the boxType object myBox .
Thus , the object myBox has three member variables : length , width , and Figure .

In the statement in Line , the function print associated with the class boxType is executed .
Recall that , if derived class overrides member function of the base class , the redefinition applies only to the objects of the derived class .
Thus , the output of the statement in Line is defined in the class : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Note that the constructors of base class are not inherited by derived class .
So if base class contains private data members , only base class constructors can construct the base class , including the base class part of derived class .
In this case , derived class constructors can only construct the additional members specified in its definition .
This means that call to base class constructor must be included in the definition of constructor of the derived class .

When derived class constructor executes , first constructor of the base class executes to initialize the data members inherited from the base class , and then the constructor of the derived class executes to initialize the data members declared by the derived class .
So first , the constructor of the class rectangleType executes to initialize the instance variables length and width , and then the constructor of the class boxType executes to initialize the instance variable .

The program in Example shows how the objects of base class and derived class behave .

EXAMPLE In this example , we write program to solve the following problems :
lawn care store specializes in putting up fences around small farms and home lawns and fertilizing the farms and lawns .
For simplicity , we assume that the yards and farms are rectangular .
In order to put up the fence , the program needs to know the perimeter and to fertilize , the program needs to know the area .
We will write program that uses the class rectangle to store the dimensions of yard or farm .
The program will also prompt the user to input the dimensions of yard or farm , the cost to put up the fence , and the cost square to fertilize the area .
The program will then output the cost of putting up the fence and fertilizing the area .

gift store specializes in wrapping small packages .
For simplicity , we assume that package is in the shape of box with specific length , width , and We will write program that uses the class boxType to store the dimensions of package .
The program will ask the user to input the dimensions of the package and the cost square to wrap the package .
The program will then output the cost of wrapping the package .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : In this sample run , the user input is shaded .

Line : Enter the length and width of the yard : Line : Enter the cost of fence : Line : Enter the cost of fertilizer square : Line : Amount due : Line : Enter the length , width , and height of the package : Line : Enter the cost to of wrapping per square foot : Line : Amount due : The preceding program works as follows : The statements in Lines to and to declare the variables and objects used in the program .
The statement in Line uses the function setDimension to initialize the instance variables of the object yard .
The statements in Lines to prompt the user to input the cost of putting up the fence and fertilizing the yard , and they store the values in the variables fenceCostPerFoot and fertilizerCostPerSquareFoot .
The statement in Line calculates the billing amount .
Note that this statement uses the functions perimeter and area of the class rectangleType to compute the length of the fence and the area of the yard .
Then the statement in Line outputs the billing amount .

The statement in Line prompts the user to input the length , width , and height of the package and the statement in Line inputs these values in the variables length , width , and height , respectively .
The statement in Line uses the function setDimension to initialize the instance variables of the object package .
The statement in Line prompts the user to input the cost square of wrapping the package and the statement in Line stores the cost in the variable wrappingCostPerSquareFeet .
The statement in Line calculates the billing amount .
Note that this statement uses the function area of the class boxType to compute the surface area of the package .
The statement in Line checks if the value of the billing amount less than , and the statement in Line sets the value of the billing amount to .
Then the statement in Line outputs the billing amount .

Note that in this program the length of the feet and the width feet .

So the perimeter of the + feet , and the area of the square feet .
The total cost of putting up the fence and fertilizing the + +

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

So the surface area of the + + square feet .
Therefore , the cost of wrapping the to two decimal .

Now both the classes rectangleType and boxType have the functions setDimension and area .
It follows that the program correctly calls the function setDimension of each class to initialize the objects and .
Similarly , in the case of  the function area of the class rectangleType called to calculate the area of the  and in the case of  the function area of the class boxType called to calculate the surface area of the .

From the output of this program , it follows that the redefinition of the functions setDimension and area in the class boxType applies only to an object of the type boxType .

The Web site accompanying this book contains program in the folder that further illustrates how to use the classes rectangleType and boxType in program .

Therefore , derived class can also have constructor with default parameters .
For example , suppose that the definition of the class rectangleType as shown below .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Notice that this definition also takes care of the default constructor of the class boxType .

Suppose that base class , baseClass , has private member variables and constructors .

Further suppose that the class derivedClass derived from baseClass , and derivedClass has no member variables .
Therefore , the member variables of derivedClass are the ones inherited from baseClass .
constructor cannot be called like other functions , and the member variables of baseClass cannot be directly accessed by the member functions of derivedClass .
To guarantee the initialization of the inherited member variables of an object of type derivedClass , even though derivedClass has no member variables , it must have the appropriate constructors .
constructor of derivedClass , the heading of the definition of the constructor contains call to an appropriate constructor of baseClass , and the body of the constructor  it contains only the opening and closing braces .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

There are both and employees .
employees are paid based on the number of hours worked and an hourly rate .
Suppose that you want to define class to keep track of information , such as name , pay rate , and hours worked .
You can then print the name together with his or her wages .
Because every employee person and Example defined the class personType to store the first name and the last name together with the necessary operations on name , we can define class partTimeEmployee based on the class personType .
You can also redefine the print function to print the appropriate information .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

As we will see in the next chapter , destructors typically used to deallocate dynamic memory allocated to the objects of class .
The next chapter explains how to create and work with dynamic Suppose that base class and its derived class have destructors .
When derived class object goes out of scope , it automatically invokes its destructor .
When the destructor of the derived class executes , it automatically invokes the destructor of the base class .

So when writing the definition of the destructor of the derived class , an explict call to the destructor of the base class is not needed .
Furthermore , when the destructor of the derived class executes , it executes its own code and then calls the destructor of the base class .
For example , suppose that class three is derived from class two , class two is derived from class one , and these have destructors .
When an object of class three goes out of scope , the destructor of class three executes , then the destructor of class two executes , and finally , the destructor of class one executes .

That is , the destructors execute in the reverse order .

HEADER FILE OF DERIVED CLASS The previous section explained how to derive new from previously defined .

To define new  you create new files .
The base already defined , and files contain their definitions .
Thus , to create new based on the previously defined  the files of the new contain commands that tell the computer where to look for the definitions of the base .
Recall that to include file , such as iostream , in user program , you enclose the file between angular brackets ; to include file in program , you enclose the file between quotation marks .

Suppose that the definition of the class personType is placed in the file .
To create the definition of the class partTimeEmployee , the , contain the preprocessor .

Multiple Inclusions of Header File The previous section discussed how to create the file of derived class .
To include file in program , you use the preprocessor command .
Recall that before program is compiled , the preprocessor processes the program .
Consider the following .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

When this program code is compiled , it is processed by the preprocessor .
The preprocessor includes the file and then the file .
When the file is included , because it contains the preprocessor directive , the file is included twice in the program .
The second inclusion of the file results in errors , such as the identifier already being declared .
This problem occurs because the inclusion of the file has already defined the variables and .
To avoid multiple inclusion of file in program , we use certain preprocessor commands in the file .
Let us rewrite the file using these preprocessor commands and then explain their meaning .

The effect of these commands is as follows : If the identifier is not defined , we must define the identifier and let the remaining statements between and pass through the compiler .
If the file is included the second time in the program , the statement fails and all of the statements until are skipped .
In fact , all files are written using similar preprocessor commands .

EXAMPLE In Chapter , we defined the class integerManipulation to perform various operations , such as reverse the number and count the even digits , odd digits , and zeros on an integer .

In this example , we extend this class so that prime factorization of an integer between and can be determined and printed .
In order to find the prime factorization of an integer , we create an array of the prime numbers and then use these prime numbers to find the factorization the related Programming Exercise , in Chapter .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In the definition of the class primeFactorization , add additional member functions as private members as needed .
Next we only give the definition of the constructor and leave the definitions of the other functions as an exercise Programming Exercise .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Note that this program does not check whether the user entered valid number .
The program that you will write in Programing Exercise , must ensure that .

Sample Runs : In these sample runs , the user input is shaded .

Sample : Enter an integer between and : is not prime number .
Its factorization is : Sample : Enter an integer between and : is not prime number .
Its factorization is : Sample : Enter an integer between and : is prime number .
Its factorization is : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In particular , you used the object cin , the extraction operator , and functions such as get and ignore to read data from the standard input device .
You also used the object and the insertion operator to send output to the standard output device .
To use cin and  the programs included the header file iostream , which includes the definitions of the classes istream and ostream .
Moreover , for file , the programs included the header file fstream , and they used objects of type ifstream for file input and objects of type ofstream for file output .
This section briefly describes how stream classes are related and implemented in .

In , stream classes are implemented using the inheritance mechanism , as shown in Figure .

stream classes hierarchy Figure shows the stream classes that we have encountered in previous chapters .

From this figure , it follows that the class ios is the base class for all stream classes .

Classes istream and ostream are directly derived from the class ios .
The class ifstream is derived from the class istream , and the class ofstream is derived from the class ostream .
Moreover , using the mechanism of multiple inheritance , the class iostream to be confused with the header file are separate and the class fstream are derived from the class iostream .
To identify the status , the class ios contains an integer status word .

This integer status word provides continuous update that reports the status of the stream .

The classes istream and ostream are responsible for providing the operations for the data transfer between memory and devices .
The class istream defines the extraction operator , and functions such as get and ignore .
The class ostream defines the insertion operator , which is used by the object .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Similarly , the class ofstream is derived from the class ostream to provide the file output operations .
Objects of type ifstream are used for file input ; objects of type ofstream are used for file output .
The header file fstream contains the definitions of the classes ifstream and ofstream .

Protected Members of Class The private members of class are private to the class and cannot be directly accessed outside of the class .
Only member functions of that class can access the private members .
As discussed previously , the derived class cannot directly access the private members of base class .
However , it is sometimes necessary , for efficiency to simplify the for derived class to directly access private member of base class .

If you make private member become public , then anyone can access that member .

Recall that the members of class are classified into three categories : public , private , and protected .
derived class can directly access the protected members of base class .
So , for base class to give access to member to its derived class and still prevent its direct access outside of the class , you must declare that member under memberAccessSpecifier protected .
Thus , the accessibility of protected member of class is between public and private .

To summarize , if member of base class needs to be accessed by derived class , that member is declared under memberAccessSpecifier protected .

Inheritance as public , protected , or private Suppose class is derived from class .
Then , cannot directly access the private members of .
That is , the private members of are hidden in .
What about the public and protected members of .
This section gives the rules that generally apply when accessing the members of base class .

Consider the following statement : class : memberAccessSpecifier .

If memberAccessSpecifier is is , the inheritance is : The public members of are public members of .
They can be directly accessed in class .

The protected members of are protected members of .
They can be directly accessed by the member functions friend of .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The private members of are hidden in .
They cannot be directly accessed in .
They can be accessed by the member functions friend of through the public or protected members of .

If memberAccessSpecifier is is , the inheritance is : The public members of are protected members of .
They can be accessed by the member functions friend of .

The protected members of are protected members of .
They can be accessed by the member functions friend of .

The private members of are hidden in .
They cannot be directly accessed in .
They can be accessed by the member functions friend of through the public or protected members of .

If memberAccessSpecifier is is , the inheritance is :

The public members of are private members of .
They can be accessed by the member functions friend of .

The protected members of are private members of .
They can be accessed by the member functions friend of .

The private members of are hidden in .
They cannot be directly accessed in .
They can be accessed by the member functions friend of through the public or protected members of .

Example illustrates how the member functions of derived class can directly access protected member of the base class .

EXAMPLE Consider the following definition of the class bClass : class bClass .

The definition of the class bClass contains protected member variable bCh of type char and private member variable of type double .
It also contains an overloaded member function setData .
One version is used to set both member variables ; the other version is used to set only the private member variable .
The class also has constructor with default parameters .
Suppose that the definitions of the member functions and the constructor are as .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

It also contains constructor , member function setData with three parameters , and the function print .

Let us now write the definition of the function setData .
Because is protected member variable of the class bClass , it can be directly accessed in the definition of the function setData .
However , because is private member variable of the class bClass , the function setData cannot directly access it .
Thus , the function setData must set by using the function setData of the class bClass .
The definition of the function setData of the class dClass can be written as .

Note that the definition of the function setData calls the function , with one parameter to set the member variable  and then directly sets the value of .

We now write the definition of the function print of the class dClass .
Notice that in the definition of the class bClass , the member function print is not overloaded as the member function setData .
It prints the values of both member variables , and The member variable is private member variable , so it cannot be directly accessed in the class dClass .
Even though is protected member variable and it can be directly accessed in the class dClass , we must print its value using the function print of the class bClass , because we want this function to output the values of both is and is private and inaccessible to .
For this reason , we first call the function to output and and then output the value of .
The definition of the function print .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Composition The following program illustrates how the objects of bClass and dClass work .
We assume that the definition of the class bClass is in the header file , and the definition of the class dClass is in the header file .

Sample Run : Base class : Derived class Base class : Derived class When you write the definitions of the member functions of the class dClass , the protected member variable can be accessed directly .
However , dClass objects cannot .

Composition is another way to relate two classes .
In composition , one or more members of class are objects of another class type .
Composition is Example in Chapter defined class called personType .
The class personType stores first and last name .
Suppose we want to keep track of additional Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Because every person has personal ID and date of birth , we can define new  called personalInfo , in which one of the members is an of type personType .
We can declare additional members to store the personal ID and date of birth for the personalInfo .

First , we define another  dateType , to store only date of birth .

Then , we construct the personalInfo from the classes personType and dateType .
This way , we can demonstrate how to define new using two classes .

To define the dateType , we need three member store the month , day number , and year .
Some of the operations that need to be performed on date are setting the date and printing the date .
The following statements define the dateType : dateType .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Composition .

The definition of the function setDate , before storing the date into the member variables , does not check whether the date is valid .
That is , it does not confirm whether is between and , is greater than , and is valid example , for January , should be between and .
In Programming Exercise at the end of this chapter , you are asked to rewrite the definition of the function setDate so that the date is validated before storing it in the member variables .
The definitions of the remaining member functions are as .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Again , as in the case of setDate , in Programming Exercise , you are asked to rewrite the definition of the constructor so that it checks for valid values of   and before storing the date into the member variables .

Next , we give the definition of the personalInfo : personalInfo public : void first , string last ,

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Composition .

Before we give the definition of the member functions of the personalInfo , let us discuss how the constructors of the objects bDay and name are invoked .

Recall that constructor is automatically executed when object enters its scope .
Suppose that we have the following statement : personalInfo student ; When the object student enters its scope , the objects bDay and name , which are members of student , also enter their scopes .
As result , one of their constructors is executed .
We , therefore , need to know how to pass arguments to the constructors of the member objects is , bDay and , which occurs when we give the definitions of the constructors of the .
Recall that constructors do not have type and so cannot be called like other functions .
The arguments to the constructor of member object as are specified in the heading part of the definition of the constructor of the .
Furthermore , member objects of are constructed is , in the order they are declared in the order they are listed in the member initialization and before the containing objects are constructed .
Another way to think of this is that all of the components that make up the instance of personalInfo must be built before the instance itself can be built .
Thus , in our case , the object name is initialized because it is the member listed the private section of the class personalInfo , then bDay second member , and finally student instance of personalInfo we are .

The following statements illustrate how to pass arguments to the constructors of the member objects name and bDay : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Design and The chapters of this book used the approach to programming , also called structured programming , to write programs .
Problems were broken down into modules , and each module solved particular part of the problem .
Data requirements were identified , and functions were written to manipulate the data .
The functions and the data were kept separate , and the functions acted on the data in passive way .
Structured programming , therefore , has certain limitations .
In structured programming , functions are Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

It quite difficult , if not impossible , to reuse function written for one program in another program .
For some of these reasons , structured programming not very efficient for large software development .

Chapter began with the introduction of .
We learned how are defined and used .
Later in that chapter , we concentrated on the data requirements of problem and the logical operations on that data .
With the help of  we combined , or encapsulated , the the operations on that single unit .
Also , with the help of  we were able to separate the data and the algorithms to manipulate that data .
However , the functions to implement the operations on the data had direct access to the data .
This chapter explains how to create new from existing through inheritance and composition .
Furthermore , an object has the capability to hide the information details .
These are some of the features of design .

The three basic principles of OOD are as .

ability to combine data and operations on that data in single unit .

ability to create new from existing .

ability to use the same expression to denote different operations .

In OOD , class fundamental entity ; in structured programming , function fundamental entity .
In OOD , we debug  in structured programming , we debug functions .
In OOD , program collection of interacting  in structured programming , program collection of interacting functions .
Also , OOD encourages code reuse .

Once class becomes , it can be reused in many programs because it selfcontained entity .

But contain functions that are not designed to solve specific programming problems .
They are built as general service functions that will be used in any program .
They come with their own set of variables and require the programmer to spend time rethinking what data to put into the program solution .

They also hide the implementation details , providing greater control of variable values than structured programs .
programming implements OOD .

To create  we must know how to represent the data and write functions to manipulate that data .
Thus , we must know everything that we have learned in Chapters through .
The first eight chapters are essential for any type of programming , whether structured or .

supports OOP through the use of .
We have already examined the first two features of OOP , encapsulation and inheritance , in this chapter and Chapter .
Chapter discusses the third feature of OOD : polymorphism .
polymorphic function or operator has many forms .

In , function name and operators such as + and can be overloaded .
An example of function overloading occurs when the function or operator called , and the specific version used decided according to the arguments used .
For instance , if both operands are Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Suppose class has constructors .
If no arguments are passed to an object when it declared , the default constructor executed ; otherwise , one of the constructors with parameters executed .
However , all constructors have the same name .

Also , provides virtual functions as means to There are several OOP languages in existence today , including Ada , Object Pascal , Turbo Pascal , Eiffel , Java , and Smalltalk .
The earliest OOP language was Simula , developed in .
The OOP terminology influenced by the vocabulary of Smalltalk , the OOP language largely developed at Xerox research center during the .
An OOP language uses many " words , such as methods , message passing , and so forth .

OOP natural and intuitive way to view the programming process .
When we view an object , we immediately think of what it can do .
For example , when we think about car , we also think about the operations on the car , such as starting the car and driving the car .

When programmers think about list , they also think about the operations on the list , such as searching , sorting , and inserting .
OOP allows ADT to be created and used .
In , we implement ADT through the use of .

Objects are created when class variables are declared .
Objects interact with each other via function calls .
Every object has an internal state and an external state .
The private members form the internal state ; the public members form the external state .
Only the object can manipulate its internal state .

Identifying Classes , Objects , and Operations In this first chapters , in the problem analysis phase , we analyzed the problem , identified the data , and outlined the algorithm .
To reduce the complexity of the function main , we wrote functions to manipulate the data .
In Chapter , we used the OOD technique and first identified the that made up the overall problem .
The were designed and implemented independently of the main program .
The hardest part in OOD to identify the and .

In this section , we describe common and simple technique to identify and .

We begin with description of the problem and then identify all of the nouns and verbs .
We choose our from the list of nouns , and we choose our operations from the list of verbs .

For example , suppose that we want to write program that calculates and prints the volume and surface area of cylinder .
We can state this problem as follows : Write program to input the dimensions of cylinder and calculate and print the surface area and volume .

In this statement , the nouns are bold , and the verbs are italic .
From the list of program , dimensions , cylinder , surface area , and can easily visualize Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Grade Report .

The nouns dimensions , surface area , and volume are characteristics of cylinder and thus can hardly be considered .

After we identify class , the next step is to determine three pieces of .

Operations that an object of that class type can perform Operations that can be performed on an object of that class type Information that an object of that class type must maintain From the list of verbs identified in the problem description , we choose list of possible operations that an object of that class can perform , or has performed , on itself .
For example , from the list of verbs for the cylinder problem , input , calculate , and possible operations for cylinder object are input , calculate , and print .

For the class cylinderType , the dimensions represent the data .
The center of the base , radius of the base , and height of the cylinder are the characteristics of the dimensions .

You can input data to the object either by constructor or by mutator function .

The verb calculate applies to determining the volume and the surface area .
From this , you can deduce the operations : cylinderVolume and cylinderSurfaceArea .
Similarly , the verb print applies to the display of the volume and the surface area on an output device .
In Programming Exercise at the end of this chapter , you are asked to design class to implement the characteristics of cylinder .

Identifying classes via the nouns and verbs from the descriptions of the problem is not the only technique possible .
There are several other OOD techniques in the literature .

However , this technique is sufficient for the programming exercises in this book .

This programming example further illustrates the concepts of inheritance and composition .

Watch the Video The point at your local university is approaching .
The office wants to prepare the grade reports as soon as the students ' grades are recorded .

However , some of the students enrolled have not yet paid their tuition .

If student has paid the tuition , the grades are shown on the grade report together with the grade point average .

If student has not paid the tuition , the grades are not printed .
For these students , the grade report contains message indicating that the grades have been held for nonpayment of the tuition .
The grade report also shows the billing amount .

The office and the business office want your help in writing program that can analyze the students ' data and print the appropriate grade reports .
The data is stored in file in the following form : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The students ' data is given thereafter .

sample input file is as follows : Lisa Miller Mathematics Physics ComputerSci History .

The first line indicates that the input file contains three students ' data , and the tuition rate is per credit hour .
Next , the course data for student Lisa Miller is given : Lisa ID is , she has paid the tuition , and she is taking four courses .

The course number for the mathematics class she is taking is , the course has four credit hours , her grade is , and so on .

The desired output for each student is in the following form : Student Name : Lisa Miller Student ID : Number of courses enrolled : Course No Course Name ComputerSci History Mathematics Physics Credits Grade Total number of credits : GPA : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Grade Report .

To calculate the GPA , we assume that the grade is equivalent to four points , is equivalent to three points , is equivalent to two points , is equivalent to one point , and is equivalent to zero points .

PROBLEM ANALYSIS AND ALGORITHM DESIGN Input file containing the data in the form given previously .
For easy reference , let us assume that the name of the input file is .

Output file containing the output in the form given previously .

We must first identify the main components of the program .
The university has students , and every student takes courses .
Thus , the two main components are the student and the course .

Let us first describe the course component .

Course The main characteristics of course are the course name , course number , and number of credit hours .

Some of the basic operations that need to be performed on an object of the course type are :

Set the course information .

Print the course information .

Show the credit hours .

Show the course number .

The following class defines the course as an ADT : class courseType .

If the parameter to this function is the object cout , the output is shown on the standard output device .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

UML class diagram of the class courseType The definitions of the functions to implement the operations of the class courseType are quite straightforward and easy to follow .

The function setCourseInfo sets the values of the private member variables according to the values of the parameters .
Its definition is : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Grade Report .

The function print prints the course information .
The parameter outF specifies the output device .
Also , we print the course name and course number rather than .
Thus , we need to set the left manipulator .
Before printing the credit hours , the manipulator is set to be .
The following steps describe this function :

Set the left manipulator .

Print the course number .

Print the course name .

Set the right manipulator .

Print the credit hours .

If no values are specified when courseType object is declared , the constructor uses the default values to initialize the object as follows : to blank , to blank , and to .
Otherwise , the values specified in the object declaration are used to initialize the object .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Next , we discuss the student component .

Notice that in the definition of the class courseType , the member functions , such as print and getCredits , are accessor functions .
This class also has other accessor functions .
As noted in Chapter , we typically define the accessor functions with the keyword const at the end of their headings .
We leave it as an exercise for you to redefine this class so that the accessor functions are declared as constant functions .

Because every student has to pay tuition , we also include member to indicate whether the student has paid the tuition .

Every student is person , and every student takes courses .
We have already designed class personType to process first and last name .
We have also designed class to process the information for course .
Thus , we see that we can derive the class studentType to keep track of information from the class personType , and one member of this class is of type courseType .
We can add more members as needed .

The basic operations to be performed on an object of type studentType are as follows :
Set the student information .

Print the student information .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Grade Report .

Calculate the GPA .

Calculate the billing amount .

Because the grade report will print the courses in ascending order , sort the courses according to the course number .

The following class defines studentType as an ADT .
We assume that student takes no more than six courses per semester , so we store course information in an array of six course objects .

If the parameter corresponding to is the object , then the output is shown on the standard output .
If the actual parameter corresponding to an ofstream object , say outFile , then the output .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Figure shows the UML class diagram of the class studentType together with the inheritance and composition relation .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Grade Report .

This class also has other accessor functions .
As noted in Chapter , we typically define the accessor functions with the keyword const at the end of their headings .
We leave it as an exercise for you to redefine this class so that the accessor functions are declared as Note that the member function sortCourses to sort the array coursesEnrolled is private member of the class studentType .
This is due to the fact that this function is needed for internal data manipulation , and the user of the class does not need to access this member .

Next , we discuss the definitions of the functions to implement the operations of the class studentType .

The function setInfo first initializes the private member variables to the incoming parameter values .
This function then calls the function sortCourses to sort the array coursesEnrolled by course number .
The class studentType is derived from the class personType , and the variables to store the first and last name are private member variables of that class .
Therefore , we call the member function setName of the class personType to pass the appropriate variables to set the first and last names .
The definition of the function setInfo is as follows : void fName , string lName , int ID , int nOfCourses , bool .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Note that because the private member variable coursesEnrolled is an array of type courseType , the default constructor of the class courseType executes automatically , and the entire array is initialized .

The function print prints the grade report .
The parameter outF specifies the output device .
If the student has paid his or her tuition , the grades and the GPA are shown .
Otherwise , three stars are printed in place of each grade , the GPA is not shown , message indicates that the grades are being held for nonpayment of the tuition , and the amount due is shown .
This function has the following steps :

Output Output Output Output the the the the name .

Print each information .

For each course , print :
Course No , Course Name , Credits .

Print the total credit hours .

To output the GPA and billing amount in fixed decimal format with the decimal point and trailing zeros , set the necessary flag .
Also , set the precision to two decimal places .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Grade Report .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The formal parameter is an object of the class ostream .
We can use this function to send the output to the standard output device , the screen , or to file .
As indicated in the definition of the class , if the actual parameter is , say , cout , then the output is displayed on the screen .
If the actual parameter is , say , outfile , an object of the class ofstream , then the output is sent to the device indicated by outfile .

As mentioned in the section , Stream " the class ofstream is derived from the class ostream .
Therefore , the class ostream is the base class .
In , if formal reference parameter is of the type ostream , it can refer to an object of the class ofstream .

In general , allows formal reference parameter of the base class type to refer to an object of the derived class .
Of course , for classes , some other things need to be taken into account for this mechanism to work properly , which we will discuss in Chapter the section , Pointers , and Virtual .

The function calculates and returns the total credit hours that student is taking .
These credit hours are needed to calculate both the and the billing amount .
The total credit hours are calculated by adding the credit hours of each course in which the student is enrolled .
Because the credit hours for course are in the private member variable of an object of type courseType , we use the member function getCredits of the class courseType to retrieve the credit hours .
The definition of this function .

Programming Example : Report .

This function calculates .
To find the  we find the equivalent points for each grade , add the points , and then divide .

The function sortCourses sorts the array coursesEnrolled by course number .

To sort the array , we use selection sort algorithm .
Because we will compare the course numbers , which are strings and private member variables of the class courseType , we first retrieve and store the course numbers in local variables .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

PROGRAM Now that we have designed the classes courseType and studentType , we will use these classes to complete the program .

We will restrict our program to process maximum of students .
Note that this program can easily be enhanced to process any number of students .

Because the print function of the class does the necessary computations to print the final grade report , the main program has very little work to do .
Because the input is in file and the output will be sent to file , we declare stream variables to access the input and output files .
Essentially , the main algorithm for the program is :

Declare the variables .

Open the input file .

If the input file does not exist , exit the program .

Open the output file .

Get the number of students registered and the rate .

Load the students ' data .

Print the grade reports .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Report .

Therefore , we must declare an array of components of type studentType to hold the students ' data .
We also need to store the number of students registered and the tuition rate .
Because the data will be read from file and because the output is sent to file , we need two stream variables to access the input and output files .
Thus , we need the following .

In pseudocode , the definition of this function is as follows : For each student in the university ,
Get the first name , last name , student ID , and isPaid .

Get the number of courses the student is taking .

For each  Get the name , number , credit hours , and grade .

Load the information into courseType object .

Load the data into studentType object .

We need to declare several local variables to read and store the data .
The definition of the function getStudentData is : void infile , studentType ,

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

For each student , it calls the function print printGrade of the class studentType to print the grade report .
The definition of the function Reports printGradeReports is : void outfile , studentType , int numberOfStudents ,

Programming Example : Grade Report .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Grade Report .

Malik This program reads students ' data from file and outputs the grades .
If student has not paid the tuition , the grades are not shown , and an appropriate message is output .
The output is stored in file .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Programming Example : Grade Report .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Inheritance and composition are meaningful ways to relate two or more classes .

Inheritance is an " relation .

Composition is " relation .

In single inheritance , the derived class is derived from only one existing class called the base class .

In multiple inheritance , derived class is derived from more than one base class .

The private members of base class are private to the base class .
The derived class cannot directly access them .

The public members of base class can be inherited either as public or private by the derived class .

derived class can redefine the member functions of base class , but this redefinition applies only to the objects of the derived class .

call to base constructor is specified in the heading of the definition of the derived constructor .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

When initializing the object of derived class , the constructor of the base class is executed first .

Review the inheritance rules given in this chapter .

In composition , member of class is an object of another class .

In composition , call to the constructor of the member objects is specified in the heading of the definition of the constructor .

The three basic principles of OOD are encapsulation , inheritance , and polymorphism .

An easy way to identify classes , objects , and operations is to describe the problem in English and then identify all of the nouns and verbs .
Choose your classes from the list of nouns and your operations from the list of verbs .

EXERCISES The number in parentheses at the end of an exercise refers to the learning objective listed at the beginning of the chapter .

Mark the following statements as true or false .

The public members of base class can only be inherited as public To redefine member function of the base class in the derived class , the corresponding member function must have the same If the derived class does not override public member function of the base class , you may specify call to that public member function by The constructor of derived class can specify call to the constructor The constructor of derived class can specify call to the constructor of Suppose that and are classes , one of the member variables of is an object of type , and both classes have constructors .
The constructor of specifies call to the constructor of by using the object name When the destructor of the derived class executes , it automatically Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In composition , one or more members of class are objects of another Suppose vehicle is class that defines the basic properties of vehicle .

Draw class hierarchy in which several classes are derived from the class vehicle , and then other classes are derived from the classes derived from Suppose that class employeeType is derived from the class personType Example , in Chapter .
Give examples of and can be added to the class employeeType .
Also write the definition of the class employeeType Consider the class circleType as defined in Example .

Suppose that the class sphereType is derived from the class .

Name some of the functions data members that can be added to the class sphereType .

Write the definition of the class sphereType .

Write the definitions of the member functions of the class sphereType .

Consider the following statements :

In this declaration , which class is the base class and which class is the Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Suppose that you have the declarations of Exercise .
Write the definitions of the member functions of the classes circle and cylinder .
Identify the member functions of the class cylinder that overrides the member Consider the following class definition : class temp .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Identify and correct errors , if any , in the definition of the class derivedFromTemp .
Also give correct definition of this class .

After correcting errors , if any , in the definition of the class derivedFromTemp , write the definition of the member functions of the class derivedFromTemp .

What is the heading of the function print in the class derived .

Suppose that the class overloads the functions set and get of the class base .
What are the headings of these functions in the class derived .

Explain the difference between overriding and overloading member Suppose that class three is derived from class two and class two is derived from class one and that each class has instance variables .
Suppose that an object of class three enters its scope , so the constructors of these classes will execute .
Determine the order in which the constructors of .

Which private members , if any , of smart are public members of superSmart .

Which members , functions , data of the class smart are directly accessible in class superSmart .

Assume the definitions of the classes smart and superSmart as given in Exercise .
Suppose that the following statements are in user program :

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Write the definition of the default constructor of smart so that the instance variables of smart are initialized to .

Write the definition of the default constructor of superSmart so that the instance variables of superSmart are initialized to .

Write the definition of the member function set of smart so that the instance variables are initialized according to the parameters .

Write the definition of the member function of the class smart so that it returns the of the instance variables .

Write the definition of the member function manipulate of the class superSmart so that it returns the + that is , return plus to the power of .

Suppose class two is derived from class one .
To avoid multiple inclusion of these classes , which preprocessor directives are used in the header files containing the definitions of these classes .
Justify your answer by giving Explain how in private inheritance , the members of the base class are Explain how in protected inheritance , the members of the base class are Explain how in public inheritance , the members of the base class are Explain the difference between the private and protected members of Explain the difference between the protected and public members of .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Determine which members of class first are private , protected , and Assume the declaration of Exercise .
Suppose that class third is derived from class first using the statement : class third : protected first .

Determine which members of class first are private , protected , and Assume the declaration of Exercise .
Suppose that class fourth is derived from class first using the statement : class fourth : public first .

Determine which members of class first are private , protected , and Assume the declaration of Exercise .
Suppose that class fifth is derived from class first using the statement : class fifth : first .

Determine which members of class first are private , protected , and class classA .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Write the definition of the function setData of class two .

Write the definition of the function print of class two .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In Chapter , the clockType was designed to implement the time of day in program .
Certain applications , in addition to hours , minutes , and seconds , might require you to store the time zone .
Derive the extClockType from the clockType by adding member variable to store the time zone .
Add the necessary member functions and constructors to make the functional .
Also , write the definitions of the member functions and the constructors .
Finally , write test program to test your .

In this chapter , the dateType was designed to implement the date in program , but the member function setDate and the constructor do not check whether the date is valid before storing the date in the member variables .
Rewrite the definitions of the function setDate and the constructor so that the values for the month , day , and year are checked before storing the date into the member variables .
Add member function , isLeapYear , to check whether year is leap year .
Moreover , write test program to test your .

Chapter defined the circleType to implement the basic properties of circle .
Design cylinderType that can capture the properties of cylinder and perform the usual operations on the cylinder .
Derive this from the circleType designed in Chapter .
Some of the operations that can be performed on cylinder are as follows : calculate and print the volume , calculate and print the surface area , set the height , set the radius of the base , and set the center of the base .
Also , write program to test various operations on cylinder .

Amanda and Tyler opened business that specializes in shipping liquids , such as milk , juice , and water , in cylinderical containers .
The shipping charges depend on the amount of the liquid in the container .
Write program that does the .

Prompts the user to input the dimensions of the container of the base and the .

Prompts the user to input the shipping cost per liter .

Prompts the user to input the paint cost per square foot .

Your program must use the cylinderType in Programming Exercise to store the radius of the base and the height of the container .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Your program should be able to handle maximum of entries .

Define addressType that can store street address , city , state , and ZIP code .
Use the appropriate functions to print and store the address .
Also , use constructors to automatically initialize the member variables .

Define extPersonType using the personType defined in Example , Chapter , the dateType designed in this chapter ' Programming Exercise , and the addressType .

Add member variable to this to classify the person as family member , friend , or business associate .
Also , add member variable to store the phone number .
Add the functions to print and store the appropriate information .
Use constructors to automatically initialize the member variables .

Define the addressBookType using the previously defined classes .
An object of the type addressBookType should be able to process maximum of entries .

The program should perform the following operations : Load the data into the address book from disk .

Sort the address book by last name .

Search for person by last name .

Print the address , phone number , and date of birth it of given person .

Print the names of the people whose birthdays are in given month .

Print the names of all the people between two last names .

Depending on the user ' request , print the names of all family members , friends , or business associates .

In Programming Exercise , the dateType was designed and implemented to keep track of date , but it has very limited operations .
Redefine the dateType so that it can perform the following operations on date , in addition to the operations already defined :

Set the month .

Set the day .

Set the year .

Return the month .

Return the day .

Return the year .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Return the number of days in the month .
For example , if the is , the number of days to be returned is because there are days in March .

Return the number of days passed in the year .
For example , if the is , the number of days passed in the year is .
Note that the number of days returned also includes the current day .

Return the number of days remaining in the year .
For example , if the is , the number of days remaining in the year is .

Calculate the new by adding fixed number of days to the .
For example , if the is and the days to be added are , the new is .

Write the definitions of the functions to implement the operations defined for the class dateType in Programming Exercise .

The class dateType defined in Programming Exercise prints the in numerical form .
Some applications might require the to be printed in another form , such as March ,
Derive the class extDateType so that the can be printed in either form .

Add member variable to the class extDateType so that the month can also be stored in string form .
Add member function to output the month in the string format , followed by the example , in the form March .

Write the definitions of the functions to implement the operations for the class extDateType .

Using the classes extDateType Exercise and dayType , Programming Exercise , design the class calendarType so that , given the month and the year , we can print the calendar for that month .

To print monthly calendar , you must know the first day of the month and the number of days in that month .
Thus , you must store the first day of the month , which is of the form dayType , and the month and the year of the calendar .

Clearly , the month and the year can be stored in an object of the form extDateType by setting the day component of the to and the month and year as specified by the user .
Thus , the class calendarType has two member variables : an object of the type dayType and an object of the type extDateType .

Design the class calendarType so that the program can print calendar for any month starting January ,
Note that the day for January of the year is Monday .
To calculate the first day of month , you can add the appropriate days to Monday of January ,

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Determine the first day of the month for which the calendar will be printed .

Call this operation firstDayOfMonth .

Set the month .

Set the year .

Return the month .

Return the year .

Print the calendar for the particular month .

Add the appropriate constructors to initialize the member variables .

Write the definitions of the member functions of the class calendarType in Programming Exercise to implement the operations of the class calendarType .

Write test program to print the calendar for either particular month or particular year .
For example , the calendar for September is : Sun Mon September Tue Wed Thu Fri Sat In this exercise , you will design various classes and write program to computerize the billing system of hospital .

Design the class doctorType , inherited from the class personType , defined in Chapter , with an additional data member to store speciality .
Add appropriate constructors and member functions to initialize , access , and manipulate the data members .

Design the class billType with data members to store ID and hospital charges , such as pharmacy charges for medicine , fee , and room charges .
Add appropriate constructors and member functions to initialize , access , and manipulate the data members .

Design the class patientType , inherited from the class personType , defined in Chapter , with additional data members to store ID , age , date of birth , attending name , the date when the patient was admitted in the hospital , and the date when the patient was discharged from the hospital .

Write program to test your classes .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Inheritance and Composition In the Programming Example Grade Report , in the definitions of the classes courseType and studentType , the accessor functions are not made constants ; that is , they are not defined with the reserved word const at the end of their headings .
Redefine these classes so that all of the accessor functions are constant functions .
Accordingly , modify the definitions of the accessor functions and rerun the program .

Define the class bankAccount to store bank account number and balance .
Suppose that account number is of type int , and balance is of type double .
Your class should , at least , provide the following operations : set the account number , retrieve the account number , retrieve the balance , deposit and withdraw money , and print account information .
Add appropriate constructors .

Every bank offers checking account .
Derive the class checkingAccount from the class bankAccount in part .
This class inherits members to store the account number and the balance from the base class .
customer with checking account typically receives interest , maintains minimum balance , and pays service charges if the balance falls below the minimum balance .
Add member variables to store this additional information .
In addition to the operations inherited from the base class , this class should provide the following operations : set interest rate , retrieve interest rate , set minimum balance , retrieve minimum balance , set service charges , retrieve service charges , post interest , verify if the balance is less than the minimum balance , write check , withdraw the method of the base , and print account information .
Add appropriate constructors .

Every bank offers savings account .
Derive the class savingsAccount from the class bankAccount in part .
This class inherits members to store the account number and the balance from the base class .
customer with savings account typically receives interest , makes deposits , and withdraws money .
In addition to the operations inherited from the base class , this class should provide the following operations : set interest rate , retrieve interest rate , post interest , withdraw the method of the base , and print account information .
Add appropriate constructors .

Write program to test your classes designed in parts and .

Write the definitions of the functions of the class primeFactorization and write program that uses this class to output the prime factorization of an integer .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Learn about the pointer data type and pointer variables .

Examine the relationship between the address of operator classes Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Until now , you have studied only the first two data types .
This chapter discusses the third data type called the pointer data type .
You will first learn how to declare pointer variables pointers , for manipulate the data to which they point .
Later , you will use these concepts when you study dynamic arrays linked lists .
Linked lists are discussed in Chapter .

Pointer Data Type Pointer Variables Chapter defined data type as set of values together with set of operations .
Recall that the set of values is called the domain of the data type .
In addition to these two properties , until now , all of the data types you have encountered have one more thing associated with them : the name of the data type .
For example , there is data type called int .
The set of values belonging to this data type includes integers that range between , the operations allowed on these values are the arithmetic operators described in Chapter .
To manipulate numeric integer data in the range to , you can declare variables using the word int .
The name of the data type allows you to declare variable of that type .
Next , we describe the pointer data type .

The values belonging to pointer data types are the memory addresses of your computer .
As in many other languages , there is no name associated with the pointer data type in .

Because the is , the set of values of pointer data the addresses in memory , pointer variable is variable whose content is an address , that is , memory location the pointer variable is said to point to that memory location .

Pointer variable : variable whose content is an address is , memory is therefore said to point to memory address .

Declaring Pointer Variables As remarked previously , there is no name associated with pointer data types .
Moreover , pointer variables store memory addresses .
So the obvious question is : If no name is associated with pointer data type , how do you declare pointer variables .

The value of pointer variable is an address or memory space that typically contains some data .
Therefore , when you declare pointer variable , you also specify the data type of the value to be stored in the memory location pointed to by the pointer variable .
For example , if pointer variable contains the address of memory location containing an int value , it is said to be an int pointer or pointer of type int .
As with regular variables , pointers are bound to data type they can only contain the addresses of point variables of the specific data type they were created to hold .

In , you declare pointer variable by using the asterisk symbol between the data type the variable name .
The general syntax to declare pointer variable is : dataType ; Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Pointer Data Type Pointer Variables .

In these statements , both ch are pointer variables .
The content of properly points to memory location of type int , the content of ch points to memory location of type char .
So , is pointer variable of type int , ch is pointer variable of type char .

Before discussing how pointers work , let us make the following observations .
The statement : int .

Thus , the character can appear anywhere between the data type name the variable .

Now , consider the following statement : In this statement , only is the pointer variable , not .
Here , is an int variable .
Each variable must have its own character placed to the left of it to make it pointer variable .

To avoid confusion , we prefer to attach the character to the variable name .
So the preceding statement is written as : int ,

Now that you know how to declare pointers , next we will discuss how to make pointer point to memory space how to manipulate the data stored in these memory locations .

Because the value of pointer is memory address , pointer can store the address of memory space of the designated type .
For example , if is pointer of type int , can store the address of any memory space of type int .
provides two address of operator the dereferencing operator work with pointers .
The next two sections describe these operators .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

That is , and the value of refer to the same memory location .

compare names and pointers .
In the following two declarations , and are int variables and numptr is the name of an int pointer : int , int .

For instance , if we want to copy the integer at the memory location to the memory location , we can use this statement :

On the other hand , when we use the statement : we are asking the program to copy the address of the memory location of to  not the integer value it is holding .
The pointer will not contain , but the actual address has been assigned by the operating system .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Dereferencing Operator In the next section , after discussing the dereference operator , we will explain how to output the value of the memory location whose address is stored in .

Every chapter until now has used the asterisk character , as the binary multiplication operator .
also uses as unary operator .
When used as unary operator , commonly referred to as the dereferencing operator or indirection operator , refers to the object to which its operand is , the points .
For example , given the statements : int .

Let us assume that memory location is allocated for  and memory location is .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The following shows the values of the variables after the execution of each statement .

After Statement Values of the Variables .

The statement ; stores the address of  which is , into .

The statement ; stores into the memory location to which points .
Because the value of is , statement stores into memory location .
Note that the value of is also changed .

Let us summarize the preceding discussion .

declaration such as int ; allocates memory for only , not for .

Later , you will learn how to allocate memory for .

The content of points only to memory location of type int .

Note that after the statement ; executes , the value of is ; after the statement ; executes , the value of is .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Dereferencing Operator .

After the statement ; executes , the values of ,  and are as follows :

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The content of points only to memory location of type int .

Memory location exists and is of type int .
Therefore , the assignment statement : is legal .
After this assignment statement executes , is valid and meaningful .

The program in Example further illustrates how pointer variable works .

EXAMPLE The following program illustrates how pointer variables .

Dereferencing Operator .

Sample Run : In this sample run , the user input is shaded .

The statement in declares to be variable of type double and the statement in declares to be pointer variable of type double .
The statement in stores in and the statement in stores the address of in .
The statement in outputs the and of the circle using the value stored in the memory location .
The statement in outputs the and of the circle using the value stored in the memory location to which is pointing .
Note that the output of the statements in Lines and is the same because points to .
Next , the statement in prompts the user to input the and the statement in stores the in the memory location to which is pointing .
Next , similar to the statements in Lines and , the statements in Lines and output the and using the variables and .
The statements in Lines to , output the address of  the value stored in  the address of  and the value stored in .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

When you run this program on your machine , you are likely to get different values .
Furthermore , the pointer values , that is , the Classes , Structs , and Pointer Variables In the previous section , you learned how to declare and manipulate pointers of simple data types , such as int and char .
You can also declare pointers to other data types , such as classes .
You will now learn how to declare and manipulate pointers to classes and structs .
The only difference between classes and structs is that , by default , all members of class are private , and , by default , all members of struct are public .
Therefore , the following discussion applies Consider the following declaration of struct : struct studentType .

In , the dot operator , has higher precedence than the dereferencing operator .

Let us elaborate on this bit .
In the expression , the operator evaluates first , so the expression evaluates first .
Because is pointer variable of type studentType , refers to memory space of type Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Classes , Structs , and Pointer Variables studentType , which is struct .

Let us see how this expression gets evaluated .

As you can see , in the expression , the parentheses are important .

However , typos can be problematic .
Therefore , to simplify the accessing of class or struct components via pointer , provides another operator called the member access operator arrow , arrow_operator
The operator arrow_operator consists of two consecutive symbols : hyphen and the than " sign .

The syntax for accessing class member using the operator arrow_operator is : Thus , the .

Accessing class components via pointers using the operator arrow_operator thus eliminates the use of both parentheses and the dereferencing operator .
Because typos are unavoidable and missing parentheses can result in either an abnormal program termination or erroneous results , when accessing class components via pointers , this book uses the arrow notation .

Example illustrates how pointers work with class member functions .

EXAMPLE Consider the following class : class classExample .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The statement in Line stores the address of cExpObject into Figure .
It means that contains the address cExpObject FIGURE .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Initializing Pointer Variables In the statement in Line , the pointer accesses the member function setX to set the value of the member variable Figure .

Initializing Pointer Variables Because does not automatically initialize variables , pointer variables must be initialized if you do not want them to point to anything .
Pointer variables are initialized using the constant value , called the null pointer .
Thus , the statement ; stores the null pointer in  that is , points to nothing .
Some programmers use the named constant NULL to initialize pointer variables .
The named constant NULL is defined in the header file cstddef .
The following two statements are equivalent :

Initializing Pointer Variables Using nullptr Standard provides the null pointer nullptr to initialize pointer variables .

pointer with the value nullptr points to nothing , and is called the null pointer .

The following statement declares to be pointer of type int and it also initializes it to the null pointer : int nullptr ; Because the compiler that we have used to test the code has implemented this feature of Standard , we can initialize the pointer variable using the int value , using another pointer variable of the same type , or using nullptr .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

However , you learned how to use pointers to manipulate data only into memory spaces that were created using other variables .
In other words , the pointers manipulated data into already existing memory spaces .
But you could have accessed these memory spaces through the variables that were used to create them .
So what the benefit of using pointers .
In this section , you will learn about the power behind pointers .
In particular , you will learn how to allocate deallocate memory during program execution using pointers .

Variables that are created during program execution are called dynamic variables .
With the help of pointers , creates dynamic variables .
provides two operators , new delete , to create destroy dynamic variables , respectively .
When program requires new  the operator new used .
When program no longer needs dynamic  the operator delete used .

In , new delete are reserved words .

Operator new The operator new two forms : one to allocate single another to allocate .

The operator new of the designated type returns pointer to  the address of this allocated .
Moreover , the allocated uninitialized .

Consider the following declaration :

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Dynamic Variables This statement creates during program execution somewhere in stores the address of the allocated in .
Similarly , the statement : creates an array of components of type stores the base address of the array in .

Recall that the operator space of specific type returns the address of the allocated space .
However , if the operator unable to allocate the required space example , there not enough , then it throws exception , if this exception not handled , it terminates the program with an error message .
Exceptions are covered in detail in Chapter .
This chapter also discusses exception .

Operator delete Suppose you have the following declaration :

Editorial review deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Suppose that the address of allocated space .
Then , the value of after the execution of this statement Figure .

Next , the statement in Line executes , which space of type stores the address of the allocated space into .
Suppose the address of this allocated space .
It follows that the value of now Figure .
In other words , after the execution of the statement in Line , the value stored into space at location Figure .

Now the obvious question what happened to the space that was pointing to after execution of the statement in Line .
After execution of the statement in Line , points to the space at location .
In addition , the space remains as marked allocated .
In other words , it cannot be freed or reallocated .
This called leak .
That  there an unused space that cannot be allocated .

Imagine what would happen if you executed statements , such as Line , few thousand or few million times .
There would be good amount of leak .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Dynamic Variables question at hand how to avoid leak .
When dynamic variable no longer needed , it can be destroyed ; that  its can be deallocated .
operator delete .

Depending on the particular operating system , after these statements execute , these pointer variables may still contain the addresses of the deallocated spaces .
In this case , we say that these pointers are dangling .
Therefore , if later you access the spaces via these pointers without properly initializing them , depending on the particular system , either the program will access wrong space , which may result in corrupting data now stored in those spaces , or the program may terminate with an error message .
One way to avoid this pitfall to set these pointers to NULL after the delete operation .
Also note that for the operator delete to work properly , the pointer must point to valid space .

In Example , we used the pointer variable radiusPtr to access the location of the variable radius .
However , in that example , the radiusPtr pointed to an existing  which was not created during program execution .
In the following example , we illustrate how to use the delete operators to allocate deallocate dynamic .

EXAMPLE The following program illustrates how to use the operators new delete .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Operations on Pointer Variables Sample Run : In this sample run , the user input is shaded .

However , let us note the following : the statement in allocates memory of type stores the address of the allocated memory in .
The output of the statement in shows that the address of the allocated memory is .
Next the statement in deallocates the memory space to which is .

The statement in outputs the value stored in the memory location to which is .
As shown by the output of this statement , the value stored is strange number .
This is because after the delete operation in , does not point to valid memory location .
Next , the statement in declares the pointer variable  allocates memory space of type  stores the address of the memory space of type stores the address of the allocated memory space in  the statement in stores in the allocated memory space .

The statements in Lines to output the addresses as shown by the output .

Operations on Pointer Variables The operations that are allowed on pointer variables are the assignment relational operations some limited arithmetic operations .
The value of one pointer variable can be assigned to another pointer variable of the same type .

For example , suppose that we have the following statements : int , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

After this statement executes , both and point to the same memory location .
Any changes made to automatically change the value of , and vice versa .

Two pointer variables of the same type can be compared for equality , and so on .
The expression : evaluates to true if and have the same is , if they point to the same memory location .
Similarly , the expression : evaluates to true if and point to different memory locations .

Integer values can be added and subtracted from pointer variable .
The value of one pointer variable can be subtracted from another pointer variable .
The arithmetic operations that are allowed differ from the arithmetic operations on numbers .
First , let us use the following statements to explain the increment and decrement operations on pointer .

Recall that the size of the memory allocated for an int variable is bytes , variable is bytes , and char variable is byte .
The memory allocated for variable of type studentType is then bytes .

The increment operator increments the value of pointer variable by the size of the data type or structure to which it is pointing .
Similarly , the decrement operator decrements the value of pointer variable by the size of the data type or structure to which it is pointing .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Thus , when an integer is added to pointer variable , the value of the pointer variable is incremented by the integer times the size of the data type or structure to which the pointer is pointing .
Similarly , when an integer is subtracted from pointer variable , the value of the pointer variable is decremented by the integer times the size of the data type or structure to which the pointer is pointing .

Pointer arithmetic can be very dangerous .
Using pointer arithmetic , the program can accidentally access the memory locations of other variables and change their content without warning , leaving the programmer trying to find out what went wrong .
If pointer variable tries to access either the memory spaces of other variables or an illegal memory space , some systems might terminate the program with an appropriate error message .

Always exercise extra care when doing pointer arithmetic .

Dynamic Arrays In Chapter , you learned how to declare and process arrays .
The arrays discussed in Chapter are called static arrays because their size was fixed at compile time .
One of the limitations of static array is that every time you execute the program , the size of the array is fixed , so it might not be possible to use the same array to process different data sets of the same type .
One way to handle this limitation is to declare an array that is large enough to process variety of data sets .
However , if the array is very big and the data set is small , such declaration would result in memory waste .
On the other hand , it would be helpful if , during program execution , you could prompt the user to enter the size of the array and then create an array of the appropriate size .
This approach is especially helpful if you cannot even guess the array size .
In this section , you will learn how to create arrays during program execution and process such arrays .

An array created during the execution of program is called dynamic array .
To create dynamic array , we use the second form of the new .

In other words , the new an array of components of type  it returns the base address of the array , and the assignment stores the base address of the array into .
Thus , the statement : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Thus , by using the increment and decrement operations , you can access the components of the array .
Of course , after performing few increment operations , it is possible to lose track of the first array component .
allows us to use array notation to access these memory locations .
For example , the statements : store and into the first and second array components , respectively .
That is , refers to the first array component , refers to the second array component , and so on .

In general , refers to the + array component .
Unlike using pointer arithmetic , after the preceding statements execute , still points to the first array component .
The following for loop initializes each array component to : in which is an variable .

When the array notation is used to process the array pointed to by  stays fixed at the first memory location .
Moreover , is dynamic array created during program execution .

The statement : declares list to be an array of five components of type .
Recall from Chapter that list itself is variable , and the value stored in list is the base address of the that is , the address of the first array component .
Suppose the address of the first array component is .
Figure shows list and the array list .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

However , the value stored in  which is , cannot be altered during program execution .
That is , the value of is constant .
Therefore , the increment and decrement operations cannot be applied to .
In fact , any attempt to use the increment or decrement operations on results in error .

Notice that here we are only saying that the value of cannot be changed .
However , the data into the array can be manipulated as before .
For example , the statement ; stores into the first array component .
Similarly , the statement ; stores into the fourth component of Figure .

Unlike the case with the name  we are allowed to perform increment and decrement operations on the pointer .

An array name is constant pointer .

The statement in Line prompts the user to enter the size of the array , and the statement in Line inputs the array size into the variable arraySize .
The statement in Line an array of the size specified by arraySize , and the base address of the array is stored in .
From this point on , you can treat just like any other array .
For example , you can use the array notation to process the elements of and pass as parameter to the function .

Chapter introduced for loops , which is feature of Standard , and discussed how it can be effectively used to process the elements of an array .
We also pointed out that if formal parameter of function is an array , for loop cannot be used on that formal parameter .
In this section , we explain why this is the case .

Consider the following .

The statement in Line declares to be pointer variable of type .
During execution , the statement in Line an array of five components of type and stores the base address of the array into the pointer .
The statements in Lines and initialize the array to which points .
Now , the array to which points is dynamic array .
So at the compile time , the pointer  even though it will contain the base address of an array , has no first and no last elements .
Therefore , in the for loop in Line , cannot be initialized to the first element of the array .
Thus , the rangebased for loop in Line is illegal and will result in syntax error .
In essence , for loop cannot be used on dynamic arrays .
The following code shows the type of syntax errors generated by the compiler when for loop is used on dynamic array .

Dynamic Arrays .

These numbers are merely to show the line number .
The syntax errors generated by the complier shows that the syntax errors are in Line .
This is due to the fact that the pointer has no first and no last elements and so the functions begin and end cannot be called on .

Next , consider the following function : The function testFunc has two formal parameters : is pointer variable of type  and is an array of type .
Now is pointer of type  so it can contain the address of an variable and the base address of an array .
Suppose that in call to function testFunc , contains the base address of an array .

However , during compilation does not have the first and the last elements , so in the definition of the function testFunc , for loop cannot be used on Next , consider the formal parameter .
Even though is declared as an array , it is still pointer of type and can only contain the base address of any array of type .
However , during compilation does not have the first and the last elements , so in the definition of the function testFunc , for loop cannot be used on .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

To declare pointer as value parameter in function heading , you use the same mechanism as you use to declare variable .
To make formal parameter be reference parameter , you use when you declare the formal parameter in the function heading .
Therefore , to declare formal parameter as reference pointer parameter , between the data type name and the identifier name , you must to make the identifier pointer and to make it reference parameter .
The obvious question is : In what order should and appear between the data type name and the identifier to declare pointer as reference parameter .
In , to make pointer reference parameter in function heading , appears before the between the data type name and the identifier .
The following example illustrates this concept :

The parameter is reference parameter ; the parameter is value parameter .
Furthermore , the function pointerParameters can change the value of , but not the value of .
However , the function pointerParameters can change the value of both and .

Pointers and Function Return Values In , the return type of function can be pointer .
For example , the return type of the function :

Dynamic Arrays The beginning of this section discussed how to create dynamic arrays .
You can also create dynamic multidimensional arrays .
In this section , we discuss how to create dynamic arrays .
Dynamic multidimensional arrays are created similarly .

There are various ways you can create dynamic dimensional arrays .
One way is as follows .

Consider the statement : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Because , and are pointers , you can now use these pointers to create the rows of board .
Suppose that each of board has six columns .
Then , the following for loop creates the rows of board .

The assignment statement then stores the returned address into .
It follows that after the execution of the previous for loop , board is array of four rows and six columns .

In the previous for loop , if you replace the number with the number , then the loop will create array of four rows and columns .
In other words , the number of columns of board can be specified during execution .
However , the way board is declared , the number of rows is fixed .
So in reality , board is not true dynamic array .

Next , consider the following statement : This statement declares to be pointer to pointer .
In other words , and are pointers .
Now can store the address of pointer or an array of pointers of type  and can store the address of an memory space or an array of values .

Suppose that you want to be an array of rows and columns .
To accomplish this , first we create an array of pointers of type and assign the address of that array to .
The following statement accomplishes this : new ; an array of pointers Because the elements of are pointers , each of them can point to an array of values .

Next , we create the columns of .
The following for loop accomplishes this : new ; To access the components of  you can use the array subscripting notation discussed in Chapter .

Note that the number of rows and the number of columns of can be specified during program execution .
The following program further explains how to create twodimensional arrays .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Shallow versus Deep Copy and Pointers .

The function fill prompts the user to enter the elements of array of type .
The function print outputs the elements of array of type .

For the most part , the preceding output should be clear .
Let us look at the statements in the function main .
The statement in Line declares to be pointer to pointer of type .
The statements in Lines and declare variables rows and columns .
The statement in Line prompts the user to input the of rows and of columns .
The statement in Line stores the of rows in the variable rows and the of columns in the variable columns .
The statement in Line creates the rows of  and the for loop in Lines and creates the columns of .
The statement in Line uses the function fill to fill the array  and the statement in Line uses the function print to output the elements of .

Shallow versus Deep Copy and Pointers In an earlier section , we discussed pointer arithmetic and explained that if we are not careful , one pointer might access the data of another pointer .
This event might result in unsuspected or erroneous results .
Here , we discuss another peculiarity of pointers .
To facilitate the discussion , we will use diagrams to show pointers and their related memory .

Consider the following statements :

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The third statement creates an array of components , and the base address of the array is stored into Figure .

Pointer and the array to which it points Suppose that some meaningful data is stored in the array pointed to by .
To be specific , suppose that this array is as shown in Figure .

This action results in Figure .

FIGURE and after the statement delete  executes Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Classes and Pointers : Some Peculiarities .

Therefore , if the program later tries to access the memory pointed to by  either the program will access the wrong memory or it will terminate in an error .
This case is an example of shallow copy .
More formally , in shallow copy , two or more pointers of the same type point to the same memory ; that is , they point to the same data .

On the other hand , suppose that instead of the earlier statement ,  Line , we have the following statements : new ; The statement creates an array of components of type  and the base address of the array is stored in .
The statement copies the array pointed to by into the array pointed to by Figure .

If deletes its memory , there is no effect on .
This case is an example of deep copy .
More formally , in deep copy , two or more pointers of the same type each point to their own copy of the data .

From the preceding discussion , it follows that you must know when to use shallow copy and when to use deep copy .

Classes and Pointers : Some Peculiarities In the previous section , we discussed how to use the arrow notation to access class members via the pointer if pointer variable is of class type .
Because class can have pointer member variables , this section discusses some peculiarities of such classes .
To facilitate the discussion , we will use the following class : class ptrMemberVarType Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

FIGURE objectTwo .

Objects objectOne and objectTwo Destructor The object objectOne has pointer member variable .
Suppose that during program execution , the pointer creates dynamic array .
When objectOne goes out of scope , all of the member variables of objectOne are destroyed .
However , created dynamic array , and dynamic memory must be deallocated using the operator delete .
Thus , if the pointer does not use the delete operator to deallocate the dynamic array , the memory space of the dynamic array will stay marked as allocated , even though it cannot be accessed .
How do we ensure that when is destroyed , the dynamic memory created by is also destroyed .
Suppose that objectOne is as shown in Figure .

FIGURE Object objectOne and its data Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Classes and Pointers : Some Peculiarities .

Therefore , we can put the necessary code in the destructor to ensure that when objectOne goes out of scope , the memory created by the pointer is deallocated .
For example , the definition of the destructor for the class ptrMemberVarType .

Of course , you must include the destructor as member of the class in its definition .

Let us extend the definition of the class ptrMemberVarType by including the destructor .
Moreover , the remainder of this section assumes that the definition of the destructor is as given is , the destructor deallocates the memory space pointed to by .

For the destructor to work properly , the pointer must have valid value .
If is not properly initialized is , if the value of is and the destructor executes , either the program terminates with an error message or the destructor deallocates an unrelated memory space .
For this reason , you should exercise extra caution when working with pointers .

Assignment Operator This section describes the limitations of the assignment operators for classes with pointer member variables .
Suppose that objectOne and objectTwo are as shown in Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

FIGURE Objects objectOne and .

That is , the value of is copied into , and the value of is copied into .
Because is pointer , this copying of the data would lead to shallow copying of the data .
That is , both and would point to the same memory space , as shown in Figure .

This situation could very well happen if the class ptrMemberVarType has destructor that deallocates the memory space pointed to by when an object of type ptrMemberVarType goes out of scope .
It suggests that there must be way to avoid this pitfall .
To avoid this shallow copying of data for classes with pointer member variable , allows the programmer to extend the definition of the assignment operator .
This process is called overloading the assignment operator .
Chapter explains how to accomplish this task by using operator overloading .
Once the assignment operator is properly overloaded , both objectOne and have their own data , as shown in Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Classes and Pointers : Some Peculiarities .

Objects objectOne and Copy Constructor When declaring class object , you can initialize it by using the value of an existing object of the same type .
For example , consider the following statement : ptrMemberVarType ; The object objectThree is being declared and is also being initialized by using the value of objectOne .
That is , the values of the member variables of objectOne are copied into the corresponding member variables of objectThree .
This initialization is called the default initialization .
The default initialization is due to the copy constructor provided by the compiler .
Just as in the case of the assignment operator , because the class ptrMemberVarType has member variables that are pointers , this default initialization would lead to shallow copying of the data , as shown in Figure objectOne .

FIGURE Objects objectOne and objectThree Before describing how to overcome this deficiency , let us describe one more situation that could also lead to shallow copying of the data .
The solution to both these problems is the same .

Recall that as parameters to function , class objects can be passed either by reference or by value .
Remember that the class ptrMemberVarType has the destructor , which deallocates the memory space pointed to by .
Suppose that objectOne is as shown in Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Because objectOne is passed by value to paramObject , the copy constructor copies the member variables of objectOne into the corresponding member variables of paramObject .
Just as in the previous case , and would point to the same memory space , as shown in Figure .

FIGURE Pointer member variables of objects objectOne and paramObject pointing to the same array Because objectOne is passed by value , the member variables of paramObject should have their own copy of the data .
In particular , should have its own memory space .
How do we ensure that this is , in fact , the case .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Classes and Pointers : Some Peculiarities .

During object declaration , the initialization of one object using the value of another object will lead to shallow copying of the data if the default copying of data is allowed .

If , as parameter , an object is passed by value and the default copying of data is allowed , it will lead to shallow copying of the data .

In both cases , to force each object to have its own copy of the data , we must override the definition of the copy constructor provided by the compiler ; that is , we must provide our own definition of the copy constructor .
This is usually done by putting statement that includes the copy constructor in the definition of the class and then writing the definition of the copy constructor .
Then , whenever the copy constructor needs to be executed , the system would execute the definition provided by us , not the one provided by the compiler .
Therefore , for the class ptrMemberVarType , we can overcome this shallow copying problem by including the copy constructor in the class ptrMemberVarType .
Example illustrates this .

The copy constructor automatically executes in three situations first two are described .

When an object is declared and initialized by using the value of another object When , as parameter , an object is passed by value When the return value of function is an object Therefore , once the copy constructor is properly defined for the class ptrMemberVarType , both and will have their own copies of the data .
Similarly , and will have their own copies of the data , as shown in Figure .

Pointer member variables of objects objectOne and paramObject with their own data Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

However , this deallocation has no effect on objectOne .

The general syntax to include the copy constructor in the definition of class is : Notice that the formal parameter of the copy constructor is constant reference parameter .

Example illustrates how to include the copy constructor in class and how it works .

EXAMPLE Consider the following class : class ptrMemberVarType public : void .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Classes and Pointers : Some Peculiarities .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Classes and Pointers : Some Peculiarities .

Line Line Line Line Line Line Line Line Line Line Line : Enter .

The member variable of listOne is an array of , which is Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The for loop in Line reads and stores five in .

The statement in Line outputs the numbers stored in listOne , that is , the five numbers The statement in Line declares listTwo to be an object of type ptrMemberVarType and also initializes listTwo using the values of listOne .
The statement in Line outputs the The statements in Lines and modify listTwo , and the statement in Line outputs the modified data of listTwo .
Notice that the data stored in listOne is unchanged , even though listTwo modified its data .
It follows that the copy constructor used to initialize listTwo using listOne Line provides listTwo its own copy of the data .

The statements in Lines through show that when listOne is passed as parameter by value to the function Line , the corresponding formal parameter temp has its own copy of data .
Notice that the function modifies the object temp ; however , the object listOne remains unchanged .
See the outputs of the lines marked Line the function is and Line the function in the sample run .
Also notice that when the function terminates , the destructor of the class ptrMemberVarType deallocates the memory space occupied by , which has no effect on .

For classes with pointer member variables , three things are normally done :
Include the destructor in the class .

Overload the assignment operator for the class .

Chapter discusses overloading the assignment operator .
Until then , whenever we discuss classes with pointer member variables , out of the three items in the previous list , we will implement only the destructor and the copy constructor .

Inheritance , Pointers , and Virtual Functions Recall that as parameter , class object can be passed either by value or by reference .
Earlier chapters also said that the types of the actual and formal parameters must match .
However , in the case of classes , allows the user to pass an object of derived class to formal parameter of the base class type .

The formal parameter recognizes the base class portion of the derived class and allows it to pass .

First , let us discuss the case in which the formal parameter is either reference parameter or pointer .
To be specific , let us consider the following classes : class petType public : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Inheritance , Pointers , and Virtual Functions .

The class petType has three members .
The class dogType is derived from the class petType and has three members of its own .
Both classes have member function print .
Suppose that the definitions of the member functions of both classes are as .

The function callPrint has formal reference parameter of type petType .
You can call the function callPrint by using an object of either type petType or type dogType as parameter .
Moreover , the body of the function callPrint calls the member function print .
Consider the following function .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run :  Lucky  Tommy ,  German Shepherd Calling the function callPrint  Lucky  Tommy The statements in Lines through are quite straightforward .
Let us look at the statements in Lines and .
The statement in Line calls the function callPrint and passes the object pet as the parameter ; it generates the fourth line of the output .
The statement in Line also calls the function callPrint but passes the object dog as the parameter ; it generates the fifth line of the output .
The output generated by the statements in Lines and shows only the value of  even though each time different class object was passed as parameter .
Because in Line , object dog is passed as parameter to the function callPrint , one would expect that the output generated by the statement in Line should be the same as the second line of the output .
What actually occurred is that for both statements and , the member function print of the base class petType was executed .
This is due to the fact that the binding of the member function print in the body of the function callPrint occurred at compile time .
Because the formal parameter of the function callPrint is of type petType , the compiler associates the function print of the class petType for the statement .
More specifically , in binding , the necessary code to call specific function is generated by the compiler .
Thus , when the body of the function callPrint executes , logically the print function of object dog should execute , which is not the case .
So , during program execution , how does correct this problem of making the call to the appropriate function .
corrects this problem by providing the mechanism of virtual functions .
The binding of virtual functions occurs at program execution time , not at compile time .
This kind of binding is called binding , late binding , or dynamic binding .
More formally , in binding , the compiler does not generate the code to call specific function .
Instead , it generates enough information to enable the system to generate the specific code for the appropriate function call .
binding is also known as dynamic binding .

In , virtual functions are declared using the reserved word virtual .
Let us redefine the previous classes using this feature .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Inheritance , Pointers , and Virtual Functions .

Note that we need to declare virtual function only in the base class .

The definition of the dogType member function print is the same as before .
Because we have placed virtual function declaration in the base class , base class object can use the derived definition .
For example , if we execute the previous program with these modifications , the output is as follows : Sample Run :  Lucky  Tommy ,  German Shepherd Calling the function callPrint  Lucky  Tommy ,  German Shepherd This output shows that for the statement in Line , the print function of dogType is executed the last two lines of the .

The previous discussion also applies when formal parameter is pointer to class , and pointer of the derived class is passed as an actual parameter .
To illustrate this feature , suppose we have the preceding classes .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run :  Lucky  Tommy ,  German Shepherd Calling the function callPrint  Lucky  Tommy ,  German Shepherd The preceding examples show that if formal parameter , say of class type , is either reference parameter or pointer and uses virtual function of the base class , we can effectively pass derived class object as an actual parameter to .

However , if is value parameter , then this mechanism of passing derived class object as an actual parameter to does not work , even if uses virtual function .
Recall that , if formal parameter is value parameter , the value of the actual parameter is copied into the formal parameter .
Therefore , if formal parameter is of class type , the member variables of the actual object are copied into the corresponding member variables of the formal parameter .

Suppose that we have the above is , and .
Consider the following function .

The object dog has two member variables , name and breed .
The member variable name is inherited from the base class .
Consider the following function call : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Inheritance , Pointers , and Virtual Functions In this statement , because the formal parameter is value parameter , the member variables of dog are copied into the member variables of .
However , because is an object of type  it has only one member variable .
Consequently , only the member variable name of dog will be copied into the member variable name of .
Also , because the statement : in the body of the function is linking print to the object , it will result in executing the member function print of the class .

The output of the following program further illustrates this concept .

Sample Run : Name : Lucky Name : Tommy , Breed : German Shepherd Calling the function callPrint Name : Lucky Name : Tommy Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In Line , because the formal parameter is value parameter , the member variables of dog are copied into the corresponding member variables of .
However , because is an object of base type  it has only the one member variable name .
Consequently , only the member variable name of dog is copied into the member variable name of .
Moreover , the statement ; in the function callPrint executes the function print of the base class  not of the derived class .
Therefore , the last line of the output shows only the value of name member variable of .

An object of the base class type cannot be passed to formal parameter of the derived Before closing this section , we discuss another issue related to virtual functions .

Suppose that the definition of the class is as before , and the definition of the class is modified slightly as follows : class  public .

This is called the slicing problem .
The following statement will result in error .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Abstract Classes and Pure Virtual Functions .

The destructor executes automatically when the class object goes out of scope .
Thus , if the object creates dynamic memory space , the destructor can be designed to deallocate that memory space .
If derived class object is passed to formal parameter of the base class type , the destructor of the base class executes regardless of whether the derived class object is passed by reference or by value .
Logically , however , the destructor of the derived class should be executed when the derived class object goes out of scope .

To correct this problem , the destructor of the base class must be virtual .
The virtual destructor of base class automatically makes the destructor of derived class virtual .

When derived class object is passed to formal parameter of the base class type , then when the object goes out of scope , the destructor of the derived class executes .
After executing the destructor of the derived class , the destructor of the base class executes .

Therefore , when the derived class object is destroyed , the base class part is , the members inherited from the base of the derived class object is also destroyed .

If base class contains virtual functions , make the destructor of the base class virtual .

Abstract Classes and Pure Virtual Functions The preceding sections discussed virtual functions .
Other than enforcing binding of functions , virtual functions also have another use , which is discussed in this section .

Chapter discussed the second principle of .
Through inheritance we can derive new without designing them from scratch .
The derived  in addition to inheriting the existing members of the base class , can add their own members and also redefine or override public and protected member functions of the base class .

The base class can contain functions that you would want each derived class to implement .
There are many scenarios when it is desirable for class to serve as base class for number of derived  however , the derived may contain certain functions that may not have meaningful definitions in the base class .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

As noted in that chapter , from the class shape , you can derive other  such as rectangle , circle , ellipse , and so on .
Some of the things common to every shape are its center , using the center to move shape to different location , and drawing the shape .
We can these in the class shape .
For example , you could have the definition of the class shape similar to the following : class shape .

Note that we have made the functions draw and move virtual to enforce binding of these functions .

This definition of the class shape requires you to write the definitions of the functions draw and move .
However , at this point , there is no shape to draw or move .

One way to handle this is to make the body of these functions empty .
This solution would work , but it has drawback .
Once we write the definitions of the functions of the class shape , then we could create an object of this class and invoke the empty and move functions .
Because there is no shape to work with , we would like to prevent the user from creating objects of the class shape .
It follows that we would like to do the following two not include the definitions of the functions and move and to prevent the user from creating objects of the class shape .

Because we do not want to include the definitions of the functions and move of the class shape , we must convert these functions to pure virtual functions .
In this case , the prototypes of these functions are : virtual void ; virtual void , double ; Note the before the semicolon .
Once you make these functions pure virtual functions in the class shape , you no longer need to provide the definitions of these functions for the class shape .

Once class contains one or more pure virtual functions , then that class is called an abstract class .
Thus , the abstract definition of the class shape is similar to the following : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Abstract Classes and Pure Virtual Functions .

Note that this is pure virtual .

Now suppose that we derive the class rectangle from the class shape .
To make rectangle nonabstract class so that we can create objects of this class , the class its implementation must provide the definitions of the pure virtual functions of its base class , which is the class shape .

Note that in addition to the pure virtual functions , an abstract class can contain instance variables , constructors , and functions that are not pure virtual .
However , the abstract class must provide the definitions of the constructor and functions that are not pure virtual .

The following example further illustrates how abstract work .

EXAMPLE In Chapter , we defined the class partTimeEmployee , which was derived from the class personType , to illustrate inheritance .
We also noted that there are two types of employees : and .
The base salary of employee is usually fixed for year .
In addition , employee may receive bonus .
On the other hand , the salary of employee is usually calculated according to the pay rate per hour and the number of hours worked .
In this example , we first define the class employeeType , derived from the class personType , to store an name and ID .
We include functions to set the ID and retrieve the ID .
We also include pure virtual functions print and calculatePay to print an data , which includes the ID , name , and wages .

From the class employeeType , we derive the fullTimeEmployee and partTimeEmployee and provide the definitions of the pure virtual functions of the class employeeType .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Abstract Classes and Pure Virtual Functions .

The definitions of the constructor and functions of the class fullTimeEmployee are : void  string  long .

Abstract Classes and Pure Virtual Functions  string  long  double .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Abstract Classes and Pure Virtual Functions .

Sample Run :  Name : John Smith   Name : Bill Nielson  The preceding output is .
We leave the details as an exercise .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter briefly explained how loops can be used to process elements stored in an array .

Moreover , the previous sections of this chapter discussed abstract classes .
Using these features , this section discusses how to use arrays to manipulate lists .
Let us make the following definition .

List : collection of elements of the same type .

The length of list is the number of elements in the list .
Some of the operations performed on list are as follows :

Create the list .
The list is initialized to an empty state .

Determine whether the list is empty .

Determine whether the list is full .

Find the size of the list .

Destroy , or clear , the list .

Determine whether an item is the same as given list element .

Insert an item in the list at the specified location .

Remove an item from the list at the specified location .

Replace an item at the specified location with another item .

Retrieve an item from the list at the specified location .

Search the list for given item .

The list we create can be sorted or unsorted .
However , the algorithms to implement certain operations are the same whether the list is sorted or unsorted .
For example , list , sorted or unsorted , is empty if the length of the list is empty .
However , the search algorithms for sorted and unsorted lists are typically different .
Therefore , next we create the abstract class that implements some of these operations .
We will separately describe the classes to create sorted and unsorted lists .
However , we must decide how to store the list in the memory .

Because all the elements of list are of the same type , an effective , convenient , and common way to process list is to store it in an array .
Initially , the size of the array holding the list elements is usually larger than the number of elements in the list so that , at later stage , the list can grow to specific size .
Thus , we must know how full the array is , that is , we must keep track of the number of list elements stored in the array .
Now , allows the programmer to create dynamic arrays .
Therefore , we will leave it for the user to specify the size of the array .
The size of the array can be specified when list object is declared .
It follows that , in order to maintain and process the list in an array , we need the following three variables : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The array , list , holding the list elements .

variable , length , to store the length of the list is , the number of list elements currently in the .

variable , maxSize , to store the size of the array is , the maximum number of elements that can be stored in the .

Now that you know the operations to be performed on list and ways to store the list into computer memory , we can define the class implementing the list as an ADT data .
For illustration purposes , we assume that the elements of the list are of type int .
We will remove this restriction when we discuss class templates in Chapter ; there , we will develop generic class that can be used to process variety of lists .

The following class defines int lists as an ADT : Now that you know the operations to be performed on list and how to store the list into the memory , next we define the abstract class arrayListType implementing the list as an ADT data .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Note that this is an abstract function .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

UML class diagram , the name of an abstract class and abstract function is shown in italics .

UML diagram of the class arrayListType Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Moreover notice that the functions insertAt , insertEnd , replaceAt , seqSearch , insert , and remove are declared as abstract .
This is because , as noted earlier , typically we deal with two types of whose elements are arranged according to some criteria , such as sorted list , and lists whose elements are in no particular order , unsorted lists .
The algorithms to implement the operations , search , insert , and remove slightly differs for sorted and unsorted lists .
Therefore , by using the principle of inheritance , from the class arrayListType , we in fact , will derive two classes : orderedArrayListType and unorderedArrayListType .

Objects of the class unorderedArrayListType would arrange list elements in no particular order , that is , these lists are unsorted .
On the other hand , objects of the class orderedArrayListType would arrange elements according to some comparison criteria , usually , greater than or equal to .
That is , these lists will be in ascending order .
Moreover , after inserting an element into or removing an element from an ordered list , the resulting list will be ordered .
We will , therefore , separately describe the algorithm to implement the operations search , insert , and remove for unsorted and sorted lists .
Because each of the classes orderedArrayListType and unorderedArrayListType will provide separate definitions of the functions insertAt , insertEnd , replaceAt , seqSearch , insert , and remove , and because these functions would access the instance variable , to provide direct access to the instance variables , the instance variables are declared as protected .

Next , we write the definitions of the nonabstract functions .

The list is empty if is ; it is full if is equal to .
Therefore , the definitions of the functions isEmpty and isFull are .

The member variable of the class arrayListType stores the number of elements currently in the list .
Similarly , because the of the array holding the list elements is stored in the member variable  specifies the maximum of the list .
Therefore , the definitions of the functions listSize and maxListSize are .

The definition of this function is :

The function removeAt removes an item from specific in the list .
The of the item to be removed is passed as parameter to this function .
After removing the item from the list , the of the list is reduced by .
If the item to be removed is somewhere in the middle of the list , after removing the item we must move certain elements up one array slot because we cannot leave holes in the portion of the array containing the list .
Figure illustrates this concept .

Thus , after removing an element , the of the list is .
Suppose that the item to be removed is at , say .

Clearly , we must move into and into , in this order .

The definition of the function removeAt is .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The definition of this function is : void 

We now discuss the definition of the constructors and destructor .
The constructor creates an array of the specified by the user , and initializes the of the list to and the to the of the array specified by the user .
The of the array is passed as parameter to the constructor .
The default array is .
The destructor deallocates the memory occupied by the array holding the list elements .
The definitions of the constructor and the destructor are as follows :

Recall that the copy constructor is called when an object is passed as parameter to function , and when an object is declared and initialized using the value of another object of the same type .
It copies the values of the member variables of the actual object into the corresponding member variables of the formal parameter and the object being created .

Unordered Lists As described in the preceding section , we derive the class unorderedArrayListType from the abstract class arrayListType and implement the operations insertAt , insertEnd , replaceAt , seqSearch , insert , and remove .

The definition of the class unorderedArrayListType is : save space , we the member functions without documentation .
The descriptions of these functions are the class unorderedArrayListType : public arrayListType .

We leave the UML class diagram and its inheritance hierarchy of the class unorderedArrayListType as an exercise for you .

The function insertAt inserts an at specific in the .
The to be inserted and the insert in the array are passed as parameters to this function .
In order to insert the somewhere in the middle of the  we must first make room for the new .
That is , we need to move certain elements down one array slot .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

If the is to be inserted at , say , we can easily accomplish this by copying the in .
On the other hand , if the is to be inserted at , say , we first need to move elements , and one array slot left to make room for the new .
Thus , we must first copy into , into , and into , in this order .

Of course , special cases such as trying to insert in full must be handled separately .

Some of these cases can be accomplished by other member functions .

The definition of the function insertAt is as follows : void 

The function remove deletes an from the .
The to be deleted is passed as parameter to this function .
In order to delete the  the function calls the member function seqSearch to determine whether or not the to be deleted is in the .
If the to be deleted is in the  the is removed from the and the of the is decremented by .
If the to be removed is in the  the function seqSearch returns the index of the in the to be deleted .
We can now use the index returned by the function seqSearch , and use the function removeAt to remove the from the .
Therefore , the definition of the function remove .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : In this sample run , the user input is shaded .

List Line Line Line Line Line : Enter integers :  Enter the to be deleted : After removing  Enter the search  in .

The preceding program is .
We leave the details as an exercise .

The Web site accompanying this book contains the program , which illustrates how the copy constructor on an unorderedArrayListType object works .

That is , the elements of the need not be distinct .
On the other hand , set is also collection of elements of the same type .
However , the elements of set are distinct .
It follows that set is with distinct elements .
In this section we designed the class unorderedArrayListType to process unordered lists .
Note that the functions insertAt and insertEnd do not check whether the to be inserted is already in the .
Similarly , the function replaceAt , does not check if the item to be replaced is already in the .
Just as you can design class to manipulate lists , you can also design class to manipulate sets .
Programming Exercise , at the end of this chapter asks you to design the class unorderedSetType , derived from the class unorderedArrayListType , to manipulate sets .

Ordered Lists As described earlier we derive two classes from the abstract class arrayListType , which are : unorderedArrayListType and orderedArrayListType .
Elements of an unorderedArrayListType object are in no particular order .
However , elements of an object orderedArrayListType are in ascending order .
The preceding section described the operation of the class unorderedArrayListType .
This section describes the class orderedArrayListType .

The class orderedArrayListType also contains the function insert to insert an item at the proper place in the .
The following class defines ordered int lists as Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

We leave the UML class diagram and its inheritance hierarchy of the class orderedArrayListType as an exercise for you .

We give only the definition of the function insert and leave others as an exercise for you .

The function insert inserts new at the proper place in the and the of the is increased by .
The definition of this function .

Address of Operator and Classes .

Programming Exercise , at the end of this chapter asks you to design the class orderedSetType , derived from the class orderedArrayListType , to manipulate ordered sets .

Address of Operator and Classes This chapter has used the address of operator , to store the address of variable into pointer variable .
The address of operator is also used to create aliases to an object .

Consider the following statements : int  int .

The address of operator can also be used to return the address of private member variable of class .
However , if you are not careful , this operation can result in serious errors in the program .
The following example helps illustrate this idea .

Consider the following class definition : file class testAddress .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Address of Operator and Classes .

Chapter said that private member variables are not accessible outside of the class by default .
However , by returning their addresses , the programmer can make them accessible .
One way to resolve this problem is to never provide the user of the class with the addresses of the private member variables .
Sometimes , however , it is necessary to return the address of private member variable , as we will see in the next chapter .

How can we prevent the program from directly manipulating the private member variables .
To fix this problem , we use the word const before the return type of the function .
This way , we can still return the addresses of the private member variables , but at the same time prevent the programmer from directly manipulating the private member variables .
Let us rewrite the class using this feature .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Pointer variables contain the addresses of other variables as their values .

In , no name is associated with the pointer data type .

pointer variable is declared using an asterisk , between the data type and the variable .
For example , the statements : int ; char .

The value of points to memory space of type int , and the value of ch points to memory space of type char .
Usually , is called pointer variable of type int , and ch is called pointer variable of type char .

In , is called the address of operator .

The address of operator returns the address of its operand .
For example , if is pointer variable of type int and num is an int variable , the statement :

When used as unary operator , is called the dereferencing operator .

The memory location indicated by the value of pointer variable is accessed by using the dereferencing operator ,
For example , if is pointer variable of type int , the statement :

You can use the member access operator arrow , arrow_operator to access the component of an object pointed to by pointer .

Pointer variables are initialized using either integer , NULL , nullptr , or the address of variable of the same type .

The only number that can be directly assigned to pointer variable is .

The only arithmetic operations allowed on pointer variables are increment , decrement , addition of an integer to pointer variable , subtraction of an integer from pointer variable , and subtraction of pointer from another pointer .

Pointer arithmetic is different than ordinary arithmetic .
When an integer is added to pointer , the value added to the value of the pointer variable is the integer times the size of the object to which the pointer is pointing .

Similarly , when an integer is subtracted from pointer , the value subtracted from the value of the pointer variable is the integer times the size of the object to which the pointer is pointing .

Pointer variables can be compared using relational operators .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Quick Review .

variable created during program execution called dynamic variable .

The operator new used to create dynamic variable .

The operator delete used to deallocate the memory occupied by dynamic variable .

In , both new delete are reserved words .

The operator new two forms : one to create single dynamic variable another to create an array of dynamic variables .

If pointer of type  the statement : new .

The operator delete two forms : one to deallocate the memory occupied by single dynamic variable another to deallocate the memory occupied by an array of dynamic variables .

If pointer of type  the statement : delete 

The array name constant pointer .
It always points to the same memory location , which the location of the first array component .

To create dynamic array , the form of the new that creates an array of dynamic variables used .
For example , if pointer of type  the statement : new ;

The base address of the array stored in .
We call dynamic array .

Array notation can be used to access the components of dynamic array .

For example , suppose dynamic array of components .
Then , refers to the first array component , refers to the second array component , so on .
In particular , refers to the + component of the array .

An array created during program execution called dynamic array .

If dynamic array , then the statement : delete 

allows program to create dynamic multidimensional arrays .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Pointers , Classes , Virtual Functions , Abstract Classes , Lists In the statement , the variable board pointer to pointer .

In shallow copy , two or more pointers of the same type point to the same memory space ; that  they point to the same data .

In deep copy , two or more pointers of the same type have their own copies of the data .

If class destructor , the destructor automatically executed whenever class object goes out of scope .

If class pointer member variables , the assignment operators provide shallow copy of the data .

copy constructor executes when an object declared initialized by using the value of another object when an object passed by value as parameter .

allows user to pass an object of derived class to formal parameter of the base class type .

The binding of virtual functions occurs at execution time , not at compile time , called dynamic , or , binding .

In , virtual functions are declared using the reserved word virtual .

class called an abstract class if it contains one or more pure virtual functions .

Because an abstract class not complete it its implementation does not contain the definitions of certain cannot create objects of that class .

In addition to the pure virtual functions , an abstract class can contain instance variables , constructors , functions that are not pure virtual .

However , the abstract class must provide the definitions of constructors functions that are not pure virtual .

list collection of elements of the same type .

The commonly performed operations on list are as follows : create the list , determine whether the list empty , determine whether the list full , find the size of the list , destroy or clear the list , determine whether an item the same as given list element , insert an item in the list at the specified location , remove an item from the list at the specified location , replace an item at the specified location with another item , retrieve an item from the list from the specified location , search the list for given item .

The address of can be used to return the address of private member variable of class .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Mark the following statements as true or false .

If is pointer variable , then refers to the memory location to In , the dereferencing operator has higher precedence than the Variables that are created during program execution are called dynamic The statement delete  deallocates the dynamic variable that is Given the declaration : int .

Given the .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

How is used to create pointers .
Give an example to justify your .
How is used to dereference pointers .
Give an example to justify your Consider the following statement :

Write statements that use the variable numPtr to increment the value .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Suppose that is pointer of type and is pointer of type .

Also suppose that the size of the memory allocated for an value is Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Pointers , Classes , Virtual Functions , Abstract Classes , and Lists bytes and the size of the memory allocated for value is bytes .

What are the values of and after the statements .

Write code that inputs data into the array from the standard input device .

Write statement that deallocates the memory space of the array to which points .

Consider the following code :

Write the statement that deallocates the memory space occupied by .

Write statement that declares sales to be pointer to pointer of type Write code that dynamically creates array of five rows and seven columns and sales contains the base address of Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Write code that deallocates the memory space occupied by the Name three things that you should for classes with pointer member Suppose that you have the following classes , classA and classB : c .

What is the output of the function main of Exercise , if the definition of class classA .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Pointers , Classes , Virtual Functions , Abstract Classes , and Lists Consider the following definition of the class studentType : public studentType : public personType .

Rewrite the definition of the class studentType so that the functions print and Suppose that the definitions of the classes employeeType , fullTimeEmployee , and partTimeEmployee are as given in Example .

Redo Programming Exercise of Chapter using dynamic arrays .

Redo Programming Exercise of Chapter using dynamic arrays .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

You must ask the user for the number of candidates and then create the appropriate arrays to hold the data .

Programming Exercise in Chapter explains how to add large integers using arrays .
However , in that exercise , the program could add only integers of , at most , digits .
This chapter explains how to work with dynamic integers .

Design class named largeIntegers such that an object of this class can store an integer of any number of digits .
Add operations to add , subtract , multiply , and compare integers stored in two objects .
Also add constructors to properly initialize objects and functions to set , retrieve , and print the values of objects .

Banks offer various types of accounts , such as savings , checking , certificate of deposits , and money market , to attract customers as well as meet their specific needs .
Two of the most commonly used accounts are savings and checking .
Each of these accounts has various options .
For example , you may have savings account that requires no minimum balance but has lower interest rate .
Similarly , you may have checking account that limits the number of checks you may write .
Another type of account that is used to save money for the long term is certificate of deposit .

In this programming exercise , you use abstract classes and pure virtual functions to design classes to manipulate various types of accounts .
For simplicity , assume that the bank offers three types of accounts : savings , checking , and certificate of deposit , as described next .

Savings accounts : Suppose that the bank offers two types of savings accounts : one that has no minimum balance and lower interest rate and another that requires minimum balance and has higher interest rate .

Checking accounts : Suppose that the bank offers three types of checking accounts : one with monthly service charge , limited check writing , no minimum balance , and no interest ; another with no monthly service charge , minimum balance requirement , unlimited check writing and lower interest ; and third with no monthly service charge , higher minimum requirement , higher interest rate , and unlimited check writing .

Certificate of deposit : In an account of this type , money is left for some time , and these accounts draw higher interest rates than savings or checking accounts .
Suppose that you purchase CD for six months .
Then we say that the CD will mature in six months .
The penalty for early withdrawal is stiff .

Figure shows the inheritance hierarchy of these bank accounts .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Inheritance hierarchy of banking accounts Note that the classes bankAccount and checkingAccount are abstract .
That is , we cannot instantiate objects of these classes .
The other classes in Figure are not abstract .

Therefore , instance variables such as name , accountNumber , and balance should be declared in the abstract class bankAccount .
Some operations common to all types of accounts are retrieve account name , account number , and account balance ; make deposits ; withdraw money ; and create monthly statements .
So include functions to implement these operations .
Some of these functions will be pure virtual .

Therefore , it inherits all the properties of bank account .
Because one of the objectives of checking account is to be able to write checks , include the pure virtual function writeCheck to write check .

Therefore , it inherits all the properties of checking account .
For simplicity , assume that this type of account does not pay any interest , allows the account holder to write limited number of checks each month , and does not require any minimum balance .
Include appropriate named constants , instance variables , and functions in this class .

Therefore , it inherits all the properties of checking account .
Furthermore , this type of account pays interest , allows the account holder to write checks , and requires minimum balance .

Therefore , it inherits all the properties Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Furthermore , this type of account pays higher interest and requires higher minimum balance than the no service charge checking account .

Therefore , it inherits all the properties of bank account .
Furthermore , savings account also pays interest .

Therefore , it inherits all the properties of savings account .
It also requires minimum balance .

Therefore , it inherits all the properties of bank account .
In addition , it has instance variables to store the number of CD maturity months , interest rate , and the current CD month .

Write the definitions of the classes described in this programming exercise and program to test your classes .

The function retrieveAt of the class arrayListType is written as void function .
Rewrite this function so that it is written as value returning function , returning the required item .
If location of the item to be returned is out of range , use the assert function to terminate the program .
Also , write program to test your function .
Use the class unorderedArrayListType to test your function .

The function removeAt of the class arrayListType removes an element from the list by shifting the elements of the list .
However , if the element to be removed is at the beginning of the list and the list is fairly large it could take lot of computer time .
Because the list elements are in no particular order , you could simply remove the element by swapping the last element of the list with the item to be removed and reducing the length of the list .

Rewrite the definition of the function removeAt using this technique .
Use the class unorderedArrayListType to test your function .

The function remove of the class arrayListType removes only the first occurrence of an element .
Add the function removeAll as an abstract function to the class arrayListType , which would remove all occurrences of given element .
Also , write the definition of the function removeAll in the class unorderedArrayListType and write program to test this function .

Add the function min as an abstract function to the class arrayListType to return the smallest element of the list .
Also , write the definition of the function min in the class unorderedArrayListType and write program to test this function .

Add the function max as an abstract function to the class arrayListType to return the largest element of the list .
Also , write the definition of the function max in the class unorderedArrayListType and write program to test this function .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Pointers , Classes , Virtual Functions , Abstract Classes , and Lists Write the definitions of the functions of the class orderedArrayListType that are not given in this chapter .
Also , write program to test various operations of this class .

Design the class unorderedSetType , derived from the class unorderedArrayListType , to manipulate sets .

Note that you need to redefine only the functions insertAt , insertEnd , and replaceAt .
If the item to be inserted is already in the list , the functions insertAt and insertEnd output an appropriate message .
Similarly , if the item to be replaced is already in the list , the function replaceAt outputs an appropriate message .
Also , write program to test your class .

The elements of an unorderedSetType object are distinct , but in no particular order .
Design the class orderedSetType , derived from the class orderedArrayListType , to manipulate ordered sets .

The elements of an orderedSetType object are distinct and in ascending order .

Note that you need to redefine only the functions insert and replaceAt .
If the item to be inserted is already in the list , the function insert outputs an appropriate message .
Similarly , if the item to be replaced is already in the list , the function replaceAt outputs an appropriate message .
Also , write program to test your class .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Explore how to construct function templates and class templates Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The ability to combine data and operations on the data is called encapsulation .
It is the first principle of design .
Chapter defined the abstract data type and described how in implement ADT .
Chapter discussed how new can be derived from existing through the mechanism of inheritance .
Inheritance , the second principle of OOD , encourages code reuse .

This chapter covers operator overloading and templates .
Templates enable the programmer to write generic code for related functions and .
We will also simplify function overloading in Chapter through the use of templates , called function templates .

Why Operator Overloading Is Needed Chapter defined and implemented the class clockType .
It also showed how you can use the class clockType to represent the time of day in program .
Let us review some of the characteristics of the class clockType .

Consider the following statements : clockType , clockType , The first statement declares myClock to be an object of type clockType and initializes the member variables hr , min , and sec of myClock to , and , respectively .

The second statement declares yourClock to be an object of type clockType and initializes the member variables hr , min , and sec of yourClock to , and , respectively .

Now consider the following statements :

The first statement prints the value of myClock in the form .
The second statement increments the value of myClock by one second .
The third statement checks whether the value of myClock is the same as the value of yourClock .

These statements do their job .
However , if we can use the insertion operator to output the value of myClock , the increment operator to increment the value of myClock by one second , and relational operators for comparison , we can enhance the Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Recall that the only operations on are the assignment operator and the member selection operator .
Therefore , other operators cannot be directly applied to class objects by default .
However , allows the programmer to extend the definitions of operators such as relational operators , arithmetic operators , the insertion operator for data output , and the extraction operator for data they can be applied to .
In terminology , this is called operator overloading .

Operator Overloading Recall how the arithmetic operator works .
If both operands of are integers , the result is an integer ; otherwise , the result is number .
This means that the operator has one definition when both operands are integers and another when an operand is number .
Which definition is used depends on the data types of the operand it is used with .
Similarly , the stream insertion operator , and the stream extraction operator , are overloaded .
The operator is used as both stream extraction operator and right shift operator .
The operator is used as both stream insertion operator and left shift operator .
These are examples of operator overloading .

The results of + and are different for integer arithmetic , arithmetic , and pointer arithmetic .

allows the user to overload most of the so that the can work effectively in specific application .
It does not allow the user to create new .

Most of the existing can be overloaded to manipulate class objects .

In order to overload an  you must write is , the header and to define what operation the overloaded indicates should be performed .

The name of the function that overloads an is the reserved word followed by the to be overloaded .
For example , the name of the function to overload the is : Operator function : The function that overloads an .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Therefore , the function is function .

The syntax of the heading for an function is : In , is reserved word .

Recall that the only operations on are and member selection .
To use other on class objects , they must be explicitly overloaded .

Operator overloading provides the same concise expressions for data types as it does for data types .

To overload an for class :
Include the statement to declare the function prototype to overload the is , the in the definition of the class .

Write the definition of the function .

Certain rules must be followed when you include an function in class definition .
These rules are described in the section , Functions as Member Functions and Nonmember Functions " later in this chapter .

Overloading an Operator : Some Restrictions When overloading an  keep the following in mind :
You cannot change the precedence of an .

The associativity cannot be changed .
Default parameters cannot be used with an overloaded .

You cannot change the number of parameters an takes .

Only existing can be overloaded .

The meaning of how an works with types , such as int , remains the same .
That is , you cannot redefine how work with data types .

Operators can be overloaded either for objects of the types , or for combination of objects of the type and objects of the type .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Now that we know the syntax to overload an for class and certain restrictions on overloading , in this example , we only illustrate how to overload the relational for the class clockType .
After discussing , in general , various concepts related to overloading , later in this chapter in the Programming Example clockType , we will show how to overload other  such as , and , for the class clockType .

The prototype of the function to overload the equality for the class clockType is : bool const ; Therefore , this statement must be included in the definition of the class clockType .

Because in this example we are illustrating how to only overload the , we do not include the functions to increment the time .
So consider the following definition of the class clockType : class clockType .

Also , the definitions of other functions of the class clockType are the same as given in Chapter .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : Line Line Line Line Line :  yourClock : tempClock : The time of and yourClock are .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

However , note that the statement in Line uses the to compare the time of and yourClock .
Similarly , the statement in Line uses the to compare the time of and tempClock .
The output of statements in Lines and show that the is successfully overloaded for the class clockType .

Before discussing overloading in general , in the next two sections we discuss two important concepts related to overloading .

Pointer this member function of class can access the member variables of given object of that class .
Sometimes , it is necessary for member function to refer to the object as whole , rather than the individual member variables .
How do you refer to the object as whole is , as single in the definition of the member function , especially when the object is not passed as parameter .
Every object of class maintains pointer to itself , and the name of this pointer is this .
In , this is reserved word .

When an object invokes member function , the member function references the pointer this of the object .
For example , suppose that test is class and has member function called one .
Further suppose that the definition of one looks like the following :

That is , the member variables of are copied into the corresponding member variables of .
When object invokes function one , the pointer this in the definition of member function one refers to object  so this means the address of and means the contents of .
On the other hand , in the statement ; the pointer this in the definition of member function one refers to object  and so this means the address of and means the contents of .
So the statement copies the contents of object into object .

The following example illustrates how the pointer this works .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

We will add function to this class to illustrate how the pointer this works .
We do not give the complete definition of this class .
We only show the function that uses the pointer this to return the whole object .
The complete definition can be found at the Web site accompanying this book .

Line : Area of Line : Area of For the most part , the output is .
The statement in Line creates the object and sets the and to and , respectively .
The statement in Line creates the object and using the default constructor sets the and to , and , respectively .
The statement in Line outputs the of .
The statement in Line doubles the dimensions of and then the object  with new and  is returned by the pointer this .
The assignment then copies the value of into .
The statement in Line outputs the of .

The following example shows another way of how the pointer this works .

EXAMPLE Consider the following class : class rectangleType .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Note that the definition of the class rectangleType is the same as given in Chapter , except that here , in the definition of the class rectangleType , we have added the functions setLength and setWidth to individually set and  and then return the entire object .
We have also replaced the constructors with the constructor with default parameters .

The definitions of the functions print , setDimension , getLength , getWidth ,  and perimeter are the same as before .
The definition of the constructor with default parameters is the same as the definition of the constructor with parameters .
The definitions of the functions setLength and setWidth are as .

Consider the statement in Line , which .

This expression sets the of myRectangle to and returns reference of the calling object , which is myRectangle .
Thus , the returned pointer makes the next expression executed equivalent to which sets the of myRectangle to .
By returning the dereferenced this pointer , member functions can be " like this .
The statement in Line outputs the value of myRectangle .

The statement in Line sets the of the object yourRectangle to , and ignores the value returned .
The statement in Line outputs the value of yourRectangle .
Notice the output in Line .
The value printed for is , which was stored when the object was declared in Line .
Next , the statement in Line sets the of yourRectangle , and the statement in Line outputs the value of yourRectangle .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

To make function be friend to class , the reserved word friend precedes the function prototype the class .

The word friend appears only in the function prototype in the class definition , not in the definition of the friend function .
In other words , friendship is always given by the class , never taken by the function .

Consider the following statements : class classIllusFriend friend void .

That is , it is nonmember function of the class classIllusFriend .
When you write the definition of the function two , any object of type classIllusFriend , which is included in the definition as either local variable of two or formal parameter of two , can access its private members within the definition of the function two .
However , they are typically placed before any member function declaration .

DEFINITION OF friend FUNCTION When writing the definition of friend function , the name of the class and the scope resolution operator do not precede the name of the friend function in the function heading because it is not member function of the class .
Also , recall that the word friend does not appear in the heading of the friend definition .
Thus , the definition of the function two in the previous class classIllusFriend is :

The next section illustrates the difference between member function and nonmember function when we overload some of the operators for specific class .

The following example shows how friend function accesses the private members of class .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In the following definition we do not document the functions .
The complete definition of this class is available at the Web site accompanying this book .

The next two statements increase the and of recFriendObject by units .
The next statement outputs the of the object recFriendObject using the new and .
Note that the recFriendObject accesses its private member variables and and increase their values Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

If rectangleFriend is not declared as friend function of the class rectangleType , then this statement would result in syntax error because an object cannot directly access its private members .

The definition of the remaining functions and constructors of the class rectangleType is as given in Chapter .

Now consider the definition of the following function .

Sample Run myYard  Passing object myYard to the friend function .

The statement in Line outputs the of myYard .
The statement in Line calls the function friend function of the class and passes the object myYard as an actual parameter .
Notice that the function generates the last three lines of the output .

Later in this chapter , you will learn that for class , stream insertion and extraction operators can be overloaded only as friend functions .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

This section describes these rules .

Most operator functions can be either member functions nonmember is , friend functions of class .
To make an operator function be member nonmember function of class , keep the following in mind :
The function that overloads any of the operators , arrow_operator for class must be declared as member of the class .

Suppose that an operator op is overloaded for , opOverClass .

If the far left operand of op is an object of different type is , not of type , the function that overloads the operator op for opOverClass must be is , friend of the class opOverClass .

If the operator function that overloads the operator op for the class opOverClass is member of the class opOverClass , then when applying op on objects of type opOverClass , the far left operand of op must be of type opOverClass .

You must follow these rules when including an operator function in class definition .

You will see later in this chapter that functions that overload the insertion operator , and the extraction operator , for class must be is , friend functions of the class .

Except for certain operators noted previously , operators can be overloaded either as member functions as nonmember functions .
The following discussion shows the difference between these two types of functions .

To facilitate our discussion of operator overloading , we will use the class rectangleType , given next .
For easy reference , we reproduce the definition of this class and the definitions of the class rectangleType .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , duplicated , in whole in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The class rectangleType has two private member variables : and  both of type double .
We will add operator functions to the class rectangleType as we overload the operators .

Also , suppose that you have the following .

That is , myRectangle , yourRectangle , and tempRect are objects of type rectangleType .

consists of both binary and unary operators .
It also has ternary operator , which cannot be overloaded .
The next few sections discuss how to overload various binary and unary operators .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , duplicated , in whole in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

This operator can be overloaded as either member function of the class as friend function .
We will describe both ways to overload this operator .

OVERLOADING THE BINARY OPERATORS AS MEMBER FUNCTIONS Suppose that is overloaded as member function of the class rectangleType .
The name of the function to overload for the class rectangleType is : Because myRectangle and yourRectangle are both objects of type rectangleType , you can perform the operation : myRectangle yourRectangle The compiler translates this expression into the following expression : This expression clearly shows that the function has only one parameter , which is yourRectangle .
The object on the left of the is the object that is invoking the function , and the object on the right of is passed as parameter to this function .

Because is member of the class rectangleType and myRectangle is an object of type rectangleType , in the previous statement , has direct access to the private members of the object myRectangle .

OPERATORS AS MEMBER FUNCTIONS This section describes the general form of the functions used to overload binary operators as member functions of class .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

EXAMPLE Let us + for the class rectangleType .
These operators are overloaded as member functions .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Notice that + adds the corresponding lengths widths of the two rectangles .

The definition of the function is as follows : rectangleType const .

Notice that multiplies the corresponding lengths widths of the two rectangles .

Two rectangles are equal if their lengths widths are equal .
Therefore , the definition of the function to the is : bool const .

Two rectangles are not equal if either their lengths are not equal or their widths are not equal .
Therefore , the definition of the function to the is : bool const .

We leave Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

For the most part , the preceding output is .
However , let us look at the statements in Lines ,
The statement in Line uses the + to add the lengths widths of stores the result in .
The statement in Line outputs the of Similarly , the statement in Line uses the to multiply the lengths widths of stores the result in .
Similarly , the statement in Line uses the relational to determine whether the dimensions of are the same .

OVERLOADING THE BINARY OPERATORS OR AS NONMEMBER FUNCTIONS Suppose that represents the binary or that is to be overloaded as nonmember function of the class rectangleType .

Further suppose that the following operation is to be performed : myRectangle yourRectangle .

In this case , the expression is compiled as : Here , we see that both myRectangle and yourRectangle are passed as parameters to the function .
The function is not member of the object myRectangle or the object yourRectangle and so cannot be called by either .

To the function as nonmember function of the class in the definition of the class , the reserved word friend must appear before the function heading .
Also , the function must have parameter for each of its two operands .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Function Prototype be included in the definition of the : friend returnType , const ; in which stands for the binary to be overloaded ; returnType is the type of value returned by the function ; and className is the name of the class for which the is being overloaded .

Function Definition : returnType .

EXAMPLE This example illustrates how to overload the operators + as nonmember functions of the class rectangleType .

To the function + as nonmember function of the class rectangleType , its prototype in the definition of rectangleType is : friend rectangleType , const ; The definition of the function + is as .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Recall that the private members of class are local to the class  therefore , cannot be accessed outside of the class .
If we follow this rule , then because + is not member of the class rectangleType , expressions such as firstRect .

However , because + is declared as friend function of the class rectangleType , an object of type rectangleType can access its private members in the definition of +
Also , note that in the function heading , the name of the is , the scope resolution are not included before the name of the function + because the function + is not member of the class .

To include the function as nonmember function of the class rectangleType , its prototype in the definition of rectangleType is : friend bool  const ; The definition of the function is as follows : bool firstRect ,

Operators If an function is member function of class , then the leftmost operand of that must be an object of that class .
Therefore , the function that overloads the insertion  or the extraction  for class must be nonmember function of that class .

Consider the expression : myRectangle ; In this expression , the far left operand of is , is an ostream object , not an object of type rectangleType .
Because the far left operand of is not an object of type rectangleType , the function that overloads the insertion for rectangleType must be nonmember function of the class rectangleType .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The general syntax to overload the stream insertion  for class is described next .

Function Prototype be included in the definition of the .

Both parameters are reference parameters .

The first is , is reference to an ostream object .

The second parameter is usually const reference to particular class , because from Chapter the most effective way to pass an object as parameter to class is by reference .
In this case , the formal parameter does not need to copy the member variables of the actual parameter .
The word const appears before the class name because we want to print only the member variables of the object .
That is , the function should not modify the member variables of the object .

The function return type is reference to an ostream object .

The return type of the function to overload the must be reference to an ostream object for the following reasons .

Suppose that the is overloaded for the class rectangleType .

This is perfectly legal statement because both of the actual parameters are objects , not the value of the objects .
The first parameter ,  is of type ostream ; the second parameter , myRectangle , is of type rectangleType .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

To execute the previous statement , you must first execute the expression : that is , the expression : After executing this expression , which outputs the value of  whatever is returned by the function will become the parameter of the is , the first parameter of the function in order to output the value of object yourRectangle the statement in Line .
The parameter of the must be an object of the ostream type , so the expression : must return the object its to the left side of the second in order to output the value of yourRectangle .

Therefore , the return type of the function must be reference to an object of the ostream type .

The general syntax to overload the stream extraction  for class is described next .

Function Prototype be included in the definition of the .

Both parameters are reference parameters .

The first is , reference to an istream object .

The second parameter is usually reference to particular class .
The data read will be stored in the object .

The function return type is reference to an istream object .

For the same reasons as explained previously we overloaded the insertion , the return type of the function must be reference to an istream object .
We can then successfully execute statements of the following type : cin yourRectangle ; Example shows how the stream insertion extraction operators are overloaded for the class rectangleType .

EXAMPLE The definition of the class rectangleType the definitions of the functions are : using namespace .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : In this sample run , the user input is shaded .

Line :  Line : Enter the length and width of rectangle : Line :  Line : +  Line :  The statements in Lines and declare and initialize and to be objects of type rectangleType .
The statement in Line outputs the value of using and the insertion .
The statement in Line inputs the data into using cin and the extraction .
The statement in Line outputs the value of using and the insertion .
The statement in Line adds the lengths and widths of and and outputs the result .
Similarly , the statement in Line multiplies the lengths and widths of and and outputs the result .
The output shows that both the stream insertion and stream extraction operators were overloaded successfully .

One of the operations on classes is the assignment operation .
The assignment causes copy of the member variables of the class .
For example , the statement :

From Chapter , recall that the assignment works well for classes that do not have pointer member variables , but not for classes with pointer member variables .

Therefore , to avoid the shallow copy of data for classes with pointer member variables , we must explicitly overload the assignment .

Recall that to overload the assignment for class , the function must be member of that class .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Function Prototype be included in the definition of the : const ; Function .

In the definition of the function .

There is only one formal parameter .

The formal parameter is usually const reference to particular class .

The function return type is const reference to particular class .

We now explain why the return type of the function should be reference of the class type .

Suppose that the assignment is overloaded for the class rectangleType .

That is , the object becomes the actual parameter to the .

Now consider the statement :

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

The value returned by the expression : will become the parameter to the function in order to assign value to the .

That is , it must return reference to the object  not the value of .
For reason , the return type of the function to overload the assignment for class must be reference to the class type .

Now consider the .

Here , we are trying to copy the value of into  that is , statement is .
One reason why we must prevent such assignments is because they waste computer time .
First , however , we explain how the body of the assignment prevents such assignments .

As noted above , the body of the function does prevent assignments , such as the one given in Line .
Let us see how .

Consider the if statement in the body of the function : if .

Because the function is invoked by the object  the pointer in the body of the function refers to the object .

Furthermore , because is also parameter of the function , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Therefore , in the expression : and both mean the address of .
Thus , the expression will evaluate to false and the body of the if statement will be skipped .

This note illustrates another reason why the body of the function must prevent .
Let us consider the following class : class arrayClass public : const .

The class arrayClass has pointer member variable , list , which is used to create an array to store integers .
Suppose that the definition of the function to overload the assignment for the class arrayClass is written without the if statement , as follows : const arrayClass .

When statement executes in the body of the function :

The statement in Line destroys  that is , so the array holding the numbers no longer exists .

The problem is in Line .
Here , the expression is equivalent to the statement .
Because has no valid data was destroyed in Line , the statement in Line produces garbage .

It follows that the definition of the function must prevent .

The correct definition of for the class arrayClass is : const .

The following example illustrates how to overload the assignment .

EXAMPLE Consider the following class : class cAssignmentOprOverload .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The function to overload the assignment works as follows .
The statement in Line checks whether an object is copying itself .
The statement in Line destroys The statements in Lines and copy the values of the member variables and of otherList into the member variables and of  respectively .
The statement in Line creates the array to store the numbers .
The for loop in Line copies otherList into .
The statement in Line returns the address of object , because the return type of the function is reference type .

The following program tests the class cAssignmentOprOverload :

Sample Run : In sample run , the user input is shaded .

Line : Enter integers : Line : Line : Line : The is .

Line : After destroying , Line : After destroying , The statement in Line creates of ; the statements in Lines and create and of .
The statements in Lines through input the data into , and the statement in Line outputs .
The Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The statement in Line outputs Line in the sample run , which contains the output of Lines and .
The statement in Line destroys .
The statement in Line outputs , which is .
The sample run clearly shows that the destruction of affects neither nor , because and each have their own data .

Overloading Unary Operators The process of overloading unary operators is similar to the process of overloading binary operators .
The only difference is that in the case of binary operators , the has two operands .
In the case of unary operators , the has only one parameter .
Therefore , to overload unary for class :
If the function is member of the class , it has no parameters .

If the function is is , friend function of the has one parameter .

Next , we describe how to overload the increment and decrement operators .

OVERLOADING THE INCREMENT AND DECREMENT OPERATORS The increment has two forms : and , in which is variable , say , of type .
In the case of , the value of the variable , is incremented by before the value of is used in an expression .
In the case of , the value of is used in the expression before it is incremented by .

Overloading the Operator .
Overloading the is quite straightforward .
In the function definition , first we increment the value of the object , and then we use the pointer to return the value .

For example , suppose that we overload the for the class rectangleType to increment the and width of rectangle by .
Also , suppose that the function is member of the class rectangleType .

The function then has no parameters and we use the pointer to return the incremented value of the .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Moreover , the pointer associated with myRectangle returns the incremented value of myRectangle , which in case is ignored .

Now , is also an object of type rectangleType , so the statement : increments the and width of myRectangle by , and the pointer associated with myRectangle returns the incremented value of myRectangle , which is copied into .

GENERAL SYNTAX TO OVERLOAD THE OPERATOR AS MEMBER FUNCTION The general syntax to overload the as member function is described next .

Function Prototype be included in the definition of the .

The function to overload the can also be nonmember of the class rectangleType , which we describe next .

If the function is nonmember function of the class rectangleType , it has one parameter , which is an object of type rectangleType .

Function Prototype be included in the definition of the .

We now discuss how to overload the operator .
As in the case of the preincrement operator , we first describe the overloading of this operator as member of class .

Let us overload the operator for the class rectangleType .
In both cases , and , the name of the operator function is the .
To distinguish between and operator overloading , we use dummy parameter type in the function heading of the operator function .
The dummy parameter is not used in the definition of the function .
Its only purpose is to distinguish between the and versions of .
Thus , the function prototype for the operator of the class rectangleType is : rectangleType .

Notice that the parameter is only used to distinguish between the and operator functions .

The operator first uses the value of the object in the expression and then increments the value of the object .
So the steps required to implement this function are :
Save the value of the , say , temp .

Increment the value of the object .

Return the value that was saved in temp .

The function definition of the operator for the class rectangleType is : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The general syntax to overload the operator as member function is described next .

Function Prototype be included in the definition of the .

The operator can also be overloaded as nonmember function of the class .
In this situation , the operator function has two parameters .
The definition of the function to overload the operator for the class rectangleType as nonmember .

The general syntax to overload the operator as nonmember function is described next .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The decrement operators can be overloaded in similar way , the details of which are left as an exercise for you .

Let us now write the definition of the class rectangleType and show how the operator functions appear in the class definition .
Because certain operators can be overloaded as either member or nonmember functions , we give two equivalent definitions of the class rectangleType .
In the first definition , the increment , decrement , arithmetic , and relational operators are overloaded as member functions .
In the second definition , the increment , decrement , arithmetic , and relational operators are overloaded as nonmember functions .

The definition of the class rectangleType is as follows : of the class rectangleType .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Operator Overloading : Member versus Nonmember The preceding sections discussed and illustrated how to overload operators .
Certain operators must be overloaded as member functions of the class , and some must be overloaded as nonmember functions .
What about the operators that can be overloaded as either member functions or nonmember functions .
For example , the binary arithmetic + can be overloaded as member function or nonmember function .
If you overload + as member function , then the + has direct access to the member variables of one of the objects , and you need to pass only one object as Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

On the other hand , if you overload + as nonmember function , then you must pass both objects as parameters .
When both objects are passed as parameters , the code may become somewhat clearer .
So , other than following the restrictions on overloading , it is matter of preference whether you overload + as member or as nonmember function .
In the remainder of this chapter , if we overload an as member function , we will leave it as an exercise for you to overload it as nonmember function .

Chapter described the peculiarities of classes with pointer member variables .
Now that we have discussed how to overload various operators , let us review the peculiarities of classes with pointer member variables , for the sake of completeness , and how to avoid them .

Recall that the only operations on classes are assignment and member selection .

The assignment provides copy of the data .
That is , the member variables of an object are copied into the corresponding member variables of another object of the same type .
We have seen that this copy does not work well for classes with pointer member variables .
Other problems that may arise with classes with pointer member variables relate to deallocating dynamic memory when an object goes out of scope and passing class object as parameter by value .
To resolve these problems , classes with pointer member variables must :
Explicitly overload the assignment .

Include the destructor Operator Overloading : One Final Word Next , we look at three examples that illustrate overloading .
Before delving into these examples , you must remember the following : Suppose that an op is overloaded for , rectangleType .
Whenever we use the op on objects of type rectangleType , the body of the function that overloads the op for the class rectangleType executes .
Therefore , whatever code you put in the body of the function executes .

PROGRAMMING EXAMPLE : Watch the Video clockType Chapter defined class clockType to implement the time of day in program .

We implemented the operations to print the time , increment the time , and compare the two times for equality using functions .
This example redefines the class clockType .
It also overloads the stream insertion and extraction operators for easy input and output , relational operators for comparisons , and the increment to increment the time by one second .
The program that uses the class clockType requires the user to input the time in the form .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : clockType .

The definition of the class clockType is as follows : file .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Figure shows UML class diagram of the class clockType .

UML class diagram of the class clockType Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : clockType .

Notice that the class clockType overloads only the preincrement .
For consistency , however , the class should also overload the .
This step is left as an exercise for you .
The algorithm to increment the time by one second is as follows :

Return the incremented value of the object .

The definition of the function .

The definition of the function is quite simple .

Therefore , the definition of the function is : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The definition of the function is given next .
The first time is less than or equal to the second time if :
The of the first time are less than the of the second time , or .
The of the first time and the second time are the same , but the of the first time are less than the of the second time , or .
The and of the first time and the second time are the same , but the of the first time are less than or equal to the of the second time .

The definition of the function is : the less than or equal to .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Programming Example : clockType .

Similarly , you can use the and to write the definition of the function The definitions of the functions setTime and getTime are the same as given in Chapter .
They are included here for the sake of completeness .
Moreover , we have modified the definition of the constructor so that it uses the function setTime to set the time .
The definitions are as follows :

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time subsequent rights restrictions require it .

Here , after printing the time in the previous format , we must return the ostream object .
Therefore , the definition of the function is : the stream insertion .

The algorithm to input the time is :

Get the input , which is number , and store it in the member variable .
Also check the input is valid .

Get the next input , which is colon , and discard it .

Get the next input , which is number , and store it in the member variable .
Also check the input is valid .

Get the next input , which is colon , and discard it .

Get the next input , which is number , and store it in the member variable .
Also check the input is valid .

Return the istream object .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time subsequent rights restrictions require it .

Programming Example : clockType .

The definition of the function .

Sample Run : In this sample run , the user input is shaded .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any if subsequent rights restrictions require it .

Programming Example : Complex Numbers .

Complex Numbers number of the form + ib , in which and and are real numbers , is called complex number .
We call the real part and the imaginary part of + ib .

Complex numbers can also be represented as ordered pairs ,
The addition and multiplication of complex numbers are defined by the following rules : Using the ordered pair notation , these rules are written as : has no data type that allows us to manipulate complex numbers .
In this example , we will construct data type , complexType , that can be used to process complex numbers .
We will overload the stream insertion and stream extraction operators for easy input and output .
We will also overload the operators + and to perform addition and multiplication of complex numbers .
If and are complex numbers , we can evaluate expressions such as + and .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any if subsequent rights restrictions require it .

Figure shows UML class diagram of the class complexType .

UML class diagram of the class complexType Next , we write the definitions of the functions to implement various operations of the class complexType .

The definitions of most of these functions are straightforward .
We will discuss only the definitions of the functions to overload the stream insertion  and the stream extraction 

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any if subsequent rights restrictions require it .

Programming Example : Complex Numbers .

Output Output Output Output Output the the the the the left parenthesis ,

Therefore , the definition of the function is : osObject , osObject osObject osObject osObject osObject .

Next , we discuss the definition of the function to overload the stream extraction 

The input is of the form : In this input , the part of the complex number is , and the imaginary part is .

The algorithm to read this complex number is :

Read Read Read Read Read and and and and and discard the left parenthesis .

Programming Example : Complex Numbers .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

You can extend this data type to perform subtraction and division on complex numbers .

Next , we will define class , called newString , and overload the assignment and relational operators .
That is , when we declare variable of type newString , we will be able to use the assignment to copy one string into another and relational operators to compare the two strings .

Before discussing the class newString , however , we will examine the overloading of the .
Recall that we have used the to access the components of an array .
To access individual characters in string of type newString , we have to overload the for the class newString .

Recall that the function to overload the for class must be member of the class .
Furthermore , because an array can be declared as constant or nonconstant , we need to overload the to handle both cases .

The syntax to declare the function as member of class for nonconstant arrays is :

Suppose that classTest is class that has an array member variable .
The definition of classTest to overload the is : class classTest public : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Next , the body of the function for nonconstant arrays is executed to complete the execution of the assignment statement for .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

is sequence of one or more characters .

are enclosed in double quotation marks .

are null terminated .

are stored in character arrays .

The only aggregate operations allowed on are input and output .
To use other operations , the programmer needs to the header file cstring , which contains the specifications of many functions for string manipulation .

Initially , did not provide any data types to handle .
More recent versions of , however , provide string class to handle and operations on .

Our objective in this example is to define our own class for manipulation and , at the same time , to further illustrate operator overloading .
More specifically , we overload the assignment operator , the relational operators , and the stream insertion and extraction operators for easy input and output .
Let us call this class newString .
First , we give the definition of the class newString : file .

Programming Example : newString .

The class newString has two private member variables : one to store the and one to store the length of the .

Next , we give the definitions of the functions to implement the newString operations .

The implementation file includes the header file cassert because we are using the function .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : newString .

Because temp is declared to be an array of size , the largest string that can be stored into temp is of length .
The manipulator setw in statement is , in the input ensures that no more than characters are read into temp .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Let us explain the functions that overload the conversion constructor , the assignment  and the copy constructor .

The conversion constructor is function that converts its argument to an object of the class .
In our case , the conversion constructor converts string to an object of the newString type .

Note that the assignment is explicitly overloaded only for objects of the newString type .
However , the overloaded assignment also works if we want to store into newString object .
Consider the declaration : newString .

First , the compiler automatically invokes the conversion constructor to create an object of the newString type to temporarily store the string .

Second , the compiler invokes the overloaded assignment to assign the temporary newString object to the object .

Hence , it is not necessary to explicitly overload the assignment to store into an object of type newString .

Next , we write program that tests some of the operations of the class newString .

Programming Example : newString .

Sample Run : In sample run , the user input is shaded .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right remove additional content at any time if subsequent rights restrictions require it .

The statement in outputs the values of , and .
Notice that the of is be printed between and .
Because is empty , nothing is printed between and ; see in the sample run .
The statements in Lines through compare and and output the result .
The statement in inputs string with length of at least into , and the statement in outputs the new of .
Note that in the statement : Because the associativity of the assignment is from right left , first the statement ; executes , and then the statement ; executes .
The statement in outputs the values of and .
The statements in Lines , and use the array subscripting individually manipulate the characters of .
The meanings of the remaining statements are straightforward .

Function Overloading The previous section discussed overloading .
Operator overloading provides the programmer with the same concise notation for data types as the has for types .
The types of parameters used with an determine the action take .
Similar overloading , allows the programmer overload function name .
Chapter introduced function overloading .
For easy reference in the following discussion , let us review this concept .

Recall that class can have more than one constructor , but all constructors of class have the same name , which is the name of the class .
This is an example of overloading function .
Further recall that overloading function refers having several functions with the same name but different parameter lists .
The parameter list determines which function will execute .

For function overloading work , we must give the definition of each function .
The next section teaches you how overload functions with single code segment and leave the job of generating code for separate functions for the compiler .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right remove additional content at any time if subsequent rights restrictions require it .

Templates Templates Templates are very powerful feature of .
They allow you write single code segment for set of related functions , called function template , and for set of related classes , called class template .
The syntax we use for templates is : template declaration ; in which Type is the name of data type , or , and declaration is either function declaration or class declaration .
In , template is reserved word .

The word class in the heading refers any type or type .
Type is referred as formal parameter the template .

Function Templates In Chapter , when we introduced function overloading , the function larger was overloaded find the larger of two integers , characters , numbers , or strings .
To implement the function larger , we need write four function definitions for the data type : one for int , one for char , one for double , and one for string .

However , the body of each function is similar .
simplifies the process of overloading functions in cases such as this by providing function templates .

The syntax of the function template is : template function definition ; in which Type is referred as formal parameter of the template .
It is used specify the type of parameters the function and the return type of the function and declare variables within the function .

The statements : template .

In the function heading , the type of the formal parameters and is Type , which will be specified by the type of the actual parameters when the function is called .
The statement : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Because and are of type int , the data type int is substituted for Type , and the compiler generates the appropriate code .

Note that the function template will work only for those data types for which the has been defined .

If we omit the body of the function in the function template definition , the function template , as usual , is the prototype .

The following example illustrates the use of function templates .

EXAMPLE The following program uses the function template to determine the of the two items .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : Line Line Line Line : Larger Larger Larger Larger of of of of Hello Hello Class Templates Like function templates , class templates are used to write single code segment for set of related classes .
For example , in Chapter , we defined list as an ADT ; our list element type was int .
If the list element type changes from int to , say , char , double , or string , we need to write separate classes for each element type .
For the most part , the operations on the list the algorithms to implement those operations remain the same .

Using class  we can create generic class listType , the compiler can generate the appropriate source code for specific implementation .

The syntax we use for class template is : template class declaration Class are called parameterized types because , based on the parameter type , specific class is generated .

The following statements define listType to be class template : template class listType public : bool const ; to determine whether the list is empty .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

This definition of the class template is generic definition includes only the basic operations on list .
To derive specific list from this list to add or rewrite the operations , we declare the array containing the list elements the of the list as protected .

Next , we describe specific list .
Suppose that you want to create list to process integer data .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Templates In the statements in Lines , are referred to as template instantiations or instantiations of the class template , in which elemType is the class parameter in the template header .
template instantiation can be created with either or type .

Thus , when giving the definitions of the function members of class template , we must follow the definition of the function template .
For example , the definition of the member insert of the class is : template .

The statement in Line declares intList to be list of components .
When the compiler generates the code for intList , it replaces the word elemType with int in the definition of the class .
The template parameter in the definitions of the member functions example , elemType in the definition of of the class is also replaced by int .

HEADER FILE AND IMPLEMENTATION FILE OF CLASS TEMPLATE Until now , we have placed the definition of the class the header the definitions of the member functions the implementation in separate files .
The object code was generated from the implementation file linked with the user code .
However , this mechanism of separating the class definition the definitions of the member functions does not work with class .
Passing parameters to function has an effect at run time , whereas passing parameter to class template has an effect at compile time .
Because the actual parameter to class is specified in the user code because the compiler cannot instantiate function template without the actual parameter to the template , we can no longer compile the implementation file independently of the user code .

This problem has several possible solutions .
We could put the class definition and the definitions of the function directly in the client code , or we could put the class definition and the definitions of the function together in the same header file .

Another alternative is to put the class definition and the definitions of the functions in separate files but include directive to the implementation file at the end of the header file .
In either case , the function definitions and the client code are compiled together .
For illustrative purposes , we will put the class definition and the function definitions in the same header file .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

However , these classes , as designed in Chapter , process only those lists whose elements are of type int .
Now that we have discussed how to use class templates to create generic code , in this section , we redesign these classes so that they can be used to process any type of list .
Moreover , in this chapter , we discussed how to overload the assignment operator .
Therefore , in addition to the operations discussed in Chapter , we also overload the assignment operator for the class because it has pointer member variable .

The following class template defines the abstract class as an ADT .

The documentation of these functions is similar to ones given in Chapter .
The source code file at the Web site accompanying this template class .

Templates The definitions of the functions to implement the operations of the class are similar to the ones given in Chapter .
Here the functions to implement these operations are function templates .
For example , the definitions of the functions print , isItemAtEqual , removeAt , retrieveAt , the constructor , and the destructor are : template void .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Next , because we are overloading the assignment for the class  we give the definition of the function template to overload the assignment .

Templates We leave it as an exercise for you to provide the definitions of the remaining function templates for the class .
So its objects cannot be instantiated .
Next we describe the nonabstract class unorderedArrayListType derived from the class .

As in the case of the class  the definitions of the member functions of the class unorderedArrayListType is similar to ones given in Chapter .
For example , the definitions of the functions insertEnd , seqSearch , replaceAt , and remove , and constructor are as follows : template void .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

We leave it as an exercise for you to provide the definitions of the remaining function templates for the class unorderedArrayListType .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

List : Enter strings : hello sunny warm winter summer Line :  hello sunny warm winter summer Line : Enter the string to be deleted : hello Line : After removing hello  sunny warm winter summer Line : Enter the search item : winter Line : winter in .

The preceding program works as follows .
The statement in Line declares to be an object of the type .
The member variable of is an array of components and the component type is string .
The statement in Line declares the string variable .
The statement in Line prompts the user to enter strings .
The statement in Line gets the next string from the input stream .
The statement in Line uses the member function insertEnd of to store the string into .
The statement in Line uses the member function print of to output the elements of .
The statement in Line prompts the user to enter the string to be deleted from  and the statement in Line gets the string to be deleted from the input stream .
The statement in Line uses the member function remove of to remove the string from .
The statement in Line outputs the modified .

The statements in Lines through tests the function seqSearch .

The Web site accompanying this book contains additional programs illustrating how to use the class template to create lists of double elements and clockType objects .

Just as we can derive the class template  from the abstact class template  to manipulate unordered lists , we can also derive the class template orderedArrayListType to manipulate ordered lists .

QUICK REVIEW .

An operator that has different meanings with different data types is said to be overloaded .

In , is used as stream extraction operator and as right shift operator .
Similarly , is used as stream insertion operator and as left shift operator .
Both are examples of operator overloading .

Any function that overloads an operator is called an operator function .

The syntax of the heading of the operator function is : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Quick Review .

Operator functions are functions .

Except for the assignment operator and the member selection operator , to use an operator on class objects , that operator must be overloaded .
The assignment operator performs default copy .

For classes with pointer member variables , the assignment operator must be explicitly overloaded .

Operator overloading provides the same concise notation for data types as is available for data types .

When an operator is overloaded , its precedence cannot be changed , its associativity cannot be changed , default parameters cannot be used , the number of parameters that the operator takes cannot be changed , and the way in which an operator works with data types remains the same .

It is not possible to create new .
Only existing can be overloaded .

The that cannot be overloaded are , and sizeof .

The pointer this refers to the object as whole .

The operator functions that overload the , arrow_operator for class must be members of that class .

friend function is nonmember of class .

The heading of the prototype of friend function is preceded by the word friend .

In , friend is reserved word .

If an operator function is member of class , the far left operand of the operator must be class object reference to class of that class .

The binary operator function as member of class has only one parameter ; as nonmember of class , it has two parameters .

The operator functions that overload the stream insertion operator , and the stream extraction operator , for class must be friend functions of that class .

To overload the operator for class if the operator function is member of that class , it must have no parameters .
Similarly , to overload the operator for class if the operator function is member of that class , it must have no parameters .

To overload the operator for class if the operator function is member of that class , it must have one parameter , of type int .
The user does not specify any value for the parameter .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , duplicated , in whole in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Overloading and Templates The dummy parameter in the function heading helps the compiler generate the correct code .
The operator has similar conventions .

conversion constructor is function .

conversion constructor converts its argument to an object of the class .
The compiler implicitly calls such constructors .

Classes with pointer member variables must overload the assignment operator and include both the copy constructor and the destructor .

In , template is reserved word .

Using templates , you can write single code segment for set of related the function template .

Using templates , you can write single code segment for set of related the class template .

The syntax of template is : template declaration ;

The word class in the heading refers to any data type data type .

Class are called parameterized types .

In class template , the parameter Type specifies how generic class template is to be customized to form specific template class .

The parameter Type is mentioned in every class header and member function definition .

Suppose is class template , and func is member function of The heading of the function definition of func is : template .

Suppose is class template , which can take int as parameter .
The statement : declares to be an object of type  and the type passed to the class is int .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , duplicated , in whole in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Mark the following statements as true false .

The precedence of an operator cannot be changed , but its associativity .

friend function of class is nonmember function of the class , so it .
When writing the definition of friend function , the keyword .

Every instance of an overloaded function has the same number of .

It is not necessary to overload relational operators for classes that have .
The function heading of the operator function to overload the preincrement operator and the operator is the .

What are the two things that you need to overload an operator for Within the definition of an operator function , how do you refer to the What is the difference between the two statements return this ; and What is the difference between friend function of class and member .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Overloading and Templates Write the statement that includes friend function named before in the class dateType that takes as parameters two objects of type dateType and returns true if the date represented by the first object comes before the date represented by the second object ; otherwise , the function returns false .

Write the definition of the function you defined in part .

Suppose that the operator is to be overloaded for class Suppose that the binary operator + is overloaded as member function for class strange .
How many parameters does the function .

Write statement that shows the declaration in the class strange to overload the .

Write statement that shows the declaration in the class strange to overload the binary + as member function .

Write statement that shows the declaration in the class strange to overload the as member function .

Write statement that shows the declaration in the class strange to overload the as member function .

Write statement that shows the declaration in the class strange to overload the binary + as friend function .

Write statement that shows the declaration in the class strange to overload the as friend function .

Write statement that shows the declaration in the class strange to overload the as friend function .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In class , why do you include the function that overloads the stream What is the purpose of dummy parameter in function that overloads the What type of value should be returned by function that overloads .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The conjugate of + ib is ib , and the pﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ absolute value of + ib is .
Extend the definition of the class complexType of the Programming Example : Complex Numbers by overloading the operators and .
Also , When should class overload the assignment operator and define the copy What are the three things that you must do for classes with pointer member template class .

Write statement that declares sObj to be an object of type such that the private member variables and are of type int .

Write statement that shows the declaration in the class to overload the as member function .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Write the definition of the function for the class  which is overloaded as member function .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

For example , if is  and is , the statement : +

Suppose that is  and is .
Then , the statement : should assign there " to , in which and are PROGRAMMING EXERCISES .

This chapter uses the class rectangleType to illustate how to overload the + and .
In this exercise , first redefine the class rectangleType by declaring the instance variables as protected and then overload additional as defined in parts to c .

Overload the decrement to increment decrement , respectively , the length width of rectangle by one unit .
If the resulting dimensions are not positive , output an appropriate message do not perform the operation .

Redefine the functions to overload the relational by considering the areas of rectangles as follows : Two rectangles are the same , if they have the same area ; otherwise , the rectangles are not the same .
Similary , rectangle is greater than rectangle if the area of is greater than the area of .
Overload the remaining relational using similar definitions .

Write the definitions of the functions to overload the defined in parts to c .

Write test program that tests various operations on the class rectangleType .

Redo Programming Exercise by overloading the as nonmembers of the class rectangleType .

Write test program that tests various operations on the class rectangleType .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter defined the class boxType by extending the definition of the class rectangleType .
In this exercise , derive the class boxType from the class rectangleType , defined in Exercise , add the functions to overload the + decrement as members of the class boxType .

Overload the relational by considering the volume of the boxes .

For example , two boxes are the same if they have the same volume .

Write the definitions of the functions of the class boxType as defined in part .

Write test program that tests various operations on the class rectangleType .

Redo Programming Exercise by overloading the as nonmembers of the class boxType .

Write test program that tests various operations on the class boxType .

Extend the definition of the class clockType by overloading the function as member of the class clockType .

Write the definition of the function to overload the for the class clockType as defined in part .

Rewrite the definition of the class clockType so that these are overloaded as nonmember functions .
Also , overload the for the class clockType as nonmember .

Write the definitions of the member functions of the class clockType as designed in part .

Write test program that tests various operations on the class as designed in parts .

Extend the definition of the class complexType so that it performs the subtraction division operations .
Overload the subtraction division for this class as member functions .

If , are complex numbers : c ,

If , is nonzero : + bd + + +

Write the definitions of the functions to overload the as defined in part .

Write test program that tests various operations on the class complexType .
Format your answer with two decimal places .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Write the definitions of the member functions of the class complexType as designed in part .

Write test program that tests various operations on the class complexType as designed in parts .
Format your answer with two decimal places .

Extend the definition of the class newString as follows : Overload the + to perform the string concatenation operations .

Add the function length to return the length of the string .

Write the definition of the function to implement the operations defined in part .

Write test program to test various operations on the newString objects .

Rational fractions are of the form , in which are integers .
In this exercise , by " we mean rational fractions .
Suppose are fractions .
Arithmetic operations on fractions are defined by the following rules :

For example , if bc .

Design , performs the arithmetic relational operations on fractions .
Overload the arithmetic relational so that the appropriate symbols can be used to perform the operation .
Also , overload the stream insertion stream extraction for easy input output .

Write program that , using the class fractionType , performs operations on fractions .

Among other things , test the following : Suppose , are objects of type fractionType .
If the input is , the statement : cin ; Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Your answer need not be in the lowest terms .

Recall that in , there is no check on an array index out of bounds .

However , during program execution , an array index out of bounds can cause serious problems .
Also , in , the array index starts at .

Design implement the class that solves the array index out of bounds problem also allows the user to begin the array index starting at any integer , positive or negative .
Every object of type is an array of type int .
During execution , when accessing an array component , if the index is out of bounds , the program must terminate with an appropriate error message .
Consider the following .

The statement in Line declares list to be an array of components , the component type is int , the components are : the statement in Line declares myList to be an array of components , the component type is int , the components are : the statement in Line declares yourList to be an array of components , the component type is int , the components are :
Write program to test the class .

Programming Exercise processes only int arrays .
Redesign the class using class templates so that the class can be used in any application that requires arrays to process data .

Design class to perform various matrix operations .
Therefore , every element of matrix has row position column position .
If is matrix of five rows six columns , we say that the matrix is of the size sometimes denote it as .
Clearly , convenient place to store matrix is in array .
Two matrices can be added subtracted if they have the same size .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The sum difference of are given by : bij bij The multiplication of is defined only if the number of columns of is the same as the number of rows of .
If is of the size is of the size , then is of the size the element cik is given by the formula : cik ain bnk .

Design implement class matrixType that can store matrix of any size .

Overload the operators + to perform the addition , subtraction , multiplication operations , respectively , overload the operator to output matrix .
Also , write test program to test various operations on the matrices .

In Programming Exercise in Chapter , we defined class romanType to implement Roman numbers in program .
In that exercise , we also implemented function , romanToPositiveInteger , to convert Roman number into its equivalent positive integer .

Modify the definition of the class romanType so that the member variables are declared as protected .
Use the class newString , as designed in Programming Exercise , to manipulate strings .
Furthermore , overload the stream insertion and stream extraction operators for easy input and output .
The stream insertion operator outputs the Roman number in the Roman format .

Also , include member function , positiveIntegerToRoman , that converts positive integer to an equivalent Roman number format .
Write the definition of the member function positiveIntegerToRoman .

For simplicity , we assume that only the letter can appear in front of another letter and that it appears only in front of the letters and .
For example , is represented as IV , is represented as IX , is represented as XXXIX , and is represented as XXXXIX .
Also , will be represented as XXXX , will be represented as CLXXXX , and so on .

Derive class extRomanType from the class romanType to do the following : In the class extRomanType , overload the arithmetic operators + and so that arithmetic operations can be performed on Roman numbers .
Also , overload the and and decrement operators as member functions of the class extRomanType .

To add , multiply , or Roman numbers , add , multiply , or divide , their positive integer representations and Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

For subtraction , if the first number is smaller than the second number , output message saying that , the first number is smaller than the second , the numbers cannot be .
Similarly , for division , the numerator must be larger than the denominator .
Use similar conventions for the increment and decrement operators .

Write the definitions of the functions to overload the operators described in part .

Write program to test your class .

Consider the class dateType given in Chapter .
In this class , add the functions to overload the increment and decrement operators to increase the date by day and decrease the date by day , respectively ; relational operators to compare two dates ; and stream operators for easy input and Also write program to test your class .

Programming Exercise , Chapter , describes how to design the class lineType to implement line .
Redo this programming exercise so that the class lineType :

Chapter : Overloading and Templates Overloads the stream insertion  for easy output .

Overloads the stream extraction  for easy intput .

Overloads the unary + as member function , so that it returns true if line is vertical ; false otherwise .

Overloads the unary , as member function , so that it returns true if line is horizontal ; false otherwise .

Overloads the , as member function , so that it returns true if two lines are equal ; false otherwise .

Overloads the , as member function , so that it returns true if two lines are parallel ; false otherwise .

Overloads the , as member function , so that it returns true if two lines are perpendicular ; false otherwise .

Write program to test your class .

Consider the classes class cashRegister and dispenserType given in the Programming Example Machine " in Chapter .

In the class class cashRegister , add the functions to overload the binary operators + and to add and subtract an amount in cash register ; the relational operators to compare the amount in two cash registers ; and the stream insertion for easy output .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In this class , add the functions to overload the increment and decrement operators to increment and decrement the number of items by one , respectively , and the stream insertion for easy output .

Write program to test the classes designed in parts and .

The company invests only in the stock market .
At the end of each trading day , the company would like to generate and post the listing of its stocks so that investors can see how their holdings performed that day .
We assume that the company invests in , say , different stocks .

The desired output is to produce two listings , one sorted by stock symbol and another sorted by percent gain from highest to lowest .

The input data is provided in file in the following format : symbol openingPrice closingPrice todayHigh todayLow prevClose volume For example , the sample data is : MSMT CBA .

The first line indicates that the stock symbol is MSMT , opening price was , the closing price was , high price was , low price was , closing price was , and the number of shares currently being held is .

The listing sorted by stock symbols must be of the following form : First Heaven Financial Report Stock Today Previous Percent Symbol Open Close High Low Close Gain AOLK CSCO IBD MSET Closing Assets : Volume Develop this programming exercise in two steps .
In the first step , design and implement stock object .
In the second step , design and implement an object to maintain list of stocks .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter : Overloading and Templates Design and implement the stock object .
Call the class that captures the various characteristics of stock object stockType .

The main components of stock are the stock symbol , stock price , and number of shares .
Moreover , we need to output the opening price , closing price , high price , low price , previous price , and the percent for the day .
These are also all the characteristics of stock .

Therefore , the stock object should store all this information .

Perform the following operations on each stock object :

Set the stock information .

Print the stock information .

Show the different prices .

Calculate and print the percent .

Show the number of shares .

The natural ordering of the stock list is by stock symbol .

Overload the relational operators to compare two stock objects by their symbols .

Overload the insertion operator , for easy output .

Because the data is stored in file , overload the stream extraction operator , for easy input .

For example , suppose infile is an ifstream object and the input file was opened using the object infile .
Further suppose that myStock is stock object .
Then , the statement : infile myStock ;

Let us call the class to implement list of stock objects stockListType .

The class stockListType must be derived from the class listType , which you designed and implemented in the previous exercise .
However , the class stockListType is very specific class , designed to create list of stock objects .
Therefore , the class stockListType is no longer template .

Add overwrite the operations of the class listType to implement the necessary operations on stock list .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Therefore , these members can be directly accessed in the class stockListType .

Because the company also requires you to produce the list ordered by the percent , you need to sort the stock list by this component .

However , you are not to physically sort the list by the component percent .
Instead , you will provide logical ordering with respect to this component .

To do so , add member variable , an array , to hold the indices of the stock list ordered by the component percent .
Call this array sortIndicesGainLoss .
When printing the list ordered by the component percent , use the array sortIndicesGainLoss to print the list .
The elements of the array sortIndicesGainLoss will tell which component of the stock list to print next .

Write program that uses these two classes to automate the analysis of stock data .

Write the definitions of the member functions of the classes arrayListType and unorderedArrayListType that are not given in this chapter .
Also , write program to test your function .

Write the definition of the class template orderedArrayListType , derived from the class arrayListType , to implement an ordered list .
As in Chapter , add the function insert to this class .
Provide the definitions of the nonabstract functions .
Also , write program to test your class .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Explore stack unwinding Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

For example , division by zero is an exception .
Similarly , trying to open an input file that does not exist is an exception , as is an array index that goes out of bounds .

Until now , we have dealt with certain exceptions by using either an if statement or the assert function .
For instance , in Examples and , before dividing sum by counter or count , we checked whether counter or count was nonzero .
Similarly , in the Programming Example newString , we used the assert function to determine whether the array index is within bounds .

On the other hand , there were places where we simply ignored the exception .
For instance , while determining substring in string , we never checked whether the starting position of the substring was within range .
Also , we did not handle the array index exception .
However , in all of these cases , if exceptions occurred during program execution , either we included code to terminate the program or the program terminated with an appropriate error message .
For instance , if we opened an input file in the function main and the input file did not exist , we terminated the function main , so the program was terminated .

There are situations when an exception occurs , but you want the program to simply ignore the exception and terminate .
For example , program that monitors stock performance should not automatically sell if the account balance goes below certain level .
It should inform the stockholder and request an appropriate action .

Similarly , program that monitors heartbeat cannot be terminated if the blood pressure goes very high .
program that monitors satellite in space cannot be terminated if there is temporary power failure in some section of the satellite .

The code to handle exceptions depends on the type of application you develop .
One common way to provide code is to add code at the point where an error can occur .
This technique allows the programmer reading the code to see the code together with the actual code and to determine whether the code is properly implemented .
The disadvantage of this approach is that the program can become cluttered with code , which can make understanding and maintaining the program difficult .
This can distract the programmer from ensuring that the program functions correctly .

Handling Exceptions within Program In Chapter , we noted that if you try to input invalid data into variable , the input stream enters the fail state , so an exception occurs .
This occurs , for example , if you try to input letter into an int variable .
Chapter also showed how to clear and restore the input stream .
Chapter introduced the assert function and explained how to use it to avoid certain unforeseeable errors , such as division by zero .
Even though the function assert can check whether an expression meets the required , if the conditions are not met , it terminates the program .
As indicated in the previous section , situations occur in which , if something goes wrong , the program should not be simply terminated .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Handling Exceptions within Program This section discusses how to handle exceptions .
However , first we offer some examples that show what can happen if an exception is not handled .
We also review some of the ways to handle exceptions .

The program in Example shows what happens when division by zero occurs and the problem is not addressed .

Sample Run : Enter the dividend : Enter the divisor : Sample Run : Enter the dividend : Enter the divisor : has encountered problem and needs to close .
We are sorry for the inconvenience .

In Sample Run , the value of divisor is nonzero , so no exception occurs .
The program calculates and outputs the and terminates normally .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The statement in divides dividend by the divisor .
However , the program does not check whether divisor is before dividing dividend by divisor .
So the program crashes with the message shown .
Notice that the error message is platform independent , that is , IDE dependent .

Some IDEs might not give this error message and might simply hang .

Next , consider Example .
This is the same program as in Example , except that in , the program checks whether divisor is zero .

Sample Run : Enter the dividend : Enter the  Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Handling Exceptions within Program .

In Sample Run , the value of is nonzero , so no exception occurs .
The program calculates and outputs the and terminates normally .

In Sample Run , the value entered for is .
In , the program checks whether is .
Because is , the expression in the if statement fails , so the else part executes , which outputs the third line of the sample run .

The program in Example uses the function assert to determine whether the is zero .
If the is zero , the function assert terminates the program with an error message .

EXAMPLE Division by zero and the assert function .

Sample Run : Enter the dividend : Enter the  Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The program calculates and outputs the and terminates normally .

In Sample Run , the value entered for is .
In , the function assert checks whether is nonzero .
Because is , the expression in the assert statement evaluates to false , and the function assert terminates the program with the error message shown in the third line of the output .

Mechanisms of Exception Handling Examples through show what happens when an exception occurs in program and is not processed .
This section describes how to the necessary code to handle exceptions within program .

The try block also contains statements that should not be executed if an exception occurs .
The try block is followed by one or more catch blocks .
catch block specifies the type of exception it can catch and contains an exception handler .

The general syntax of the block is : try .

Handling Exceptions within Program .

Usually , before executing such statement , we check whether certain conditions are met .

For example , before performing the division , we check whether the is nonzero .
If the conditions are not met , we typically generate an exception , which in terminology is called throwing an exception .
This is typically done using the throw statement , which we will explain shortly .
We will show what is typically thrown to generate an exception .

Let us now note the following about blocks .

If no exception is thrown in try block , all catch blocks associated with that try block are ignored and program execution resumes after the last catch block .

If an exception is thrown in try block , the remaining statements in that try block are ignored .
The program searches the catch blocks in the order they appear after the try block and looks for an appropriate exception handler .
If the type of thrown exception matches the parameter type in one of the catch blocks , the code of that catch block executes , and the remaining catch blocks after this catch block are ignored .

The last catch block that has an ellipses is designed to catch any type of exception .

Consider the following catch .

In this catch .

The identifier acts as parameter .
In fact , it is called catch block parameter .

The data type int specifies that this catch block can catch an exception of type int .

catch block can have at most one catch block parameter .

Essentially , the catch block parameter becomes placeholder for the value thrown .
In this case , becomes placeholder for any thrown value that is of type int .
In other words , if the thrown value is caught by this catch block , then the thrown value is stored in the catch block parameter .
This way , if the code wants to do something with that value , it can be accessed via the catch block parameter .

Suppose in catch block heading only the data type is specified , that is , there is no catch block parameter .
The thrown value then may not be accessible in the catch block code .

THROWING AN EXCEPTION In order for an exception to occur in try block and be caught by catch block , the exception must be thrown in the try block .
The general syntax to throw an exception is : throw expression ; Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The object being thrown can be either specific object or an anonymous object .
It follows that in , an exception is value .

In , throw is reserved word .

Example illustrates how to use throw statement .

EXAMPLE Suppose we have the following declaration : int ; string is .

Effect throw throw throw throw The constant value is thrown .

The value of the variable is thrown .

The object is thrown .

An anonymous string object with .

ORDER OF catch BLOCKS catch block can catch either all exceptions of specific type or all types of exceptions .

The heading of catch block specifies the type of exception it handles .
As noted previously , the catch block that has an ellipses is designed to catch any type of exception .
Therefore , if we put this catch block first , then this catch block can catch all types of exceptions .

Suppose that an exception occurs in try block and is caught by catch block .
The remaining catch blocks associated with that try block are then ignored .
Therefore , you should be careful about the order in which you list catch blocks following try block .

For example , consider the following sequence of blocks : try .

Handling Exceptions within Program .

Because the catch block in Line can catch exceptions of all types , the catch block in Line cannot be reached .
For this sequence of blocks , some compilers might , in fact , give syntax error your .

In sequence of blocks , if the catch block with an ellipses the is needed , then it should be the last catch block of that sequence .

USING BLOCKS IN PROGRAM Next , we provide examples that illustrate how block might appear in program .

common error that might occur when performing numeric calculations is division by zero with integer values .
If , during program execution , division by zero occurs with integer values and is not addressed by the program , the program might terminate with an error message or might simply hang .
Example shows how to handle division by zero exceptions .

EXAMPLE This example illustrates how to catch and handle division by zero exceptions .
It also shows how block might appear in program .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : In this sample run , the user input is shaded .

This program works as follows .
The statement in declares the int variables dividend ,  and .
The try block starts at .
The statement in prompts the user to enter the value for the dividend ; the statement in stores this number in the variable dividend .
The statement in prompts the user to enter the value for the  and the statement in stores this number in the variable .
The statement in checks whether the value of is .
If the value of is , the statement in throws the constant value .
The statement in calculates the and stores it in .
The statement in outputs the value of .

The catch block starts in and catches an exception of type int .

In Sample Run , the program does not throw any exception .

In Sample Run , the entered value of is .
Therefore , the statement in throws , which is caught the catch block starting in .
The statement in outputs the appropriate message .

The program in Example is the same as the program in Example , except that the throw statement throws the value of the variable .

Sample Run : In this sample run , the user input is shaded .

The program in Example illustrates how to handle division zero , division negative integer , and input failure exceptions .
It also shows how to throw and catch an object .
This program is similar to the programs in Examples and .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Handling Exceptions within Program .

Sample Run : In this sample run , the user input is shaded .

In this program , the statements in Lines and declare the variables used in the program .

Notice that the string object inpStr is also initialized .

The statements in Lines through input the data into the variables dividend and The statement in checks whether is , the statement in checks whether is negative , and the statement in checks whether the standard input stream is in the fail state .

The statement in throws the variable  the statement in throws an anonymous string object with the string , and the statement in throws the object inpStr .

The catch block in catches an exception of type int , and the catch block in catches an exception of type string .
If the exception is thrown by the statement in , it is caught and processed by the catch block in .
If the exception is thrown by the statements in Lines or , it is caught and processed by the catch block in .

In Sample Run , the program does not encounter any problems .
In Sample Run , division by negative number occurs .
In Sample Run , the standard input stream enters the fail state .

Using Exception Classes provides support to handle exceptions via hierarchy of classes .
The class exception is the base of the classes designed to handle exceptions .

The function what returns string containing an Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All derived classes of the class exception override the function what to issue their own error messages .

Two classes are immediately derived from the class exception : and .
Both of these classes are defined in the header file stdexcept .

To deal with logical errors in program , such as string subscript out of range or an invalid argument to function call , several classes are derived from the class .
For example , the class is designed to deal with illegal arguments used in function call .
The class out_of_range deals with the string subscript out of range error .
If length greater than the maximum allowed for string object is used , the class deals with this error .
For example , recall that every string object has maximum length Chapter .
If length larger then the maximum length allowed for string is used , then the exception is generated .
If the operator new cannot allocate memory space , this operator throws exception .

The class is designed to deal with errors that can be detected only during program execution .
For example , to deal with arithmetic overflow and underflow exceptions , the classes and are derived from the class .

Examples and illustrate how ' exception classes are used to handle exceptions in program .

The program in Example shows how to handle the exceptions out_of_range and .
Notice that in this program , these exceptions are thrown by the string functions substr and the string concatenation operator +
Because the exceptions are thrown by these functions , we do not any throw statement in the try block .

Handling Exceptions within Program .

Sample Run : Testing string exceptions .

Because the starting position of the substring is , which is less than , no exception is thrown .

However , in the statement in , the starting position of the substring is , which is greater than of .
Therefore , the function substr throws an out_of_range exception , which is caught and processed by the catch in .

Notice that in the statement in , the object re uses the function what to return the error message , invalid string position .

The program in Example illustrates how to handle the exception thrown by the operator new .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : Created of components .

Created of components .

Created of components .

Created of components .

Created of components .

Created of components .

Created of components .

Created of components .

In the catch  bad allocation .

The preceding program works as follows .
The statement in declares list to be an array of pointers .
The body of the for loop in designed to execute times .
For each iteration of the for loop , the statement in uses the operator new to allocate an array of components of type int .
As shown in the sample run , the operator new able to create eight arrays of components each .
In the ninth iteration , the operator new unable to create the array and throws Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Creating Your Own Exception Classes .

This exception caught and processed by the catch in .
Notice that the expression returns the string bad allocation .
Some IDEs might return the string After the statement in executes , control exits the  and the statement in terminates the program .

Creating Your Own Exception Classes Watch the Video Whenever you create your own classes or write programs , exceptions are likely to occur .

As you have seen , provides numerous exception classes to deal with these situations .

However , it does not provide all of the exception classes you will ever need .
Therefore , enables programmers to create their own exception classes to handle both the exceptions not covered by exception classes and their own exceptions .
This section describes how to create your own exception classes .

uses the same mechanism to process the exceptions that you define as it uses for exceptions .
However , you must throw your own exceptions using the throw statement .

In , any class can be considered an exception class .
Therefore , an exception class simply class .
It need not be inherited from the class exception .
What makes class an exception how you use it .

The exception class that you define can be very simple in the sense that it does not contain any members .
For example , the following code can be considered an exception class : class dummyExceptionClass .

Sample Run : In this sample run , the user input shaded .

The preceding program works as follows .
If the user enters for the  the statement in throws an anonymous object of the class divByZero .

The class divByZero has no members , so we cannot really do anything with the thrown object .
Therefore , in the catch in , we specify only the data type name without the parameter name .
The statement in outputs the appropriate error message .

Let us again consider the statement throw ; in .
Notice that in this statement , divByZero the name of the class , the expression creates an anonymous object of this class , and the throw statement throws the object .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Creating Your Own Exception Classes .

Next , we illustrate how to create exception classes with members .

If you want to members in your exception class , you typically constructors and the function what .
Consider the following definition of the class divisionByZero .

The definition of the class divisionByZero contains two constructors : the default constructor and the constructor with parameters .
The default constructor stores the string by zero " in an object .
The constructor with parameters allows users to create their own error messages .
The function what used to return the string stored in the object .

In the definition of the class divisionByZero , the constructors can also be written .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : In this sample run , the user input is shaded .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Creating Your Own Exception Classes .

This thrown exception is caught and processed by the catch block in .
The parameter divByZeroObj in the catch block catches the value of the thrown object and then uses the function to return the string stored in the object .
The statement in outputs the appropriate error .

The program in Example is similar to the program in Example .
Here , the thrown object is still an anonymous object , but the error is specified by the user the statement in .

EXAMPLE Using exception class divisionByZero with .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : In this sample run , the user input is shaded .

The details are left as an exercise for you .

In the programs in Examples and , the data manipulation is done in the function main .
Therefore , the exception is thrown , caught , and processed in the function main .
The program in Example uses the function doDivision to manipulate the data .
Therefore , the exception is thrown , caught , and processed in the function doDivision .

EXAMPLE Handling an exception thrown by function .

Sample Run : In this sample run , the user input is shaded .

If circleType object tries to set the radius to negative number , then the function setRadius of this class sets the radius to .
In this example , first we define the class negativeNumber to handle negative number exceptions and then use this class to throw an exception if circleType object tries to set the radius to negative number .

So consider the following class : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Note that the definition of the class negativeNumber is similar to the definition of the class divisionByZero .

The definition of the class circleType is the same as in Example , except for the definition of function setRadius .
The modified definition of this function .

If the value of the parameter is negative number , the function setRadius throws negativeNumber object .
In this case , the value of the instance variable of the object thrown is cannot be .
The user program will handle the exception , if any , thrown by this function .

Consider the following program : user program that uses the class circleType .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Creating Your Own Exception Classes .

The statement in creates the circleType object circle and using the default constructor sets the to .
The statement in declares the double variable .
The block , between Lines and contains the code to prompt the user to enter the of the circle and depending on the value entered by the user generates the output .
For example , if the user enters nonnegative  the statement in sets the of the circle and the statement in outputs the   and the perimeter of the circle .
If the user enters negative number , the statement in throws an exception , which is negativeNumber object , and the catch block processes the exception .
In Sample Run , the user enters , nonnegative number , and the program outputs the   and the perimeter of the circle .
In Sample Run , the user enters , which is negative number , and the statement in outputs that the cannot be negative .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Typically , catch block either handles the exception or partially processes the exception and then rethrows the same exception , or it rethrows another exception in order for the calling environment to handle the exception .
The catch block in Examples through handles the exception .
The mechanism of rethrowing or throwing an exception is quite useful in cases in which catch block catches the exception but cannot handle the exception , or if the catch block decides that the exception should be handled by the calling block or environment .
This allows the programmer to provide the code all in one place .

To rethrow or throw an exception , we use the throw statement .
The general syntax to rethrow an exception caught by catch block is :

The object being thrown can be either specific object or an anonymous object .

function specifies the exceptions it throws be handled in its heading using the throw clause .
For example , the following function specifies that it throws exceptions of type int , string , and divisionByZero , in which divisionByZero is the class , as defined previously .

Creating Your Own Exception Classes .

Sample Run : In this sample run , the user input is shaded .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In this program , if the value of is , the statement in throws an exception of type divisionByZero , which is an anonymous object of this class , with the message string : The statement in , in the catch block , throws the same exception value , which in this case is an object .

In Sample Run , no exception is thrown .

Let us see happens in Sample Run .
The function main calls the function doDivision in the try block .
In the function doDivision , the value of is , so the statement in throws an exception .
The exception is caught by the catch block in .
The statement in rethrows the same exception .
In other words , the catch block catches and rethrows the same exception .
Therefore , the function call statement in results in throwing an exception .
This exception is caught and processed by the catch block in .

Sample Run : In this sample run , the user input is shaded .

This program works the same way as the program in Example .
The only difference is that here , the catch block in rethrows different exception value , that is , object .

The programs in Examples and illustrate how function can rethrow the same exception or throw another exception for the calling function to handle .
This mechanism is quite useful because it allows program to handle all of the exceptions in one location , rather than spread the code throughout the program .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The following sections discuss each of these situations .

Terminate the Program In some cases , it is best to let the program terminate when an exception occurs .
Suppose you have written program that inputs data from file .
If the input file does not exist when the program executes , then there is no point in continuing with the program .
In this case , the program can output an appropriate error message and terminate .

Fix the Error and Continue In other cases , you will want to handle the exception and let the program continue .

Suppose that you have program that takes as input an integer .
If user inputs letter in place of number , the input stream will enter the fail state .
This is situation in which you can the necessary code to keep prompting the user to input number until the entry is valid .
The program in Example illustrates this situation .

EXAMPLE Handle exceptions by fixing the errors .
The program continues to prompt the user until valid input is entered .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : In this sample run , the user input is shaded .

If the input is invalid , the standard input enters the fail state .
In the try block , the statement in throws an exception , which is string object .
Control passes to the catch block , and the exception is caught and processed .
The statement in restores the input to its good state , and the statement in clears the rest of the input from the line .

Log the Error and Continue The program that terminates when an exception occurs usually assumes that this termination is reasonably safe .
However , if your program is designed to run nuclear reactor or continuously monitor satellite , it cannot be terminated if an exception occurs .
These programs should report the exception , but the program must continue to run .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Because numerous ticketing transactions occur each day , program is run at the end of each day to validate that transactions .
This type of program would take an enormous amount of time to process the transactions and use exceptions to identify any erroneous entries .

Instead , when an exception occurs , the program should write the exception into file and continue to analyze the transactions .

Stack Unwinding The examples given in this chapter show how to catch and process an .
In particular , you learned how to catch and process an in the same block , as well as process the caught in the calling environment .

When an is thrown in , say , function , the function can do the .

Partially process the and throw the same or new .

In each of these cases , the function call stack is unwound so that the can be caught in the next block .
When the function call stack is unwound , the function in which the was not caught rethrown terminates , and the memory for its local variables is destroyed .
The stack unwinding continues until either handles the or the program does not handle the .
If the program does not handle the  then the function terminate is called to terminate the program .

Examples and illustrate how the exceptions are propagated .
For this , let us define the following class : myException class .

Stack Unwinding .

The program in Example illustrates how exceptions thrown in function get processed in the calling environment .

EXAMPLE Processing exceptions thrown by function in the calling .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Exception generated in function .

In this program , the function calls functionA , functionA calls functionB , and functionB calls functionC .
The function functionC creates and throws an of type myException .
The functions functionA and functionB do not process the thrown by functionC .

The function calls functionA in the try block and catches the thrown by functionC .
The parameter me in the catch block heading catches the value of the and then uses the function to return the string stored in that object .
The output statement in the catch block outputs the appropriate .

The program in Example is similar to the program in Example .
Here , the is caught and processed by the immediate calling environment .

Quick Review .

Exception generated in functionC .

In this program , the is caught and processed by .
Even though the function contains the block , the try block does not throw any exceptions because the thrown by functionC is caught and processed by .

QUICK REVIEW .

An is an occurrence of an undesirable situation that can be detected during program execution .

Some typical ways of dealing with exceptions are to use an if statement or the assert function .

The function assert can check whether an expression meets the required .
If the conditions are not met , it terminates the program .

The block is used to handle exceptions within program .

Statements that may generate an are placed in try block .
The try block also contains statements that should not be executed if an occurs .

The try block is followed by one or more catch blocks .

catch block specifies the type of it can catch and contains an handler .

If the heading of catch block in place of parameters , then this catch block can catch exceptions of all types .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

If an exception is thrown in try block , the remaining statements in the try block are ignored .
The program searches the catch blocks , in the order they appear after the try block , and looks for an appropriate exception handler .
If the type of the thrown exception matches the parameter type in one of the catch blocks , then the code in that catch block executes and the remaining catch blocks after this catch block are ignored .

The data type of the catch block parameter specifies the type of exception that the catch block can catch .

catch block can have , at most , one catch block parameter .

If only the data type is specified in catch block heading , that is , if there is no catch block parameter , then the thrown value may not be accessible in the catch block code .

In order for an exception to occur in try block and be caught by catch block , the exception must be thrown in the try block .

The general syntax to throw an exception is : throw expression ;

The object being thrown can be either specific object or an anonymous object .

provides support to handle exceptions via hierarchy of classes .

The class exception is the base class of the exception classes provided by .

The function returns the string containing the exception object thrown by exception classes .

The class exception is contained in the header file exception .

The two classes that are immediately derived from the class exception are and .
Both of these classes are defined in the header file stdexcept .

The class is designed to deal with illegal arguments used in function call .

The class out_of_range deals with the string subscript out_of_range error .

If length greater than the maximum allowed for string object is used , the class deals with this error .

If the operator new allocate memory space , this operator throws exception .

The class is designed to deal with errors that can be detected only during program execution .
For example , to deal with arithmetic Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

catch block typically handles the exception or partially processes the exception and then either rethrows the same exception or rethrows another exception in order for the calling environment to handle the exception .

enables programmers to create their own exception classes to handle both the exceptions not covered by exception classes and their own exceptions .

uses the same mechanism to process the exceptions you define as it uses for exceptions .
However , you must throw your own exceptions using the throw statement .

In , any class can be considered an exception class .
It need not be inherited from the class exception .
What makes class an exception is how it is used .

The general syntax to rethrow an exception caught by catch block is :

The object being thrown can be either specific object or an anonymous object .

function specifies the exceptions it throws in its heading using the throw clause .

When an is thrown in function , the function can do the following : do nothing , partially process the and throw the same or new  or throw new .
In each of these cases , the function call stack is unwound so that the can be caught in the next block .
The stack unwinding continues until catch handles the or the program does not handle the .

If the program does not handle the  then the function terminate is called to terminate the program .

EXERCISES The number in parentheses at the end of an exercise refers to the learning objective listed at the beginning of the chapter .

Mark the following statements as true or false .

Division by zero is an while opening an input file that does Suppose you use the assert function to check if certain conditions are met .
If the conditions are not met , then the assert function One way to handle an is to print an error message and exit Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

If an is thrown in try block , the remaining statements in .
The class deals with the string subscript out_of_range
An can be caught either in the function where it occurred , or .
When the function call stack is unwound , the function in which the was not caught terminates , but the memory for its local What happens if in catch block heading only the data type is specified , that is ,

In this code , identify the try .

In this code , identify the catch .

In this code , identify the catch parameter and its type .

In this code , identify the throw statement .

What is the output if the input is .

What is the output if the input is .

What is the output if the input is .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

What is the output if : The value of lowerLimit is .

The value of lowerLimit is .

The value of lowerLimit is , and the value of is .

The value of lowerLimit is , and the value of is .

The value of lowerLimit is , and the value of is .

If you define your own exception class , is typically included in that Define an exception class called tornadoException .
The class should have two constructors , including the default constructor .
If the exception is thrown with the default constructor , the method should return : Take cover .
The other constructor has single parameter , say , of the int type .
If the exception is thrown with this constructor , the method Write program to test the class tornadoException specified in .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

What output will be produced if the exception is thrown with the default constructor .
Also , output will be produced if the exception is thrown with the constructor with parameters with the following actual parameter .

Suppose an exception is thrown in function .
What are the three things the PROGRAMMING EXERCISES .

Write program that prompts the user to enter length in feet and inches and outputs the equivalent length in centimeters .
If the user enters negative number or nondigit number , throw and handle an appropriate exception and prompt the user to enter another set of numbers .

Redo Programming Exercise of Chapter so that your program handles exceptions such as division by zero and invalid input .

Redo Programming Exercise of Chapter so that your program handles exceptions such as division by zero and invalid input .

Write program that prompts the user to enter time in notation .

The program then outputs the time in notation .
Your program must contain three exception classes : invalidHr , invalidMin , and invalidSec .
If the user enters an invalid value for hours , then the program should throw and catch an invalidHr object .
Similar conventions for the invalid values of minutes and seconds .

Write program that prompts the user to enter date of birth in numeric form such as .
The program then outputs the date of birth in the form : August ,
Your program must contain at least two exception classes : invalidDay and invalidMonth .
If the user enters an invalid value for day , then the program should throw and catch an invalidDay object .
Similar conventions for the invalid values of month Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Become aware of recursion vs .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

For certain problems , however , using the iterative technique to obtain the solution is quite complicated .
This chapter introduces another technique called recursion and provides several examples demonstrating how recursion works .

Recursive Definitions The process of solving problem by reducing it to smaller versions of itself is called recursion .

Recursion is very powerful way to solve certain problems for which the solution would otherwise be very complicated .
Let us consider problem that is familiar to most everyone .

In mathematics , the factorial of nonnegative integer is defined as follows :

To find , we apply the definition again .
If , then we use Equation ; otherwise , we use Equation .
Thus , for an integer greater than .

Let us apply this definition to find .
Because , we use Equation to obtain :

Next , we find .
Because , we use Equation to obtain :

Now , to find , we again use Equation because .

Finally , we use Equation to find , which is .

The solution in Equation is is , the right side of the equation contains no factorial notation .
The solution in Equation is given in terms of smaller version of itself .
The definition of the factorial given in Equations and is called recursive definition .
Equation is called the base case is , the case for which the solution is obtained ; Equation is called the general case .

Recursive definition : definition in which something is defined in terms of smaller version of itself .

From the previous example , it is clear that :
Every recursive definition must have one base cases .

The general case must eventually be reduced to base case .

The base case stops the recursion .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

An algorithm that finds the solution to given problem by reducing the problem to smaller versions of itself is called recursive algorithm .
The recursive algorithm must have one or more base cases , and the general solution must eventually be reduced to base case .

function that calls itself is called recursive function .
That is , the body of the recursive function contains statement that causes the same function to execute again before completing the current call .
Recursive algorithms are implemented using recursive functions .

Next , let us write the recursive function that implements the factorial function .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Let us note the following from the preceding example , involving the factorial function .

Logically , you can think of recursive function as having an unlimited number of copies of itself .

Every call to recursive is , every recursive its own code and its own set of parameters and local variables .

After completing particular recursive call , control goes back to the call must execute completely before control goes back to the previous call .
The execution in the previous call begins from the point immediately following the recursive call .

Direct and Indirect Recursion function is called directly recursive if it calls itself .
function that calls another function and eventually results in the original function call is said to be indirectly recursive .
For example , if function calls function and function calls function , then function is indirectly recursive .
Indirect recursion can be several layers deep .
For example , suppose that function calls function , function calls function , function calls function , and function calls function .
Function is then indirectly recursive .

Indirect recursion requires the same careful analysis as direct recursion .
The base cases must be identified , and appropriate solutions to them must be provided .
However , tracing through indirect recursion can be tedious .
You must , therefore , exercise extra care when designing indirect recursive functions .
For simplicity , the problems in this book involve only direct recursion .

recursive function in which the last statement executed is the recursive call is called tail recursive function .
The function is an example of tail recursive function .

Infinite Recursion Figure shows that the sequence of recursive calls eventually reached call that made no further recursive calls .
That is , the sequence of recursive calls eventually reached base case .
On the other hand , if every recursive call results in another recursive call , then the recursive function is said to have infinite recursion .
In theory , infinite recursion executes forever .
Every call to recursive function requires the system to allocate memory for the local variables and formal parameters .
The system also saves this information so that after completing call , control can be transferred back to the right caller .
Therefore , because computer memory is finite , if you execute an infinite recursive Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Problem Solving Using Recursion function on computer , the function executes until the system runs out of memory and results in an abnormal termination of the program .

Recursive functions must be carefully designed and analyzed .
You must make sure that every recursive call eventually reduces to base case .
This chapter provides several examples that illustrate how to design and implement recursive algorithms .

To design recursive function , you must do the following :
Understand the problem requirements .

Determine the limiting conditions .
For example , for list , the limiting condition is the number of elements in the list .

Identify the base cases and provide direct solution to each base case .

Identify the general cases and provide solution to each general case in terms of smaller versions of itself .

Problem Solving Using Recursion Examples through illustrate how recursive algorithms are developed and implemented in using recursive functions .

: In Chapter , we used loop to find the largest element in an array .
In this example , we use recursive algorithm to find the largest element in an array .
Consider the list given in Figure .

Suppose list is the name of the array containing the list elements .
Also , suppose that stands for the array elements , + and .
For example , represents the array elements , and .
Similarly , represents the array elements , and .
To write recursive algorithm to find the largest element in list , let us think in terms of recursion .

If list is of length , then list has only one element , which is the largest element .

Suppose the length of list is greater than .
To find the largest element in Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

That is , the largest element in is given .

That is , the largest element in list is the maximum of and the largest element in .
To find the largest element in , we use the same formula again because the length of this list is greater than .
The largest element in is then : and so on .
We see that every time we use the preceding formula to find the largest element in sublist , the length of the sublist in the next call is reduced by one .

Eventually , the sublist is of length , in which case the sublist contains only one element , which is the largest element in the sublist .
From this point onward , we backtrack through the recursive calls .
This discussion translates into the following recursive algorithm , which is presented in pseudocode : Base Case : The size of the list is The only element in the list is the largest element General Case : The size of the list is greater than To find the largest element in Find the largest element in + and call it max .
Compare the elements and max the largest element in is otherwise the largest element in is max This algorithm translates into the following function to find the largest element in .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Problem Solving Using Recursion .

The following program uses the function largest to determine the largest element in .

The largest element in  Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Problem Solving Using Recursion : In Chapter , we designed program to determine the desired Fibonacci number .
In this example , we write recursive function , rFibNum , to determine the desired Fibonacci number .
The function rFibNum takes as parameters three numbers representing the first two numbers of the Fibonacci sequence and number , the desired nth Fibonacci number .
The function rFibNum returns the nth Fibonacci number in the sequence .

Recall that the third Fibonacci number is the sum of the first two Fibonacci numbers .

The fourth Fibonacci number in sequence is the sum of the second and third Fibonacci numbers .
Therefore , to calculate the fourth Fibonacci number , we add the second Fibonacci number and the third Fibonacci number is itself the sum of the first two Fibonacci .
The following recursive algorithm calculates the nth Fibonacci number , in which denotes the first Fibonacci number , the second Fibonacci number , and the nth Fibonacci number .

That is , we want to determine the fourth Fibonacci .

Next , we determine , and ,

To find , note that , and .

Therefore , by the definition given in Equation .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In this statement , the first number is , the second number is , and we want to determine the fifth Fibonacci number of the sequence .
Figure traces the execution of the expression .
The value returned is , which is the fifth Fibonacci number of the sequence whose first number is and second number is .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Problem Solving Using Recursion .

Sample Runs : In these sample runs , the user input shaded .

Sample Run Enter the first Fibonacci number : Enter the second Fibonacci number : Enter the position of the desired Fibonacci number : The Fibonacci number at position  Sample Run Enter the first Fibonacci number : Enter the second Fibonacci number : Enter the position of the desired Fibonacci number : The Fibonacci number at position  Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Problem Solving Using Recursion : In the nineteenth century , game called the Tower of Hanoi became popular in Europe .

This game represents work that under way in the temple of Brahma .
At the creation of the universe , priests in the temple of Brahma were supposedly given three diamond needles , with one needle containing golden disks .
Each golden disk slightly smaller than the disk below it .
The priests ' task to move all disks from the first needle to the third needle .
The rules for moving the disks are as follows :
Only one disk can be moved at time .

The removed disk must be placed on one of the needles .

larger disk cannot be placed on top of smaller disk .

The priests were told that once they had moved all of the disks from the first needle to the third needle , the universe would come to an end .

Our objective to write program that prints the sequence of moves needed to transfer the disks from the first needle to the third needle .
Figure shows the Tower of Hanoi problem with three disks .

Let us first consider the case in which the first needle contains only one disk .
In this case , the disk can be moved directly from needle to needle .
So let us consider the case in which the first needle contains only two disks .
In this case , first we move the first disk from needle to needle , and then we move the second disk from needle to needle .
Finally , we move the first disk from needle to needle .
Next , we consider the case in which the first needle contains three disks and then generalize this to the case of disks fact , to an arbitrary number of .

Suppose that needle contains three disks .
To move disk number to needle , the top two disks must first be moved to needle .
Disk number can then be moved from needle to needle .
To move the top two disks from needle to needle , we use the same strategy as before .
This time , we use needle as the intermediate needle .
Figure shows solution to the Tower of Hanoi problem with three disks .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Solution to Tower of Hanoi problem with three disks Let us now generalize this problem to the case of disks .
To begin , the first needle contains all disks .
Disk number cannot be moved from needle to needle unless the top disks are on the second needle .
So first , we move the top disks from needle to needle , and then we move disk number from needle to needle .
Now the top disks are all on needle .
To move disk number from needle to needle , we first move the top disks from needle to needle , and then we move disk number from needle to needle .
To move the remaining disks , we use similar procedure .
This discussion translates into the following recursive algorithm given in pseudocode .
Suppose that needle contains disks , in which .

Move the top disks from needle to needle , using needle as the intermediate needle .

Move disk number from needle to needle .

Move the top disks from needle to needle , using needle as the intermediate needle .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Recursion or Iteration .

Tower of Hanoi : Analysis Let us determine how long it would take move all disks from .

If contains three disks , then the number of moves required move all three disks from .
Similarly , if contains disks , then the number of moves required move all disks from .

Because  we have : The number of seconds in one year approximately .
Suppose the priests move one disk per second and they do not rest .
Now : The time required move all disks from roughly years .
It estimated that our universe about billion years old .

This calculation shows that our universe would last about times as long as it already has .

Assume that computer can generate billion moves per second .
Then the number of moves that the computer can generate in one year  So the computer time required generate moves  Thus , it would take about years for the computer generate moves at the rate of billion moves per second .

Recursion or Iteration .

In Chapter , we designed program determine desired Fibonacci number .
That program used loop perform the calculation .
In other words , the programs in Chapter used an iterative control structure repeat set of statements .
More formally , iterative Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right remove additional content at any time if subsequent rights restrictions require it .

In Example , we designed recursive function calculate Fibonacci number .
From the examples here , it follows that in recursion , set of statements repeated by having the function call itself .
Moreover , selection control structure used control the repeated calls in recursion .

Similarly , in Chapter , we used an iterative control structure for determine the largest element in list .
In this chapter , we use recursion determine the largest element in list .
In addition , this chapter began by designing recursive function find the factorial of nonnegative integer .
Using an iterative control structure , we can also write an algorithm find the factorial of nonnegative integer .
The only reason give recursive solution factorial problem illustrate how recursion works .

We thus see that there are usually two ways solve particular and recursion .
The obvious question which method or recursion .
There no simple answer .
In addition the nature of the problem , the other key factor in determining the best solution method efficiency .

Example , while tracing the execution of the problem , showed us that local variables allocated .
When the function terminates , that memory space then deallocated .

This chapter , while tracing the execution of recursive functions , also shows us that every call has its own set of parameters and local variables .
That  every call requires the system allocate memory space for its formal parameters and local variables and then deallocate the memory space when function both in terms of memory space and computer time .
Therefore , recursive function executes more slowly than its iterative counterpart .
On slower computers , especially those with limited memory space , the execution of recursive function would be visible .

computers , however , are fast and have inexpensive memory .
Therefore , the execution of recursion function not noticeable .
Keeping the power of computers in mind , the choice between the two or depends on the nature of the problem .
Of course , for problems such as mission control systems , efficiency absolutely critical and , therefore , the efficiency factor would dictate the solution method .

As general rule , if you think that an iterative solution more obvious and easier understand than recursive solution , use the iterative solution , which would be more efficient .
On the other hand , problems exist for which the recursive solution more obvious or easier construct , such as the Tower of Hanoi problem .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Converting Number from Binary Decimal PROGRAMMING EXAMPLE : Watch the Video Converting Number from Binary Decimal In Chapter , we explained that the language of computer , called machine language , sequence of and .
When you press the key on the keyboard , stored in the computer .
Also , you know that the collating sequence of in the ASCII character set .
In fact , the binary representation of , and the decimal representation of .

The numbering system we use called the decimal system , or base system .
The numbering system that the computer uses called the binary system , or base system .
In this and the next programming example , we discuss how convert number from base base and from base base .

Binary To convert number from base base , we first find the weight of each bit in Decimal the binary number .
The weight of each bit in the binary number assigned from right left .
The weight of the rightmost bit .
The weight of the bit immediately the left of the rightmost bit , the weight of the bit immediately the left of it , and so on .
Consider the binary number .
The weight of each bit as follows : Weight We use the weight of each bit to find the equivalent decimal number .
For each bit , we multiply the bit by to the power of its weight and then we add all of the numbers .
For the above binary number , the equivalent decimal number is : To write program that converts binary number into the equivalent decimal number , we note two things : the weight of each bit in the binary number must be known , and the weight is assigned from right to left .
Because we do not know in advance how many bits are in the binary number , we must process the bits from right to left .
After processing bit , we can add to its weight , giving the weight of the bit immediately to the left of it .
Also , each bit must be extracted from the binary number and multiplied by to the power of its weight .
To extract bit , we can use the mod operator .
Consider the following recursive algorithm , which is given in pseudocode : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

This algorithm assumes that the memory locations and weight have been .

In this function , both and weight are reference parameters .
The actual parameters corresponding to these parameters are initialized to .
After extracting the rightmost  this function updates the number and the weight of the next Suppose and are int variables .
Consider the following .

It shows the content of the variables and next to each function call .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Converting Number from Binary to Decimal .

FIGURE because is the if statement fails and this .

Execution of ,  In Figure , each down arrow represents the successive function call .
Because the last statement of the function binToDec is function call , after this statement executes , nothing happens .
After the statement : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Converting Number from Decimal to .

Enter number in binary : PROGRAMMING EXAMPLE : Converting Number from Decimal to The previous programming example discussed and designed program to convert number from binary representation to is , from base to base .
This programming example discusses and designs program that uses recursion to convert nonnegative integer in is , base the equivalent binary is , base .
First , we define some terms .

Let be an integer .
We call the remainder of after division by the rightmost of .

Thus , the rightmost of is because is , and the rightmost of is because is .

We first illustrate the algorithm to convert an integer in base to the equivalent number in binary format , with the help of an example .

Suppose we want to find the binary representation of .
First , we divide by .
The quotient is , and the is , the rightmost of .
Next , we divide by .
The quotient is , and the is , the rightmost of is .
Next , we divide by .
The quotient is , and the is , the rightmost of .
We continue this process until the quotient becomes .

The rightmost of cannot be printed until we have printed the rightmost of .
The rightmost of cannot be printed until we have printed the rightmost of , and so on .
Thus , the binary representation of is the binary representation of is , the quotient of after division by , followed by the rightmost of .

Thus , to convert an integer num in base into the equivalent binary number , we first convert the quotient num into an equivalent binary number and then append the rightmost of num to the binary representation of num .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Converting Number from Decimal to .

The first output is produced by call , which prints ; the second output is produced by call , which prints ; the third output is produced by call , which prints ; and the fourth output is produced by call , which prints .
Thus , the output of the statement :

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Enter number in  QUICK REVIEW .

The process of solving problem by reducing it to smaller versions of itself is called recursion .

recursive definition defines problem in terms of smaller versions of itself .

Every recursive definition has one or more cases .

recursive algorithm solves problem by reducing it to smaller versions of itself .

Every recursive algorithm has one or more cases .

The solution to the problem in case is obtained directly .

function is called recursive if it calls itself .

Recursive algorithms are implemented using recursive functions .

Every recursive function must have one or more cases .

The general solution breaks the problem into smaller versions of itself .

The general case must eventually be reduced to case .

The case stops the recursion .

While tracing recursive .

Logically , you can think of recursive function as having an unlimited number of copies of itself .

Every call to recursive is , every recursive its own code and its own set of parameters and local variables .

After completing particular recursive call , control goes back to the call must execute completely before control goes back to the previous call .
The execution in the previous call begins from the point immediately following the recursive call .

function is called directly recursive if it calls itself .

function that calls another function and eventually results in the original function call is said to be indirectly recursive .

recursive function in which the last statement executed is the recursive call is called tail recursive function .

To design recursive function , you must do the following :

Understand the problem requirements .

Determine the limiting conditions .
For example , for list , the limiting condition is the number of elements in the list .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Identify the general cases and provide solution to each general case in terms of smaller versions of itself .

EXERCISES The number in parentheses at the end of an exercise refers to the learning objective listed at the beginning of the chapter .

Mark the following statements as true or false .

recursive solution of problem reduces the problem into smaller .
It is not necessary for recursive function to have case because .

Every call to recursive function has its own code and its own set of .

Identify the general case .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Identify the base case .

Identify the general case .

What is the output of the following statement .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Suppose intArray is an array of integers , and specifies the number of elements in intArray .
Also , suppose low and high are two integers such low  high  and low high .
That is , low and high are two indices in intArray .
Write recursive definition reverses the elements in intArray between low Write recursive algorithm to multiply two positive integers and using Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

There are many other similar problems in which you are asked to find the number of ways to select set of items from given set of items .
The general problem can be stated as follows : Find the number of ways different things can be chosen from set of items , in which and are nonnegative integers and .
Suppose , denotes the number of ways different things can be chosen from set of items .
Then , is given by the following .

Write recursive function takes as parameter nonnegative integer and generates the following pattern of stars .
If the nonnegative integer is , then the pattern generated is :

Also , write program prompts the user to enter the number of lines in the pattern and uses the recursive function to generate the pattern .
For example , specifying as the number of lines generates the above pattern .

Write recursive function to generate the following pattern of stars : Also , write program prompts the user to enter the number of lines in the pattern and uses the recursive function to generate the pattern .
For example , specifying as the number of lines generates the above pattern .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Also , write program to your function .

Write recursive function named sumSquares returns the sum of the squares of the numbers from to num , in which num is nonnegative int variable .

Also write program to your function .

Write recursive function finds and returns the sum of the elements of an int array .
Also , write program to your function .

palindrome is string reads the same both forward and backward .
For example , the string " is palindrome .
Write program uses recursive function to check whether string is palindrome .
Your program must contain recursive function returns true if the string is palindrome and false otherwise .

Write recursive function returns both the smallest and the largest element in an int array .
Also , write program to your function .

Write recursive function returns true if the digits of positive integer are in increasing order ; otherwise , the function returns false .
Also , write program to your function .

Write recursive function , reverseDigits , takes an integer as parameter and returns the number with the digits reversed .
Also , write program to your function .

Write recursive function , sumDigits , takes an integer as parameter and returns the sum of the digits of the integer .
Also , write program to test your function .

Write recursive function , power , that takes as parameters two integers and such that is nonzero and returns xy .
You can use the following recursive definition to calculate xy .
If : if powerðx ; yÞ if  powerðx ; if : If :  powerðx ; yÞ powerðx ; Also , write program to test your function .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Also , write program to test your function .

Write recursive function to implement function .
Also write program to test your function .

What happens when you call the function with and .

Write recursive function to implement the recursive algorithm of Exercise the elements of an array between two .
Also , write program to test your function .

Write recursive function to implement the recursive algorithm of Exercise two positive integers using repeated .
Also , write program to test your function .

Write recursive function to implement the recursive algorithm of Exercise the number of ways to select set of things from given set of .
Also , write program to test your function .

Write and implement recursive version of the sequential search algorithm .

In the Programming Example , Converting Number from Decimal to Binary , given in this chapter , you learned how to convert decimal number into the equivalent binary number .
Two more number systems , octal and hexadecimal , are of interest to computer scientists .
In fact , in , you can instruct the computer to store number in octal or hexadecimal .

The digits in the octal number system are ,
The digits in the hexadecimal number system are ,
So in hexadecimal is in decimal , in hexadecimal is in decimal , so on .

The algorithm to convert positive decimal number into an equivalent number in octal is the same as discussed for binary numbers .
Here , we divide the decimal number by by .
Suppose ab represents the number to the base .
For example , means to the base is , means to the base is ,

Write program that uses recursive function to convert number in decimal to base or base .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Using method , you can also write an algorithm to find the square root of nonnegative real number within given tolerance as follows : Suppose is nonnegative real number , is the approximate square root of , epsilon is the tolerance .
Start with .

If epsilon , then is the square root of within the tolerance ; otherwise : Replace with + repeat Step in which denotes the absolute value of .

Write recursive function to implement this algorithm to find the square root of nonnegative real number .
Also , write program to test your function .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Become familiar with circular linked lists Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

You have performed several operations on sequential lists , such as sorting , inserting , deleting , searching .
You also found that if data is not sorted , then searching for an item in the list can be very time consuming especially with large lists .

Once the data is sorted , you can use binary search improve the search algorithm .

However , in this case , insertion deletion become time consuming especially with large lists , because these operations require data movement .
Also , because the array size must be fixed during execution , new can be added only if there is room .
Thus , there are limitations when you organize data in an array .

This chapter helps you to overcome some of these problems .
Chapter showed how memory can be dynamically allocated deallocated using pointers .
This chapter uses pointers to organize process data in lists called linked lists .
Recall that when data is stored in an array , memory for the components of the array is that is , the blocks are allocated one after the other .
However , as we will see , the components of linked list need not be contiguous .

Linked Lists contains the address of the next node .
Thus , every node in linked list has two components : one to store the relevant information is , one to store the address , called the link , of the next node in the list .
The address of the first node in the list is stored in separate location called the head or first .
Figure is pictorial representation of node .

Structure of node Linked list : list of  called nodes , in which the order of the nodes is determined by the address , called the link , stored in each node .

The list in Figure is an example of linked list .

Linked list The arrow in each node indicates that the address of the node to which it is pointing is stored in that node .
The down arrow in the last node indicates that this link field is nullptr .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Linked list and values of the links The value of the head is , the data part of the first node is , and the link component of the first node contains , the address of the second node .
If no confusion arises , then we will use the arrow notation whenever we draw the figure of linked list .

For simplicity and for the ease of understanding and clarity , Figures through use decimal integers as the values of memory addresses .
However , in computer memory , the memory addresses are in binary .

Because each node of linked list has two components , we need to declare each node as class or struct .
The data type of each node depends on the specific is , what kind of data is being processed .
However , the link component of each node is pointer .
The data type of this pointer variable is the node type itself .
For the previous struct nodeType .

Linked Lists : Some Properties To help you better understand the concept of linked list and node , some important properties of linked lists are described next .

Consider the linked list in Figure .

Linked list with four nodes Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The address of the first node is stored in the pointer head .

Each node has two components : info , to store the info , and link , to store the address of the next node .
For simplicity , we assume that info is of type int .

Suppose that the first node is at location , the second node is at location , the third node is at location , and the fourth node is at location .
Therefore , the value of head is , the value of the component link of the first node is , the value of the component link of the second node is , and so on .
Also , the down arrow in the component link of the last node indicates that this value is nullptr .
The number at the top of each node is the address of that node .
The following table shows the values of head and some other nodes in the list shown in Figure .

Value head .

Linked list after the statement head ; executes Clearly , in Figure : Value Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Therefore , after this statement executes , points to the second node in the list .

In Figure : Value Finally , note that in Figure : Value nullptr Does not exist From now on , when working with linked lists , we will use only the arrow notation .

TRAVERSING LINKED LIST The basic operations of linked list are as follows : search the list to determine whether particular item is in the list , insert an item in the list , and delete an item from the list .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

That is , given pointer to the first node of the list , we must step through the nodes of the list .

Suppose that the pointer head points to the first node in the list , and the link of the last node is nullptr .
We cannot use the pointer head to traverse the list because if we use head to traverse the list , we would lose the nodes of the list .
This problem occurs because the links are in only one direction .
The pointer head contains the address of the first node , the first node contains the address of the second node , the second node contains the address of the third node , and so on .
If we move head to the second node , the first node is lost we save pointer to this .
If we keep advancing head to the next node , we will lose all of the nodes of the list we save pointer to each node before advancing head , which is impractical because it would require additional computer time and memory space to maintain the .

Therefore , we always want head to point to the first node .
It now follows that we must traverse the list using another pointer of the same type .
Suppose that is pointer of the same type as head .
The following code traverses the list :

ITEM INSERTION AND DELETION This section discusses how to insert an item into , and delete an item from , linked list .

Consider the following definition of node .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Linked list before item insertion .

Inserting Node in Linked List Statement Effect head .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Suppose that we reverse the sequence of the statements and execute the statements in the following order :

Using two pointers , we can simplify the insertion code somewhat .
Suppose points to the with info Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Statement Effect head .

Node to be deleted is with info .

List after the statement ; executes From Figure , it is clear that the node with info is removed from the list .

However , the memory is still occupied by this node , and this memory is inaccessible ; that is , this node is dangling .
To deallocate the memory , we need pointer to this node .
The Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Deleting Node from Linked List Statement Effect head .

First , we consider linked list in general .
If the data we read is unsorted , the linked list will be unsorted .
Such list can be built in two ways : forward and backward .
In the forward manner , new is always inserted at the end of the linked list .
In the backward manner , new is always inserted at the beginning of the list .
We will consider both cases .

BUILDING LINKED LIST FORWARD Suppose that the nodes are in the usual form , and info is of type int .
Let us assume that we process the following data : We need three pointers to build the list : one to point to the first in the list , which cannot be moved ; one to point to the last in the list ; and one to create the new .

Next , consider the following statements :

Initially , both and are nullptr .

Therefore , we have the list as shown in Figure .

FIGURE Empty list After statement executes , num is .
Statement creates and stores the address of that in .
Statement stores in the info field of  and statement stores nullptr in the link field of Figure .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Figure shows the resulting list .

List after inserting in it We now repeat statements through .
After statement executes , num is .
Statement creates and stores the address of this in .
Statement stores in the info field of  and statement assigns nullptr to the link field of Figure .

List and with info Because is not nullptr , we execute statements and .
Figure shows the resulting list .

List after inserting at the end We now repeat statements through three more times .
Figure shows the resulting list .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

List after inserting , and To build the linked list , we can put the previous statements in loop and execute the loop until certain conditions are met .
We can , in fact , write function to build linked list .

Suppose that we read list of integers ending with .
The following function , buildListForward , builds linked list forward and returns the pointer of the built .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

For the previously given , and linked list is as shown in Figure .

List after building it backward Because the new is always inserted at the beginning of the list , we do not need to know the end of the list , so the pointer is not needed .
Also , after inserting the new at the beginning , the new becomes the in the list .
Thus , we need to update the value of the pointer to correctly point to the in the list .
We see , then , that we need only two pointers to build the linked list : one to point to the list and one to create the new .
Because initially the list is empty , the pointer must be initialized to nullptr .
In pseudocode , the algorithm is :
Initialize to nullptr .

For each item in the list ,

Store the item in .

Update the value of the pointer .

The following function builds the linked list backward and returns the pointer of .

Linked List as an ADT The previous sections taught you the basic properties of linked lists and how to construct and manipulate them .
Because linked list is very important data structure , rather than discuss specific lists such as list of integers or list of strings , this section discusses linked lists as an abstract data type .
Using templates , this section gives generic definition of linked lists , which is then used in the next section and later in this book .
The programming example at the end of this chapter also uses this generic definition of linked lists .

The basic operations on linked lists are :

Initialize the list .

Determine whether the list is empty .

Print the list .

Find the length of the list .

Destroy the list .

Retrieve the info contained in the .

Retrieve the info contained in the .

Search the list for given item .

Insert an item in the list .

Delete an item from the list .

Make copy of the linked list .

In general , there are two types of linked lists , whose elements are arranged according to some criteria , and unsorted lists , whose elements are in no particular order .

The algorithms to implement the operations search , insert , and remove slightly differ for sorted and unsorted lists .
Therefore , we will define the class linkedListType to implement the basic operations on linked list as an abstract class .
Using the principle of inheritance , we , in fact , will derive two and the class linkedListType .

Objects of the class unorderedLinkedList would arrange list elements in no particular order , that is , these lists may not be sorted .
On the other hand , objects of the class orderedLinkedList would arrange elements according to some comparison criteria , usually less than or equal to .
That is , these lists will be in ascending order .
Moreover , after Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

If linked list is unordered , we can insert new at either the end or the beginning .
Furthermore , you can build such list in either forward manner or backward manner .
The function buildListForward inserts the new at the end , whereas the function buildListBackward inserts the new at the beginning .
To accommodate both operations , we will write two functions : insertFirst to insert the new at the beginning of the list and insertLast to insert the new at the end of the list .
Also , to make the algorithms more efficient , we will use two pointers in the list :  which points to the in the list , and last , which points to the last in the list .

Structure of Linked List Nodes Recall that each of linked list must store the data as well as the address for the next in the list the last of the .
Therefore , the has two member variables .
To simplify operations such as insert and delete , we define the class to implement the of linked list as struct .
The definition of the struct is : of the template .

Exercise , at the end of this chapter , asks you to redefine the class to implement the nodes of linked list so that the member variables of the class are private .

Member Variables of the class linkedListType To maintain linked list , we use two pointers : and last .
The pointer points to the in the list , and last points to the last in the list .
We also keep count of the number of nodes in the list .
Therefore , the class linkedListType has three member variables , as follows : protected : int .

Linked List as an ADT .

This requires the list to be traversed , starting at the node .
Moreover , specific application requires each node to be processed in very specific way .
common technique to accomplish this is to provide an iterator .

An iterator is an object that produces each element of container , such as linked list , one element at time .

The two most common operations on iterators are increment and dereferenceing .
The increment operator advances the iterator to the next node in the list , and the dereferencing operator returns the info of the node .

Note that an iterator is an object .
So we need to define class , which we will call linkedListIterator , to create iterators to objects of the class linkedListType .

The iterator class would have one member variable pointing to node .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Figure shows the UML class diagram of the class .

UML class diagram of the class .

Linked List as an ADT .

Now that we have defined the classes to implement the node of linked list and an iterator to linked list , next we describe the class to implement the basic properties of linked list .

The following abstract class defines the basic properties of linked list as an ADT : template class .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Linked List as an ADT .

Figure shows the UML class diagram of the class .

UML class diagram of the class Note that typically , in the UML diagram , the name of an abstract class and abstract function is shown in italics .

The instance variables and  as defined earlier , of the class are protected , not private , because as noted previously , we will derive the classes unorderedLinkedList and orderedLinkedList from the class .
Because each of the classes unorderedLinkedList Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The definition of the class includes member function to overload the assignment .
For classes that include pointer data members , the assignment must be explicitly overloaded Chapters and .
For the same reason , the definition of the class also includes copy constructor .

Notice that the definition of the class contains the member function copyList , which is declared as private member .
This is due to the fact that this function is used only to implement the copy constructor and overload the assignment .

Next , we write the definitions of the nonabstract functions of the class LinkedListClass .

The is empty if is nullptr .
Therefore , the definition of the function isEmptyList to implement this operation is as follows : template .

DEFAULT CONSTRUCTOR The default constructor ,  is quite straightforward .
It simply initializes the to an empty state .
Recall that when an object of the type is declared and no value is passed , the default constructor is executed automatically .

DESTROY THE LIST The function destroyList deallocates the memory occupied by each node .
We traverse the starting from the node and deallocate the memory by calling the delete .
We need temporary pointer to deallocate the memory .
Once the entire is destroyed , we must set the pointers and to nullptr and to .

Linked List as an ADT .

INITIALIZE THE LIST The function initializeList initializes the to an empty state .
Note that the default constructor or the copy constructor has already initialized the when the object was declared .
This operation , in fact , reinitializes the to an empty state , so it must delete the nodes from the .
This task can be accomplished by using the destroyList operation , which also resets the pointers and to nullptr and sets to .

Print the List The member function print prints the data contained in each node .
To do so , we must traverse the list , starting at the node .
Because the pointer always points to the node in the list , we need another pointer to traverse the list .

The length of linked list is , how many nodes are in the is stored in the variable Therefore , this function returns the value of this variable : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Retrieve the Data of the First Node The function front returns the info contained in the node , and its definition is straightforward : template .

Notice that if the list is empty , the assert statement terminates the program .
Therefore , before calling this function , check to see whether the list is nonempty .

Retrieve the Data of the Last Node The function back returns the info contained in the node , and its definition is straightforward : template .

Notice that if the list is empty , the assert statement terminates the program .
Therefore , before calling this function , check to see whether the list is nonempty .

Begin and End The function begin returns an iterator to the node in the linked list , and the function end returns an iterator to one past the node in the linked list .
Their definitions are : template .

Linked List as an ADT .

Copy the List The function copyList makes an identical copy of linked list .
Therefore , we traverse the list to be copied , starting at the node .
Corresponding to each node in the original list , we :
Create node , and call it newNode .

Copy the info of the node the original into newNode .

Insert newNode at the end of the list being created .

The definition of the function copyList is : template void .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Destructor The destructor deallocates the memory occupied by the nodes of list when the class object goes out of scope .
Because memory is allocated dynamically , resetting the pointers and does not deallocate the memory occupied by the nodes in the list .
We must traverse the list , starting at the node , and delete each node in the list .
The list can be destroyed by calling the function destroyList .
Therefore , the definition of the destructor is : template .

Copy Constructor Because the class contains pointer data members , the definition of this class contains the copy constructor .
Recall that if formal parameter is value parameter , the copy constructor provides the formal parameter with its own copy of the data .
The copy constructor also executes when an object is declared and initialized using The copy constructor makes an identical copy of the linked list .
This can be done by calling the function copyList .
Because the function copyList checks whether the original is empty by checking the value of  we must initialize the pointer to nullptr before calling the function copyList .

The definition of the copy constructor is : template .

Unordered Linked Lists .

We give its definition for the sake of completeness .

Unordered Linked Lists As described in the preceding section , we derive the class unorderedLinkedList from the abstract class and implement the operations search , insertFirst , insertLast , and deleteNode .

The following class defines an unordered linked list as an ADT : template class unorderedLinkedList : public public : bool const ; to determine whether searchItem is in the .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Search the List The member function search searches the for given item .
If the item is found , it returns true ; otherwise , it returns false .
Because linked is not data structure , we must sequentially search the  starting from the node .

This function has the following steps :
Compare the search item with the node in the .
If the info of the node is the same as the search item , stop the search ; otherwise , make the next node the node .

Repeat Step until either the item is or no more data is left in the to compare with the search item .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Unordered Linked Lists .

Insert the First Node The function insertFirst inserts the new at the beginning of the is , before the pointed to by first .
The steps needed to implement function are as follows :

Insert the before first .

Increment count by .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Insert the Last Node The definition of the member function insertLast is similar to the definition of the member function insertFirst .
Here , we insert the new after .
Essentially , the function insertLast is : template .

DELETE NODE Next , we discuss the implementation of the member function deleteNode , which deletes from the list with given info .
We need to consider several cases : Case : The list is empty .

Case : The is the with the given info .
In this case , we need to adjust the pointer .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Unordered Linked Lists .

If the to be deleted is the  then we must adjust the pointer .

Case : The list does not contain the with the given info .

If list is empty , we can simply print message indicating that the list is empty .
If list is not empty , we search the list for the with the given info and , if such is  we delete this .
After deleting the  count is decremented by .
In pseudocode , the algorithm is : if list is empty delete from an empty ; else if the is the with the given info adjust the head pointer , that is ,  and deallocate the memory ; else search the list for the with the given info if such is  delete it and adjust the .

If the list is empty , output an error message as shown in the pseudocode .

Case : The list is not empty .

This case has two scenarios : list has only one  and list has more than one .

Consider the list with one  as shown in Figure .

After deletion , the list becomes empty .
Therefore , after deletion , both and are set to nullptr , and count is set to .

Now consider the list of more than one  as shown in Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

After deleting this  the second becomes the .
Therefore , after deleting this  the value of the pointer changes ; that is , after deletion , contains the address of the with info , and count is decremented by .
Figure shows the list after deleting .

This case has two subcases : the to be deleted is not the  and the to be deleted is the .
Let us illustrate both cases .

Case : The to be deleted is not the .

Consider the list shown in Figure .

After deleting this node , the resulting list is as shown in Figure .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Unordered Linked Lists .

The link field of the previous is ,

Consider the list shown in Figure .
Suppose that the node to be deleted is .

Therefore , the deletion of requires us to change the value of the pointer last .
After deleting , last contains the address of the node with info .
Also , count is decremented by .
Figure shows the resulting list .

In this case , the list requires no adjustment .
We simply output an error message , indicating that the item to be deleted is not in the list .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Because linked list is not data structure , we must sequentially search the list .
We handle Case separately , because it does not require us to traverse the list .
We sequentially search the list , starting at the second node .
If the node to be deleted is in the middle of the list , we need to adjust the link field of the node just before the node to be deleted .
Thus , we need pointer to the previous node .
When we search the list for the given info , we use two pointers : one to check the info of the current node and one to keep track of the node just before the current node .
If the node to be deleted is the last node , we must adjust the pointer last .

The definition of the function deleteNode is : template .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Unordered Linked Lists .

Header File of the Unordered Linked List For the sake of completeness , we will show how to create the header file that defines the class unorderedListType and the operations on such lists .

Ordered Linked Lists The preceding section described the operations on an unordered linked .
This section deals with ordered linked lists .
As noted earlier , we derive the class orderedLinkedList from the class linkedListType and provide the definitions of the abstract functions insertFirst , insertLast , search , and deleteNode to take advantage of the fact that the elements of an ordered linked are arranged using some ordering criteria .
For simplicity , we assume that elements of an ordered linked are arranged in ascending order .

Because the elements of an ordered linked are in order , we include the function insert to insert an element in an ordered at the proper place .

The following class defines an ordered linked as an ADT : template class orderedLinkedList : public public : bool const ; to determine whether searchItem is in the .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Figure shows UML class diagram of the class orderedLinkedList and the inheritance hierarchy .

Next , we give the definitions of the member functions of the class orderedLinkedList .

Search the List First , we discuss the search operation .
The algorithm to implement the search operation is similar to the search algorithm for general lists discussed earlier .
Here , because the is sorted , we can improve the search algorithm somewhat .
As before , we start the search at the first node in the .
We stop the search as soon as we find node in the with info greater than or equal to the search item or when we have searched the entire .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Compare the search item with the current node in the .
If the info of the current node is greater than or equal to the search item , stop the search ; otherwise , make the next node the current node .

Repeat Step until either an item in the that is greater than or equal to the search item is or no more data is left in the to compare with the search item .

Note that the loop does not explicitly check whether the search item is equal to an item in the .
Thus , after the loop executes , we must check whether the search item is equal to the item in the .

Insert Node To insert an in an ordered linked  we first find the place where the new is supposed to go , and then we insert the in the .
To find the place for the new  as before , we search the .
Here , we use two pointers , and trailCurrent , to search the .
The pointer points to the node whose info is being compared with the to be inserted , and trailCurrent points to the node just before .

Because the is in order , the search algorithm is the same as before .
The following cases arise : Case : The is initially empty .
The node containing the new is the only node and thus the first node in the .

Case : The new is smaller than the smallest in the .

In this case , we need to adjust the head that is , first .
Also , count is incremented by .

Case : The is to be inserted somewhere in the .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Ordered Linked Lists .

In this case , the new is inserted at the end of the .
Thus , the value of is nullptr , and the new is inserted after trailCurrent .
Also , count is incremented by .

In this case , the new is inserted between trailCurrent and .
Also , count is incremented by .

The following statements can accomplish both Cases and .
Assume newNode points to the new .

Case : The is empty .

Consider the shown in Figure .

Suppose that we want to insert in the .
To accomplish this task , we create  copy into the  set the link of the to nullptr , and make first point to the .

Figure shows the resulting .
Notice that , after inserting , the values of both first and count change .

Case : The is not empty , and the to be inserted is smaller than the smallest in the .
Consider the shown in Figure .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

After inserting in the list , the with info becomes the first of list .
This requires us to change the value of first .
Also , count is incremented by .
Figure shows the resulting list .

As indicated previously , this case has two scenarios .

Case : The to be inserted is larger than the largest in the list ; that is , it goes at the end of the list .
Consider the list shown in Figure .

After inserting , the resulting list is as shown in Figure .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Ordered Linked Lists .

Consider the list shown in Figure .

Clearly , goes between and , which would require the link of the node with info to be changed .
After inserting , the resulting list is as shown in Figure .

It also follows that we should traverse the list with two say , current and trailCurrent .
The pointer current is used to traverse the list and compare the info of the node in the list with the item to be inserted .
The pointer trailCurrent points to the node just before current .
For example , in Case , when the search stops , trailCurrent points to node and current points to node .
The item is inserted after trailCurrent .
In Case , after searching the list to find the place for , trailCurrent points to node and current is nullptr .

Essentially , the function insert is as follows : template .

Insert First and Insert Last The function insertFirst inserts the new at the beginning of the list .
However , because the resulting list must be sorted , the new must be inserted at the proper place .
Similarly , the function insertLast must insert the new at the proper place .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Ordered Linked Lists .

The definitions of these functions .

Note that in reality , the functions insertFirst and insertLast do not apply to ordered linked lists because the new must be inserted at the proper place in the list .

However , you must provide its definition as these functions are declared as abstract in the parent class .

Delete Node To delete given from an ordered linked list , we search the list to see whether the to be deleted is in the list .
The function to implement this operation is the same as the delete operation on general linked lists .
Here , because the list is sorted , we can somewhat improve the algorithm for ordered linked lists .

As in the case of insertNode , we search the list with two pointers , and Similar to the operation insertNode , several cases arise : Case : The list is initially empty .

We cannot delete from an empty list .

Case : The to be deleted is contained in the node of the list .
We must adjust the head pointer of the .

Case : The to be deleted is somewhere in the list .
In this case , points to the node containing the to be deleted , and points to the node just before the node pointed to by .

Case : The list is not empty , but the to be deleted is not in the list .

After deleting node , count is decremented by .
The definition of the function deleteNode is : template .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Header File of the Ordered Linked List For the sake of completeness , we will show how to create the header file that defines the class orderedListType , as well as the operations on such lists .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Ordered Linked Lists .

Line : Enter numbers ending .

The details are left as an exercise for you .

Notice that the function insert does not check whether the item to be inserted is already in the  that is , it does not check for duplicates .
Programming Exercise at the end of this chapter asks you to revise the definition of the function insert so that before inserting the item , it checks whether it is already in the .
If the item to be inserted is already in the  the function outputs an appropriate error message .
In other words , duplicates are not allowed .

Print Linked List in Reverse Order The nodes of an ordered constructed are in ascending order .
Certain applications , however , might require the data to be printed in descending order , which means that we must print the backward .
We now discuss the function reversePrint .

Given pointer to  this function prints the elements of the in reverse order .

Consider the linked shown in Figure .

Linked For the in Figure , the output should be in the following form : Because the links are in only one direction , we cannot traverse the backward starting from the last node .
Let us see how we can effectively use recursion to print the in reverse order .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

We cannot print the info of the first node until we have printed the remainder of the is , the tail of the first .
Similarly , we cannot print the info of the second node until we have printed the tail of the second node , and so on .
Every time we consider the tail of node , we reduce the size of the by .
Eventually , the size of the will be reduced to zero , in which case the recursion will stop .
Let us first write the algorithm in pseudocode .

Here , we do not see the base case ; it is hidden .
The is printed only if the pointer to the is not nullptr .
Also , in the body of the if statement , the recursive call is on the tail of the .
Because eventually the tail of the will be empty , the if statement in the next call will fail , and the recursion will stop .
Also , note that statements example , printing the info of the appear after the recursive call ; thus , when the transfer comes back to the calling function , we must execute the remaining statements .

Recall that the function exits only after the last statement executes .

Let us trace the execution of this statement , which is function call , for the shown in Figure .
Because the formal parameter is value parameter , the value of the actual parameter is passed to the formal parameter .
See Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Its definition is : template .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In other words , every node contains the address of the next node the last Figure .

That is , we can traverse the list starting at the first node or , if pointer to the last node is given , we can traverse the list starting at the last node .

As before , the typical operations on doubly linked list are :

Initialize the list .

Destroy the list .

Determine whether the list is empty .

Search the list for given item .

Retrieve the first element of the list .

Retrieve the last element of the list .

Insert an item in the list .

Delete an item from the list .

Find the length of the list .

Print the list .

Make copy of the doubly linked list .

Next , we describe these operations for an ordered doubly linked list .
The following class defines doubly linked list as an ADT : of the node template .

Doubly Linked Lists .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The functions to implement the operations of doubly linked are similar to the ones discussed earlier .
Here , because every node has two pointers , back and next , some of the operations require the adjustment of two pointers in each node .
For the insert and delete operations , because we can traverse the in either direction , we use only one pointer to traverse the .
Let us call this pointer current .
We can set the value of trailCurrent by using both the current pointer and the back pointer of the node pointed to by current .
We give the definition of each function here , with four exceptions .
Definitions Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Doubly Linked Lists .

Default Constructor The default constructor initializes the doubly linked to an empty state .
It sets and to nullptr and to .

The is empty if the pointer is nullptr .

Destroy the List This operation deletes all of the nodes in the  leaving the in an empty state .
We traverse the starting at the node and then delete each node .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

This task can be done by using the operation destroy .
The definition of the function initializeList is : template .

Length of the List The length of linked is , how many nodes are in the is stored in the variable Therefore , this function returns the value of this variable .

Print the List The function print outputs the info contained in each node .
We traverse the  starting from the node .

Reverse Print the List This function outputs the info contained in each node in reverse order .
We traverse the in reverse order , starting from the node .
Its definition is : template .

Search the List The function search returns true if searchItem is in the  otherwise , it returns false .
The search algorithm is exactly the same as the search algorithm for an ordered linked .

First and Last Elements The function front returns the element of the  and the function back returns the element of the .
If the is empty , both functions terminate the program .

Their definitions are : template .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

INSERT NODE Because we are inserting an in doubly linked list , the insertion of in the list requires the adjustment of two pointers in certain nodes .
As before , we find the place where the new is supposed to be inserted , create the  store the new  and adjust the link fields of the new and other particular nodes in the list .
There are four cases : Case : Insertion in an empty list Case : Insertion at the beginning of nonempty list Case : Insertion at the end of nonempty list Case : Insertion somewhere in nonempty list Both Cases and require us to change the value of the pointer .
Cases and are similar .
After inserting an  is incremented by .
Next , we show Case .

Consider the doubly linked list shown in Figure .

After inserting , the resulting list is as shown in Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Doubly Linked Lists .

The definition of the function insert is : template .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

DELETE NODE This operation deletes given from the doubly linked list .
As before , we search the list to see whether the to be deleted is in the list .
The search algorithm is the same as before .
Similar to the insertNode operation , this operation the to be deleted is in the requires the adjustment of two pointers in certain nodes .
The delete operation has several cases : Case : The list is empty .

Case : The to be deleted is in the of the list , which would require us to change the value of the pointer .

Case : The to be deleted is somewhere in the list .

Case : The to be deleted is not in the list .

After deleting  count is decremented by .
Let us demonstrate Case .
Consider the list shown in Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Doubly Linked Lists .

Doubly linked list before deleting Suppose that the to be deleted is .
First , we search the list with two pointers and find the with info and then adjust the link field of the affected nodes Figure .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Circular Linked Lists .

linked in which the node points to the node is called circular linked .

Figure show various circular linked lists .

Then , by using  you can access both the and the nodes of the .
For example , points to the node , and points to the node .

As before , the usual operations on circular are :

Initialize the an empty .

Determine if the is empty .

Find the length of the .

Search the for given item .

Insert an item in the .

Delete an item from the .

We leave it as an exercise for you to design class to implement sorted circular linked Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

PROGRAMMING EXAMPLE : Watch the Video Store For family or an individual , favorite place to go on weekends or holidays is to store to rent movies .
new store in your neighborhood is about to open .

However , it does not have program to keep track of its DVDs and customers .
The store managers want someone to write program for their system so that the store can function .
The program should be able to perform the following operations :

Rent  that is , check out .

Return , or check in ,

Create of DVDs owned by the store .

Show the details of particular .

Print of all of the DVDs in the store .

Check whether particular is in the store .

Maintain customer database .

Print of all of the DVDs rented by each customer .

Let us write program for the store .
This example further illustrates the objectoriented design methodology and , in particular , inheritance and overloading .

The programming requirement tells us that the store has two major components : DVDs and customers .
We will describe these two components in detail .
We also need to maintain the following .

of all of the DVDs in the store of all of the customers Lists of the DVDs currently rented by the customers We will develop the program in two parts .
In Part , we design , implement , and test the component .
In Part , we design and implement the customer component , which is then added to the component developed in Part .
That is , after completing Parts and , we can perform all of the operations listed previously .

PART : COMPONENT Object This is the first stage , wherein we discuss the component .
The common things associated with .

Name of the movie Names of the stars Name of the producer Name of the director Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Store .

Set the is , the title , stars , production company , and so on .

Show the details of particular .

Check the number of copies in the store .

Check out is , the .
In other words , if the number of copies is greater than zero , decrement the number of copies by one .

Check in is , the .
To check in  first we must check whether the store owns such and , if it does , increment the number of copies by one .

Check whether particular is is , check whether the number of copies currently in the store is greater than zero .

The deletion of from the list requires that the list be searched for the to be deleted .
Thus , we need to check the title of to find out which is to be deleted from the list .
For simplicity , we assume that two DVDs are the same if they have the same title .

The following class defines the object as an ADT .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : DVD Store .

We leave the UML diagram of the class dvdType as an exercise for you .

For easy output , we will overload the output stream insertion  for the class dvdType .

Next , we will write the definitions of each function in the class dvdType .
The definitions of these functions , as given below , are quite straightforward and easy to follow .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : DVD Store .

In general , we would not know how many DVDs are in the store , and adding or deleting from the store would change the number of DVDs in the store .
Therefore , we will use linked list to create list of DVDs Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

We also defined the basic operations such as insertion and deletion of in the list .
However , some operations are very specific to the list , such as check out  check in  set the number of copies of  and so on .
These operations are not available in the class unorderedLinkedList .
We will , therefore , derive class dvdListType from the class unorderedLinkedList and add these operations .

The definition of the class dvdListType .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Store .

The title specifies the name of the for the number of copies is to be updated .

Furthermore , unorderedLinkedList is class template , and we have passed the class dvdType as parameter to this class .
That is , the class dvdListType is not Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Because we are now dealing with very specific data type , the class dvdListType is no longer required to be template .
Thus , the info type of each node in the linked list is now dvdType .
Through the member functions of the class dvdType , certain as and of an object of type now be accessed .

The definitions of the functions to implement the operations of the class dvdListType are given next .

The primary operations on the list are to check in and to check out Both operations require the list to be searched and the location of the being checked in or checked out to be found in the list .
Other operations , such as determining whether particular is in the store , updating the number of copies of  and so on , also require the list to be searched .
To simplify the search process , we will write function that searches the list for particular If the is found , it sets parameter found to true and returns pointer to the so that , and other operations on the object can be performed .
Note that the function searchDVDList is private data member of the class dvdListType because it is used only for internal manipulation .
First , we describe the search procedure .

Consider the node of the list shown in Figure .

In fact , the component info of the node has seven members : dvdTitle , movieProducer , movieDirector , movieProductionCo , and .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : DVD Store .

DVD list node showing components of info These member variables are all private and cannot be accessed directly .
The member functions of the class dvdType will help us in checking setting the value of particular component .

Suppose , to node in the DVD list Figure .

Pointer current and DVD list node Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Suppose that we want to know whether the title of the DVD stored in this node is the same as the title specified by the variable title .
The expression : is true if the title of the DVD stored in this node is the same as the title specified by the parameter title , and false otherwise .

Because is private member , it cannot be accessed directly .

Programming Example : DVD Store .

If it is unsuccessful , is set to false and will be nullptr .

The definitions of the other functions of the class dvdListType .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : DVD Store .

COMPONENT Customer The customer object stores information about customer , such as the first name , last Object name , account number , and list of DVDs rented by the customer .

Every customer is person .
We have already designed the class personType in Example and described the necessary operations on the name of person .
Therefore , we can derive the class customerType from the class personType and add the additional members that we need .
First , however , we must redefine the class personType to take advantage of the new of objectoriented design that you have learned , such as operator overloading , and then derive the class customerType .

Recall that the basic operations on an object of type personType are :

Print the name .

Set the name .

Show the first name .

Show the last name .

Similarly , the basic operations on an object of type customerType are :

Print the name , account number , and the list of rented DVDs .

Set the name and the account number .

Rent DVD ; that is , add the rented DVD to the list .

Return DVD ; that is , delete the rented DVD from the list .

Show the account number .

The details of implementing the customer component are left as an exercise for you .

Main Program We will now write the main program to test the DVD object .
We assume that the necessary data for the DVDs are stored in file .
We will open the file and create the Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The data in the input file is in the following form : movie movie movie producer movie director movie production co .

We will write function , createDVDList , to read the data from the input file and create the list of DVDs .
We will also write function , displayMenu , to show the different as check in movie or check out the user can make .
The algorithm of the function main is :
Open the input file .

If the input file does not exist , exit the program .

Create the list of DVDs .

Show the menu .

While not done Perform various operations .

Opening the input file is straightforward .
Let us describe Steps and , which are accomplished by writing two separate functions : createDVDList and displayMenu .

Because the data will be read from file and the input file was opened in the function main , we pass the input file pointer to this function .
We also pass the DVD list pointer , declared in the function main , to this function .
Both parameters are reference parameters .
Next , we read the data for each DVD and then insert the DVD in the list .
The general algorithm is :
Read the data and store it in DVD object .

Insert the DVD in the list .

Repeat steps and for each data in the file .

It contains the following output statements : Select one of the following :
To check whether the store carries particular DVD .
To check out DVD Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : DVD Store .

To To To To To check in DVD check whether particular DVD is in stock print only the titles of all the DVDs print list of all the DVDs exit In pseudocode , Step the main is :

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Malik This program uses the classes dvdType and dvdListType to .

Programming Example : DVD Store .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : DVD Store .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

linked list is list of items , called nodes , in which the order of the nodes is determined by the address , called link , stored in each node .

The pointer to linked is , the pointer to the first node in the stored in separate location called the head or first .

linked list is dynamic data structure .

The length of linked list is the number of nodes in the list .

Item insertion and deletion from linked list do not require data movement ; only the pointers are adjusted .

linked list is traversed in only one direction .

The search on linked list is sequential .

The first pointer of linked list is always fixed , pointing to the first node in the list .

To traverse linked list , the program must use pointer different than the head pointer of the list , initialized to the first node in the list .

In doubly linked list , every node has two links : one points to the next node and one points to the previous node .

doubly linked list can be traversed in either direction .

In doubly linked list , item insertion and deletion require the adjustment of two pointers in node .

linked list in which the last node points to the first node is called circular linked list .

EXERCISES The number in parentheses at the end of an exercise refers to the learning objective listed at the beginning of the chapter .

Mark the statements as true or false .

Every node in linked list has two components : one to store the relevant In linked list , the order of the elements is determined by the order in Suppose the nodes of linked list are in the usual form and points to of the linked list .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The two most common operations on iterators are and .

The function search of the class unorderedLinkedList searches the linked list sequentially , while the function search of the class orderedLinkedList searches the list using binary search algorithm .

Suppose that the fourth of linked list is to be deleted , and points to the fourth Consider the linked list shown in Figure .
Assume that the nodes are in the usual form .
Use this list to answer Exercises through .
If necessary , declare additional variables .

Linked list for Exercises through .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Set the info of the second to .

Make trail point to the before temp .

Make temp point to an empty list .

Set the value of the before trail to .

Write while loop to make current point to the with info .

Mark each of the following statements as valid or invalid .
If statement is .

Write code so that current traverses the entire list .

Create the node with info and insert it between trail and last .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

After deleting the node , make last point to the last node of the list and the link of the last node must be nullptr .

Delete the node with info .
Also , deallocate the memory occupied by this node .

Show what is produced by the following code .
Assume the node is in the usual form with the info of the type int .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Show what is produced by the following code .
Assume the node is in the usual form with the info of the type int .

Assume that the node of linked is in the usual form with the info of type int .
The following data , as described in parts to , is to be inserted into an initially linked 
Suppose that head is pointer of type .
After the linked is created , head should point to the first node of the .
Declare additional variables as you need them .

Write the code to create the linked .
After the linked is created , Insert into an empty linked .

Insert at the end of the .

Assume that the node of linked is in the usual form with the info of type int .

Use the linked created by this code to answer the following questions .

Determine the order of the nodes of the linked .

Write code that creates and inserts node with info after the node with info .

Write code that creates and inserts node with info before the node with info .
Does this require you to the change the value of the pointer that was pointing to the first node of the linked .

Write code that deletes the node with info .
Does this require you to the change the value of the pointer that was pointing to the first node of the linked .

How does the function insertFirst of the class unorderedLinkedList differ Consider the following statements .

What is the output of this program segment .

Suppose the input is : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require .

Draw the UML diagram of the class doublyLinkedList as discussed in Draw the UML diagram of the class dvdType of the DVD Store programming example .

Draw the UML diagram of the class dvdListType of the DVD Store programming example .

PROGRAMMING EXERCISES .

Using linked lists , redo the program to handle as many entries as required .
Add the following operations to your program : Add or delete new to the address book .

Allow the user to save the data in the address book .

Extend the class linkedListType by adding the following operations :

Find and delete the node with the smallest info in the .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require .

Also , write program to test these functions .

Extend the class linkedListType by adding the following operations : Write function that returns the info of the kth element of the linked If no such element exists , terminate the program .

Write function that deletes the element of the linked .
If no such element exists , terminate the program .

Provide the definitions of these functions in the class linkedListType .

Also , write program to test these functions .
Also , write program function to print linked backward .

Add the operation divideMid to the class as follows : void ; operation divides the given into two sublists equal sizes .

Write the definition of the function template to implement the operation divideMid .
Also , write program to test your function .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require .

Add the following operation to the class  void , const ; the at the node with the info item into two .

Write the definition of the function template to implement the operation divideAt .
Also , write program to test your function .

Add the following operation to the class  void , function creates new by merging the of and .

Also , after the preceding statement executes , and are empty .

Write the definition of the function template mergeLists to implement the operation mergeLists .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Rewrite the definition of the function insert so that before inserting the item , it checks whether the item to be inserted is already in the If the item to be inserted is already in the  the function outputs an appropriate error message .
Also , write program to test your function .

In this chapter , the class to implement the nodes of is defined as struct .
The following rewrites the definition of the struct so that it is declared as class and the member variables are private .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Also , write program to test your class .

Programming Exercise asks you to redefine the class to implement the nodes of so that the instance variables are private .
Therefore , the class linkedListType and its derived classes and can no longer directly access the instance variables of the class .
Rewrite the definitions of these classes so that they use the member functions of the class to access the and fields of node .
Also , write programs to test various operations of the classes and .

Write the definitions of the function copyList , the copy constructor , and the function to overload the assignment for the class doublyLinkedList .

Write program to test various operations of the class doublyLinkedList .

Write the definitions of the class circularLinkedList and its member functions .
Write program to test various operations of the class defined in .

Complete the design and implementation of the class customerType defined in the DVD Store programming example .

Design and implement the class customerListType to create and maintain of customers for the DVD store .

In other words , write program that uses the classes designed in the DVD Store programming example and in Programming Exercise to make DVD store operational .

Extend the class linkedListType by adding the following function :

Also write program to test your function .
Use the class unorderedLinkedList to create .

Write program that prompts the user to input string and then outputs the string in the pig Latin form .
The rules for converting string into pig Latin form are described in Programming Example : Pig Latin Strings of Chapter .
Your program must store the characters of string into list and use the function rotate , as described in Programming Exercise , to rotate the string .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Also write the definition of the function splitEvensOddsList .
Note that this function does not create any new  it only rearranges the nodes of the original list so that nodes with even integers are in evensList and nodes with odd integers are in oddsList .

Write program that uses class intLinkedList to create linked list of integers and then uses the function splitEvensOddsList to split the list into two sublists .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Discover how to use queues to solve simulation problems Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Both stacks and queues have numerous applications in computer science .

Stacks Suppose that you have program with several functions .
To be specific , suppose that you have functions , and in your program .
Now suppose that function calls function , function calls function , and function calls function .
When function terminates , control goes back to function ; when function terminates , control goes back to function ; and when function terminates , control goes back to function .

During program execution , how do you think the computer keeps track of the function calls .
What about recursive functions .
How does the computer keep track of the recursive calls .
In Chapter , we designed recursive function to print linked list backward .
What if you want to write nonrecursive algorithm to print linked list backward .

This section discusses the data structure called the stack , which the computer uses to implement function calls .
You can also use stacks to convert recursive algorithms into nonrecursive algorithms , especially recursive algorithms that are not tail recursive .
Stacks have numerous applications in computer science .
After developing the tools necessary to implement stack , we will examine some applications of stacks .

stack is list of homogeneous elements in which the addition and deletion of elements occur only at one end , called the top of the stack .
For example , in cafeteria , the second tray in stack of trays can be removed only if the first tray has been removed .
For another example , to get to your favorite computer science book , which is underneath your math and history books , you must first remove the math and history books .
After removing these books , the computer science book becomes the top is , the top element of the stack .
Figure shows some examples of stacks .

Stack of boxes Stack of coins Stack of books Stack of trays Applied Math World History Programming English Chemistry FIGURE Various types of stacks Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The top element of the stack is the last element added to the stack .
Because the elements are added and removed from one end is , the , it follows that the item that is added last will be removed first .
For this reason , stack is also called Last In First Out data structure .

Stack : data structure in which the elements are added and removed from one end only ; Last In First Out data structure .

Now that you know what stack is , let us see what kinds of operations can be performed on stack .
Because new can be added to the stack , we can perform the add operation , called push , to add an element onto the stack .
Similarly , because the top item can be retrieved removed from the stack , we can perform the operation top to retrieve the top element of the stack and the operation pop to remove the top element from the stack .

The push , top , and pop operations work as follows : Suppose there are boxes lying on the floor that need to be stacked on table .
Initially , all of the boxes are on the floor , and the stack is empty Figure .

Empty stack .

Peek at the top element Push Box .

Stack operations Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

After this push operation , the stack is as shown in Figure .
Next , we push box onto the stack .
After this push operation , the stack is as shown in Figure .
Next , we look , that is , peek , at the top element of the stack .

After this operation , the stack is unchanged and shown in Figure .
We then push box onto the stack .
After this push operation , the stack is as shown in Figure .

Next , we pop the stack .
After the pop operation , the stack is as shown in Figure .

An element can be removed from the stack only if there is something in the stack , and an element can be added to the stack only if there is room .
The two operations that immediately follow from push , top , and pop are isFullStack whether the stack is and isEmptyStack whether the stack is .
Because stack keeps changing as we add and remove elements , the stack must be empty before we first start using it .
Thus , we need another operation , called initializeStack , which initializes the stack to an empty state .
Therefore , to successfully implement stack , we need at least these six operations , which are described in the next section .
We might also need other operations on stack , depending on the specific implementation .

If the stack is full , it returns the value true ; otherwise , it returns the value false .

If the stack is empty , it returns the value true ; otherwise , it returns the value false .

The input to this operation consists of the stack and the new .
Prior to this operation , the stack must exist and must not be full .

Prior to this operation , the stack must exist and must not be full .

Prior to this operation , the stack must exist and must not be empty .

The following abstract class stackADT defines these operations as an ADT : template class stackADT .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

UML class diagram of the class stackADT We now consider the implementation of our abstract stack data structure .
Because all of the elements of stack are of the same type , stack can be implemented as either an array or linked structure .
Both implementations are useful and are discussed in this chapter .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The first of the stack can be put in the first array slot , the second of the stack in the second array slot , and so on .
The top of the stack is the index of the last added to the stack .

In this implementation of stack , stack elements are stored in an array , and an array is random access data structure ; that is , you can directly access any of the array .

However , by definition , stack is data structure in which the elements are accessed or at only one is , Last In First Out data structure .
Thus , stack is accessed only through the top , not through the bottom or middle .
This feature of stack is extremely important and must be recognized in the beginning .

To keep track of the top position of the array , we can simply declare another variable called stackTop .

The following class , stackType , implements the functions of the abstract class stackADT .
By using pointer , we can dynamically allocate arrays , so we will leave it for the user to specify the size of the array is , the stack .
We assume that the default stack size is .
Because the class has pointer member variable pointer to the array to store the stack , we must overload the assignment and include the copy constructor and destructor .
Moreover , we give generic definition of the stack .
Depending on the specific application , we can pass the stack type when we declare stack object .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Implementation of Stacks as Arrays .

The default stack size is .

Figure shows the UML class diagram of the class .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

UML class diagram of the class Because arrays begin with the index , we need to distinguish between the value of and the array position indicated by .
If is , the stack is empty ; if is nonzero , then the stack is nonempty and the top element of the stack is given by .

Notice that the function copyStack is included as private member .
This is because we want to use this function only to implement the copy constructor and overload the assignment .
To copy stack into another stack , the program can use the assignment .

Figure shows this data structure , wherein stack is an object of type .

Note that can range from to .
If is nonzero , then is the index of the element of the stack .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Implementation of Stacks as Arrays .

stack elements Example of stack Note that the pointer list contains the base address of the array the stack is , the address of the first array component .
Next , we discuss how to implement the member functions of the class .

Initialize Stack Let us consider the initializeStack operation .
Because the value of indicates whether the stack is empty , we can simply set to to initialize the stack Figure .

unused stack Empty stack Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Empty Stack We have seen that the value of indicates whether the stack is empty .
If is , the stack is empty ; otherwise , the stack is not empty .
The definition of the function isEmptyStack is : template .

Push Adding , or pushing , an element onto the stack is process .
Recall that the value of indicates the number of elements in the stack , and gives the position of the top element of the stack .
Therefore , the push operation is as follows :
Store the newItem in the array component indicated by .

Figures and illustrate the push operation .

Suppose that before the push operation , the stack is as shown in Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Implementation of Stacks as Arrays .

After the push operation , the stack is as shown in Figure .

Stack after pushing Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

If we try to add new to full  the resulting condition is called an overflow .

Error checking for an overflow can be handled in different ways .
One way is as shown previously .
Or , we can check for an overflow before calling the function push , as shown next is an object of type .

Pop To remove , or pop , an element from the  we simply decrement by .

Figures and illustrate the pop operation .

Suppose that before the pop operation , the is as shown in Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Implementation of Stacks as Arrays .

elements .

Stack after popping Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

If we try to remove an from an empty  the resulting condition is called an underflow .
Error checking for an underflow can be handled in different ways .
One way is as shown in the definition of the function pop .
Or , we can check for an underflow before calling the function pop , as shown next is an object of type .

The to be copied is passed as parameter to the function copyStack .
We will , in fact , use this function to implement the copy constructor and overload the assignment operator .
The definition of this function is : template .

Constructor and Destructor The functions to implement the constructor and the destructor are straightforward .
The constructor with parameters sets the size to the size specified by the user , sets to , and creates an appropriate array in which to store the elements .
If the user does not specify the size of the array in which to store the elements , the constructor uses the default value , which is , to create an array of size .
The destructor simply deallocates the memory occupied by the array is , the and sets to .
The definitions of the constructor and destructor are : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Implementation of Stacks as Arrays .

Copy Constructor The copy constructor is called when object is passed as parameter to function .
It copies the values of the member variables of the actual parameter into the corresponding member variables of the formal parameter .
Its definition is : template .

Recall that for classes with pointer member variables , the assignment must be explicitly overloaded .
The definition of the function to overload the assignment for the class is : template const Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Stack Header File Now that you know how to implement the operations , you can put the definitions of the class and the functions to implement the operations together to create the header file .
For the sake of completeness , we next describe the header file .
We will refer to header file in any program that uses .

Implementation of Stacks as Arrays .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Implementation of Stacks as Arrays .

EXAMPLE Before we give programming example , let us first write simple program that uses the class and tests some of the operations .
Among others , we will test the assignment and the copy constructor .
The program and its output are as follows : to test the various operations of .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The element of otherStack : The original is not empty .

The element of the original  The elements of  It is recommended that you do of program .

PROGRAMMING EXAMPLE : Watch the Video Highest GPA In example , we write program that reads data file consisting of each GPA followed by the name .
The program then prints the highest GPA and the names of all of the students who received that GPA .
The program scans the input file only once .
Moreover , we assume that there is maximum of students in the class .

Input The program reads an input file consisting of each GPA , followed by the name .
Sample data is : Randy Kathy Colt Tom Ron Mickey Peter Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Highest GPA Output PROBLEM ANALYSIS AND ALGORITHM DESIGN The highest and all of the names associated with the highest .

For example , for the above data , the highest is , and the students with that are Ron and Mickey .

We read the first and the name of the student .
Because data is the first item read , it is the highest so far .
Next , we read the second and the name of the We then compare with the highest so far .
Three cases arise :
The new is greater than the highest so far .
In case , we :
Update the value of the highest so far .

Initialize the is , remove the names of the students from the .

Save the name of the having the highest so far in the .

The new is equal to the highest so far .
In case , we add the name of the new to the stack .

The new is smaller than the highest so far .
In case , we discard the name of the having grade .

We then read the next and the name of the and repeat Steps through .

We continue process until we reach the end of the input file .

From discussion , it is clear that we need the following .

Declare the variables and initialize stack .

Open the input file .

If the input file does not exist , exit the program .

Set the output of the numbers to fixed decimal format with decimal point and trailing zeroes .
Also , set the precision to two decimal places .

Read the and the name .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : Randy Kathy Colt Tom Ron Mickey Peter Donald Cindy Dome Andy Fox Minnie Gilda Vinay Danny Output The students holding the highest  Vinay Minnie Andy Note that the names of the students with the highest output in the reverse order , relative to the order they appear in the input , due to the fact that the element of the stack is the last element added to the stack .

Linked Implementation of Stacks Because an array size is  in the array representation of stack , only number of elements can be pushed onto the stack .
If in program the number of elements to be pushed exceeds the size of the array , the program may terminate in an error .
We must overcome these problems .

We have seen that by using pointer variables , we can dynamically allocate and deallocate memory , and by using linked lists , we can dynamically organize data as an ordered .
Next , we will use these concepts to implement stack dynamically .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Linked Implementation of Stacks .

With the help of stackTop , we can do several things : find the element , check whether the stack is empty , and so on .

Similar to the linear representation , in linked representation , stackTop is used to locate the element in the stack .
However , there is slight difference .
In the former case , stackTop gives the index of the array .
In the latter case , stackTop gives the address of the element of the stack .

The following class implements the functions of the abstract class stackADT : of the node template .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Logically , the stack is never full .
The stack is full only if we run out of memory space .
Therefore , in reality , the function isFullStack does not apply to linked implementation of stacks .
However , the class must provide the definition of the function isFullStack , because it is defined in the parent abstract class stackADT .

We leave the UML class diagram of the class as an exercise for you .

EXAMPLE Suppose that stack is an object of type .
Figure shows an empty stack , and Figure shows nonempty stack .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Linked Implementation of Stacks .

Empty and nonempty linked stack In Figure , the top element of the stack is ; that is , the last element pushed onto the stack is .

Next , we discuss the definitions of the functions to implement the operations of linked stack .

Default Constructor The first operation that we consider is the default constructor .
The default constructor initializes the stack to an empty state when stack object is declared .
Thus , this function sets to nullptr .
The definition of this function is : template .

Empty Stack and Full Stack The operations isEmptyStack and isFullStack are quite straightforward .
The stack is empty if is nullptr .
Also , because the memory for stack element is allocated and deallocated dynamically , the stack is never full .
The definitions of the functions to implement these operations are : template bool const Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

However , you must provide its definition because it is included as an abstract function in the parent class stackADT .

Initialize Stack The operation initializeStack reinitializes the stack to an empty state .
Because the stack may contain some elements and we are using linked implementation of stack , we must deallocate the memory occupied by the stack elements and set to nullptr .
The definition of this function is : template .

In the case of pop , the node pointed to by will be removed .
In both cases , the value of the pointer is updated .
The operation top returns the info of the node that is pointing to .

Push Consider the stack shown in Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Linked Implementation of Stacks .

Create newNode and store FIGURE .

Put on the top of stack Make point to the top Push operation .

See Figure .

Return the Top Element The operation to return the top of the stack is quite straightforward .
Its definition is : template .

Now we consider the pop operation , which removes the top of the stack .

Consider the stack shown in Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Linked Implementation of Stacks .

Figure shows the pop operation .

stack .

Make temp point to the top Make point to the next .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

See Figure .

Copy Stack The function copyStack makes an identical copy of .
Its definition is similar to the definition of copyList for linked lists , given in Chapter .
The definition of the function copyStack is : template void .

Constructors and Destructors We have already discussed the default constructor .
To complete the implementation of the operations , next we give the definitions of the functions to implement the copy constructor and the destructor and to overload the assignment operator .

The definition of the function to overload the assignment for the class is : template const Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The definition of and the functions to implement the operations discussed previously are generic .
Also , as in the case of an array representation of  in the linked representation of  we must put the definition of the and the functions to implement the operations together in file .
program can header file via the statement .

Example illustrates how linkedStack object is used in program .

EXAMPLE We assume that the definition of the class and the functions to implement the operations are included in the header file .

Linked Implementation of Stacks .

Sample Run : After the assignment   Testing the copy .

Stack in the function  After the copy   Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

comparison of other as initializeStack and initializeList , isEmptyList and isEmptyStack , and so that the class can be derived from the class linkedListType .
Moreover , the functions pop and isFullStack can be implemented as in the previous section .

Note that the class linkedListType is an abstract and does not implement all of the operations .
However , the class unorderedLinkedListType is derived from the class linkedListType and provides the definitions of the abstract functions of the class linkedListType .
Therefore , we can derive the class from the class unorderedLinkedListType .

Next , we define the class that is derived from the class unorderedLinkedList .
The definitions of the functions to implement the operations are also given .

Application of Stacks : Postfix Expressions Calculator .

Application of Stacks : Postfix Expressions Calculator The usual notation for writing arithmetic expressions notation we learned in elementary is called infix notation , in which the is written between the operands .

For example , in the expression + the + is between the operands and .
In infix notation , the operators have precedence .
That is , we must evaluate expressions from left to right , and multiplication and division have higher precedence than do addition and subtraction .
If we want to evaluate the expression in different order , we must parentheses .
For example , in the expression + c , we evaluate using the operands and c , and then we evaluate + using the operand and the result of c .

In the early , the Polish mathematician Jan Lukasiewicz discovered that if operators were written before the operands or Polish notation ; for example , + the parentheses could be omitted .
In the late , the Australian philosopher and early computer scientist Charles .
Hamblin proposed scheme in which the operators follow the operands , resulting in the Reverse Polish notation .
This has the advantage that the operators appear in the order required for computation .

For example , the expression : in postfix expression is : The following example shows various infix expressions and their equivalent postfix expressions .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In fact , many compilers now translate arithmetic expressions into some form of postfix notation and then translate this postfix expression into machine code .
Postfix expressions can be evaluated using the following algorithm : Scan the expression from left to right .
When an operator is found , back up to get the required number of operands , perform the operation , and continue .

Consider the following postfix expression : Let us evaluate this expression using stack and the previous algorithm .
Figure shows how this expression gets evaluated .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Application of Stacks : Postfix Expressions Calculator Read the first  which is number .
Push the number onto the stack Figure .
Read the next  which is number .
Push the number onto the stack Figure .
Read the next  + which is an operator .

Because an operator requires two operands to be evaluated , pop the stack twice Figure .
Perform the operation and put the result back onto the stack Figure .

Read the next  which is number .
Push the number onto the stack Figure .
Read the next  which is an operator .
Because an operator requires two operands to be evaluated , pop the stack twice Figure .

Perform the operation , and put the result back onto the stack Figure .

Scan the next  which the equal sign , indicating the end of the .
Therefore , print the result .
The result of the in the stack , so pop and print Figure .

From this discussion , it clear that when we read other than number , the following cases arise :
The we read one of the following : +

If the + the an operator , so we must evaluate it .
Because an operator requires two operands , the stack must have at least two elements ; otherwise , the has an error .

If the equal , the ends and we must print the answer .
At this step , the stack must contain exactly one element ; otherwise , the has an error .

In this case , the contains an illegal operator .

It also clear that when an operand encountered in an  it pushed onto the stack because the operator comes after the operands .

Consider the following expressions : +  + + has an illegal operator , does not have enough operands for + and has too many operands .
In the case of , when we encounter the equal , the stack will have two elements , and this error cannot be discovered until we are ready to print the value of the .

To make the input easier to read , we assume that the postfix expressions are in the following form : + Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , duplicated , in whole in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

If the scanned , then the next input number  an .
If the scanned not , then it either an operator be an equal the end of the .

Furthermore , we assume that each contains only the + and operators .

This program outputs the entire postfix together with the answer .
If the has an error , the discarded .
In this case , the program outputs the together with an appropriate error message .
Because an may contain an error , we must clear the stack before processing the next .
Also , the stack must be initialized ; that  the stack must be empty .

Main Algorithm Following the previous discussion , the main algorithm in pseudocode  Read the first character while not the end of input data initialize the stack process the output result .
The function evaluateExpression , if possible , evaluates the and leaves the result in the stack .
If the postfix error free , the function printResult outputs the result .

The function evaluateOpr evaluates an operator , and the function discardExp discards the current if there any error in the .

Function evaluateExpression The function evaluateExpression evaluates each postfix .

The general algorithm  while each marks the end of an .

Application of Stacks : Postfix Expressions Calculator .

The definition of this function  void inpF , outF , stack , double .

Editorial review has deemed that any suppressed content does materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Note that the function exit the program .

Function evaluateOpr This function evaluates an expression .
Two operands are needed to evaluate an operation , and operands are saved in the stack .
Therefore , the stack must contain at least two numbers .
If the stack contains fewer than two numbers , then the expression has an error .
In this case , the entire expression is discarded , and an appropriate message is printed .
This function also checks for any illegal operations .
In pseudocode , this function is : if stack is empty error in the expression set expressionOk to false else retrieve the top element of stack into pop stack if stack is empty error in the expression set expressionOk to false else retrieve the top element of stack into pop stack the operation is legal , perform the and push the result onto the stack .

Application of Stacks : Postfix Expressions Calculator .

All Rights Reserved .
May be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Function discardExp This function called whenever an error discovered in the expression .
It reads and writes the input data only until the input , the end of the expression .
The def inition of this function .

Function printResult the postfix expression contains no errors , the function printResult prints the result ; otherwise , it outputs an appropriate message .
The result of the expression in the stack , and the output sent to file .
Therefore , this function must have access to the stack and the output file .
Suppose that no errors were encountered by the method evaluateExpression .
In this case , this method outputs an appropriate error message .
The definition of this method  void 

Application of Stacks : Postfix Expressions Calculator .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : Input File + +  +  + + Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Removing Recursion : Nonrecursive Algorithm to Print Linked List Backward Output + + Removing Recursion : Nonrecursive Algorithm to Print Linked List Backward In Chapter , we used recursion to print linked list backward .
In this section , you will learn how stack can be used to design nonrecursive algorithm to print linked list backward .

Consider the linked list shown in Figure .

Linked list To print the list backward , first we need to get to the last node of the list , which we can do by traversing the linked list starting at the first node .
However , once we are at the last node , how do we get back to the previous node , especially given that links go in only one direction .

You can again traverse the linked list with the appropriate loop termination condition , but this approach might waste considerable amount of computer time , especially if the list very large .
Moreover , if we do this for every node in the list , the program might execute very slowly .
Next , we show how to use stack effectively to print the list backward .

After printing the info of particular node , we need to move to the node immediately behind this node .
For example , after printing , we need to move to the node with Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Thus , while initially traversing the list to move to the last node , we must save pointer to each node .
For example , for the list in Figure , we must save pointer to each of the nodes with info and .
After printing , we go back to the node with info ; after printing , we go back to the node with info .
From this , it follows that we must save pointers to each node in stack , so as to implement the Last In First Out principle .

Because the number of nodes in linked list is usually not known , we will use the linked implementation of stack .
Suppose that stack is an object of type linkedListType , and is pointer of the same type as the pointer first .
Consider the following .

Because is not nullptr , the statements in Lines and execute Figure .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Removing Recursion : Nonrecursive Algorithm to Print Linked List Backward After the statement in Line executes , the loop condition in Line is reevaluated .

Because is not nullptr , the loop condition evaluates to true , so the statements in Lines and execute Figure .

FIGURE List and stack after the statements ; and ; execute After the statement in Line executes , the loop condition , in Line , is evaluated again .

Because is not nullptr , the loop condition evaluates to true , so the statements in Lines and execute Figure .

Because is nullptr , the loop condition evaluates to false , and the while loop Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

From Figure , it follows that pointer to each node in the linked list is saved in the stack .
The top element of the stack contains pointer to the last .

The statement in Line removes the top element of the stack Figure .

Next , the loop condition in Line is evaluated .
Because the loop condition evaluates to true , the statements in Lines , and execute .
After the statements in Lines and execute , Figure results .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Next , the loop condition in Line is evaluated .
Because the loop condition evaluates to true , the statements in Lines , and execute .
After the statements in Lines and execute , Figure results .

Next , the loop condition in Line is evaluated .
Because the loop condition evaluates to false , the while loop terminates .
The while loop in Line produces the following output : Queues This section discusses another important data structure called queue .
The notion of queue in computer science is the same as the notion of the queues to which you are accustomed in everyday life .
There are queues of customers in bank or in grocery store and queues of cars waiting to pass through tollbooth .
Similarly , because computer can send print request faster than printer can print , queue of documents is often waiting to be printed at printer .
The general rule to process elements in queue is that the at the front of the queue is served next , and when new arrives , he or she stands at the end of the queue .
That is , queue is First In First Out data structure .

Queues have numerous applications in computer science .
Whenever system is modeled on the First In First Out principle , queues are used .
At the end of this section , we will discuss one of the most widely used applications of queues , computer simulation .
First , however , we need to develop the tools necessary to implement queue .
The next few sections discuss how to design classes to implement queues as an ADT .

queue is set of elements of the same type in which the elements are added at one end , called the back or rear , and deleted from the other end , called the front .
For example , consider line of customers in bank , wherein the customers are waiting to deposit money or to conduct some other business .
Each new gets in the line at the rear .
Whenever teller is ready for new  the at the front of the line is served .

The rear of the queue is accessed whenever new is added to the queue , and the front of the queue is accessed whenever an is deleted from the queue .
As in Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Queue : data structure in which the elements are added at one end , called the rear , and deleted from the other end , called the front ; First In First Out data structure .

Queue Operations From the definition of queues , we see that the two key operations are add and delete .
We call the add operation addQueue and the delete operation deleteQueue .
Because elements can be neither deleted from an empty queue nor added to full queue , we need two more operations to successfully implement the addQueue and deleteQueue operations : isEmptyQueue whether the queue is and isFullQueue whether queue is .

We also need an operation , initializeQueue , to initialize the queue to an empty state .

Moreover , to retrieve the first and last elements of the queue , we include the operations front and back , as described in the following list .
Some of the queue operations .

If the queue is full , it returns the value true ; otherwise , it returns the value false .

Input to isEmptyQueue : Determines whether the queue is empty .
If the queue is empty , it returns the value true ; otherwise , it returns the value false .

Prior to this operation , the queue must exist and must not be empty .

Input to this operation consists of the queue .
Prior to this operation , the queue must exist and must not be empty .

Input to this operation consists of the queue and the new .
Prior to this operation , the queue must exist and must not be full .

Input to this operation consists of the queue .
Prior to this operation , the queue must exist and must not be empty .

As in the case of stack , queue can be stored in an array or in linked structure .
We will consider both implementations .
Because elements are added at one end and removed from the other end , we need two pointers to keep track of the front and rear of the queue , called queueFront and queueRear .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

We leave it as an exercise for you to draw the UML class diagram of the class queueADT .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Of course , we need an array to store the queue elements , the variables queueFront and queueRear to keep track of the first and last elements of the queue and the variable maxQueueSize to specify the maximum size of the queue .
Thus , we need at least four member variables .

Before writing the algorithms to implement the queue operations , we need to decide how to use queueFront and queueRear to access the queue elements .
How do queueFront and queueRear indicate that the queue is empty or full .
Suppose that queueFront gives the index of the first of the queue , and queueRear gives the index of the last of the queue .
To add an to the queue , first we advance queueRear to the next array position , and then we add the to the position that queueRear is pointing to .
To delete an from the queue , first we retrieve the that queueFront is pointing to , and then we advance queueFront to the next of the queue .
Thus , queueFront changes after each operation , and queueRear changes after each addQueue operation .

see what happens when queueFront changes after operation and queueRear changes after an addQueue operation .
Assume that the array to hold the queue elements is of size .

Initially , the queue is empty .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Queues FIGURE .

Queue after the operation Will this queue design work .
Suppose stands for adding is , an element to the queue , and stands for deleting is , an element from the queue .
Consider the following sequence of operations :

This sequence of operations would eventually set the index queueRear to point to the last array position , giving the impression that the queue is full .
However , the queue has only two or three elements , and the front of the array is empty Figure .

Queue after the sequence of operations AAADADADADADA .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

If the value of queueFront indicates that there is room in the front of the array , then when queueRear gets to the last array position , we can slide all of the queue elements toward the first array position .
This solution is good if the queue size is very small ; otherwise , the program may execute more slowly .

Another solution to this problem is to assume that the array is is , the first array position immediately follows the last array position Figure .

FIGURE Circular queue We will consider the array containing the queue to be circular , although we will draw the figures of the array holding the queue elements as before .

Suppose that we have the queue as shown in Figure .

queueFront queueRear After .

After the operation , the queue is as shown in Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In this case , will be set to , which is the first array position .

This queue design seems to work well .
Before we write the algorithms to implement the queue operations , consider the following two cases .

Case : Suppose that after certain operations , the array containing the queue is as shown in Figure .

Queue before and after the delete operation After the operation , the resulting array is as shown in Figure .

Case : Let us now consider the queue shown in Figure .

queue elements queueFront .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

This latest queue design has brought up another problem of distinguishing between an empty and full queue .

This problem has several solutions .
One solution is to keep count .
In addition to the member variables and  we need another variable , count , to implement the queue .
The value of count is incremented whenever new is added to the queue , and it is decremented whenever an is removed from the queue .
In this case , the function initializeQueue initializes count to .
This solution is very useful if the user of the queue frequently needs to know the number of elements in the queue .

Another solution is to let indicate the index of the array position preceding the first of the queue , rather than the index of the first itself .
In this case , assuming still indicates the index of the last in the queue , the queue is empty if .
In this solution , the slot indicated by the index is , the slot preceding the first true is reserved .
The queue will be full if the next available space is the special reserved slot indicated by Finally , because the array position indicated by is to be kept empty , if the array size is , say , then elements can be stored in the queue Figure .

Array to store the queue elements with reserved slot Let us implement the queue using the first solution .
That is , we use the variable count to indicate whether the queue is empty or following class implements the functions of the abstract class queueADT .
Because arrays can be allocated dynamically , we will leave it for the user to specify the size of the array to implement the queue .
The default size of the array is .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Next , we consider the implementation of the queue operations .

EMPTY QUEUE AND FULL QUEUE As discussed earlier , the queue is empty if , and the queue is full if maxQueueSize .
So the functions to implement these operations are : template .

INITIALIZE QUEUE This operation initializes queue to an empty state .
The first is added at the first array position .
Therefore , we initialize to , queueRear to maxQueueSize , and to Figure .

FRONT This operation returns the first element of the queue .
If the queue is nonempty , the element of the queue indicated by the index is returned ; otherwise , the program terminates .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

BACK This operation returns the last element of the queue .
If the queue is nonempty , the element of the queue indicated by the index is returned ; otherwise , the program terminates .

Because points to the last of the queue , to add new to the queue , we first advance to the next array position and then add the new to the array position indicated by .

So the function addQueue is : template .

Because points to the array position containing the first of the  in order to remove the first  we decrement by and advance to the next .
So the function deleteQueue is : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

CONSTRUCTORS AND DESTRUCTORS To complete the implementation of the operations , we next consider the implementation of the constructor and the destructor .
The constructor gets the maxQueueSize from the user , sets the variable maxQueueSize to the value specified by the user , and creates an array of size maxQueueSize .
If the user does not specify the size , the constructor uses the default value , which is , to create an array of .
The constructor also initializes and to indicate that the is empty .
The definition of the function to implement the constructor is : template .

The array to store the elements is created dynamically .
Therefore , when the object goes out of scope , the destructor simply deallocates the memory occupied by the array that stores the elements .
The definition of the function to implement the destructor is : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Also , the array implementation of the requires the array to be treated in special way together with the values of the indices and .
The linked implementation of simplifies many of the special cases of the array implementation and , because the memory to store is allocated dynamically , the is never full .
This section discusses the linked implementation of .

Because elements are added at one end and removed from the other end , we need to know the front of the and the rear of the .
Thus , we need two pointers , and  to maintain the .
The following class implements the functions of the abstract class queueADT : of the node template .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The UML class diagram of the class is left as an exercise for you .

Next , we write the definitions of the functions of the class .

EMPTY AND FULL QUEUE The is empty if is nullptr .
Memory to store the elements is allocated dynamically .
Therefore , the is never full , so the function to implement Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Note that in reality , in the linked implementation of queues , the function isFullQueue does not apply because , logically , the is never full .
However , you must provide its definition because it is included as an abstract function in the parent class queueADT .

INITIALIZE QUEUE The operation initializeQueue initializes the to an empty state .
The is empty if there are no elements in the .
Note that the constructor initializes the when the object is declared .
So this operation must remove all of the elements , if any , from the .
Therefore , this operation traverses the containing the starting at the first node , and it deallocates the memory occupied by the elements .
The definition of this function is : template .

The addQueue operation adds new at the end of the queue .
To implement this operation , we access the pointer .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

If the queue is empty , the function front terminates the program .

If the queue is nonempty , the operation back returns the last of the queue , so the of the queue indicated by the pointer is returned .
If the queue is empty , the function back terminates the program .
Similarly , if the queue is nonempty , the operation deleteQueue removes the first of the queue , so we access the pointer .

The definitions of the functions to implement these operations are : template .

When the object goes out of scope , the destructor destroys the  that is , it deallocates the memory occupied by the elements of the .
The definition of the function to implement the destructor is similar to the definition of the function initializeQueue .
Also , the functions to implement the copy constructor and overload the assignment operators are similar to the corresponding functions for stacks .
Implementing these operations is left as an exercise for you .

EXAMPLE The following program tests various operations on .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Queue Elements : Queue Derived from the class unorderedLinkedListType From the definitions of the functions to implement the operations , it is clear that the linked implementation of is similar to the implementation of linked list created in forward manner Chapter .
The addQueue operation is similar to the operation insertFirst .
Likewise , the operations initializeQueue and initializeList and isEmptyQueue and isEmptyList are similar .
The deleteQueue operation can be implemented as before .
The pointer is the same as the pointer first , and the pointer is the same as the pointer last .
This correspondence suggests that we can derive the class to implement the from the class linkedListType Chapter .

Note that the class linkedListType is an abstract class and does not implement all of the operations .
However , the class unorderedLinkedListType is derived from the class linkedListType and provides the definitions of the abstract functions of the class linkedListType .
Therefore , we can derive the class from the class unorderedLinkedListType .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Application of Queues : Simulation .

See Programming Exercise at the end of this chapter .

Application of Queues : Simulation technique in which one system models the behavior of another system is called simulation .
For example , physical simulators wind tunnels used to experiment with the design of car bodies and flight simulators used to train airline pilots .
Simulation techniques are used when it is too expensive or dangerous to experiment with real systems .
You can also design computer models to study the behavior of real systems .

Simulating the behavior of an expensive or dangerous experiment using computer model is usually less expensive than using the real system and is good way to gain insight without putting human life in danger .
Moreover , computer simulations are particularly useful for complex systems when it is difficult to construct mathematical model .
For such systems , computer models can retain descriptive accuracy .
In computer simulations , the steps of program are used to model the behavior of real system .
Let us consider one such problem .

The manager of local movie theater is hearing complaints from customers about the length of time they have to wait in line to buy tickets .
The theater currently has only one cashier .
Another theater is preparing to open in the neighborhood , and the manager is afraid of losing customers .
The manager wants to hire enough cashiers so that customer does not have to wait too long to buy ticket but does not want to hire extra cashiers on trial basis and potentially waste time and money .
One thing that the manager would like to know is the average time customer has to wait for service .
The manager wants someone to write program to simulate the behavior of the theater .

In computer simulation , the objects being studied are usually represented as data .
For the theater problem , some of the objects are the customers and the cashier .
The cashier serves the customers , and we want to determine average waiting time .
Actions are implemented by writing algorithms , which in programming language are implemented with the help of functions .
Thus , functions are used to implement the actions of the objects .
In , we can combine the data and the operations on that data into single unit with the help of classes .
Thus , objects can be represented as classes .
The member variables of the class describe the properties of the objects , and the function members describe the actions on that data .
This change in simulation results can also occur if we change the values of the data or modify the definitions of the functions is , modify the algorithms implementing the .
The main goal of computer simulation is to either generate results showing the performance of an existing system or predict the performance of proposed system .

In the theater problem , when the cashier is serving customer , the other customers must wait .
Because customers are served on first come , first served basis and queues are an Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

This section examines computer simulations in which queues are the basic data structure .
These simulations model the behavior of systems , called queuing systems , in which queues of objects are waiting to be served by various servers .
In other words , queuing system consists of servers and queues of objects waiting to be served .
We deal with variety of queuing systems on daily basis .
For example , grocery store and banking system are both queuing systems .
Furthermore , when you send print request to networked printer that is shared by many people , your print request goes in .
Print requests that arrived before your print request are usually completed before yours .
Thus , the printer acts as the server when of documents is waiting to be printed .

Designing Queuing System In this section , we describe queuing system that can be used in variety of applications , such as bank , grocery store , movie theater , printer , or mainframe environment in which several people are trying to use the same processors to execute their programs .
To describe queuing system , we use the term server for the object that provides the service .
For example , in bank , teller is server ; in grocery store or movie theater , cashier is server .
We will call the object receiving the service the customer , and the service time it takes to serve transaction time .

Because queuing system consists of servers and queue of waiting objects , we will model system that consists of list of servers and waiting queue holding the customers to be served .
The customer at the of the queue waits for the next available server .

When server becomes free , the customer at the of the queue moves to the free server to be served .

When the first customer arrives , all servers are free and the customer moves to the first server .
When the next customer arrives , if server is available , the customer immediately moves to the available server ; otherwise , the customer waits in the queue .
To model queuing system , we need to know the number of servers , the expected arrival time of customer , the time between the arrivals of customers , and the number of events affecting the system .

Let us again consider the movie theater system .
The performance of the system depends on how many servers are available , how long it takes to serve customer , and how often customer arrives .
If it takes too long to serve customer and customers arrive frequently , then more servers are needed .
This system can be modeled as simulation .
In simulation , the clock is implemented as counter , and the passage of , say , one minute can be implemented by incrementing the counter by .
The simulation is run for fixed amount of time .
If the simulation needs to be run for minutes , the counter starts at and goes up to , which can be implemented by using loop .

For the simulation described in this section , we want to determine the average wait time for customer .
To calculate the average wait time for customer , we need to add the waiting Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Application of Queues : Simulation .

When customer arrives , he or she goes to the end of the queue and the waiting time begins .
If the queue is empty and server is free , the customer is served immediately , so this waiting time is zero .
On the other hand , if customer arrives and either the queue is nonempty or all of the servers are busy , the customer must wait for the next available server and , therefore , this waiting time begins .

We can keep track of the waiting time by using timer for each customer .
When customer arrives , the timer is set to , which is incremented after each time unit .

Suppose that , on average , it takes five minutes for server to serve customer .
When server becomes free and the waiting queue is nonempty , the customer at the front of the queue proceeds to begin the transaction .
Thus , we must keep track of the time customer is with server .
When the customer arrives at server , the transaction time is set to five and is decremented after each time unit .
When the transaction time becomes zero , the server is marked free .
Hence , the two objects needed to implement computer simulation of queuing system are the customer and the server .

Next , before designing the main algorithm to implement the simulation , we design classes to implement each of the two objects : customer and server .

Customer Every customer has customer number , arrival time , waiting time , transaction time , and departure time .
If we know the arrival time , waiting time , and transaction time , we can determine the departure time by adding these three times .
Let us call the class to implement the customer object customerType .
It follows that the class customerType has four member variables : the customerNumber , arrivalTime , waitingTime , and transactionTime , each of the data type int .
The basic operations that must be performed on an object of type customerType are as follows : set the number , arrival time , and waiting time ; increment the waiting time by one time unit ; return the waiting time ; return the arrival time ; return the transaction time ; and return the customer number .
The following class , customerType , implements the customer as an ADT : class customerType public : int , int , int ; to initialize the instance variables .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Application of Queues : Simulation .

FIGURE UML class diagram of the class customerType The definitions of the member functions of the class customerType follow easily from their descriptions .
Next , we give the definitions of the member functions of the class customerType .

The function setCustomerInfo uses the values of the parameters to initialize    and .
The definition of setCustomerInfo is : void 

The definition of the constructor is similar to the definition of the function setCustomerInfo .
It uses the values of the parameters to initialize    and .
To make debugging easier , we use the function setCustomerInfo to write the definition of the constructor , which is given next , as follows :    

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Server At any given time unit , the server is either busy serving customer or is free .
We use string variable to set the status of the server .
Every server has timer and , because the program might need to know which customer is served by which server , the server also stores the information of the customer being served .
Thus , three member variables are associated with server : the status , the  and the currentCustomer .

Some of the basic operations that must be performed on server are as follows : check whether the server is free ; set the server as free ; set the server as busy ; set the transaction time is , how long it takes to serve the ; return the remaining transaction time determine whether the server should be set to ; if the server is busy after each time unit , decrement the transaction time by one time unit ; and so on .
The following class , serverType , implements the server as an ADT : class serverType .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Application of Queues : Simulation .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Application of Queues : Simulation .

Because we are designing simulation program that can be used in variety of applications , we need to design two more classes : one to create and process list of servers and one to create and process queue of waiting customers .
The next two sections describe each of these classes .

Server List server list is set of servers .
At any given  server is either free or busy .
For the customer at the front of the queue , we need to find server in the list that is free .
If all of the servers are busy , then the customer must wait until one of the servers becomes free .

Thus , the class that implements list of servers has two member variables : one to store the number of servers and one to maintain list of servers .
Using dynamic arrays , depending on the number of servers specified by the user , list of servers is created during program execution .
Some of the operations that must be performed on server list are as follows : return the server number of free server ; when customer gets ready to do business and server is available , set the server to busy ; when the simulation ends , some of the servers might still be busy , so return the number of busy servers ; after each unit , reduce the of each busy server by one unit ; and if the of server becomes zero , set the server to free .
The following class , serverListType , implements the list of servers as an ADT : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any if subsequent rights restrictions require it .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any if subsequent rights restrictions require it .

Application of Queues : Simulation .

UML class diagram of the class serverListType .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any if subsequent rights restrictions require it .

The function setServerBusy sets server to busy .
This function is overloaded .
The of the server that is set to busy is passed as parameter to this function .
One function sets the transaction according to the parameter tTime ; the other function sets it by using the transaction stored in the object cCustomer .
The transaction is later needed to determine the average wait .
The definitions of these functions are : void  customerType .

The definition of the function updateServers is quite straightforward .
Starting at the first server , it searches the list of for busy .
When busy server is found , its transactionTime is decremented by .
If the transactionTime reduces to zero , the Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any if subsequent rights restrictions require it .

Application of Queues : Simulation .

If the transactionTime of busy server reduces to zero , then the transaction of the customer being served by the server is complete .
If the actual parameter corresponding to outFile is cout , message indicating which customer has been served is printed on the screen , together with the departing .
Otherwise , the output is sent to file specified by the user .
The definition of this function is as .

Waiting Customers Queue When customer arrives , he or she goes to the end of the queue .
When server becomes available , the customer at the front of the queue leaves to conduct the transaction .
After each unit , the waiting of each customer in the queue is incremented by .
The ADT queueType designed in this chapter has all the operations needed to implement queue , except the operation of incrementing the waiting of each customer in the queue by one unit .
We will derive class , waitingCustomerQueueType , from the class queueType and add the additional operations to implement the customer queue .
The definition of the class waitingCustomerQueueType is as follows : class waitingCustomerQueueType : public .

The value of is passed to the constructor of queueType .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any if subsequent rights restrictions require it .

You can also derive it from the class linkedQueueType , which implements the queue in linked list .
We leave the details as an exercise for you .

The definitions of the member functions are given next .
The definition of the constructor .

The function updateWaitingQueue increments the waiting of each customer in the queue by one unit .
The class waitingCustomerQueueType is derived from the class .
Because the member variables of are private , the function updateWaitingQueue cannot directly access the elements of the queue .
The only way to access the elements of the queue is to use the deleteQueue operation .
After incrementing the waiting  the element can be put back into the queue by using the addQueue operation .

The addQueue operation inserts the element at the end of the queue .
If we perform the deleteQueue operation followed by the addQueue operation for each element of the queue , then eventually the front element again becomes the front element .
Given that each deleteQueue operation is followed by an addQueue operation , how do we determine that all of the elements of the queue have been processed .
We cannot use the isEmptyQueue or isFullQueue operations on the queue , because the queue will never be empty or full .

One solution to this problem is to create temporary queue .
Every element of the original queue is removed , processed , and inserted into the temporary queue .
When the original queue becomes empty , all of the elements in the queue are processed .
We can then copy the elements from the temporary queue back into the original queue .

However , this solution requires us to use extra memory space , which could be significant .

Also , if the queue is large , extra computer is needed to copy the elements from the temporary queue back into the original queue .
Let us look into another solution .

In the second solution , before starting to update the elements of the queue , we can insert dummy customer with wait of , say ,
During the update process , when we arrive at the customer with the wait of , we can stop the update process without processing the customer with the wait of .
If we do not process the customer with the wait of , this customer is removed from the queue and , after processing all of Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any if subsequent rights restrictions require it .

Application of Queues : Simulation .

This solution does not require us to create temporary queue , so we do not need extra computer to copy the elements back into the original queue .
We will use this solution to update the queue .
Therefore , the definition of the function updateWaitingQueue .

To run the simulation , we first need to get the following .

The number of units the simulation should run .
Assume that each unit is one minute .

The number of servers .

The amount of it takes to serve is , the transaction .

The approximate between customer arrivals .

These pieces of information are called simulation parameters .
By changing the values of these parameters , we can observe the changes in the performance of the system .
We can write function , setSimulationParameters , to prompt the user to specify these values .
The definition of this function is : void .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

When server becomes free and the queue is nonempty , we can move the at the front of the queue to the free server to be served .
Moreover , when starts the transaction , the waiting time ends .
The waiting time of the is added to the total waiting time .
The general algorithm to start the transaction that serverID denotes the ID of the free is :
Remove the from the front of the queue .

To run the simulation , we need to know the number of customers arriving at given time unit and how long it takes to serve the .
We use the Poisson distribution from statistics , which says that the probability of events occurring at given time is given by the formula : PðyÞ 

Suppose that , on average , arrives every four minutes .
During this period , the can arrive at any one of the four minutes .
Assuming an equal likelihood of each of the four minutes , the expected value that arrives in each of the four minutes is , 
Next , we need to determine whether or not the actually arrives at given minute .

One of the basic assumptions of the Poisson distribution is that the probability of more than one outcome occurring in short time interval is negligible .
For simplicity , we assume that only one Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Application of Queues : Simulation .

Thus , we use as the cutoff point to determine whether arrives at given time unit .
Suppose that , on average , arrives every four minutes .
We can use an algorithm to generate number between and .
If the value of the number generated is , we can assume that the arrived at particular time unit .
For example , suppose that rNum is random number such that rNum .
If rNum , the arrived at the given time unit .

We now describe the function runSimulation to implement the simulation .
Suppose that we run the simulation for time units and customers arrive at time units , and .
The average transaction time is five is , five time units .
For simplicity , assume that we have only one server and that the server becomes free at time unit , and that all customers arriving before time unit have been served .
When the server becomes free at time unit , the arriving at time unit starts the transaction .
Because the transaction of the arriving at time unit starts at time unit and it takes five minutes to complete transaction , when the simulation loop ends , the arriving at time unit is still at the server .
Moreover , customers arriving at time units and are in the queue .
For simplicity , we assume that when the simulation loop ends , the customers at the servers are considered served .
The general algorithm for this function is :
Declare and initialize the variables , such as the simulation parameters , number ,  total and average waiting times , number of customers arrived , number of customers served , number of customers left in the waiting queue , number of customers left with the servers , waitingCustomersQueue , and list of servers .

Update the server list to decrement the transaction time of each busy server by one time unit .

If the queue is nonempty , increment the waiting time of each by one time unit .

If arrives , increment the number of customers by and add the new to the queue .

If server is free and the queue is nonempty , remove from the front of the queue and send the to .

Print the appropriate results .
Your results must include the number of customers left in the queue , the number of customers still with servers , the number of customers arrived , and the number of customers who actually completed transaction .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Exercise asks you to write the definition of the function runSimulation .

When we tested our version of the simulation program , we generated the following results .

Sample Run : Customer number arrived at time unit Customer number arrived at time unit From server number number departed at time unit Customer number arrived at time unit Customer number arrived at time unit From server number number departed at time unit From server number number departed at time unit Customer number arrived at time unit From server number number departed at time unit From server number number departed at time unit Customer number arrived at time unit Customer number arrived at time unit Customer number arrived at time unit From server number number departed at time unit Customer number arrived at time unit Customer number arrived at time unit From server number number departed at time unit Customer number arrived at time unit Customer number arrived at time unit From server number number departed at time unit Customer number arrived at time unit Customer number arrived at time unit Customer number arrived at time unit From server number number departed at time unit Customer number arrived at time unit From server number number departed at time unit Customer number arrived at time unit From server number number departed at time unit Customer number arrived at time unit From server number number departed at time unit From server number number departed at time unit Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Quick Review Customer number arrived at From server number departed at time unit From server number departed at time unit Customer number arrived at From server number departed at time unit Customer number arrived at From server number departed at time unit time unit number number time unit number time unit number The simulation ran for time units Number of servers : Average transaction time : Average arrival time difference between customers : Total waiting time : Number of customers that completed transaction : Number of customers left in the servers : The number of customers left in queue : Average waiting time : END SIMULATION QUICK REVIEW .

stack is data structure in which the items are added and deleted from one end only .

stack is Last In First Out data structure .

The basic operations on stack are as follows : push an item onto the stack , pop an item from the stack , retrieve the top element of the stack , initialize the stack , check whether the stack is empty , and check whether the stack is full .

stack can be implemented as an array or linked list .

The middle elements of stack should not be accessed directly .

Stacks are restricted versions of arrays and linked lists .

Postfix notation does not require the use of parentheses to enforce operator precedence .

In postfix notation , the operators are written after the operands .

Postfix expressions are evaluated according to the following rules : Scan the expression from left to right .

If an operator is found , back up to get the required number of operands , evaluate the operator , and continue .

queue is data structure in which the items are added at one end and removed from the other end .

queue is First In First Out data structure .

The basic operations on queue are as follows : add an item to the queue , remove an item from the queue , retrieve the first or last element of the .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

queue can be implemented as an array or linked list .

The middle elements of queue should not be accessed directly .

Queues are restricted versions of arrays and linked lists .

EXERCISES The number in parentheses at the end of an exercise refers to the learning objective listed at the beginning of the chapter .

Mark the following statements as true or false .

stack is list of homogenous elements in which the addition and c .
In the array implementation of stack , stackTop contains the index of .

In the array implementation of stack , to remove the top element of the stack , the operation pop decrements the value of stackTop by if .
In the array implementation of stack , the operation top returns the .

In the linked implementation of stack , stackTop contains the address .

In the linked implementation of stack , the operation isFullStack .

In the array implementation of queue , the operation deleteQueue .

In the linked implementation of queue , the queue is empty if Suppose that stack is an object of type .
What is the Suppose that stack is an object of type and the value .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Show what is output by the following segment of .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Explain why , in the linked implementation of stack , it is not necessary to Suppose that stack is an object of type .
What is Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Assume that this function is Write the definition of the method second that takes as parameter stack object and returns the second element of the stack .
The original stack .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Also , suppose that the value of queueFront What are the values of queueFront and queueRear after adding an element to queue .

What are the values of queueFront and queueRear after removing an element from queue .

Suppose that queue is object and the size of the array implementing queue is .
Also , suppose that the value of queueFront .

What are the values of queueFront and queueRear after adding an element to queue .

What are the values of queueFront and queueRear after removing an element from queue .

Suppose that queue is object and the size of the array implementing queue is .
Also , suppose that the value of queueFront .

What are the values of queueFront and queueRear after adding an element to queue .

What are the values of queueFront and queueRear after removing an element from queue .

Suppose that queue is object and the size of the array implementing queue is .
Also , suppose that the value of queueFront .

What are the values of queueFront and queueRear after adding an element to queue .

What are the values of queueFront and queueRear after removing an element from queue .

Suppose that queue is implemented as an array with the special reserved slot , as described in this chapter .
Also , suppose that the size of the array implementing queue is .
If the value of queueFront is , what is the Suppose that queue is implemented as an array with the special reserved slot , as described in this chapter .
Suppose that the size of the array implementing queue is .
Also , suppose that the value of queueFront is .

What are the values of queueFront and queueRear after adding an element to queue .

What are the values of queueFront and queueRear after removing an element from queue .
Also , what was the position of the removed queue element .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Write function template , reverseStack , that takes as parameter stack object and uses queue object to reverse the elements of the stack .

Write function template , reverseQueue , that takes as parameter queue object and uses stack object to reverse the elements of the queue .

Add the operation queueCount to the class array implementation of , which returns the number of elements in the queue .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Exercises .

Two stacks of the same type are the same if they have the same number of elements and their elements at the corresponding positions are the same .

Overload the relational for the class that returns true if two stacks of the same type are the same ; it returns false otherwise .

Also , write the definition of the function template to overload this .

Repeat Programming Exercise for the class .

Add the following operation to the class .

That is , the top element of is the bottom element of , and so on .
The old contents of are destroyed , and is unchanged .

Write the definition of the function template to implement the operation reverseStack .

Repeat Programming Exercises and for the class .

Write program that takes as input an arithmetic expression .
The program outputs whether the expression contains matching grouping symbols .
For example , the arithmetic expressions + and + contain matching grouping symbols .
However , the expression + + does not contain matching grouping symbols .

Write program that uses stack to print the prime factors of positive integer in descending order .

The Programming Example , Converting Number from Binary to Decimal , in Chapter , uses recursion to convert binary number into an equivalent decimal number .
Write program that uses stack to convert binary number into an equivalent decimal number .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Write program that uses stack to convert decimal number into an equivalent binary number .

Write program that reads string consisting of positive integer or positive decimal number and converts the number to the numeric format .
If the string consists of decimal number , the program must use stack to convert the decimal number to the numeric format .

The rules to convert an infix expression into an equivalent postfix expression are as follows : Suppose infx represents the infix expression and pfx represents the postfix expression .
The rules to convert infx into pfx are as follows :

Initialize pfx to an empty expression and also initialize the stack .

Get the next symbol , sym , from infx .

If sym is an operand , append sym to pfx .

If sym is , push sym into the stack .

If sym is , pop and append all of the symbols from the stack until the most recent left parentheses .
Pop and discard the left parentheses .

Pop and append all of the operators from the stack to pfx that are above the most recent left parentheses and have precedence greater than or equal to sym .

Push sym onto the stack .

After processing infx , some operators might be left in the stack .
Pop and append to pfx everything from the stack .

In this program , you will consider the following arithmetic operators : + and .
You may assume that the expressions you will process are error free .

Design class that stores the infix and postfix strings .
The class must include the following .

Some other operations that you might need .

The resulting postfix expression is stored in pfx .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

If the first is of higher or equal precedence than the second  it returns the value true ; otherwise , it returns the value false .

Include the constructors and destructors for automatic initialization and dynamic memory deallocation .

Test your program on the following expressions :

Write the definitions of the functions to overload the assignment operator and copy constructor for the class queueType .
Also , write program to test these operations .

Write the definitions of the functions to overload the assignment operator and copy constructor for the class linkedQueueType .
Also , write program to test these operations .

This chapter describes the array implementation of queues that use special array slot , called the reserved slot , to distinguish between an empty and full .

Write the definition of the class and the definitions of the function members of this design .
Also , write test program to test various operations on .

Write the definition of the function moveNthFront that takes as parameter positive .
The function moves the nth element of the to the front .
The order of the remaining elements remains unchanged .

For example , suppose : and .

Add this function to the class queueType .
Also , write program to test your method .

Write program that reads line of text , changes each uppercase letter to lowercase , and places each letter both in and onto stack .
The program should then verify whether the line of text is palindrome set of letters or numbers that is the same whether read forward or .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

You can also use the variable count to return the number of elements in the .
On the other hand , class linkedQueueType does not use such variable to keep track of the number of elements in the .
Redefine the class linkedQueueType by adding the variable count to keep track of the number of elements in the .

Modify the definitions of the functions addQueue and deleteQueue as necessary .
Add the function queueCount to return the number of elements in the Also , write program to test various operations of the class you defined .

Write the definition of the class linkedQueueType , which is derived from the class unorderedLinkedList , as explained in this chapter .
Also , write program to test various operations of this class .

Write the definitions of the functions setWaitingTime , getArrivalTime , getTransactionTime , and getCustomerNumber of the class customerType defined in the section Application of Queues : Simulation .

Write the definitions of the functions getRemainingTransactionTime , setCurrentCustomer , getCurrentCustomerNumber , getCurrentCustomerArrivalTime , getCurrentCustomerWaitingTime , and getCurrentCustomerTransactionTime of the class serverType defined in the section Application of Queues : Simulation .

Write the definition of the function runSimulation to complete the design of the computer simulation program the section Application of Queues :
Test run your program for variety of data .

Moreover , use random number generator to decide whether customer arrived at given time unit .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Explore how to implement the merge sort algorithm and how it performs Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter described how to organize data using linked lists .
The most important operation that can be performed on list is the search algorithm .
Using the search algorithm , you can do the .

Determine whether particular is in the list .

If the data is specially organized , find the location in the list where new can be inserted .

Find the location of an to be deleted .

The search performance , therefore , is crucial .
If the search is slow , it takes large amount of computer time to accomplish your task ; if the search is fast , you can accomplish your task quickly .

In the first part of this chapter , we describe the search algorithms : sequential search and binary search .
Certain search algorithms work only on sorted data .
Therefore , the second half of this chapter discusses various sorting algorithms .

Searching and Sorting Algorithms The searching and sorting algorithms that we describe are generic .
Because searching and sorting require comparisons of data , the algorithms should work on the type of data that provides appropriate functions to compare data items .
Now data can be organized with the help of an array or linked list .
You can create an array of data items , or you can use the class unorderedLinkedList to organize data .
The algorithms that we describe should work on either organization .
Consequently , we will write the function templates to implement particular algorithm .
All algorithms described in this chapter , with the exception of the merge sort algorithms , are for lists .
Because of storage issues and some other overheads , merge sort works better for linked lists .
Therefore , after describing the merge sort algorithm , we will add it as function to the class unorderedLinkedList .
We will also show how to use the searching and sorting algorithms on objects of the class unorderedArrayListType .
Moreover , we will place all of the searching and sorting functions in the header file .
Therefore , if you need to use particular searching or sorting function designed in this chapter , your program can include this header file and use that function .

Search Algorithms Chapters , and described how to implement the sequential search algorithm .

This chapter discusses other search algorithms and analyzes them .
Analysis of the algorithms enables programmers to decide which algorithm to use for specific application .

Before exploring these algorithms , let us make the following observations .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

For example , if you have data set consisting of student records , then the student ID uniquely identifies each student in particular school .
This unique member of the is called the key of the .
The keys of the items in the data set are used in such operations as searching , sorting , inserting , and deleting .
For instance , when we search the data set for particular  we compare the key of the for which we are searching with the keys of the items in the data set .

When analyzing searching and sorting algorithms , the key comparisons refer to comparing the key of the search with the key of an in the list .
The number of key comparisons refers to the number of times the key of the search algorithms such as searching and is compared with the keys of the items in the list .

Sequential Search The sequential search called linear on lists was described in Chapters and , and the sequential search on linked lists was covered in Chapter .

The sequential search works the same for both and linked lists .
The search always starts at the first element in the list and continues until either the is found in the list or the entire list is searched .

Because we are interested in the performance of the sequential search is , the analysis of this type of , for easy reference and the sake of completeness , we provide the sequential search algorithm for lists described in Chapters and .
If the search is  its index is , its location in the is returned .
If the search is unsuccessful , is returned .
Note that the following sequential search does not require the list elements to be in any particular order .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

You can also write recursive algorithm to implement the sequential search algorithm .

The statements before and after the loop are executed only once and hence require very little computer time .
The statements in the while loop are the ones that are repeated several times .
For each iteration of the loop , the search is compared with an element in the list , and few other statements are executed , including some other comparisons .

Clearly , the loop terminates as soon as the search is in the list .
Therefore , execution of the other statements in the loop is directly related to the outcome of the key comparison .
Also , different programmers might implement the same algorithm differently , although the number of key comparisons would typically be the same .
The speed of computer can also easily affect the time an algorithm takes to perform , but it , of course , does not affect the number of key comparisons required .

Therefore , when analyzing search algorithm , we count the number of key comparisons because this number gives us the most useful information .
Furthermore , the criteria for counting the number of key comparisons can be applied equally well to other search algorithms .

Suppose that is list of length .
We want to determine the number of key comparisons made by the sequential search when the list is searched for given item .

If the search item is not in the list , we then compare the search item with every element in the list , making comparisons .
This is an unsuccessful case .

Suppose that the search item is in the list .
Then , the number of key comparisons depends on where in the list the search item is located .
If the search item is the first element of , we make only one key comparison .

On the other hand , if the search item is the last element in the list , the algorithm makes comparisons .
This is the worst case .
The best and worst cases are not likely to occur every time we apply the sequential search on , so it would be more helpful if we could determine the average behavior of the algorithm .
That is , we need to determine the average number of key comparisons the sequential search algorithm makes in the successful case .

To determine the average number of comparisons in the successful case of the sequential search algorithm :
Consider all possible cases .

Find the number of comparisons for each case .

Add the number of comparisons and divide by the number of cases .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

If the target is the second element in the list , two comparisons are required .

Similarly , if the target is the kth element in the list , comparisons are required .
We assume that the target can be any element in the list ; that is , all list elements are equally likely to be the target .
Suppose that there are elements in the list .
The following expression gives the average number of comparisons :  It is known that : nðn  Therefore , the following expression gives the average number of comparisons made by the sequential search in the successful case : nðn  This expression shows that , on average , successful sequential search searches half of the list .
It thus follows that if the list size is , on average , the sequential search makes comparisons .
As result , the sequential search is not efficient for large lists .

Binary Search As you can see , the sequential search is not efficient for large lists because , on average , it searches half the list .
We , therefore , describe another search algorithm called the binary search , which is very fast .
However , binary search can be performed only on sorted lists .
We , therefore , assume that the list is sorted .
Later in this chapter , we will describe several sorting algorithms .

The binary search algorithm uses the and conquer " technique to search the list .

First , the search item is compared with the middle element of the list .
If the search item is less than the middle element of the list , we restrict the search to the first half of the list ; otherwise , we search the second half of the list .

Consider the sorted list of in Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

List of Suppose that we want to determine whether is in the list .
Initially , the entire list is the search list Figure .

Search list , First , we compare with the middle element in this list , is .

Because and , we then restrict our search to the list , as shown in Figure .

Search list , This process is now repeated on the list , which is list of .

Because we need to determine the middle element of the list frequently , the binary search algorithm is typically implemented for lists .
To determine the middle element of the list , we add the starting index , first , and the ending index , last , of the search list and then divide by to calculate its index .
That is : mid first last .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The following function implements the binary search algorithm .
If the item is in the list , its location is returned ; if the search item is not in the list , is returned .

In the binary search algorithm , each time through the loop , we make two key comparisons .
The only exception is in the successful case ; the time through the loop , only one key comparison is made .

The binary search algorithm , as given in this chapter , uses an iterative control structure while to compare the search item with the list elements .
You can also write recursive algorithm to implement the binary search algorithm .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sorted list for binary search The size of this list is ; that is , the is .
Suppose that we are searching for item .
Table shows the values of   and each time through the loop .
It also shows the number of times the item is compared with an element in the list each time through the loop .

TABLE Values of   and and the Number of Comparisons for Search Item Iteration .

The item is at location , and the total number of comparisons is .

Next , let us search the list for item .
Table shows the values of   and each time through the loop .
It also shows the number of times the item is compared with an element in the list each time through the loop .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The item is found at location , and the total number of comparisons is .

Let us now search for item , as shown in Table .

TABLE Values of first , last , and mid and the Number of Comparisons for Search Item Iteration .

This is an unsuccessful search .
The total number of comparisons is .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Line : found at position The preceding program works as follows .
The statement in Line creates the array that the array is The statement in Line declares to be an int variable .
The statement in Line uses the binary search algorithm to determine whether is in .
Note that the array  its lengths , and the search item , which is , are passed as parameters to the function binarySearch .
The statements in Lines to output the result of the search , which is successful .

Performance of Binary Search Suppose that is sorted list of size and we want to determine if an item is in .

From the binary search algorithm , it follows that every iteration of the while loop cuts the size of the search list by half .
Because every iteration of the while loop makes two item comparisons , that is , is compared twice with the elements of , the binary search will make , at most , comparisons to determine whether is in .
On the other hand , recall that sequential search on average will make comparisons to determine whether is in .

To better understand how fast binary search is compared to sequential search , suppose that is of size .
Because , it follows that the while loop in binary search will have , at most , iterations to determine whether an element is in .
Every iteration of the while loop makes two key is , comparisons .
Therefore , to determine whether an element is in , binary search makes , at most , item comparisons .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Moreover , suppose that is power of , that is , for some nonnegative integer .
After each iteration of the while loop , about half of the elements are left to search , that is , the search sublist for the next iteration is half the size of the current sublist .
For example , after the first iteration , the search sublist size is about .
It is easy to see that the maximum number of the iteration of the while loop is about +

Each iteration makes two key comparisons .
Thus , the maximum number of comparisons to determine whether an element is in is + + +

In the case of successful search , it can be shown that for list of length  on average , binary search makes key comparisons .
In the case of an unsuccessful search , it can be shown that for list of length  binary search makes approximately key comparisons .

Binary Search Algorithm and the class orderedArrayListType The class orderedArrayListType , designed in Chapter , does not contain the binary search algorithm .
Now that you know how to implement the binary search algorithm , you can learn how to use it in the class orderedArrayListType .

To use the binary search algorithm within the class orderedArrayListType , we add the function binSearch to this class and call the functions binarySearch with the appropriate parameters .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Asymptotic Notation : Notation Just as problem is analyzed before writing the algorithm and the computer program , after an algorithm is designed , it should also be analyzed .
Usually , there are various ways to design particular algorithm .
Certain algorithms take very little computer time to execute , while others take considerable amount of time .
Consider the following examples .

EXAMPLE Consider the following algorithm that all variables are properly .

Line has one operation ,
Either Line or Line executes ; each has one operation .
There are three operations , in Line .

Therefore , the total number of operations executed in the preceding code .
In this algorithm , the number of operations executed fixed .

EXAMPLE Consider the following algorithm that all variables are properly .

Asymptotic Notation : Notation .

Similarly , there are nine or eight operations after the while loop , depending on whether Line or Line executes .

Line has one operation , and there are four operations within the while loop through .
Thus , Lines through have five operations .
If the while loop executes times , these five operations execute times , plus one extra operation executed at Line to terminate the loop .
Therefore , the number of operations executed from Lines through .

If the while loop executes times , the total number of operations executed  or : That  or : We can generalize it to the case when the while loop executes times .
If the while loop executes times , the number of operations executed  or : In these expressions , for very large values of  the term becomes the dominating term , and the terms and become negligible .

Usually , in an algorithm , certain operations are dominant .
For example , in the algorithm in Example , to add numbers , the dominant operation in Line .
Similarly , in search algorithm , because the search item compared with the items in the list , the dominant operations would be comparison , that  the relational operation .
Therefore , in the case of search algorithm , we the number of comparisons .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Suppose that you want to determine whether an item in list and that the of the list .
To determine whether the item in the list , there are various algorithms .
However , the basic method to compare the item with the items in the list .

Therefore , the performance of the algorithm depends on the number of comparisons .

Thus , in the case of search , the of the list and becomes the function ; that  gives the number of comparisons done by the search algorithm .
Suppose that on particular computer , it takes c units of computer time to execute one operation .

Thus , the computer time it would take to execute operations .
Clearly , the constant c depends on the speed of the computer and , therefore , varies from computer to computer .
However , the number of basic operations , the same on each computer .

If we know how the function grows as the of the problem grows , we can determine the efficiency of the algorithm .

TABLE Growth Rate of Various Functions .

Suppose that the problem size doubled .
From Table , it follows that if the number of basic operations function of , the number of basic operations quadrupled .
If the number of basic operations function of , then the number of basic operations squared .
However , if the number of operations function of , the change in the number of basic operations insignificant .

Suppose that computer can execute billion steps per second .
Table shows the time that the computer takes to execute steps .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Asymptotic Notation : Notation .

Figure shows the growth rate of functions in Table .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Growth rate of various functions The remainder of this section develops notation that shows how function grows as increases without bound .
That is , we develop notation that is useful in describing the Let be function of .
By the term asymptotic , we mean the study of the function as becomes larger and larger without bound .

Clearly , the function does not contain any linear term ; that is , the coefficient of in is zero .

TABLE Growth Rate of and + +

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Asymptotic Notation : Notation .

For large values of  we can predict the behavior of by looking at the behavior of .
In the algorithm analysis , if the complexity of function can be described by the complexity of quadratic function without the linear term , we say that the function is of , called of .

Let and be functions .
Assume that and are nonnegative ; that is , for all real numbers  and .

Definition : We say that is of , written , if there exist positive constants c and such that : for all .

EXAMPLE Let , wherein is nonnegative real number and .
Note that is constant function .

Now : ðnÞ for all : Let c , and .

It now follows that .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In Example , we use the preceding theorem to establish the of certain functions .

EXAMPLE In the following , is nonnegative function .

Function an + in which and are real numbers and is nonzero + + + + +

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Asymptotic Notation : Notation .

This code contains nested for loops .
The outer for loop , at Line , executes times .

For each iteration of the outer loop , the inner loop at Line executes times .
For each iteration of the inner loop , the output statement in Line executes .
It follows that the total number of iterations of the nested for loop is mn .
So the number of times the statement in Line executes is mn .
It follows that this algorithm is .
Note that if  then this algorithm is .

Table shows some common functions that appear in the algorithm analysis .

Let , wherein is the problem size .

TABLE Some Functions That Appear in Algorithm Analysis .

It can be shown that : nÞ OðnÞ nÞ : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Table summarizes the algorithm analysis of the search algorithms discussed earlier .

TABLE Number of Comparisons for List of Length .

Sequential search .

Lower Bound on Search Algorithms Sequential and binary search algorithms search the list by comparing the target element with the list elements .
For this reason , these algorithms are called search algorithms .
Earlier sections of this chapter showed that sequential search is of the order  and binary search is of the order , where is the size of the list .
The obvious question is : Can we devise search algorithm that has an order less than .

Before we answer this question , first we obtain the lower bound on the number of comparisons for the search algorithms .

Theorem : Let be list of size .
Suppose that the elements of are sorted .
If denotes the minimum number of comparisons needed , in the worst case , by using algorithm to recognize whether an element is in , then +

Corollary : The binary search algorithm is an optimal algorithm for solving search problems by the comparison method .

From these results , it follows that if we want to design search algorithm that is of an order less than , then it cannot be comparison based .

Sorting Algorithms There are several sorting algorithms in the literature .
In this chapter , we discuss some of the commonly used sorting algorithms .
To compare their performance , we also provide some analysis of these algorithms .
These sorting algorithms can be applied to either arraybased lists or linked lists .
We will specify whether the algorithm being developed is for lists or linked lists .

Sorting List : Bubble Sort Many sorting algorithms are available in the literature .
This section describes using the sorting algorithm called the bubble sort to sort list .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sorting List : Bubble Sort .

We want to rearrange , that is , sort , the elements of list in increasing order .
The bubble sort algorithm works as follows .

In series of iterations , the successive elements and + of the list are compared .
If is greater than + then the elements and + are swapped .

It follows that the smaller elements move toward the top , and the larger elements move toward the bottom .

In the first iteration , we consider the .
As you will see after the first iteration , the largest element of the list is moved to the last position , which is position , in the list .
In the second iteration , we consider the .
After the second iteration , the second largest element in the list is moved to the position , which is second to the last position in the list .
In the third iteration , we consider the .
As you will see , after each iteration , the size of the unsorted portion of the list shrinks .

Consider the of five elements , as shown in Figure .

Iteration : Sort .
Figure shows how the elements of list get rearranged in the first iteration .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In the second diagram , and are compared .

The third diagram of Figure compares with ; because , is swapped with .
Then , in the fourth diagram , we compare with .

After the first iteration , the largest element is at the last position .

Therefore , in the next iteration , we consider the .

Iteration : Sort .
Figure shows how the elements of list get rearranged in the second iteration .

Here , only the list elements through are considered .
After the second iteration , the last two elements are in the right place .
Therefore , in the next iteration , we consider .

Iteration : Sort .
Figure shows how the elements of list get rearranged in the third iteration .

Elements of list during the third iteration Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sorting List : Bubble Sort .

Therefore , in the next iteration , we consider .

Iteration : Sort .
Figure shows how the elements of list get rearranged in the fourth iteration .

Elements of list during the fourth After the fourth  list is sorted .

The following function implements the bubble sort algorithm : template .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Line : Before sorting ,  Line : After sorting ,  The statement in Line declares and initializes to be an array of components of type int .
The statement in Line outputs the values of the array before sorting this array .
The statement in Line uses the function bubbleSort to sort list .

Notice that both and its length number of are passed as parameters to the function bubbleSort .
The statement in Line outputs the sorted .

Analysis : Bubble Sort comparisons .
sorting algorithm makes key comparisons and also moves the data .

Therefore , in analyzing the sorting algorithm , we look at the number of key comparisons as well as the number of data movements .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sorting List : Bubble Sort .

Consider the function bubbleSort as given in this chapter .
This function contains nested for loops .
Because is of length , the outer loop executes times .
For each of the outer loop , the inner loop executes certain number of times .
Let us consider the first of the outer loop .
During the first of the outer loop , the number of iterations of the inner loop is .

Similarly , during the second of the outer loop , the number of iterations of the inner loop is , and so on .

Thus , the total number of comparisons is : ðn ðn nðn : In the worst case , the body of the if statement always executes .
So in the worst case , the number of assignments is : nðn : If the list is already sorted , which is the best case , the number of assignments is .
It can be nðn shown that , on average , bubble sort makes about item assignments .
However , the nðn number of comparisons for the bubble sort , as given in this chapter , is always .

Therefore , to sort list of size , bubble sort makes about key comparisons and about item assignments .
The next section presents the selection sort algorithm that reduces the number of item assignments .

Exercise at the end of this chapter gives version of the bubble sort algorithm in which the number of comparisons in the best case is .

Bubble Sort Algorithm and the class unorderedArrayListType The class unorderedArrayListType , designed in Chapter , does not contain any sorting algorithm .
Now that you know how to implement the bubble sort algorithm , you can learn how to use it in the class unorderedArrayListType .

To use the binary search algorithm within the class unorderedArrayListType , we add the function sort to this class and call the functions bubbleSort with the appropriate parameters .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Selection Sort : Lists Chapter described the selection sort algorithm for lists .
However , the selection sort algorithm given in Chapter works only for arrays of type int .
In this section , using templates we give generic selection sort algorithm .
Note that the algorithm given here is slightly different than the one given in Chapter .

Suppose that list is the array to be sorted and length denotes the length , that is , the number of elements in list .
As described in Chapter , selection sort involves the following steps :
Find the location of the smallest element .

Move the smallest element to the beginning of the unsorted list .

Given the starting index , first , and the ending index , last , of the list , the following function returns the index of the smallest element in .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Selection Sort : Lists .

selection sort can also be implemented by selecting the largest element in the unsorted portion of the list and moving it to the bottom of the list .
You can easily implement this form of selection sort by altering the if statement in the function minLocation and passing the appropriate parameters to both the corresponding function and the function swap these functions are called in the function .

selection sort can also be applied to linked lists .
The general algorithm is the same , and the details are left as an exercise for you .
See Programming Exercise at the end of this chapter .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The function swap does three item assignments and is executed times .
Hence , the number of item assignments is .

The key comparisons are made by the function minLocation .
For list of length , the function minLocation makes key comparisons .
Also , the function minLocation is executed times the function .
The time , the function minLocation finds the index of the smallest key item in the entire list and , therefore , makes comparisons .
The time , the function minLocation finds the index of the smallest element in the sublist of length and so makes comparisons , and so on .
Hence , the number of key comparisons is as follows : nðn OðnÞ : ðn ðn It thus follows that if , the number of key comparisons the selection sort algorithm makes is : Note that the selection sort algorithm does not depend on the initial arrangement of the data .
The number of comparisons is always and the number of assignments is .

In general , this algorithm is good only for small lists because grows rapidly as grows .
However , if data movement is expensive and the number of comparisons is not , then this algorithm could be better choice over other algorithms .

Insertion Sort : Lists The previous section described and analyzed the selection sort algorithm .
It was shown that if , the number of key comparisons is approximately , which is quite high .
This section describes the sorting algorithm called the insertion sort , which tries to is , number of key comparisons .

The insertion sort algorithm sorts the list by moving each element to its proper place in the sorted portion of the list .
Consider the list given in Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Insertion Sort : Lists .

In this list , the elements , and are in order .
That is , is sorted Figure .

Sorted and unsorted portion of list Next , we consider the element , the first element of the unsorted list .
Because , we need to move the element to its proper location .
It thus follows that element should be moved to Figure .

Move into To move into , first we copy into temp , temporary memory space Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Next , we copy into and then into Figure .

List before copying into and then into After copying into and into , the list is as shown in Figure .

List after copying into and then into Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Insertion Sort : Lists .

We now copy temp into .
Figure shows the resulting list .

FIGURE sorted list .

List after copying temp into Now is sorted , and is unsorted .
We repeat this process on the resulting list by moving the first element of the unsorted list into the sorted list in the proper place .

From this discussion , we see that during the sorting phase , the array containing the list is divided into two sublists : sorted and unsorted .
Elements in the sorted sublist are in order ; elements in the unsorted sublist are to be moved one at time to their proper places in the sorted sublist .
We use an , point to the first element in the unsorted sublist ; that is , gives the index of the first element in the unsorted portion of the array .
Initially , is initialized to .

This discussion translates into the following pseudocode algorithm : copy into temp initialize location to do .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

We leave it as an exercise for you to write program to test the insertion sort algorithm .

An insertion sort can also be applied to linked lists .
The general algorithm is the same , and the details are left as an exercise for you .
See Programming Exercise at the end of this chapter .

Analysis : Insertion Sort Let be list of length .
Suppose is to be sorted using insertion sort .
The for loop executes times .
In the best case , when the list is already sorted , for each iteration of the for loop , the if statement evaluates to false , so there are key comparisons .

Thus , in the best case , the number of key comparisons is .
Let us consider the worst case .
In this case , for each iteration of the for loop , the if statement evaluates to true .
Moreover , in the worst case , for each iteration of the for loop , the do .
It follows that in the worst case , the number of key comparisons is : ðn nðn  It can be shown that the average number of key comparisons and the average number of item assignments in an insertion sort algorithm are : OðnÞ  Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Lower Bound on Sort Algorithms .

TABLE Average Case Behavior of the Bubble Sort , Selection Sort , and Insertion Sort Algorithms for List of Length Algorithm Bubble sort Selection sort Insertion sort Number of Comparisons .

Both of these algorithms are comparison based ; that is , the lists are sorted by comparing their respective keys .
Before discussing any additional sorting algorithms , let us discuss the scenario for sorting algorithms .

We can trace the execution of algorithm by using graph called comparison tree .
Let be list of distinct elements , wherein .

Because each comparison of the keys has two outcomes , the comparison tree is binary tree .
While drawing this figure , we draw each comparison as circle called node .
The node is labeled as , representing the comparison of with .
If , follow the left branch ; otherwise , follow the right branch .
Figure shows the comparison tree for list of length .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Comparison tree for sorting three items We call the top node in the figure the root node .
The straight line that connects the two nodes is called branch .
sequence of branches from node , to another node , is called path from to .

Associated with each path from the root to leaf is unique permutation of the elements of .
This uniqueness follows because the sort algorithm only moves the data and makes comparisons .
Furthermore , the data movement on any path from the root to leaf is the same regardless of the initial inputs .
For list of elements , there are .

Thus , the comparison tree must have at least .

Now let us consider the worst case for all sorting algorithms .
We state the following result without proof .

Theorem : Let be list of distinct elements .
Any sorting algorithm that sorts by comparison of the keys only , in its worst case , makes at least key comparisons .

As analyzed in the previous sections , both the selection and insertion sort algorithms are of the order .
The remainder of this chapter discusses sorting algorithms that , on average , are of the order .

Quick Sort : Lists In the previous section , we noted that the lower bound on algorithms is .
The sorting algorithms bubble sort , selection sort , and insertion sort , discussed earlier in this chapter , are of the order .
In this and the next two sections , we discuss sorting algorithms that are of the order .
The first algorithm is the quick sort algorithm .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Quick Sort : Lists .

The list is partitioned into two sublists , which are then sorted and combined into one list in such way so that the combined list is sorted .
Thus , the general algorithm is :
Partition the list into two sublists , say lowerSublist and upperSublist .

Quick sort lowerSublist .

Quick sort upperSublist .

Combine the sorted lowerSublist and sorted upperSublist .

In other words , we use recursion to implement the quick sort algorithm .

The quick sort algorithm described here is for lists .
The algorithm for linked lists can be developed in similar manner and is left as an exercise for you .

In the quick sort algorithm , the list is partitioned in such way that combining the sorted lowerSublist and upperSublist is trivial .
Therefore , in quick sort , all of the sorting work is done in partitioning the list .
Because all of the sorting work occurs during the partitioning of the list , we first describe the partition procedure in detail .

To partition the list into two sublists , first we choose an element of the list called pivot .
The pivot is used to divide the list into two sublists : lowerSublist and upperSublist .
The elements in lowerSublist are smaller than pivot , and the elements in upperSublist are greater than or equal to pivot .
For example , consider the list in Figure .

However , pivot is chosen so that , it is hoped , lowerSublist and upperSublist are of nearly equal size .
For illustration purposes , let us choose the middle element of the list as pivot .
The partition procedure that we describe partitions this list using pivot as the middle element , in our case , as shown in Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Thus , after sorting lowerSublist and upperSublist , combining the two sorted sublists is trivial .

The partition algorithm is as follows assume that pivot is chosen as the middle element of the .

Determine pivot , and swap pivot with the first element of the list .

Suppose that the index smallIndex points to the last element less than pivot .
The index smallIndex is initialized to the first element of the list .

For the remaining elements in the list at the second : If the current element is less than pivot ,

Swap the current element with the array element pointed to by smallIndex .

Swap the first element , that is , pivot , with the array element pointed to by smallIndex .

Step can be implemented using for loop , with the loop starting at the second element of the list .

Step determines the pivot and moves pivot to the first array position .
During the execution of Step , the list elements get arranged as shown in Figure .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Quick Sort : Lists .

Elements in the lower sublist are less than pivot ; elements in the upper sublist are greater than or equal to pivot .
The variable smallIndex contains the index of the last element of the lower sublist ; the variable index contains the index of the next element that needs to be moved , either in the lower sublist or in the upper sublist .
As explained in Step , if the next element of the list is , is less than pivot , we advance smallIndex to the next array position and swap with .
Next , we illustrate Step .

Suppose that the list is as given in Figure .

List before sorting Step requires us to determine the pivot and swap it with the first array element .
For the list in Figure , the middle element is at the +

Therefore , after swapping pivot with the first array element , the .

Suppose that after executing Step few times , the list is as shown in Figure .

List after few iterations of Step Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Because pivot , we need to move the element into the lower sublist .
To do so , we first advance smallIndex to the next array and then swap with .
The lower sublist .

Now consider the list in Figure .

List before moving into sublist For the list in Figure , is , which is greater than pivot .
Therefore , is to be moved into the upper sublist .
This is accomplished by leaving at its position and increasing the size of the upper sublist by one , to the next array position .

After moving into the upper sublist , the list is as shown in Figure .

List after moving into the upper sublist Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Quick Sort : Lists .

FIGURE Next , we execute Step and move , pivot , to the proper position in the list .

This is accomplished by swapping with .
The resulting list is as shown in Figure .

List after swapping with As shown in Figure , Steps , and in the preceding algorithm partition the list into two sublists .
The elements less than pivot are in the lower sublist ; the elements greater than or equal to pivot are in the upper sublist .

To partition the list into the lower and upper sublists , we need to keep track of only the last element of the lower sublist and the next element of the list that needs to be moved into either the lower sublist or the upper sublist .
In fact , the upper sublist is between the two indices smallIndex and index .

We now write the function , partition , to implement the preceding partition algorithm .
After rearranging the elements of the list , the function partition returns the location of pivot so that we can determine the starting and ending locations of the sublists .
The definition of the function partition is : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Note that the formal parameters and last specify the starting and ending indices , respectively , of the sublist of the list to be partitioned .

As you can see from the definition of the function partition , certain elements of the list need to be swapped .
The following function , swap , accomplishes this task .

Once the list is partitioned into lowerSublist and upperSublist , we again apply the quick sort function to sort the two sublists .
Because both sublists are sorted using the same quick sort algorithm , the easiest way to implement this algorithm is to use recursion .
Therefore , this section gives the recursive version of the quick sort algorithm .
As explained previously , after rearranging the elements of the list , the function partition returns the of so that the starting and ending indices of the sublists can be determined .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Quick Sort : Lists .

Programming Exercise at the end of this chapter .

Analysis : Quick Sort The general analysis of the quick sort algorithm is beyond the scope of this book .

However , let us determine the number of comparisons in the worst case .
Suppose that is list of elements ,
In quick sort , all of the sorting work is done by the function partition .
From the definition of the function partition , it follows that to partition list of length , the function partition makes key comparisons .
Also , in the worst case , after partition , one sublist is of length , and the other sublist is of length .

It follows that in the worst case , the call of the function partition makes key comparisons .
In the call , the function partition partitions list of length , so it makes key comparisons , and so on .
We can now conclude that to sort list of length , in the worst case , the total number of key comparisons made by quick sort is : ðn ðn nðn  Table summarizes the behavior of the quick sort algorithm for list of length .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

However , the behavior of quick sort is .
This section describes the sorting algorithm whose behavior is always .

Like the quick sort algorithm , the merge sort algorithm uses the technique to sort list .
merge sort algorithm also partitions the list into two sublists , sorts the sublists , and then combines the sorted sublists into one sorted list .
This section describes the merge sort algorithm for linked lists .
We leave it for you to develop the merge sort algorithm for lists , which can be done by using the techniques described for linked lists .

The merge sort and the quick sort algorithms differ in how they partition the list .
As discussed earlier , quick sort selects an element in the list , called  and then partitions the list so that the elements in one sublist are less than and the elements in the other sublist are greater than or equal to .
By contrast , merge sort divides the list into two sublists of nearly equal size .
For example , consider the list whose elements are as follows : list :

Suppose that we have sorted the two sublists .
That is , suppose that the lists are now as follows : sublist : sublist : Next , the merge sort algorithm combines , that is , merges , the two sorted sublists into one sorted list .

Figure further illustrates the merge sort process .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Merge Sort : Linked Lists .

Merge sort algorithm From Figure , it is clear that in the merge sort algorithm , most of the sorting work is done in merging the sorted sublists .

The general algorithm for the merge sort is as follows : if the list is of size greater than .
Divide the list into two sublists .

Merge sort the first sublist .

Merge sort the second sublist .

Merge the first sublist and the second sublist .

In other words , we use recursion to implement the merge sort algorithm .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Divide the list into two sublists of nearly equal size .

Merge sort both sublists .

Merge the sorted sublists .

Divide Because data is stored in linked list , we do not know the length of the list .
Furthermore , linked list is not random access data structure .
Therefore , to divide the list into two sublists , we need to find the middle node of the list .

Consider the list in Figure .

Unsorted linked list To find the middle of the list , we traverse the list with two , middle and current .
The pointer middle is initialized to the first node of the list .
Because this list has more than two nodes , we initialize current to the third node .
Also , if the list has only two nodes , we set current to Consider the list shown in Figure .

After advancing current by one node , if current is not nullptr , we again advance current by one node .
That is , for the most part , every time middle advances by one node , current advances by two nodes .
Eventually , current becomes nullptr and middle points to the last node of the first sublist .
For example , for the list in Figure , when current becomes nullptr , middle points to the node with info Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Merge Sort : Linked Lists .

First , using the link of middle , we assign pointer to the node following middle .
Then , we set the link of middle to nullptr .

Figure shows the resulting sublists .

List after dividing it into two lists This discussion translates into the following function , divideList : template void :

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Recall that in merge sort , most of the sorting work is done in merging the sorted sublists .

Merge Once the sublists are sorted , the next step in the merge sort algorithm is to merge the sorted sublists .
Sorted sublists are merged into sorted list by comparing the elements of the sublists and then adjusting the pointers of the nodes with the smaller info .
Let us illustrate this procedure on the sublists shown in Figure .
Suppose that points to the node of the sublist , and points to the node of the second sublist .

Sublists before merging We compare the info of the node of each sublist to determine the node of the merged list .
We set newHead to point to the node of the merged list .
We also use the pointer lastMerged to keep track of the last node of the merged list .
The pointer of the node of the sublist with the smaller node then advances to the next node of that sublist .
Figure shows the sublist of Figure after setting newHead and lastMerged and advancing .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Merge Sort : Linked Lists .

So , we again compare the nodes pointed to by and , and adjust the link of the smaller node and the last node of the merged list so as to move the smaller node to the end of the merged list .
For the sublists shown in Figure , after adjusting the necessary links , we have Figure .

Merged list after putting the node with info at the end of the merged list We continue this process for the remaining elements of both sublists .
Every time we move node to the merged list , we advance either or to the next node .

Eventually , either or becomes nullptr .
If becomes nullptr , the sublist is exhausted  so we attach the remaining nodes of the second sublist at the end of the partially merged list .
If becomes nullptr , the second sublist is exhausted  so we attach the remaining nodes of the sublist at the end of the partially merged list .

Following this discussion , we can now write the function mergeList to merge the two sorted sublists .
The pointers of the nodes of the sublists are passed as parameters to the function mergeList .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Finally , we write the recursive merge sort function , recMergeSort , which uses the divideList and mergeList functions to sort list .
The pointer of the node of the list to be sorted is passed as parameter to the function recMergeSort .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Merge Sort : Linked Lists .

We can now give the definition of the function mergeSort , which should be included as public member of the class .
It also sets to point to the node of the list .
The definition of the function mergeSort is : template .

Programming Exercise at the end of this chapter .

Analysis : Merge Sort Suppose that is list of elements , in which .
Suppose that is power of , that is , for some nonnegative integer , so that we can divide the list into two sublists , each of size :  Moreover , each sublist can also be divided into two sublists of the same size .
Each call to the function recMergeSort makes two recursive calls to the function recMergeSort , and each Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

So , the length of the original list is .
The call to the function recMergeSort divides the original list into two sublists , each of size .
The call then makes two recursive calls to the function recMergeSort .
Each of these recursive calls divides each sublist , of size , into two sublists , each of size .
We now have four sublists , each of size .
The next set of recursive calls divides each sublist , of size , into sublists of size .
So , we now have eight sublists , each of size .

It follows that the exponent in indicates the level of the recursion Figure .

Recursion Level : Number of calls to recMergeSort : Each call : recMergeSort elements .

FIGURE Recursion Level : Number of calls to recMergeSort : Each call : recMergeSort elements .

Note that the number of recursion levels is .
Also , note that to merge sorted list of size with sorted list of size , the maximum number of comparisons is +

Consider the function mergeList , which merges two sorted lists into sorted list .
Note that this is where the actual work and is done .
The initial call to the function recMergeSort , at level , produces two sublists , each of the size .
To merge these two lists , after they are sorted , the maximum number of comparisons is : OðnÞ : At level , we merge two sets of sorted lists , in which each sublist is of the size .
To merge two sorted sublists , each of the size , we need , at most : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Merge Sort : Linked Lists .

Thus , at level of the recursion , the number of comparisons is .
In general , at level of the recursion , there are total of calls to the function mergeList .
Each of these calls merges two sublists , each of the size  which requires maximum of comparisons .
Thus , at level of the recursion , the maximum number of comparisons is : OðnÞ : It now follows that the maximum number of comparisons at each level of the recursion is .

Because the number of levels of the recursion is , the maximum number of comparisons made by the merge sort algorithms is .
Now implies that .
Hence , the maximum number of comparisons made by the merge sort algorithm is .

If denotes the number of key comparisons in the worst case to sort , then .

Let denote the number of key comparisons in the average case .
In the average case , during merge , one of the sublists will exhaust before the other list .
From this , it follows that , on average , when merging two sorted sublists of combined size  the number of comparisons will be less than .
On average , it can be shown that the number of comparisons for merge sort is given by the following equation : If is power of ,
This is also good approximation when is not power of .

We can also obtain an analysis of the merge sort algorithm by constructing and solving certain equations as follows .
As noted before , in merge sort , all of the comparisons are made in the procedure mergeList , which merges two sorted sublists .
If one sublist is of size and the other sublist is of size  then merging these lists would require , at most , comparisons in the worst case .
Hence : ðnÞ ðsÞ ðtÞ : Note that and .
Suppose that .
It follows that .
Hence : ðnÞ ; Also : It is known that when is power of , is given by the following equation : ðnÞ Oðn nÞ : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The necessary material is in the file .

To find the file , navigate to the book ' page by typing in the ISBN of this text and then click on Free Materials .

PROGRAMMING EXAMPLE : Election Results The presidential election for the student council of your local university is about to be held .
The chair of the election committee wants to computerize the voting and has asked you to write program to analyze the data and report the winner .

Watch the Video The university has four major divisions , and each division has several departments .

For the election , the four divisions are labeled as region , region , region , and region .
Each department in each division handles its own voting and reports the votes received by each candidate to the election committee .
The voting is reported in the following form : firstName lastName regionNumber numberOfVotes The election committee wants the output in the following tabular form : Candidate Name Bower Danny Dillion Lisa Fisher Greg Goldy Peter Lamba Mickey Miller Votes Total Winner : Sheila Bower , Votes Received : Total votes polled : The names of the candidates must be in alphabetical order in the output .

For this program , we assume that six candidates are seeking the student council ' president post .
This program can be enhanced to handle any number of candidates .

The data are provided in two files .
One file , consists of the names of the candidates seeking the president ' post .
The names of the candidates in this file are in no particular order .
In the second file , each line consists of the voting results in the following form : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Election Results .

There is one entry per line .
For example , the input file containing the voting data looks like the following : Greg Goldy Mickey Miller Lisa Fisher Peter Lamba Danny Dillion Sheila Bower .

The first line indicates that Greg Goldy received votes from region .

PROBLEM ANALYSIS AND ALGORITHM DESIGN Input Two files : One containing the candidates ' names and the other containing the voting data , as described previously .

Output The election results in tabular form , as described previously , and the name .

From the output , it is clear that the program must organize the voting data by region and calculate the total votes received by each candidate and polled for the election overall .
Furthermore , the names of the candidates must appear in alphabetical order .

The main component of this program is candidate .
Therefore , first we will design the class candidateType to implement candidate object .
Moreover , in this program , we use an array of candidateType object to implement the list of candidates .

Every candidate has name and receives votes .
Because there are four regions , we can use an array of four components .
In Example , we designed the class personType to implement the name of person .
Recall that an object of type personType can store the first name and the last name .
Now that we have discussed operator overloading , we redesign the class personType and define the relational operators so that the names of two people can be compared .
We will also overload the assignment operator for easy assignment and use the stream extraction and insertion operators for .
Because every candidate is person , we will derive the class candidateType from the class personType .

Therefore , the class personType has two member variables : firstName to store the first name and lastName to store the last name .
We declare these as protected so that the definition of the class personType can be easily extended to accommodate the requirements of specific application needed to implement name .
The definition of the class personType is given next .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Programming Example : Election Results .

The definitions of the member functions setName , getFirstName , getLastName , and the constructors are the same as those given in Chapter .
We , therefore , consider the definitions of the functions to overload the relational and stream operators .

The names of two people are the same if their and names are the same .

Therefore , the definition of the function to overload the equality is : bool const .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

As remarked previously , the main component of this program is candidate .
Every candidate has name and can receive votes .
Because there are four regions , we can use an array of four components to store the votes received .

Therefore , we declare list of six candidates of type candidateType .
This chapter extended the class unorderedArrayListType by illustrating how to the searching and sorting algorithms developed in this chapter .
We will use this class to maintain the list of candidates .
This list of the assignment and relational operators for the class candidateType because these operators are used by the searching and sorting algorithms .

Data in the file containing the candidates ' data consists of only the names of the candidates .
Therefore , in addition to overloading the assignment so that the value of one object can be assigned to another object , we also overload the assignment for the class candidateType so that only the name the of the candidate can be assigned to candidate object .
That is , we overload the assignment twice : once for objects of type candidateType and once for objects of types candidateType and personType .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Election Results .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

UML class diagram of class candidateType Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Election Results .

To set the votes of particular  the number and the number of votes are passed as parameters to the function setVotes .
Because an array index starts at , corresponds to the array component at position , and so on .
Therefore , to set the value of the correct array component , is subtracted from the .
The definition of the function setVotes .

The definition of the function updateVotesByRegion .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

To overload the relational operators for the class candidateType , the names of the candidates are compared .
For example , two candidates are the same if they have the same name .
The definitions of these functions are similar to the definitions of the functions to overload the relational operators for the class personType and are given next .

Programming Example : Election Results .

Now that the class candidateType has been designed and implemented , we focus on designing the main program .

Because there are six candidates , we create list , candidateList , containing six components of type candidateType .
The first thing that the program should do is read each name from the file into the list candidateList .

Then , we sort candidateList .

The next step is to process the voting data from the file , which holds the voting data .
After processing the voting data , the program should calculate the total votes received by each candidate and print the data , as shown previously .
Thus , the general algorithm is :

Read each name into candidateList .

Process the voting data .

Calculate the total votes received by each candidate .

Print the results .

The following statement creates the object candidateList .

Every component of the array list is an object of type candidateType .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

To save space , whenever needed , we will draw the object candidateList , as shown in Figure .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Election Results .

Therefore , we write function to accomplish this task .
The file is opened in the function main .
The names of the input file and candidateList are , therefore , passed as parameters to the function fillNames .
Because the member variable list of the object candidateList is protected , it cannot be accessed directly .
We , therefore , create an object temp of type candidateType to store the candidates ' names and use the function insertEnd to store each name in the object candidateList .

The definition of the function fillNames follows : void .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Object candidateList after call to the function fillNames After reading the candidates ' names , we next sort the array list of the object candidateList using any of the sorting algorithms discussed in this chapter .
Because candidateList is an object of type unorderedArrayListType , we use the member function sort to sort candidateList .
In fact , you can use any sorting algorithm discussed in this The following statement accomplishes this task : After this statement executes , candidateList is as shown in Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Election Results .

Object candidateList after the statement ; executes Processing the voting data is quite straightforward .
Each entry in the file is of the form : firstName lastName regionNumber numberOfVotes After reading an entry from the file , we locate the row in the array list the object corresponding to the specific candidate and update the entry specified by regionNumber .

The component votesByRegion is private member of each component of the array list .
Moreover , list is private member of candidateList .
The only way we can update the votes of candidate is to make copy of that record into temporary object , update the object , and then copy the temporary object back into list by replacing the old with the new of the temporary object .
We can use the member function retrieveAt to make copy of the candidate whose votes need to be updated .
After updating the temporary object , we can use the member function replaceAt to copy the temporary object back into the list .
Suppose the next entry read is : Lisa Fisher This entry says that Lisa Fisher received votes from region .
Suppose that before processing this entry , candidateList is as shown in Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

After this statement executes , the object temp is as shown in Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Programming Example : Election Results .

Now we copy the object temp into list Figure .

Essentially , the definition of the function processVotes is : void .

After processing the voting data , the next step is to find the total received by each candidate .
This is done by adding the received in each .

Now votesByRegion is private member of candidateType , and list is protected member of candidateList .
Therefore , to add the for each candidate , we use the function retrieveAt to make temporary copy of each data , add the in the temporary object , and then copy the temporary object back into candidateList .
The following function does .

Programming Example : Election Results .

The following function accomplishes this task :

We now describe the function printResults , which prints the results .
Suppose that the variable sumVotes holds the total votes polled for the election , the variable largestVotes holds the largest number of votes received by candidate , and the variable winLoc holds the index of the winning candidate in the array list .
Further Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The algorithm for this function is :
Initialize sumVotes ,  and to zero .

For each candidate :
Retrieve the data into temp .

Print the name and relevant data .

Retrieve the total votes received by the candidate and update sumVotes .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Programming Example : Election Results .

Sample Run : After you have written the definitions of the functions of the class candidateType and of the function printResults and then run your program , it Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Quick Review Greg Goldy Peter Lamba Sheila Bower Mickey Miller Peter Lamba Danny Dillion Mickey Miller Peter Lamba Danny Dillion Sheila Bower Mickey Miller Lisa Fisher Peter Lamba Danny Dillion QUICK REVIEW .

The sequential search algorithm searches the list for given item , starting with the first element in the list .
It continues to compare the search item with the elements in the list until either the item is found or no more elements are left in the list with which it can be compared .

On average , the sequential search algorithm searches half of the list .

For list of length , in successful search , on average , the sequential search makes OðnÞ comparisons .

binary search is much faster than sequential search .

binary search requires the list elements to be in order , that is , sorted .

To search for an item in list of length , binary search requires no more than iterations of the loop , and so no more than comparisons .

For list of length  in successful search , on average , the binary search makes key comparisons .

Let be function of .
By the term asymptotic , we mean the study of the function as becomes larger and larger without bound .

Let and be functions .
Assume that and are nonnegative , that is , for all real numbers  and .
We say that is of , written , if there exist positive constants c and such that for all .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Suppose that the elements of are sorted .
If is the minimum number of comparisons needed , in the worst case , by using algorithm to recognize whether an element is in , then +

The binary search algorithm is the optimal algorithm for solving search problems by using the comparison method .

To construct search algorithm of the order less than , it cannot be comparison based .

For list of length  in which , the selection sort algorithm makes key comparisons and item assignments .

Any sorting algorithm that sorts by comparison of the keys only , in its worst case , makes at least key comparisons .

Both the quick sort and merge sort algorithms sort list by partitioning it .

To partition list , the quick sort algorithm first selects an item from the list called pivot .
The algorithm then rearranges the elements so that the elements in one of the sublists are less than pivot and the elements in the other sublist are greater than or equal to pivot .

In quick sort , the sorting work is done in partitioning the list .

On average , the number of key comparisons in quick sort is .
In the worst case , the number of key comparisons in quick sort is .

The merge sort algorithm partitions the list by dividing it in the middle .

In merge sort , the sorting work is done in merging the list .

The number of key comparisons in merge sort is .

EXERCISES The number in parentheses at the end of an exercise refers to the learning objective listed at the beginning of the chapter .

Mark the following statements as true or false .

The member that uniquely identifies data item is called the key of that Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

binary search is faster on large lists , but sequential search is faster on .
For sorted list of length , to determine whether an item is in the list ,
Let + where is nonnegative integer .
For list of length , the bubble sort given in this chapter makes .
For list of length , the selection sort given in this chapter makes .
For list of length , in the worst case the insertion sort given in this .
Let be list of distinct elements .
Any sorting algorithm that sorts by .
The quick sort algorithm partitions list into two sublists such that the elements in the first sublist are less than pivot and the elements in the The merge sort algorithm partitions list into two sublists such that the number of elements in the first sublist is less than the number of elements Consider the following list :

Write version of the sequential search algorithm that can be used to Consider the following list :

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Show the values of first , last , and middle and the number of comparisons after .

What is the maximum number of comparisons made by the binary search algorithm , given in this chapter , to Each of the following expressions represents the number of operations for Let be sorted list of size .
In the worst case , to determine whether an element is in , what is the minimum number of comparisons made by Sort the following list using the bubble sort algorithm as discussed in this .

The number of comparisons in the best case of bubble sort algorithm , as given in this chapter , is .
Show that the following version of the bubble sort algorithm reduces the number of comparisons in the best list to be sorted .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Using the algorithm given in part , find the number of iterations ,

Sort the following list using the bubble sort algorithm as discussed in this ,

Assume the following list of keys :

The first four keys are in order .
To move to its proper position using the insertion sort algorithm as described in this chapter , exactly how many key Assume the following list of keys :

The first five keys are in order .
To move to its proper position using the insertion sort algorithm as described in this chapter , exactly how many key Assume the following list of keys :

This list is to be sorted using the insertion sort algorithm as described in this chapter for lists .
Show the resulting list after seven passes of the Recall the insertion sort algorithm as discussed in this chapter .
Assume the following list of keys :

Exactly how many key comparisons are executed to sort this list using the Suppose that is list of elements .
Find the average number of comparisons made by bubble sort , selection sort , and insertion sort to sort Let be list of distinct elements .
Suppose is sorted using algorithm .
In the worst case , what is the minimum Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Explain how the merge sort algorithm differs from the quick sort algorithm Assume the following list of keys : This list is to be sorted using the quick sort algorithm as discussed in this chapter .

Give the resulting list after one call to the function partition .

What is the size of the list that the function partition partitioned .

What are the sizes of the two sublists created by the function partition .

Suppose that the list of keys is as given in Exercise and that this list is to be sorted using the quick sort algorithm as discussed in this chapter .

Give the resulting list after two calls to the function partition .

What is the size of the list that the function partition partitioned .

What are the sizes of the two sublists created by the function partition .

Suppose that the list of keys is as given in Exercise .
Use the quick sort algorithm , as discussed in this chapter , to determine the number of times the Assume the following list of keys :

Use pivot as the median of the first , last , and middle elements What is the pivot .

Give the resulting list after one call to the function partition .

What is the size of the list that the function partition partitioned .

What are the sizes of the two sublists created by the function partition .

Suppose that the list of keys is as given in Exercise and that this list is to be sorted using the quick sort algorithm as discussed in this chapter .

Use pivot as the median of the first , last , and middle elements of .

What is the pivot during the second call of the function partitioned .

Give the resulting list after two calls to the function partition .

What is the size of the list that the function partition partitioned .

What are the sizes of the two sublists created by the function partition .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Use the quick sort algorithm , as discussed in this chapter , to determine the number of times the Suppose that is list of elements and it is sorted using the merge sort What are the sizes of the first and second sublists after the first execution of the function divide .

How many times is the function divide called to sort .

Suppose that is list of elements .
Find the average number of Suppose that the elements of list are in descending order and they need to be put in ascending order .
Write function that takes as input an array of items in descending order and the number of elements in the array .
The function rearranges the element of the array in ascending order .
Your function must not incorporate any sorting algorithms , that is , no item comparisons should take place .

PROGRAMMING EXERCISES .

Write and implement recursive version of the sequential search algorithm .

Write and implement recursive version of the binary search algorithm .
Also , write program to test your algorithm .

Write program to test the function you designed in Exercise .

Write program to find the number of comparisons using binarySearch and the sequential search algorithm as follows : Suppose list is an array of elements .

Use random number generator to fill list .

Use any sorting algorithm to sort list .

Search list for some items as follows :

Use the binary search algorithm to search the list .
Use the binary search algorithm to search the list , switching to sequential search when the size of the search list reduces to less than .
If the item is found in the list , then print its position .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Call this function modifiedBubbleSort .
Also , write program to test your function .

Write program to test the selection sort algorithm for lists as given in this chapter .

Write and test version of the selection sort algorithm for linked lists .

Write program to test the insertion sort algorithm for lists as given in this chapter .

Write and test version of the insertion sort algorithm for linked lists .

Write program to test the quick sort algorithm for lists as given in this chapter .

Let be list of size .
The quick sort algorithm can be used to find the kth smallest item in , wherein , without completely sorting .
Write and implement function , kThSmallestItem , that uses version of the quick sort algorithm to determine the kth smallest item in without completely sorting .

Sort an array of elements using the quick sort algorithm as follows :

Sort the array using pivot as the middle element of the array .

Sort the array using pivot as the median of the first , last , and middle elements of the array .

Sort the array using pivot as the middle element of the array .
However , when the size of any sublist reduces to less than , sort the sublist using an insertion sort .

Sort the array using pivot as the median of the first , last , and middle elements of the array .
When the size of any sublist reduces to less than , sort the sublist using an insertion sort .

Calculate and print the CPU time for each of the preceding four steps .

To find the current CPU time , declare variable , say ,  of type .

The statement ; stores the current CPU time in .
You can check the CPU time before and after particular phase of program .
Then , to find the CPU time for that particular phase of the program , subtract the before time from the after time .
Moreover , you must include the header file ctime to use the data type and the function clock .
Use random number generator to initially fill the array .

Write program to test the merge sort algorithm for linked lists as given in this chapter .

Write and test version of the merge sort algorithm for lists .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The program then sorts using bubble sort , using selection sort , and using insertion sort and outputs the number of comparisons and item assignments made by each sorting algorithm .

Write program that creates three identical lists , and , of elements .
The program then sorts using quick sort , using insertion sort , and using merge sort and outputs the number of comparisons and item assignments made by quick sort and insertion sort and the number of comparisons made by merge sort .

Write program to test the function you designed in Exercise .

Write the definitions of the function printResults of the Election Results programming example .
Also , write program to produce the output shown in the sample run of this programming example .

In the Election Results programming example , the class candidateType contains function calculateTotalVotes , which calculates the total number of votes received by candidate .
After processing the voting data , this function calculates the total number of votes for candidate .
The function updateVotesByRegion the class updates only the number of votes for particular region .
Modify the definition of this function so that it also updates the total number of votes received by the candidate .
By doing so , the function addVotes in the main program is no longer needed .

Modify and run your program with the modified definition of the function updateVotesByRegion .

In the Election Results programming example , the object candidateList of type unorderedArrayListType is declared to process the voting data .

The operations of inserting data and updating and retrieving the votes were somewhat complicated .
The member variable list is protected member of candidateList , and each component of list is private member .
To update the candidates ' votes , copy each data from candidateList into temporary object of type candidateType , update the temporary object , and then replace the data with the temporary object .
In this exercise , you are to modify the Election Results programming example to simplify the accessing of data .
Derive the class candidateListType from the class unorderedArrayListType as follows : class candidateListType : public .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Because the class candidateListType is derived from the class unorderedArrayListType , and list is protected member of the class unorderedArrayListType from the class , list can be directly accessed by member of the class candidateListType .

Write the definitions of the member functions of the class candidateListType .
Rewrite and run your program using the class candidateListType .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Learn about the basic terminologies used in binary trees : left and right subtrees , path , height , level of node , leaves , parent of node .

Explore binary tree traversal algorithms and functions as parameters Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

You have already seen how to store and process data in an array .
Because an array is data structure , if the data is properly organized , then we can use search algorithm , such as binary search , to effectively find and retrieve an item from the list .

However , we know that storing data in an array has its limitations .
For example , item insertion if the array is and item deletion can be very time consuming , especially if the list is very large , because each of these operations requires data movement .
To speed up item insertion and deletion , we used linked lists .
Item insertion and deletion in linked list do not require any data movement ; we simply adjust some of the links in the list .
However , one of the drawbacks of linked lists is that they must be processed sequentially .
That is , to insert or delete an item , or simply to search the list for particular item , we must begin our search at the first node in the list .
As you know , sequential search is good only for very small lists because the average search length of sequential search is half the of the list .

Binary Trees This chapter discusses how to organize data dynamically so that item insertion , deletion , and lookups are more efficient .

We first introduce some definitions to facilitate our discussion .

Definition : binary tree , is either empty or such that :
has special node called the root node ; ii .
has two sets of nodes , LT and RT , called the left subtree and right subtree of , respectively ; and iii .
LT and RT are binary trees .

Suppose that is binary tree with the root node .
Let LA denote the left subtree of and RA denote the right subtree of .
Now LA and RA are binary trees .
Suppose that is the root node of LA and is the root node of RA .
is called the left child of ; is called the right child of .
Moreover , is called the parent of and .

binary tree can be shown pictorially .
In the diagram of binary tree , each node of the binary tree is represented as circle , and the circle is labeled by the node .
The root node of the binary tree is drawn at the top .
The left child of the root node is drawn is drawn below and to the right of the root node .
Children are connected to the parent by an arrow from the parent to the child .
An arrow is usually called directed edge or directed branch simply Figure .
Because the root node , of LA is already drawn , we apply the same procedure to draw the remaining parts of LA .
RA is drawn similarly .
If node has no left child , for example , we draw an arrow from the node to the left , ending with three stacked lines .
That is , three lines at the end of an arrow indicate that the subtree is empty .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

FIGURE Binary tree In Figure , the root node of this binary tree is .
The left subtree of the root node , which we denote by LA , is the set LA , and the right subtree of the root node , which we denote by RA , is the set RA ,
The root node of the left subtree of is , the root node of node .
The root node of RA is , and so on .
Clearly , LA and RA are binary trees .
Because three lines at the end of an arrow mean that the subtree is empty , it follows that the left subtree of is empty .
Also , note that for node , the left child is and node has no right child .

Example shows nonempty binary trees .

EXAMPLE Figure shows binary trees with one , two , or three nodes .

Binary tree with one node FIGURE Binary tree with two nodes Binary tree with two nodes Binary tree with three nodes Binary tree with one , two , or three nodes In the binary tree of Figure , the root node is , LA empty , and RA empty .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The root node of LA , LB empty , and RB empty .

In the binary tree of Figure , the root node is , LA empty , and RA .
The root node of RA , LC empty , and RC empty .

In the binary tree of Figure , the root node is , LA , and RA .
The root node of LA , LB empty , and RB empty .
The root node of RA , LC empty , and RC empty .

EXAMPLE Figure shows other cases of nonempty binary trees with three nodes .

Various binary trees with three nodes As you can see from the preceding examples , every node in binary tree has , at most , two children .
Thus , every node , other than storing its own information , must keep track of its left subtree and right subtree .
This implies that every node has two pointers , say , lLink and rLink .
The pointer lLink points to the root node of the left subtree of the node ; the pointer rLink points to the root node of the right subtree of the node .

The following struct defines the node of binary tree : template struct .

The data is stored in info .

pointer to the left child is stored in lLink .

pointer to the right child is stored in rLink .

Furthermore , pointer to the root node of the binary tree is stored outside of the binary tree in pointer variable , usually called the root , of type .
Thus , in general , binary tree looks like the diagram in Figure .

FIGURE Binary tree For simplicity , we will continue to draw binary trees as before .
That is , we will use circles to represent nodes and left and right arrows to represent links .
As before , three lines at the end of an arrow mean that the subtree is empty .

Before we leave this section , let us define few terms .

node in binary tree is called leaf if it has no left and right children .
Let and be two nodes in the binary tree .
is called the parent of if there is branch from to .
path from node to node in binary tree is sequence of nodes ,
, Xn ii .
is the parent of Xi for all ,

Because the branches only go from parent to its children , from the previous discussion it is clear that in binary tree , there is unique path from the root to every node in the binary tree .

Definition : The length of path in binary tree is the number of branches on that path .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Clearly , the level of the root node of binary tree is , and the level of the children of the root node is .

Definition : The height of binary tree is the number of nodes on the longest path from the root to leaf .

EXAMPLE Consider the binary tree of Figure .
In this example , the terms such as node and with info mean the same thing .

Binary tree In this binary tree , the nodes , and have no left and right children .
So , the nodes , and are leaves .

There is branch from node to node .
So , node is the parent of node .
Similarly , node is the parent of node , node is the parent of nodes and , node is the parent of node , node is the parent of node , and so on .

is path from node to node .
Because there are three branches on this path , the length of this path is .
Similarly , is path from node to node .

There are three leaves in this binary tree , which are , and .
Also , the paths from root to these leaves are : and .
Clearly , the longest path from Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The number of nodes on this path is .
Hence , the height of the binary tree is .

Suppose that pointer ,  to the root node of binary tree is given .
We next describe function , height , to find the height of the binary tree .
The pointer to the root node is passed as parameter to the function height .

If the binary tree is empty , then the height is .
Suppose that the binary tree is nonempty .
To find the height of the binary tree , we first find the height of the left subtree and the height of the right subtree .
We then take the maximum of these two heights and add to find the height of the binary tree .
To find the height of the left subtree , we apply the same procedure because the left subtree is binary tree .
Therefore , the general algorithm to find the height of binary tree is as follows .
Suppose denotes the height of the binary tree with root .

The definition of the function height uses the function max to determine the larger of two integers .
The function max can be easily implemented .

Similarly , we can implement algorithms to find the number of nodes and number of leaves in binary tree .

Copy Tree One useful operation on binary trees is to make an identical copy of binary tree .
binary tree is dynamic data structure ; that is , memory for the nodes of binary tree is allocated and deallocated during program execution .
Therefore , if we use just the value of the pointer of the root node to make copy of binary tree , we get shallow copy of the data .
To make an identical copy of binary tree , we need to create as many nodes as there are in the binary tree to be copied .
Moreover , in the copied tree , these nodes must appear in the same order as they are in the original binary tree .

Given pointer to the root node of binary tree , we next describe function that makes copy of given binary tree .
This function is also quite useful in implementing the copy constructor and overloading the assignment operator , as described later in this chapter Binary .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Binary Tree Traversal The item insertion , deletion , and lookup operations require that the binary tree be traversed .
Thus , the most common operation performed on binary tree is to traverse the binary tree , or visit each node of the binary tree .
As you can see from the diagram of binary tree , the traversal must start at the root node because there is pointer to the root node of the binary tree .
For each node , we have two .

Visit the node first .

Visit the subtrees first .

These choices lead to three commonly used traversals of binary .

Inorder traversal Preorder traversal Postorder traversal INORDER TRAVERSAL In an inorder traversal , the binary tree is traversed as follows :
Traverse the left subtree .

Visit the node .

Traverse the right subtree .

PREORDER TRAVERSAL In preorder traversal , the binary tree is traversed as follows :
Visit the node .

Traverse the left subtree .

Traverse the right subtree .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Traverse the left subtree .

Traverse the right subtree .

Visit the node .

Clearly , each of these traversal algorithms is recursive .

The listing of the nodes produced by the inorder traversal of binary tree is called the inorder sequence .
The listing of the nodes produced by the preorder traversal is called the preorder sequence , and the listing of the nodes produced by the postorder traversal is called the postorder sequence .

EXAMPLE Consider the binary tree in Figure .
Let be binary tree .
Suppose that is nonempty and the root node of is .
Then or denotes the listing of nodes of in the inorder sequence and denotes the root node of .
For simplicity , we assume that visiting node means to output the data stored in the node .
In the section Tree Traversal and Functions as " we will explain how to modify the binary tree traversal algorithms so that by using function , the user can specify the action to be performed on node when the node is visited .

Binary tree for an inorder traversal .

Because the binary tree is nonempty , to determine , we do the following : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Determine , where LA is the left subtree of .
Note that LA ,

Determine , where RA is the right subtree of .
Note that RA ,

Now we cannot do Step until we have finished Step .

Determine , where LB ,

Determine , where LD empty .

Determine , where RD .

Because LD empty , Step is completed , so we proceed to Step , which outputs .
Because Step is also completed , we proceed to Step .

Determine , where RD .
Now RD is binary tree , and .
So to determine , we do the following :
Determine , where LF empty .

Determine , where RF empty .

Because LF empty , Step is completed , so we proceed to Step , which outputs .
Because Step is also completed , we proceed to Step .
Because RF empty , this step is also completed .

Thus , Step is completed , which in turn completes Step .

Next , we proceed to Step , which outputs .
After completing Step , we proceed to Step .
Now Step requires us to determine .

However , RB empty , so Step is completed , which in turn completes Step .

Next , we proceed to Step , which outputs .
At this point we have completed and visited .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Now RA is nonempty binary tree and , so to determine , we need to do the following :
Determine , where LC empty .

Now LC empty , so Step is completed .
Next , in Step , we output , which completes this step .
After completing Step , we proceed to Step .

Determine , where RC ,
Now RC is nonempty binary tree with .
Thus , requires us to complete the following .

Determine , where RE empty .

Now LE is binary tree with .

Determine , where LG empty .

Determine , where RG empty .

Now LG empty , so Step is completed .
Next Step outputs , which completes this step .
Because RG empty , Step is also completed .
This in turn completes Step .

After completing Step , to complete Step , we output .
Next because RE empty , Step is also completed , which in turn completes Step .

Because Step is completed , Step is also completed , that is we have determined .
It now follows that : DFBACGE .

The links are only in one direction ; that is , the parent node points to the left and right children , but there is no pointer from each child to the parent .
Therefore , before going to child , we must somehow save pointer to the Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

convenient way to do this is to write recursive inorder function because in recursive call , after completing particular call , the control goes back to the caller .

This section described the binary tree traversal algorithms inorder , preorder , and postorder .
If you want to make copy of binary tree while preserving the structure of the binary tree , you can use preorder traversal .
To delete all of the nodes of binary tree , you can use the postorder traversal .
Later in this chapter , we will discuss binary search trees .

The inorder traversal of binary search tree visits the nodes in sorted order .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Implementing Binary Trees .

In Chapter , we discuss graphs .
binary tree is also graph .
We discuss how to implement traversal algorithms for graphs .
You can modify that algorithm to do traversal of binary trees .

Implementing Binary Trees The preceding sections described various operations that can be performed on binary tree , as well as the functions to implement these operations .
This section describes binary trees as an abstract data type .
Before designing the class to implement binary tree as an ADT , let us list the various operations that are typically performed on binary tree .

Determine whether the binary tree is empty .

Search the binary tree for particular item .

Insert an item in the binary tree .

Delete an item from the binary tree .

Find the height of the binary tree .

Find the number of nodes in the binary tree .

Find the number of leaves in the binary tree .

Traverse the binary tree .

Copy the binary tree .

The item search , insertion , and deletion operations all require the binary tree to be traversed .
However , because the nodes of binary tree are in no particular order , these algorithms are not very efficient on arbitrary binary trees .
That is , no criteria exist to guide the search on these binary trees , as we will see in the next section .
Therefore , we will discuss these algorithms when we discuss special binary trees .

The following class defines binary trees as an ADT .
The definition of the node is the same as before .
However , for the sake of completeness and easy reference , we give the definition of the node followed by the definition of the class : of the Node template .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Implementing Binary Trees .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

See Exercise at the end of this chapter .

The functions search , insert , and deleteNode are declared as abstract in the definition of the class .
This is because , in this section , we are discussing arbitrary binary trees .
Implementing these operations for arbitrary binary trees is inefficient , if not impossible , as we will discuss in the section Search " Because the class contains abstract functions , this class is an abstract class .
So , you cannot create objects of this class .
In the section Search " we will derive class from the class and provide the definitions of these functions .

Note that the definition of the class contains the statement to overload the assignment  copy constructor , and destructor .
This is because the class contains pointer member variables .
Recall that for classes with pointer member variables , we must explicitly overload the assignment  include the copy constructor , and include the destructor .

The definition of the class contains several member functions that are private members of the class .
These functions are used to implement the public member functions of the class .
For example , to do an inorder traversal , the function inorderTraversal calls the function inorder and passes the pointer as parameter to this function .
Moreover , the pointer is declared as protected member so that we can later derive special binary trees .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Implementing Binary Trees .

The binary tree is empty if is nullptr .
So the definition of the function isEmpty is : template .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Implementing Binary Trees .

The definitions of the functions nodeCount and leavesCount are left as exercises for you .
See Programming Exercises and at the end of this chapter .

Next , we give the definitions of the functions copyTree , destroy , destroyTree ; the copy constructor ; and the destructor .

The definition of the function copyTree is the same as before ; here , this function is member of the class .

To destroy binary tree , for each node , first we destroy its left subtree , then its right subtree , and then the node itself .
We must use the operator delete to deallocate the memory occupied by the node .
The definition of the function destroy is : template .

To implement the function destroyTree , we use the function destroy and pass the node of the binary tree to the function destroy .
The definition of the function destroyTree is : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Recall that when class object is passed by value , the copy constructor copies the value of the actual parameters into the formal parameters .
Because the class has pointer member variables and pointer is used to create dynamic memory , we must provide the definition of the copy constructor to avoid the shallow copying of data .
The definition of the copy constructor , given next , uses the function copyTree to make an identical copy of the binary tree that is passed as parameter .

The definition of the destructor is quite straightforward .
When the object of type goes out of scope , the destructor deallocates the memory occupied by the nodes of the binary tree .
The definition of the destructor uses the function destroy to accomplish this task .

Next , we discuss the definition of the function to overload the assignment .
To assign the value of one binary tree to another binary tree , we make an identical copy of the binary tree to be assigned by using the function copyTree .
The definition of the function to overload the assignment is : the assignment template .

Binary Search Trees .

Now that you know the basic operations on binary tree , section discusses special type of binary tree called the binary search tree .

FIGURE Arbitrary binary tree Suppose that we want to determine whether is in the binary tree .
To do so , we can use any of the previous traversal algorithms to visit each node and compare the search item with the data stored in the node .
However , could require us to traverse large part of the binary tree , so the search will be slow .
The reason that we need to visit each node in the binary tree until either the item is found or we have traversed the entire binary tree is that no criteria exist to guide our search .
This case is like an arbitrary linked list , in which we must start our search at the first node and continue looking at each node until either the item is found or the entire list is searched .

On the other hand , consider the binary tree in Figure .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Binary search tree In the binary tree in Figure , the data in each node .

Larger than the data in its left child Smaller than the data in its right child The binary tree in Figure has some order to its nodes .
Suppose that we want to determine whether is in binary tree .
As before , we must start our search at the node .
We compare with the data in the node ; that is , we compare with .

Because and , it is guaranteed that will not be in the right subtree of the node .
Therefore , if is in the binary tree , then it must be in the left subtree of the node .
We follow the left pointer of the node and go to the node with info .
We now apply the same criteria at node .
Because , we must follow the right pointer of node and go to the node with info .
At node , we find .

This example shows that every time we move down to child , we eliminate one of the subtrees of the node from our search .
If the binary tree is nicely constructed , then the search is very similar to the binary search on arrays .

The binary tree given in Figure is special type of binary tree called binary search tree .
has special node called the node ; ii .
has two sets of nodes , LT and RT , called the left subtree and right subtree of ,

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Binary Search Trees .

The key in the node is larger than every key in the left subtree and smaller than every key in the right subtree ; and iv .
LT and RT are binary search trees .

The following operations are typically performed on binary search tree .

Determine whether the binary search tree is empty .

Search the binary search tree for particular item .

Insert an item in the binary search tree .

Delete an item from the binary search tree .

Find the height of the binary search tree .

Find the number of nodes in the binary search tree .

Find the number of leaves in the binary search tree .

Traverse the binary search tree .

Copy the binary search tree .

Clearly , every binary search tree is binary tree .
The height of binary search tree is determined in the same way as the height of binary tree .
Similarly , the operations to find the number of nodes , to find the number of leaves , and to do inorder , preorder , and postorder traversals of binary search tree are the same as those for binary tree .

Therefore , we can inherit all of these operations from the binary tree .
That is , we can extend the definition of the binary tree by using the principle of inheritance and hence define the binary search tree .

The following class defines binary search tree as an ADT by extending the definition of the binary tree : template class bSearchTreeType : public public : bool .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

See Exercise at the end of this chapter .

Next , we describe each of these operations .

SEARCH The function search searches the binary search tree for given item .
If the item is found in the binary search tree , it returns true ; otherwise , it returns false .
Because the pointer root points to the root node of the binary search tree , we must begin our search at the root node .

Furthermore , because root must always point to the root node , we need , traverse the binary search tree .
The pointer current is initialized to root .

If the binary search tree is nonempty , we first compare the search item with the info in the root node .
If they are the same , we stop the search and return true .
Otherwise , if the search item is smaller than the info in the node , we follow lLink to go to the left subtree ; otherwise , we follow rLink to go to the right subtree .
We repeat this process for the next node .
If the search item is in the binary search tree , our search ends at the node containing the search item ; otherwise , the search ends at an empty subtree .
Thus , the general algorithm is : if root is nullptr Cannot search an empty tree , returns false .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Binary Search Trees .

INSERT After inserting an in binary search  the resulting binary must be binary search .
To insert new  first we search the binary search and find the place where the new is to be inserted .
The search algorithm is similar to the search algorithm of the function search .
Here , we traverse the binary search with two pointer , say ,  to check the and pointer , say , trailCurrent , pointing to the parent of .
Because duplicate items are not allowed , our search must end at an empty subtree .
We can then use the pointer trailCurrent to insert the new at the proper place .
The to be inserted , insertItem , is passed as parameter to the function insert .
The general algorithm is :

Create new and copy insertItem into the new .
Also set lLink and rLink of the new to nullptr .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Binary Search Trees .

DELETE As before , first we search the binary search to find the to be deleted .
To help you better understand the delete operation , before describing the function to delete an from the binary search  let us consider the binary search in Figure .

Binary search before deleting After deleting the desired it exists in the binary search , the resulting must be binary search .
The delete operation has four cases , as follows : Case : The to be deleted has no left and right subtrees ; that is , the to be deleted is leaf .
For example , the with info is leaf .

Case : The to be deleted has no left subtree ; that is , the left subtree is empty , but it has nonempty right subtree .
For example , the left subtree of with info is empty , and its right subtree is nonempty .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

For example , the left subtree of with info is empty , and its right subtree is nonempty .

Case : The to be deleted has nonempty left and right subtrees .
For example , the left and the right subtrees of with info are nonempty .

Figure illustrates these four cases .

Binary trees of Figure after deleting various items Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Binary Search Trees .

We search the binary tree and arrive at the node containing .
Because this node is leaf and is the left child of its parent , we can simply set the lLink of the parent node to nullptr and shows the resulting binary search tree .

Case : Suppose that we want to delete from the binary search tree in Figure .
In this case , the node to be deleted has no left subtree .
Because is the left child of its parent node , we make the lLink of the parent node point to the right child of and then deallocate the memory occupied by .
Figure shows the resulting binary tree .

Case : Suppose that we want to delete from the binary search tree of Figure .

The node containing has no right child and is the right child of its parent .
Thus , we make the rLink of the parent of is , to the left child of .

Figure shows the resulting binary tree .

Case : Suppose that we want to delete from the binary search tree in Figure .
The node with info has nonempty left subtree and nonempty right subtree .
Here , we first reduce this case to either case or case as follows .
To be specific , suppose that we reduce it to case is , the node to be deleted has no right subtree .
For this case , we find the immediate predecessor of in this binary tree , which is .
This is done by first going to the left child of and then locating the rightmost node of the left subtree of .
To do so , we follow the rLink of the nodes .
Because the binary search tree is finite , we eventually arrive at node that has no right subtree .
Next , we swap the info in the node to be deleted with the info of its immediate predecessor .
In this case , we swap with .
This reduces to the case wherein the node to be deleted has no right subtree .
We now apply case to delete the node .

In each case , we clearly see that the resulting binary tree is again binary search tree .

From this discussion , it follows that to delete an item from the binary search tree , we must do the following :
Find the node containing the item to be deleted .

Delete the node .

We accomplish the second step by separate function , which we will call deleteFromTree .

Given pointer to the node to be deleted , this function deletes the node by taking into account the previous four cases .

From the preceding examples , it is clear that whenever we delete node from the binary tree , we adjust one of the pointers of the parent node .
Because the adjustment has to be made in the parent node , we must call the function deleteFromTree by using an appropriate pointer of the parent node .
For example , suppose that the node to be deleted is , which is the right child of its parent node .
Suppose that trailCurrent points to the node containing , the parent node of .
call to the function deleteFromTree is : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Binary Search Trees .

Next , we describe the function deleteNode .
The function deleteNode first searches the binary search tree to find the node containing the item to be deleted .
The item to be deleted , deleteItem , is passed as parameter to the function .
If the node containing deleteItem is in the binary search tree , the function deleteNode calls the function deletefromTree to delete the node .
The definition of the function deleteNode is given next .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Binary Search Tree : Analysis Let be binary search tree with nodes , in which .
Suppose that we want to determine whether an item , is in .
The performance of the search algorithm depends on the shape of .
Let us first consider the worst case .
In the worst case , is linear .
That is , the is one of the forms shown in Figure .

Linear binary search trees Because is linear , the performance of the search algorithm on is the same as its performance on linear list .
Therefore , in the successful case , on average , the search algorithm makes OðnÞ key comparisons .
In the unsuccessful case , it makes comparisons .

In the successful case , the search would end at node .
Because there are items , there are .
We assume that all .
Let denote the number of comparisons in the average successful case , and let denote the number of comparisons in the average unsuccessful case .

The number of comparisons required to determine whether is in is one more than the number of comparisons required to insert in .
Furthermore , the number of Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Nonrecursive Binary Tree Traversal Algorithms .

From this , it follows that : SðnÞ : Uðn It is also known that : SðnÞ UðnÞ Solving equations and , it can be shown that : UðnÞ nÞ and : SðnÞ nÞ We can now formulate the following result .

Theorem : Let be binary search tree with nodes , in which .
The average number of nodes visited in search of is approximately , and the number of key comparisons is approximately .

Nonrecursive Binary Tree Traversal Algorithms The previous sections described how to do the .

Traverse binary tree using the inorder , preorder , and postorder methods .

Construct binary tree .

Insert an item in the binary tree .

Delete an item from the binary tree .

The traversal , preorder , and earlier are recursive .
Because traversing binary tree is fundamental operation , this section discusses the nonrecursive inorder , preorder , and postorder traversal algorithms .

Nonrecursive Inorder Traversal In the inorder traversal of binary tree , for each node , the left subtree is visited first , then the node , and then the right subtree .
It follows that in an inorder traversal , the first node visited is the leftmost node of the binary tree .
For example , in the binary tree in Figure , the leftmost node is the node with info .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Binary tree ; the leftmost node is To get to the leftmost node of the binary tree , we start by traversing the binary tree at the root node and then follow the left link of each node until the left link of node becomes null .
From this point , we back up to the parent node , visit the node , and then move to the right node .
Because links go in only one direction , to get back to node , we must save pointer to the node before moving to the child node .
Moreover , the nodes must be backtracked in the order they were traversed .
It follows that while backtracking , the nodes must be visited in manner .

We , therefore , save pointer to node in stack .
The general algorithm is as follows :

Nonrecursive Binary Tree Traversal Algorithms .

Nonrecursive Preorder Traversal In preorder traversal of binary tree , for each node , first the node is visited , then the left subtree is visited , and then the right subtree is visited .
As in the case of an inorder traversal , after visiting node and before moving to the left subtree , we must save pointer to the node so that after visiting the left subtree , we can visit the right subtree .

The general algorithm is as follows :

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Nonrecursive Postorder Traversal In postorder traversal of binary tree , for each node , first the left subtree is visited , then the right subtree is visited , and then the node is visited .
As in the case of an inorder traversal , in postorder traversal , the first node visited is the leftmost node of the binary tree .
each left and right subtrees are visited before visiting the node , we must indicate to the node whether the left and right subtrees have been visited .

After visiting the left subtree of node and before visiting the node , we must visit its right subtree .
Therefore , after returning from left subtree , we must tell the node that the right subtree needs to be visited , and after visiting the right subtree , we must tell the node that it can now be visited .
To do this , other than saving pointer to the node get back to the right subtree and to the node , we also save an integer value of before moving to the left subtree and an integer value of before moving to the right subtree .
Whenever the stack is popped , the integer value associated with that pointer is popped as well .
This integer value tells whether the left and right subtrees of node have been visited .

The general algorithm is :

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Binary Tree Traversal Algorithms and Functions as Parameters .

We will use two stacks : one to save pointer to node and another to save the integer value or associated with this pointer .
We leave it as an exercise for you to write the definition of function to implement the preceding postorder traversal algorithm .
See Programming Exercise at the end of this chapter .

Binary Tree Traversal Algorithms and Functions as Parameters Suppose that you have stored employee data in binary search tree , and at the end of the year pay increases or bonuses are to be awarded to each employee .
This task requires that each node in the binary search tree be visited and that the salary of each employee be updated .
The preceding sections discussed various ways to traverse binary tree .
However , in these traversal , preorder , and we visited node , for simplicity and for illustration purposes , we output only the data contained in each node .
How do we use traversal algorithm to visit each node and update the data in each node .
One way to do so is to first create another binary search tree in which the data in each node is the updated data of the original binary search tree and then destroy the old binary search tree .
This would require extra computer time and perhaps extra memory and , therefore , is not efficient .
Another solution is to write separate traversal algorithms to update the data .
This solution requires you to frequently modify the definition of the class implementing the binary search tree .
However , if the user can write an appropriate function to update the data of each employee and then pass the function as parameter to the traversal algorithms , we can considerably enhance the flexibility .
This section describes how to pass functions as parameters to other functions .

In , function name without any parentheses is considered pointer to the function .

To specify function as formal parameter to another function , we specify the function type , followed by the function name as pointer , followed by the parameter types of the function .
For example , consider the following .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The statement in Line declares to be function that takes as parameter any void function that has one reference parameter of type elemType .

We can now rewrite , say , the inorder traversal function of the class .

Alternately , we can overload the existing inorder traversal functions .
To further illustrate function overloading , we will overload the inorder traversal functions .
Therefore , we include the following statements in the definition of the class  void const ; to do an inorder traversal of the binary tree .

The definitions of these functions are as follows : template void const ,

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Binary Tree Traversal Algorithms and Functions as Parameters .

EXAMPLE This example shows how to pass function as parameter to the binary tree traversal algorithms .
For illustration purposes , we show how to use only the inorder traversal function .

The following program uses the class bSearchTreeType , which is derived from the class binaryTreeType , to build the binary tree .
The traversal functions are included in the class binaryTreeType , which are then inherited by the class bSearchTreeType .

Sample Run : In this sample run , the user input is shaded .

Line : Enter numbers ending .

The statement in Line declares treeRoot to be binary search tree object , in which the data in each node is of type int .
The statements in Lines through build the binary search tree .
The statement in Line uses the member function inorderTraversal of treeRoot to traverse the binary search tree treeRoot .
The parameter to the function inorderTraversal , in Line , is the function print at Line .
Because the function print outputs the value of its argument , the statement in Line outputs the data of the nodes of the binary search tree treeRoot .
The statement in Line outputs the height of the binary search tree .

The statement in Line uses the member function inorderTraversal to traverse the binary search tree treeRoot .
In Line , the actual parameter of the function inorderTraversal is the function update at Line .
The function update doubles the value of its argument .
Therefore , the statement in Line updates the data of each node of the binary search tree by doubling the value .
The statements in Lines and output the nodes and the height of the binary search tree .

The necessary material is in the file AVL .

To find the file , navigate to the page by typing in the ISBN of this text and then click on Free Materials .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

PROGRAMMING EXAMPLE : Watch the Video DVD Object .

In Chapter , we designed program to help DVD store automate its DVD rental process .
That program used an linked list to keep track of the DVD inventory in the store .
Because the search algorithm on linked list is sequential and the list is fairly large , the search could be time consuming .
In this chapter , you learned how to organize data into binary tree .
If the binary tree is nicely constructed is , it is not , then the search algorithm can be improved considerably .
Moreover , in general , item insertion and deletion in binary search tree are faster than in linked list .
We will , therefore , redesign the DVD store program so that the DVD inventory can be maintained in binary tree .
As in Chapter , we leave the design of the customer list in binary tree as exercises for you .

In Chapter , linked list was used to maintain list of DVDs in the store .
Because the linked list was unordered , to see whether particular DVD was in stock , the sequential search algorithm used the equality operator for comparison .
However , in the case of binary tree , we need other relational operators for the search , insertion , and deletion operations .
We will , therefore , overload all of the relational operators .

Other than this difference , the class dvdType is the same as before .
However , we give its definition for the sake of completeness .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The DVD list is maintained in binary search tree .
Therefore , we derive the class dvdBinaryTree from the class bSearchTreeType .

The specifies the name of the DVD for the number of copies is to be updated .

The definitions of the member functions isDVDAvailable , dvdCheckIn , dvdCheckOut , dvdCheckTitle , dvdUpdateInStock , dvdSetCopiesInStock , and dvdSearch of the class dvdBinaryTree are similar to the definitions of these functions given in Chapter .
The only difference is that , here , these are members of the class dvdBinaryTree .
You can find the complete definitions of these functions on the Web site that accompanies this book .

Next , we discuss the definitions of the remaining functions of the class dvdBinaryTree .

The function searchDVDList uses search algorithm similar to the search algorithm for binary search tree given earlier in this chapter .
It returns true if the search item is found in the list .
It also returns pointer to the node containing the search item .
The definition of this function is as follows : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Given pointer to the node of the binary tree containing the DVDs , the function inorderTitle uses the inorder traversal algorithm to print the titles of the DVDs .
Notice that this function outputs only the DVD titles .
The definition of this function is as follows : void const .

MAIN PROGRAM The main program is the same as before .
Here , we give only the listing of this program .
We assume that the name of the header file containing the definition of the .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

binary tree is either empty or it has special node called the root node .

If the tree is nonempty , the root node has two sets of nodes , called the left and right subtrees , such that the left and right subtrees are also binary trees .

The node of binary tree has two links in it .

node in the binary tree is called leaf if it has no left and right children .

node is called the parent of node if there is branch from to .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Quick Review .

That is , there is branch from to , to , to .

The length of path in binary tree is the number of branches on that path .

The level of node in binary tree is the number of branches on the path from the root to the node .

The level of the root node of binary tree is , and the level of the children of the root node is .

The height of binary tree is the number of nodes on the longest path from the root to leaf .

In an inorder traversal , the binary tree is traversed as follows : Traverse the left subtree .

Visit the node .

Traverse the right subtree .

In preorder traversal , the binary tree is traversed as follows :

Visit the node .

Traverse the left subtree .

Traverse the right subtree .

In postorder traversal , the binary tree is traversed as follows :

Traverse the left subtree .

Traverse the right subtree .

Visit the node .

binary search tree is either empty or :

has two sets of nodes , LT and RT , called the left subtree and the right subtree of , respectively ; iii .

The key in the root node is larger than every key in the left subtree and smaller than every key in the right subtree ; and iv .

LT and RT are binary search trees .

To delete node from binary search tree that has both left and right nonempty subtrees , first its immediate predecessor is located , then the info is copied into the node , and finally the predecessor is deleted .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Mark the statements as true or false .

If tree has only one node , the height of the tree is because the .
The level of node in binary tree is the number of branches on the .
The inorder traversal of binary tree always outputs the data in ascending .

In preorder traversal of binary tree , the node is visited before visiting .
In binary search tree , the data in node is larger than the data in its .
In binary search tree , the left and right subtrees of node are binary .

To insert new in binary search tree , first we search the binary .

In , function name without any parentheses is considered The binary tree of Figure , is to be used for Exercises through .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

FIGURE .

Figure for Exercises to .

The binary search tree of Figure is to be used for Exercises through .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Figure for Exercises to node with info is to be inserted in the tree .
List the nodes that are visited Delete nodes and in that order .
Redraw the binary tree after each Insert , into an initially empty binary Prove that binary tree with nodes has exactly + empty subtree Suppose that you are given two sequences of elements corresponding to the inorder sequence and the preorder sequence .
Prove that it is possible to The following lists the nodes in binary tree in two different orders : preorder : inorder : ABCDEFGHIJKLM CEDFBAHJIKGML Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Figure for Exercises and Recall the nonrecursive inorder traversal algorithm for binary tree given in this chapter .
Do an inorder traversal of the binary tree in Figure .

Recall the nonrecursive preorder traversal algorithm for binary tree given in this chapter .
Do preorder traversal of the binary tree in Figure .

Draw the UML class diagram of the class binaryTreeType .

Draw the UML class diagram of the class bSearchTreeType .
Also , show the inheritance hierarchy .

PROGRAMMING EXERCISES .

Write the definition of the function , nodeCount , that returns the number of nodes in the binary tree .
Add this function to the class binaryTreeType and create program to test this function .

Write the definition of the function , leavesCount , that takes as parameter pointer to the root node of binary tree and returns the number of leaves in binary tree .
Add this function to the class binaryTreeType and create program to test this function .

Write function , swapSubtrees , that swaps all of the left and right subtrees of binary tree .
Add this function to the class binaryTreeType and create program to test this function .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Add this function to the class binaryTreeType and create program to test this function .

Write the definition of the function to implement the nonrecursive postorder traversal algorithm .

Write version of the preorder traversal algorithm in which function can be passed as parameter to specify the visiting criteria at node .

Also , write program to test your function .

Write version of the postorder traversal algorithm in which function can be passed as parameter to specify the visiting criteria at node .

Also , write program to test your function .

Write function that inserts the nodes of binary tree into an ordered linked list .
Also write program to test your function .

Write program to do the following : Build binary search tree ,

Do postorder traversal of and , while doing the postorder traversal , insert the nodes into second binary search tree .

Do preorder traversal of and , while doing the preorder traversal , insert the node into third binary search tree .

Do an inorder traversal of .

Output the heights and the number of leaves in each of the three binary search trees .

Because the search on linked list is sequential and , therefore , can be time consuming , design and implement the class customerBTreeType so that this customer data can be stored in binary search tree .
The class customerBTreeType must be derived from the class bSearchTreeType , as designed in this chapter .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Examine and implement the minimal spanning tree algorithm Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

This chapter discusses how to implement and manipulate graphs , which have numerous applications in computer science .

Introduction In , the following problem was posed .
In the town of called , the river Pregel flows around the island Kneiphof and then divides into two branches Figure .

c Königsberg .

bridge problem The river has four land areas , as shown in the figure .
These land areas are connected using seven bridges , as shown in Figure .
The bridges are labeled , c , and .
The bridge problem is as follows : Starting at one land area , is it possible to walk across all of the bridges exactly once and return to the starting land area .
In , Euler represented the bridge problem as graph , as shown in Figure , and answered the question in the negative .
This marked the birth of graph theory .

c FIGURE Graph representation of bridge problem Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Graph Definitions and Notations .

Over the past years , graph theory has been applied to variety of applications .
Graphs are used to model electrical circuits , chemical compounds , highway maps , and so on .

They are also used in the analysis of electrical circuits , finding the shortest route , project planning , linguistics , genetics , social science , and so forth .
In this chapter , you will learn about graphs and their applications in computer science .

Graph Definitions and Notations To facilitate and simplify our discussion , we borrow few definitions and terminology from set theory .
Let be set .
If is an element of , then we write .
If is subset of , we write .

For sets and , the set is the set of all of the ordered pairs of elements of and ; that is ,

graph is pair , in which is finite nonempty set , called the set of vertices of , and .
That is , the elements of are the pair of elements of .

is called the set of edges .

Let denote the set of vertices and denote the set of edges of graph .
If the elements of are ordered pairs , is called directed graph or digraph ; otherwise , represent the same edge .
If , is an edge in directed graph , then sometimes the vertex is called the origin of the edge , and the vertex is called the destination .

Let be graph .
graph is called subgraph of if and ; that is , every vertex of is vertex of , and every edge in is an edge in .

To learn more about sets and graph terminology , the interested reader is referred to the book Discrete Mathematics : Theory and Applications , listed in Appendix .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The vertices are drawn as circles , and label inside of the circle represents the vertex .
In an undirected graph , the edges are drawn using lines .

In directed graph , the edges are drawn using arrows .
Moreover , in directed graph , the tail of pictorial directed edge is the origin , and the head is the destination .

EXAMPLE Figure shows some examples of undirected graphs .

Various undirected graphs Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Graph Definitions and Notations .

Let be an undirected graph .
Let and be two vertices in .
Then , and are called adjacent if there is an edge from one to the other ; that is ,
Let , be an edge in .
We then say that edge is incident on the vertices and .
An edge incident on single vertex is called loop .
If two edges , and , are associated with the same pair of vertices , then and are called parallel edges .
graph is called simple graph if it has no loops and no parallel edges .
There is path from to if there is sequence of vertices ,
Vertices and are called connected if there is path from to .
simple path is path in which all of the vertices , except possibly the first and last vertices , are distinct .
cycle in is simple path in which the first and last vertices are the same .
is called connected if there is path from any vertex to any other vertex .
maximal subset of connected vertices is called component of .

Let be directed graph , and let and be two vertices in .
If there is an edge from to , that is , then we say that is adjacent to and is adjacent from .

The definitions of the paths and cycles in are similar to those for undirected graphs .
is called strongly connected if any two vertices in are connected .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Graph Representation To write programs that process and manipulate graphs , the graphs must be is , computer memory .
graph can be represented computer in several ways .
We now discuss two commonly used methods : adjacency matrices and adjacency lists .

Adjacency Matrix Let be graph with vertices , in which .

The adjacency matrix AG of is matrix such that the , entry of AG is if there is an edge from vi to vj ; otherwise , the , entry is zero .
That is : AG ði ; jÞ if  EðGÞ otherwise In an undirected graph , if , then , so ,

It follows that the adjacency matrix of an undirected graph is symmetric .

EXAMPLE Consider the directed graphs of Figure .
The adjacency matrices of the directed graphs and are as follows : and AG Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Operations on Graphs .

In the adjacency list representation , corresponding to each vertex , there is linked list such that each node of the linked list contains the vertex , such that ,
Because there are nodes , we use an array , of size , such that is reference variable pointing to the first node of the linked list containing the vertices to which vi is adjacent .

Clearly , each node has two components , say vertex and link .
The component vertex contains the index of the vertex adjacent to vertex .

EXAMPLE Consider the directed graphs of Figure .
Figure shows the adjacency list of the directed graphs and .

Adjacency list of graphs of Figure Operations on Graphs Now that you know how to represent graphs in computer memory , the next obvious step is to learn the basic operations on graph .
The operations commonly performed on graph are as follows :
Create the graph .
That is , store the graph in computer memory using particular graph representation .

Clear the graph .
This operation makes the graph empty .

Determine whether the graph is empty .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Traverse the graph .

Print the graph .

We will add more operations on graph when we discuss specific application or particular graph later in this chapter .

How graph is represented in computer memory depends on the specific application .
For illustration purposes , we use the adjacency list representation of graphs .
Therefore , for each vertex , the vertices adjacent to directed graph , also called the immediate are stored in the linked list associated with .

To manage the data in linked list , we use the class unorderedLinkedList , discussed in Chapter .

The labeling of the vertices of graph depends on specific application .
If you are dealing with the graph of cities , you could label the vertices by the names of the cities .
However , to write algorithms to manipulate graph as well as to simplify the algorithm , there must be some ordering to the vertices .
That is , we must specify the first vertex , the second vertex , and so on .
Therefore , for simplicity , throughout this chapter , we assume that the vertices of the graphs are numbered ,
Moreover , it follows that the class that we will design to implement the graph algorithm will not be template .

Graphs as ADTs In this section , we describe the class to implement graphs as an abstract data type and provide the definitions of the functions to implement the operations on graph .

The following class defines graph as an ADT : class graphType .

Graphs as ADTs .

The definitions of the functions of the class graphType are discussed next .

graph is empty if the number of vertices is is , if is .
Therefore , the definition of the function isEmpty is : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The definition of the function createGraph depends on how the data is input into the program .
For illustration purposes , we assume that the data to the program is input from file .
The user is prompted for the input file .
The data in the file appears in the following form :

The first line of input specifies the number of vertices in the graph .
The first entry in the specify the vertices that are adjacent to the vertex .
Each line ends with the number .

Using these conventions , the definition of the function createGraph .

Graphs as ADTs .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

This section discusses the traversal algorithms .

Traversing is similar to traversing binary tree , except that traversing is bit more complicated .
Recall that binary tree has no cycles .
Also , starting at the root node , we can traverse the entire tree .
On the other hand , might have cycles , and we might not be able to traverse the entire from single vertex example , if the is not .
Therefore , we must keep track of the vertices that have been visited .
We must also traverse the from each vertex has not been of the This ensures that the entire is traversed .

The two most common traversal algorithms are the depth first traversal and breadth first traversal , which are described next .
For simplicity , we assume that when vertex is visited , its is output .
Moreover , each vertex is visited only once .
We use the bool array visited to keep track of the visited vertices .

Depth First Traversal The depth first traversal is similar to the preorder traversal of binary tree .
The general algorithm is : for each vertex , in the if is not visited start the depth first traversal at Consider the of Figure .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

After visiting all of the vertices that can be reached starting at the vertex , the depth first search starts at the next vertex that is not visited .
There is path from the vertex to every other vertex except the vertices and .
Therefore , when the depth first search starts at the vertex , all of the vertices except and are visited before these vertices .
After completing the depth first search that started at the vertex , the depth first search starts at the vertex and then at the vertex .
Note that there is no path from the vertex to the vertex .

Therefore , after completing the depth first search that started at the vertex , the depth first search starts at the vertex .

The general algorithm to do depth first traversal at given node , is :
Mark node as visited .
Visit the node .
We use recursive function , dft , to implement this algorithm .
The vertex at which the depth first traversal is to be started , and the bool array visited , are passed as parameters to this .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Breadth First Traversal The breadth first traversal of is similar to traversing binary tree level by level nodes at each level are from left to .
All of the nodes at any level , are before visiting the nodes at level +

breadth first ordering of the vertices of the is : For the , we start the breadth traversal at vertex .
After visiting the vertex , next we visit the vertices that are directly connected to it and are not  which are Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Next , we visit the vertices that are directly connected to and are not  which is .
After this , we visit the vertices that are directly connected to and are not  which in this instance is the single vertex .
After this , we visit the vertices that are directly connected to and are not  and so on .

As in the case of the depth first traversal , because it might not be possible to traverse the entire graph from single vertex , the breadth first traversal also traverses the graph from each vertex that is not .
Starting at the first vertex , the graph is traversed as much as possible ; we then go to the next vertex that has not been .
To implement the breadth first search algorithm , we use queue .
The general algorithm is :

Mark as c .
Remove vertex from the queue .
Retrieve the vertices adjacent to .
Add to the queue .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Shortest Path Algorithm Watch the Video The graph theory has many applications .
For example , we can use graphs to show how different chemicals are related or to show airline routes .
They can also be used to show the highway structure of city , state , or country .
The edges connecting two vertices can be assigned nonnegative real number , called the weight of the edge .
If the graph represents highway structure , the weight can represent the distance between two places or the travel time from one place to another .
Such graphs are called weighted graphs .

Let be weighted graph .
Let and be two vertices in , and let be path in from to .
The weight of the path is the sum of the weights of all the edges on the path , which is also called the weight of from via .

Let be weighted graph representing highway structure .
Suppose that the weight of an edge represents the travel time .
For example , to plan monthly business trips , salesperson wants to find the shortest path is , the path with the smallest from her or his city to every other city in the graph .
Many such problems exist in which we want to find the shortest path from given vertex , called the source , to every other vertex in the graph .

This section describes the shortest path algorithm , also called greedy algorithm , developed by Dijkstra .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Shortest Path Algorithm .

Let be matrix such that : ði ; jÞ wij if  is an edge in and wij is the weight of the edge  if there is no edge from to The input to the program is the graph and the weight matrix associated with the graph .
To make inputting the data easier , we extend the definition of the class graphType and add the function createWeightedGraph to create the graph and the weight matrix associated with the graph .
Let us call this class weightedGraphType .

The functions to implement the shortest path algorithm will also be added to this class .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Next , we describe the shortest path algorithm .

Shortest Path Given  say , is , this section describes the shortest path algorithm .

The general algorithm is :
Initialize the array smallestWeight so that :
Set .

Find the  that is closest to the for which the shortest path has not been determined .

Mark as the for which the smallest weight is found .

For each in , such that the shortest path from to has not been determined and an edge , exists , if the weight of the path to via is smaller than its current weight , update the weight of to the weight of + the weight of the edge ,

Because there are vertices , Steps through are repeated times .

Example illustrates the shortest path algorithm .
If the smallest weight for  from the source , has been found , then this corresponding entry in the array weightFound is set to true ; otherwise , the corresponding Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Shortest Path Algorithm .

FIGURE Weighted graph Suppose that the source of is .
The graph shows the weight of each edge .
After Steps and execute , the resulting graph is as shown in Figure .

We do this by finding in the array smallestWeight that has the smallest weight and corresponding entry in the array weightFound of false .
Therefore , in this iteration , we select the .

At Step , we mark as true .
Next , at Step , we consider vertices Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

We then check if the path from the to the vertices and via the can be improved .
The weight of the path from to less than the weight of the path .

The weight of the path , which + greater than the weight of the path , which .
So we do not update the weight of the vertex .
Figure shows the resulting graph .

Next , we execute Steps and .
At Step , we set to true .
At Step , we consider vertices and because these are the vertices for which there an edge from the vertex , and the shortest path from to these vertices has not been found .
We then check if the path from the vertex to the vertices and via the vertex can be improved .
Clearly , the weight of the path , which , smaller than the current weight of , which .

Similarly , we update .
Figure shows the resulting graph .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Shortest Path Algorithm .

At Step , we set to true .
Next , at Step , we consider the vertex because this the vertex for which there an edge from the vertex , and the shortest part from to this vertex has not been found .
We then check if the path from the vertex to the vertex via the vertex can be improved .
Clearly , the weight of the path , which is , from to is smaller than the current weight of is .

Figure shows the resulting graph .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In this iteration , the action of Step is null because the shortest path from the vertex to every other vertex in the graph has been determined .
Figure shows the final graph .

Shortest Path Algorithm .

Note that the function shortestPath records only the weight of the shortest path from the source to .
We leave it for you to modify this function so that the shortest path from the source to is also recorded .
Moreover , this function used the named constant , which is defined in the header file cfloat .

The definitions of the function printShortestDistance and the constructor and destructor .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Minimal Spanning Tree Consider the graph of Figure , which represents the airline connections of company between seven cities .
The number on each edge represents some cost factor of maintaining the connection between the cities .

The graphs of Figure , and show three different solutions .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Minimal Spanning Tree .

The total cost factor of maintaining the remaining connections in Figure is , in Figure it is , and in Figure it is .
Out of these three solutions , obviously , the desired solution is the one shown by the graph of Figure because it gives the lowest cost factor .
The graphs of Figure are called spanning trees of the graph of Figure .

Let us note the following from the graphs of Figure .
Each of the graphs is subgraph of the graph of Figure , and there is unique path from node to any other node .
Such graphs are called trees .
There are many other situations in which , given weighted graph , we need to determine graph with the smallest weight , such as in Figure .
In this section , we give an algorithm to determine such graphs .
However , first we introduce some terminology .

tree is simple graph such that if and are two vertices in , then there is unique path from to .
tree in which particular vertex is designated as root is called rooted tree .
If weight is assigned to the edges in , is called weighted tree .
If is weighted tree , the weight of , denoted by , is the sum of the of all of the edges in .

tree is called spanning tree of graph if is subgraph of such that ; that is , all of the vertices of are in .

Suppose that denotes the graph of Figure .
Then , the graphs of Figure show three spanning trees of .
Let us note the following theorem .

Theorem : graph has spanning tree if and only if is connected .

From this theorem , it follows that in order to determine spanning tree of graph , the graph must be connected .

Let be weighted graph .
minimal spanning tree of is spanning tree with the minimum weight .

algorithm and algorithm are two algorithms that can be used to find the minimal spanning tree of graph .
This section discusses algorithm Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The interested reader can find the algorithm in the discrete structures book or data structures book listed in Appendix .

algorithm builds the tree iteratively by adding edges until minimal spanning tree is obtained .
We start with designated  which we call the source .
At each iteration , new that does not complete cycle is added to the tree .

Let be weighted graph such that ,
Let be the source .
Let be the partially built tree .
Initially , contains the source  and is empty .
At the next iteration , new that is not in is added to , such that an exists from in to the new so that the corresponding has the smallest weight .

Let us illustrate algorithm using the graph of Figure is same as the graph of Figure .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Minimal Spanning Tree Let denote the set of vertices of that are not in .
Suppose that the source is .

After Steps and execute , and are as shown in Figure .

Edge Edge Weight .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In Figure , Step checks the edges shown in this figure ; and the edge with the least weight is identified .
Figure , shows the resulting graph , and .

Thus , in Figure in each graph , we identify , and  identify the edges checked by Step ; and identify the edge with the least weight .

Also in each figure , the dotted lines show the edges in .
In Figure , the dotted lines show minimal spanning tree of of weight .

Note that the graph in Figure is obtained after the first iteration of Step , the graph in Figure is obtained after the second iteration of Step , and so on .

Finally , the graph in Figure is obtained after the sixth iteration of Step .

Before we give the definition of the function to implement algorithm , let us first define the spanning tree as an ADT .

Let mstv be bool array such that mstv is true if the vertex vi is in  and false otherwise .
Let edges be an array such that if there is an edge connecting vertices vj and vk .
Suppose that the edge , is in the minimal spanning tree .
Let edgeWeights be an array such that is the weight of the edge ,

Using these conventions , the following class defines spanning tree as an ADT : class msTreeType : public graphType public : void ; to create the graph and the weight matrix .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

We leave the UML class diagram of the class msTreeType and the inheritance hierarchy as an exercise .
The definition of the function createSpanningGraph is also left as an exercise for you .
This function creates the graph and the weight matrix associated with the graph .

The following function , minimalSpanning , implements algorithm , as described .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The definition of the function minimalSpanning contains three nested for loops .

Therefore , in the worst case , algorithm given in this section is of the order .

It is possible to design algorithm so that it is of the order .
Programming Exercise at the end of this chapter asks you to do this .

The definition of the function printTreeAndWeight .

Quick Review .

The necessary material is in the file .

To find the file , navigate to the page by typing in the ISBN of this text and then click on Free Materials .

QUICK REVIEW .

graph is pair , in which is finite nonempty set , called the set of vertices of , and , called the set of edges .

In an undirected graph , the elements of are unordered pairs .

In directed graph , the elements of are ordered pairs .

Let be graph .
graph is called subgraph of if every vertex of is vertex of and every edge in is an edge in .

Two vertices and in an undirected graph are called adjacent if there is an edge from one to the other .

Let , be an edge in an undirected graph .
The edge is said to be incident on the vertices and .

An edge incident on single vertex is called loop .

In an undirected graph , if two edges and are associated with the same pair of vertices , then and are called parallel edges .

graph is called simple graph if it has no loops and no parallel edges .

path from vertex to vertex is sequence of vertices ,

The vertices and are called connected if there is path from to .

simple path is path in which all of the vertices , except possibly the first and last vertices , are distinct .

cycle in is simple path in which the first and last vertices are the same .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

maximal subset of connected vertices is called component of .

Suppose that and are vertices in directed graph .
If there is an edge from to , that is , we say that is adjacent to and is adjacent from .

directed graph is called strongly connected if any two vertices in are connected .

Let be graph with vertices , in which .

The adjacency matrix AG is matrix such that the , entry of AG is if there is an edge from vi to vj ; otherwise , the , entry is zero .

In an adjacency list representation , corresponding to each vertex is linked list such that each node of the linked list contains the vertex , and ,

The depth first traversal of graph is similar to the preorder traversal of binary tree .

The breadth first traversal of graph is similar to the traversal of binary tree .

The shortest path algorithm gives the shortest distance for given node to every other node in the graph .

In weighted graph , every edge has nonnegative weight .

The weight of the path is the sum of the of all of the edges on the path , which is also called the weight of from via .

tree is simple graph such that if and are two vertices in , there is unique path from to .

tree in which particular vertex is designated as root is called rooted tree .

Suppose is tree .
If weight is assigned to the edges in , is called weighted tree .

If is weighted tree , the weight of , denoted by , is the sum of the weights of all the edges in .

tree is called spanning tree of graph if is subgraph of such that , that is , if all of the vertices of are in .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Mark the following statements as true or false .

If an entry in the adjacency matrix of graph is , the corresponding In the adjacency list representation of graph , corresponding to each vertex , there is an array such that each vertex adjacent from is stored The breadth first traversal of graph is similar to traversing binary tree Use the graphs in Figure for Exercises through .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Also determine if there In Figure , determine if the vertices and are connected .
If these In Figure , determine if the vertices and are connected .

In Figure , determine if the vertices and are connected .

In Figure , find path , if any , from vertex to vertex that has In Figure , find path , if any , from vertex to vertex that has In Figure , determine if the graph is simple .
Also determine if there Use the graphs in Figure for Exercises through .

Graphs for Exercises through Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Graph for Exercise Consider the graph in Figure .
Find the shortest distance from node .

Graph for Exercise .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Graph for Exercise Find the minimal spanning tree for the graph in Figure , using the .

Graph for Exercise PROGRAMMING EXERCISES .

Write program that outputs the nodes of graph in depth first traversal .

Write program that outputs the nodes of graph in breadth first traversal .

Write program that outputs the shortest distance from given node to every other node in the graph .

Write program that outputs the minimal spanning tree for given graph .

The algorithm to determine the minimal spanning tree given in this chapter is of the order .
The following is an alternative to algorithm that is of the order .

Input : connected weighted graph , of vertices , numbered ,

Output : The minimal spanning tree .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Furthermore , write program to test this version of Prim ' algorithm .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Become familiar with the three basic components of the STL : containers , iterators , and algorithms .

Explore how various containers , such as deque and list , are used to manipulate data in program .

Explore how to use various generic algorithms Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

With the help of class templates , we developed generic code to process lists .
For example , we used the class listType to process list of integers and list of strings .
In Chapters and , we studied the three most important data structures : linked lists , stacks , and queues .
In these chapters , using class templates , we developed generic code to process linked lists .
In addition , using the second principle of programming , we developed generic code to process ordered lists .
Furthermore , in Chapter , we used class templates to develop generic code to implement stacks and queues .
Along the way , you saw that template is powerful tool that promotes code reuse .

Standard is equipped with Standard Template Library .
Among other things , the STL provides class templates to process lists or , stacks , and queues .
This chapter discusses many important features of the STL and shows how to use the tools provided by the STL in program .

Components of the STL The main objective of program is to manipulate data and generate results .
Achieving this goal requires the ability to store data into computer memory , access particular piece of data , and write algorithms to manipulate the data .

For example , if all data items are of the same type and we have some idea of the number of data items , we could use an array to store the data .
We can then use an index to access particular component of the array .
Using loop and the array index , we can step through the elements of the array .
Algorithms , such as those for initializing the array , sorting , and searching , are used to manipulate the data stored in an array .
On the other hand , if we do not want to be concerned about the size of the data , we can use linked list to process it .
If the data needs to be processed in Last In First Out manner , we can use stack .
Similarly , if the data needs to be processed in First In First Out manner , we can use queue .

The STL is equipped with these features to effectively manipulate data .
More formally , the STL has three main .

Containers Iterators Algorithms Containers and iterators are class templates .
Iterators are used to step through the elements of container .
Algorithms are used to manipulate data .
The following sections discuss each of these components in detail .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Components of the STL .

The STL containers are classified into three categories , as .

Associative containers Container adapters Sequence Containers Every object in sequence container has specific position .
The three predefined sequence containers .

We do so because vector containers are similar to arrays and thus can be processed like arrays .
Also , with the help of vector containers , we can describe several properties that are common to all containers .
In fact , all containers use the same names for the common operations .
Of course , there are operations that are specific to container , which will be discussed when describing specific container .

Sequence Container : vector vector container stores and manages its objects in dynamic array .
Because an array is random access data structure , the elements of vector can be accessed randomly .
Item insertion in the middle or beginning of an array is time consuming , especially if the array is large .
However , inserting an item at the end is quite fast .

The name of the class that implements the container is .
Thus , to use container in program , the program must the following statement :

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Therefore , container can be declared and initialized several ways .
Table describes how container of specific type can be declared and initialized .

TABLE Various Ways to Declare and Initialize Vector Container .

Both beg and end are pointers , called iterators in STL terminology .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Components of the STL .

In order to manipulate the data in container , we must know the following basic .

Item insertion Item deletion Stepping through the elements of container The elements in container can be accessed directly by using the operations given in Table .
The name of the function is shown in bold .

TABLE Operations to Access the Elements of Vector Container .

From Table , it follows that the elements in can be processed just as they can in an array .
See Example .
Similarly , EXAMPLE Consider the following statement , which declares intList to be container of size with an element type of int :

Similarly , you can use for loop to output the elements of intList .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Table describes some of these operations .
The TABLE Operations to Determine the Size of Vector Container .

The class also contains member functions that can be used to manipulate the data , as well as insert and delete items , in container .
Suppose that vecList is container of type .
Item insertion and deletion in vecList are accomplished using the operations given in Table .
These operations are implemented as member functions of the class and are shown in bold .
Table also shows how these operations are used .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Components of the STL .

copy of elem is inserted at the position specified by position .

The position of the new is returned .

copy of the elements , starting at beg until , is inserted into vecList at the position specified by position .

In Table , the identifiers position , beg , and end in STL terminology are called iterators .
An iterator is just like pointer .
In general , iterators are used to step through the elements of container .
In other words , with the help of an iterator , we can walk through the elements of container and process them one at time .
Because iterators are an integral part of the STL , they are discussed in the section " located later in this chapter .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

We declare intList to be object of size .
Does this mean that we can store only five elements in intList .

We can , in fact , add more elements to intList .
However , because when we declared intList we specified the size to be , in order to add elements past position , we use the function .
Furthermore , if we initially declare object and do not specify its size , then to add elements to the object , we use the function .

Example explains how to use the function .

EXAMPLE The following statement declares to be object of size :

In Example , because is declared to be of size , we use the function to add elements to .
However , we can also use the resize function to increase the size of and then use the array subscripting operator .

For example , suppose that is declared as in Example .
Then , the following statement sets the size of to :

However , at times , the function is more convenient because it does not need to know the size of the  it simply adds the elements at the end .

Next , we describe how to declare an iterator in container .

DECLARING AN ITERATOR TO VECTOR CONTAINER The class contains typedef iterator , which is declared as public member .
An iterator to container is declared using the typedef iterator .
For example , the statement : intVecIter ; declares intVecIter to be an iterator in container of type int .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Components of the STL .

The expression : advances the iterator intVecIter to the next in the container , and the expression : returns the at the current iterator position .

Note that these operations are the same as the operations on pointers , discussed in Chapter .
Recall that when used as unary operator , is called the dereferencing operator .

We now discuss how to use an iterator in container to manipulate the data stored in the container .

Suppose that we have the following .

The statement in Line declares to be container , and the type is int .
The statement in Line declares to be an iterator in container whose type is int .

CONTAINERS AND THE FUNCTIONS begin AND end Every container has the member functions begin and end .
The function begin returns the position of the first in the container ; the function end returns the position of one past the last in the container .
Also , these functions have no parameters .

After the following statement executes :

Example shows how the function insert works with objects .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The statement in Line initializes the iterator to the first element of  the statement in Line advances to the second element of The statement in Line inserts at the position specified by .

After the statement in Line executes ,

Notice that the size of the container also increases .

The following example illustrates how to use container in program and how to process the elements in container .

Components of the STL .

Sample Run : Line Line Line Line : List elements : List elements : List elements : List elements : The statement in Line declares container for ,  of type int .
The statement in Line declares to be an int variable .
The statements in Lines through use the operation to insert four , and intList .
The statements in Lines and use the for loop and the array subscripting operator , to output the elements of intList .
In the output , see the line marked Line , which contains the output of Lines through .
The statements in Lines and use for loop to double the value of each element of intList ; the statements in Lines and output the elements of intList .
In the output , see the line marked Line , which contains the output of Lines through .

The statement in Line declares to be iterator that processes any container whose elements are of type int .
Using the iterator  the statements in Lines and output the elements of intList .
After the statement in Line executes , points to the first element of intList .
The statements in Lines and advance twice ; after these statements execute , points to Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The statement in Line inserts into intList at the position specified by the iterator .
Because points to the component at position third element of , is inserted at position in intList ; that is , becomes the third element of intList .
The statements in Lines and output the modified intList .

Member Functions Common to All Containers The previous section discussed containers .
This section discusses operations that are common to all containers .
For example , every container class has the default constructor , several constructors with parameters , the destructor , function to insert an element into container , and so on .

Recall that class encapsulates data and operations on that data into single unit .
Because every container is class , several operations are directly defined for container and are provided as part of the definition of the class .
Also , recall that the operations to manipulate the data are implemented with the help of functions and are called member functions of the class .
Table describes the member functions that are common to all containers ; that is , these functions are included as members of the class template implementing the container .

Suppose ct , and are containers of the same type .
In Table , the name of the function is shown in bold .
This table also shows how function is called .

TABLE Operations Common to All Containers .

Constructor with parameters In addition to the default constructor , every container has constructors with parameters .
We will describe these constructors when we discuss specific container .

Copy constructor Executes when an object is passed as parameter by value and when an object is declared and initialized using another object of the same type .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Components of the STL .

Because these operations are common to all containers , when discussing specific container , to save space , these operations will not be listed again .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In addition to these member functions , Table describes the member functions that are common to all sequence containers , that is , containers of type vector , deque , and list .

TABLE Member Functions Common to All Sequence Containers .

copy of elem is inserted at the position specified by the iterator position .
The position of the new element is returned .

copy of the elements , starting at beg until , is inserted into seqCont at the position specified by the iterator position .
Also , beg and end are iterators .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Components of the STL .

The STL provides convenient way to output the elements of container with the help of the function copy .
The function copy is provided as part of the generic algorithm and can be used with any container type .
Because we frequently need to output the elements of container , before continuing with our discussion of containers , let us describe this function .

The function copy does more than output the elements of container .
In general , it allows us to copy the elements from one place to another .
For example , to output the elements of vector or to copy the elements of vector into another vector , we can use the function copy .
The prototype of the function template copy is : template inputIterator , class outputIterator , inputIterator last , outputIterator .

Therefore , the parameters and last specify the source ; parameter specifies the destination .

Note that the elements within the range .

The definition of the function template copy is contained in the header file algorithm .

Thus , to use the function copy , the program must the statement :

This statement creates an array of nine components .

The statement : creates an empty container of nine components of type and the element type int .

Recall that the array name ,  is actually pointer and contains the base address of the array .
Therefore , points to the first component of the array , + points to the second component of the array , and so on .

Now consider the statement : + This statement copies the elements starting at the location  which is the first component of the array  until + is , + Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Also , is  that is , points to the location of the first element of the array .
Therefore , the second array element is copied into the first array component , the third array element into the second array component , and so on .
After the preceding statement executes :

Therefore , + returns pointer to the element into the container .
Similarly , the function rend returns pointer to the first element into container .
The previous statement shifts the elements of the container to the right by two positions .
After the previous statement executes , the container is : Example shows the effect of the preceding statements using program .
Before discussing Example , let us describe special type of iterators called ostream iterators .
These iterators work well with the function copy to copy the elements of container to an output device .

THE ostream ITERATOR AND THE FUNCTION copy One way to output the contents of container is to use for loop , the function begin to initialize the for loop control variable , and the function end to set the limit .

Alternatively , the function copy can be used to output the elements of container .
In this case , an iterator of type ostream specifies the destination .

Components of the STL .

The iterator screen has two arguments : the object cout and space .
Thus , the iterator screen is initialized using the object cout .
When this iterator outputs elements , they are separated by space .

The statement : +

We will frequently use the function copy to output the elements of container by using an ostream iterator .
Also , until we discuss ostream iterators in detail , we will use statements similar to Line to create an ostream iterator .

Of course , we can directly specify an ostream iterator in the function copy .
For example , the statement :

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : Line :  Line :  Line : After shifting the elements one position to the left ,  Line : After shifting the elements down by two positions ,  for Loops In the previous section , we described how to use the copy function to output the elements of container .
Moreover , Chapter introduced for loops , which is feature of Standard , and discussed how it can be effectively used to Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Components of the STL .

In Chapter , we explained that if formal parameter of function is an array , for loop cannot be used on that formal parameter , and we explained why for loop cannot be used on dynamic arrays .

However , for loop can be used on sequence containers such as objects , even if they are declared as formal parameters to function .
Next , we explain how to use for loops to process the elements of object .

Consider the following .

The statements in Lines through use the function to insert four , and intList .

Next , consider the following for loop :  endl ; In this for loop , after the statement auto  list executes , will point to the first element of intList .
We used auto so that the compiler can infer the correct type for .

In this for loop , ranges over the elements of list .
You can read this as all in " As we can see , this for loop outputs the elements of intList .

In Example , we used for loop to multiply each element of intList by .
Next , we illustrate how to use for loop to multiply each element of intList by .

In fact , we write function that uses formal parameter of type to multiply each element of object of type int by .
So consider the following .

The function doubleList takes as parameter reference to an object of type .

Note that the definition of this function uses for loop to process the elements of list .

Example further illustrates how to use for loop on objects .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Components of the STL .

However , note that the preceding program uses the function printList to output the elements of intList and the function doubleList to multiply each element of intList by .
Both these functions use for loop to process the elements of an object of type .

Initializing Objects during Declaration allows variables of simple data types or arrays to be initialized when they are .

The second statement declares to be an int array of elements and initializes the elements of to , and , respectively .
In Examples and , we declared intList to be object of type int and then used the function to store int values in intList .
To be specific , the following statements were used to declare to be object and store , and in .

However , at the time of the writing of this book , the compiler that we used to test the code has not implemented this feature of .
Therefore , we will continue to use the array subscripting operator or the function , whichever is applicable , to store data or initialize object .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The term deque stands for queue .
Deque containers are implemented as dynamic arrays in such way that the elements can be inserted at both ends .
Thus , deque can expand in either direction .
Elements can also be inserted in the middle .
Inserting elements in the beginning or at the end is fast ; inserting elements in the middle , however , is time consuming because the elements in the queue need to be shifted .

The name of the class defining the deque containers is deque .
The definition of the class deque , and the functions to implement the various operations on deque object , are also contained in the header file deque .
Therefore , to use deque container in program , the program must the following statement : The class contains several constructors .
Thus , object can be initialized in various ways when it is declared , as described in Table .

TABLE Various Ways to Declare Object .

Both beg and end are iterators .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Components of the STL .

The name of the function implementing the operations is shown in bold .
Each statement also shows how to use particular function .
Suppose that deq is container .

TABLE Various Operations that Can Be Performed on Object .

Example illustrates how to use container in program .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Components of the STL .

Sample Run : Line :  Line : After adding two more elements , one at the front and one at the back ,  Line : After removing the first two elements ,  Line : After removing the last two elements , Line : After inserting ,  Line : After assigning two copies of ,  Line : After inserting two elements , one at the front and one at the back ,  The statement in Line declares container of type int ; that is , all of the elements of are of type int .
The statement in Line declares screen to be an ostream iterator initialized to the standard output device .
The statements in Lines through use the operation to insert four , and into .
The statement in Line outputs the elements of .
In the output , see the line marked Line , which contains the output of the statements in Lines through .

The statement in Line inserts at the beginning of  the statement in Line inserts at the end of .
The statement in Line outputs the modified .

The statements in Lines and use the function to remove the first two elements of  the statement in Line outputs the modified .
The Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The statement in Line declares to be iterator that processes all containers whose elements are of type int .
After the statement in Line executes , points to the first element of .
The statement in Line advances to the next element of .
The statement in Line inserts into at the position specified by .
The statement in Line outputs .

The statement in Line assigns two copies of to .
After the statement in Line executes , the old elements of are removed and now contains only two copies of .
The output of the statement in Line illustrates this .
In the output , see the line marked Line , which contains the output of the statements in Lines through of the program .

The meaning of the remaining statements is .

Sequence Container : list This section describes the sequence container list .
List containers are implemented as doubly linked lists .
Thus , every element in list points to both its immediate predecessor and its immediate successor the first and last .
Recall that linked list is not random access data structure , such as an array .
Therefore , to access , say , the fifth element in the list , we must first traverse the first four elements .

The name of the class containing the definition of the class list is list .
The definition of the class list , and the definitions of the functions to implement the various operations on list , are contained in the header file list .
Therefore , to use list in program , the program must the following statement : Like other container classes , the class list contains several constructors .
Thus , list object can be initialized in several ways when it is declared , as described in Table .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Components of the STL .

Both beg and end are iterators .

Table described the operations that are common to all containers .
Table described the operations that are common to all sequence containers .
In addition to these common operations , Table describes the operations that are specific to container .
The name of the function implementing the operation is shown in bold .

In Table , listCont is container of type .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Assigns all of the elements in the range .

Both beg and end are iterators .

If the consecutive elements in listCont have the same value , removes the duplicates .

If the consecutive elements in listCont have the same value , removes the duplicates , for which oper is true .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Components of the STL .

All of the elements of are moved to before the position specified by the iterator pos .
After this operation , is empty .

All of the elements starting at of are moved to before the position specified by the iterator pos .

All of the elements in the range of are moved to before the position specified by the iterator pos .
Both beg and end are iterators .

The elements of listCont are sorted .

The sort criteria is specified by oper .

Suppose that the elements of and are sorted .

This operation moves all of the elements of into .
After this operation , the elements in are sorted .

Moreover , after this operation , is empty .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Suppose that the elements of and are sorted according to the sort criteria oper .
This operation moves all of the elements of into .
After this operation , the elements in are sorted according to the sort criteria oper .

Example illustrates how to use the various operations on list container .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Components of the STL .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : Line : Line : Line : After removing the consecutive duplicates , Line : After sorting , Line : Line : Line : After moving the elements of into , Line : After sorting , Line : After merging and , Line : After removing the consecutive duplicates , For the most part , the output of the preceding program is straightforward .
The statements in Lines through insert the element numbers , and that into .
The statement in Line copies the elements of into .
After this statement executes , and are identical .
The statement in Line removes any consecutive occurrences of the same elements .
For example , the number appears consecutively three times .
The operation unique removes two occurrences of .
Note that this operation has no effect on the that appears at the end of .

The statement in Line sorts .
The statements in Lines through insert , and into .
Similarly , the statements in Lines through insert , and into .
The statement in Line uses the operation splice to move the elements of to the beginning of .
After the splice operation , is empty .
The statement in Line sorts , and the statement in Line merges and into .
After the merge operation , is empty .
The meanings of the remaining statements are similar .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Now for loops are feature of Standard and they can be used to process the elements of any sequence container object such as and deque .
For example , in Example , the statement in Line , which outputs the elements of , can also be written as :  Similarly , the statements in Lines , and can be written using for loops .
The file , available at the Web site accompanying this book , contains the modified program , given in Example , that uses for loops to output the elements of containers , and .

Examples , and further clarify that iterators are important to efficiently process the elements of container .
Before describing associative containers , let us discuss iterators in some detail .

Iterators Iterators are similar to pointers .
In general , an iterator points to the elements of container or .
Thus , with the help of iterators , we can successively access each element of container .

The two most common operations on iterators are increment and dereferencing .
Suppose that cntItr is an iterator into container .

Types of Iterators There are five types of .

Input iterators Output iterators Forward iterators Bidirectional iterators Random access iterators The following sections describe these iterators .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

These iterators are provided for reading data from an input stream .

Suppose inputIterator is an input iterator .
Table describes the operations on inputIterator .

TABLE Operations on an Input Iterator Expression .

OUTPUT ITERATORS Output iterators , with write access , step forward element by element .
These iterators are provided for writing data to an output stream .

Suppose is an output iterator .
Table describes the operations on .

TABLE Operations on an Output Iterator Expression .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Thus , if we write data at the same position twice , there is no guarantee that the new will replace the old .

FORWARD ITERATORS Forward iterators combine all of the functionality of input iterators and almost all of the functionality of output iterators .
Suppose forwardIterator is forward iterator .

Table describes the operations on forwardIterator .

TABLE Operations on Forward Iterator Expression .

BIDIRECTIONAL ITERATORS Bidirectional iterators are forward iterators that can also iterate backward over the elements .

Suppose biDirectionalIterator is bidirectional iterator .
The operations defined for forward iterators are also applicable to bidirectional iterators .
To step backward , the decrement operations are also defined for biDirectionalIterator .

Table shows additional operations on bidirectional iterator .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Bidirectional iterators can be used with containers of type vector , deque , list , set , multiset , map , and multimap .

RANDOM ACCESS ITERATORS Random access iterators are bidirectional iterators that can randomly process the elements of container .
These iterators can be used with containers of types vector , deque , and string , as well as arrays .
The operations defined for bidirectional iterators example , Tables and are also applicable to random access iterators .

Table describes the additional operations that are defined for random access iterators .
Suppose rAccessIterator is random access iterator .

TABLE Additional Operations on Random Access Iterator Expression .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Figure shows the iterator hierarchy .

Input iterators Output iterators .

Iterator hierarchy Now that you know the different types of iterators , next we describe how to declare an iterator into container .

Thus , an iterator into container is declared using the typedef iterator .
For example , the statement : intVecIter ; declares intVecIter to be an iterator into container of type int .

Because iterator is typedef defined inside container is , such as  we must use the appropriate container name , container element type , and the scope resolution operator to use the typedef iterator .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

However , if container is declared as const , then we must prevent the iterator from modifying the elements of the container , especially accidentally .
To handle this situation , every container contains another typedef .
For example , the statement : intConstVecIt ; declares intConstVecIt to be an iterator into container whose elements are of type int .
The iterator intConstVecIt is used to process the elements of those containers that are declared as constant containers of type .

An iterator of type is iterator .

An iterator of this type is used to iterate through the elements of container in reverse .

It is required if the container is declared as const , and we need to iterate through the elements of the container in reverse .

In addition to the previous four typedefs , several other typedefs are common to all containers and are described in Table .

TABLE Various typedefs Common to All Containers typedef .

constant reference is .

This type is also used to index through sequence containers , except list containers .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

This section describes both types of iterators .

The istream iterator is used to input data into program from an input stream .
The class contains the definition of an input stream iterator .
The general syntax to use an istream iterator is : in which Type is either type or class type , for which an input iterator is defined .
The identifier isIdentifier is initialized using the constructor whose argument is either an istream class object , such as cin , or any publicly defined istream subtype , such as ifstream .

The ostream iterators are used to output data from program into an output stream .

These iterators were defined earlier in this chapter .
We review them here for the sake of completeness .

The class contains the definition of an output stream iterator .

The general syntax to use an ostream iterator .

The identifier osIdentifier is initialized using the constructor whose argument is either an ostream class object , such as cout , or any publicly defined ostream subtype , such as ofstream .
In the second form used to declare an ostream iterator , by using the second argument of the initializing constructor , we can specify character separating the output .

Associative Containers This section discusses associative containers .
Elements in an associative container are automatically sorted according to some ordering criteria .
The default ordering criterion is the relational operator .
Users also have the option of specifying their own ordering criterion .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

convenient and fast way to implement this type of data structure is to use binary search tree .
This is , in fact , how associative containers are implemented .
Thus , every element in the container has parent node the root and , at most , two children .
For each element , the key in the parent node is larger than the key in the left child and smaller than the key in the right child .

The predefined associative containers in the STL .

Sets Multisets Maps Multimaps This book discusses only the associative containers set and multiset .

Associative Containers : set and multiset As described earlier , both the containers set and multiset automatically sort their elements according to some sort criteria .
The default sorting criterion is the relational operator ; that is , the elements are arranged in ascending order .
The user can also specify other sorting criteria .
For data types , such as classes , the relational operators must be overloaded properly .

The only difference between the containers set and multiset is that the container multiset allows duplicates ; the container set does not .

The name of the class defining the container set is set ; the name of the class defining the container multiset is multiset .
The name of the header file containing the definitions of the classes set and multiset , and the definitions of the functions to implement the various operations on these containers , is set .
Thus , to use any of these containers , the program must the following statement : Declaring set or multiset Associative Containers The classes set and multiset contain several constructors to declare and initialize containers of these types .
This section discusses the various ways that these types of associative containers are declared and initialized .
Table describes how multiset container of specific type can be declared and initialized .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The sort criterion is specified by sortOp .

The elements of otherCt are copied into ct .

The sort criterion is .
Both ct and otherCt are of the same type .

The elements of otherCt are copied into ct .

The sort criterion is specified by sortOp .
Both ct and otherCt are of the same type .
Note that the sort criteria of ct and otherCt must be the same .

The elements starting at the position beg until the position are copied into ct .
Both beg and end are iterators .

The elements starting at the position beg until the position are copied into ct .
Both beg and end are iterators .
The sort criterion is specified by sortOp .

If you want to use sort criteria other than the default , you must specify this option when the container is declared .
For example , consider the following statements : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The statement in Line declares otherIntSet to be an empty container , the element type is int , and the sort criterion is .
That is , the elements in the container otherIntSet will be arranged in descending order .
The statements in Lines and have similar conventions .

The function is defined in the header file functional .
Other functions and their purposes from this header are discussed in the section Function Objects later in this chapter .

The statements in Lines and illustrate how to specify the descending sorting criterion .

In the statements in Lines and , note the space between the two is , the space between and .
If you are using an old compiler , then this space is important because is also shift operator in .
However , this restriction is removed in and the compiler that we used to write programs in this book has implemented it .
Therefore , in , the statements in Lines and can be written .

Item Insertion and Deletion from Suppose that ct is either of type or .
Table describes the operations that can be used to insert or delete elements from .
It also illustrates how to use these operations .
The name of the function is shown in bold .

TABLE Operations to Insert or Delete Elements from Set Expression .

Inserts copy of elem into ct .
The position where elem is inserted is returned .
The first parameter , position , hints where to begin the search for insert .
The parameter position is an iterator .

Both beg and end are iterators .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Example shows the various operations on container .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : Line Line Line Line : intSet : intSetA : After removing , intSetA : After removing the fourth element , intSetA : Line : intSetB : Line : After removing all the elements , intSetB : Line : namesMultiSet : Zippy Hungry Goofy Goofy Donny Donny The statement in Line declares intSet to be container .
The statement in Line declares intSetA to be container whose elements are to be arranged in descending order .
The statement in Line declares to be iterator .
The iterator can process the elements of any container whose elements are of type int and are arranged in descending order .
The statement in Line declares screen to be an ostream iterator that outputs the elements of any container whose elements are of type int .

The statements in Lines through insert , and into intSet , and the statement in Line outputs the elements of intSet .
In the output , see the line marked Line ; it contains the output of the statements in Lines through .

The statements in Lines through insert , and into intSetA , and the statement in Line outputs the elements of intSetA .
In the output , see the line marked Line .
It contains the output of the statements in Lines through .
Notice that the elements of intSetA appear in descending order .

The statement in Line removes from intSetA .
After the statement in Line executes , points to the first element of intSetA .
The statement in Line advances to the next element of intSetA .
After the statement in Line executes , points to the fourth element of intSetA .
The statement in Line removes the element of intSetA pointed to by .
The meanings of the statements in Lines through are similar .

The statement in Line declares namesMultiSet to be container of type .

The elements in namesMultiSet are of type string and are arranged in descending order .
The statement in Line declares iter to be iterator .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The statement in Line outputs the elements of namesMultiSet .

Container Adapters The previous sections discussed several types of containers .
In addition to the containers that work in general framework , the STL provides containers to accommodate special situations .
These containers , called container adapters , are adapted standard STL containers to work in specific environment .
The three container adapters .

Stacks Queues Priority queues Container adapters do not support any type of iterator .
That is , iterators cannot be used with these types of containers .
The next two sections describe two types of container adapters : stack and queue .

Stack Chapter discussed the data structure stack in detail .
Because stack is an important data structure , the STL provides class to implement stack in program .
The name of the class defining stack is stack ; the name of the header file containing the definition of the class stack is stack .
Table defines the various operations supported by the stack container class .

TABLE Various Operations on stack Object Operation .

This operation is implemented as function .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

For example , the relational can be used to determine whether two stacks are identical .

The program in Example illustrates how to use the container class .

Sample Run : Line : The element of intStack : Line : After the pop operation , the element of intStack : Line : intStack elements : The preceding output is .
The details are left as an exercise for you .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Because queue is an important data structure , the STL provides class to implement queues in program .
The name of the class defining the queue is queue , and the name of the header file containing the definition of the class queue is queue .
Table defines the various operations supported by the queue container class .

TABLE Various Operations on queue Object Operation .

This operation is implemented as function .

This operation is implemented as function .

In addition to the operations size , empty , push , front , back , and pop , the container class provides relational operators to compare two stacks .
For example , the relational can be used to determine whether two stacks are identical .

The program in Example illustrates how to use the container class .

Sample Run : Line Line Line Line : The element of intQueue : The last element of intQueue : After the pop operation , the element of intQueue : intQueue elements : The preceding output is .
The details are left as an exercise for you .

Containers , Associated Header Files , and Iterator Support The previous sections discussed various types of containers .
Recall that every container is class .
The definition of the class implementing specific container is contained in the header file .
Table describes the container , its associated header file , and the type of iterator supported by the container .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

TABLE Containers , Their Associated Header Files , and the Type of Iterator Supported by Each Container Sequence containers Associated header file .

No iterator support Algorithms Several operations can be defined for container .
Some of the operations are very specific to container and , therefore , are provided as part of the container definition is , as member functions of the class implementing the .
However , several as find , sort , and common to all containers .
These operations are provided as generic algorithms and can be applied to all containers , as well as the array type .
The algorithms are bound to particular container through an iterator pair .

The generic algorithms are contained in the header file algorithm .
This section describes several of these algorithms and shows how to use them in program .
Because algorithms are implemented with the help of functions , in this section , the terms function and algorithm mean the same thing .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

However , those algorithms were tied to specific container in terms of the members of specific class .
All of those algorithms and few others are also available in more general forms , called generic algorithms , and can be applied in variety of situations .
This section discusses some of these generic algorithms .

The STL contains algorithms that look only at the elements in container and that move the elements of container .
It also has algorithms that can perform specific calculations , such as finding the sum of the elements of numeric container .
In addition , the STL contains algorithms for basic set theory operations , such as set union and intersection .
You have already encountered some of the generic algorithms , such as the copy algorithm .

This algorithm copies the elements from given range of elements to another place , such as another container or the screen .
The algorithms in the STL can be classified into the following .

Nonmodifying algorithms Modifying algorithms Numeric algorithms Heap algorithms The next four sections describe these algorithms .
Most of the generic algorithms are contained in the header file algorithm .
Certain algorithms , such as the numeric algorithms , are contained in the header file numeric .

NONMODIFYING ALGORITHMS Nonmodifying algorithms do not modify the elements of the container ; they merely investigate the elements .
Table lists the nonmodifying algorithms .

TABLE Nonmodifying Algorithms .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Table lists the modifying algorithms .

TABLE Modifying Algorithms copy .

For example , partition , reverse , rotate , and are mutating algorithms .

NUMERIC ALGORITHMS Numeric algorithms are designed to perform numeric calculations on the elements of container .
Table lists these algorithms .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In the heap sort algorithm , the array containing the data is viewed as binary tree .
Thus , heap is form of binary tree represented as an array .
In heap , the first element is the largest element , and the element at the ith position it is larger than the elements at positions and + they .
In the heap sort algorithm , first the array containing the data is converted into heap , and then the array is sorted using special type of sorting algorithm .
Table lists the basic algorithms required by the heap sort algorithm .

TABLE Heap Algorithms .

For the most part , the function prototypes of these algorithms are given along with brief explanation of what each algorithm does .
You will then learn how to use these algorithms with the help of program .
The STL algorithms are very powerful and accomplish amazing results .

Furthermore , they have been made general , in the sense that other than using the natural operations to manipulate containers , they allow the user to specify the manipulating criteria .

For example , the natural sorting order is ascending , but the user can specify criteria to sort the container in descending order .
Thus , every algorithm is typically implemented with the help of overloaded functions .
Before starting to describe these algorithms , we discuss function objects , which allow the user to specify the manipulating criteria .

Function Objects To make the generic algorithms flexible , the STL usually provides two forms of an algorithm using the mechanism of function overloading .
The first form of an algorithm uses the natural operation to accomplish this goal .
In the second form , the user can specify criteria based on which algorithm processes the elements .
For example , the algorithm searches the container and returns the position of the first two elements that are equal .
In the second form of this algorithm , we can specify criteria , less to look for the first two elements , such that the second element is less than the first element .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

More formally , function object contains function that can be treated as function using the function call operator ,
In fact , function object is class template that overloads the function call operator ,

In addition to allowing you to create your own function objects , the STL provides arithmetic , relational , and logical function objects , which are described in Table .

The function objects are contained in the header file functional .

TABLE Arithmetic STL Function Objects Function object name .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : Hello There : Sum of :  Sum of the elements of : Product of the elements of Table describes the relational STL function objects .

TABLE Relational STL Function Objects Function object name Description Returns true if the two arguments are equal , false otherwise .

Returns true if the two arguments are not equal , false otherwise .

Returns true if the first argument is than the second argument , false otherwise .
For example ,

The value of is true .

Returns true if the first argument is than or equal to the second argument , false otherwise .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Function object name Description Returns true if the first argument is than the second argument , false otherwise .
For example ,

The value of is true .

Returns true if the first argument is than or equal to the second argument , false otherwise .

The STL relational function objects can also be applied to containers , as shown next .
The STL algorithm searches container returns the position in the container where the two elements are equal .
This algorithm has second form that allows the user to specify the comparison criteria .
For example , consider the following  

The function starts at the position is , at the first element of looks for the first set of consecutive elements such that the first element is than the second .
The function returns pointer to element , which is stored in .

The program in Example further illustrates how to use the relational function objects .

EXAMPLE This example shows how the relational STL function objects work .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

TABLE Logical STL Function Objects Function object name .

PREDICATES Predicates are special types of function objects that return Boolean values .
There are two types of predicates : unary and binary .
Unary predicates check specific property for single argument ; binary predicates check specific property for is , two arguments .
Predicates are typically used to specify searching or sorting criteria .
In the STL , predicate must always return the same result for the same value .
Therefore , the functions that modify their internal states cannot be considered predicates .

The statement in declares and initializes to be an array of five components .

The statement in declares vList to be .
Because no size is specified for vList , no memory space is reserved for the elements of vList .
Now suppose that we want to copy the elements of into vList .
The statement : + Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

One solution to this problem is to use for loop to step through the elements of and use the function of vList to copy the elements of .
However , there is better solution , which is convenient and applicable whenever no memory space is allocated at the destination .
The STL provides three iterators , called insert iterators , to insert the elements at the destination : and inserter .

The argument to this iterator is the container itself .
For example , for the preceding problem , we can copy the elements of into vList by using as follows : +

The argument to this iterator is the container itself .
Because the class does not support the operation , this iterator cannot be used for the container .

There are two arguments to this iterator : the first argument is the container itself ; the second argument is an iterator to the container specifying the position at which the insertion should begin .

The program in Example illustrates the effect of inserters on container .

Sample Run : Line : Line : Line : tempList : STL Algorithms The following sections describe most of the STL algorithms .
For each algorithm , we give the function prototypes , brief description of what the algorithm does , and program showing how to use it .
In the function prototypes , the parameter types indicate for which type of container the algorithm is applicable .
For example , if parameter is of type randomAccessIterator , then the algorithm is applicable only on random access type containers , such as vectors .
Throughout , we use abbreviations such as outputItr to mean output iterator , inputItr to mean input iterator , forwardItr to mean forward iterator , and so on .

The Functions fill and The function fill is used to fill container with elements ; the function is used to fill in the next elements .
The element that is used as filling element is passed as parameter to these functions .
Both of these functions are defined in the header file algorithm .
The prototypes of these functions are : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The first parameter of the function is forward iterator that specifies the starting position of the container , the second parameter specifies the number of elements to be filled , and the third parameter specifies the filling element .
The program in Example illustrates how to use these functions .

Sample Run : Line : After filling vecList with : Line : After filling first three elements with : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The statement in Line uses the function fill to fill vecList with ; that is , all eight elements of vecList are set to .
Recall that returns an iterator to the first element of vecList , and returns an iterator to one past the last element of vecList .
The statement in Line outputs the elements of vecList using the copy function .
The statement in Line uses the function to store in the elements of vecList .
The first parameter of is , which specifies the starting position to begin copying .
The second parameter of is , which specifies the number of elements to be filled .
The third parameter , specifies the filling character .
Therefore , is copied into the first three elements of vecList .
The statement in Line outputs the elements of vecList .

The Functions generate and The functions generate and are used to generate elements and fill sequence .
These functions are defined in the header file algorithm .
The prototypes of these functions are : template forwardItr , class void first , forwardItr last , function ; template forwardItr , class size , class void first , size , function ; The function generate fills sequence in the range , with successive calls to the function .
The function fills sequence in the range is , starting at position first , with successive calls to the function .
Note that gen can also be pointer to function .
Moreover , if gen is function , it must be function without parameters .
The program in Example illustrates how to use these functions .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : Line : vecList after filling with numbers : Line : vecList after filling the first three elements with the next number : This program contains function , nextNum , which contains static variable initialized to .
call to this function returns the current value of and then increments the value of .
Therefore , the first call of nextNum returns , the second call returns , and so on .

The statements in Lines and declare vecList to be sequence container of size and screen to be an ostream iterator initialized to with the delimit character space .

The statement in Line uses the function generate to fill vecList by successively calling the function nextNum .
Notice that after the statement in Line executes , the value of the static variable of nextNum is .
The statement in Line outputs the elements of vecList .
The statement in Line calls the function to fill the first three elements of vecList by calling the function nextNum three times .
The starting position is Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The statement in Line outputs the elements of vecList .

The Functions find , and The functions find , and are used to find the elements in given range .
These functions are defined in the header file algorithm .

The prototypes of the functions find and are : template inputItr , class size , class inputItr first , inputItr last , const ; template inputItr , class inputItr first , inputItr last , unaryPredicate ; The function find searches the range of elements for the element searchValue .
If searchValue is found in the range , the function returns the position in the range where searchValue is found ; otherwise , it returns last .
The function searches the range of elements for the element for which is true .
If an element satisfying is true is found , it returns the position in the given range where such an element is found ; otherwise , it returns last .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : Line : Character  Line : The element is found at Line : The first uppercase letter is found at The statement in Line creates and initializes character array ,  of components .
The statement in Line creates the container charList and initializes it using the character array .
The statement in Line creates an ostream iterator .

The statement in Line outputs charList .
The statement in Line searches charList for the first occurrence of ' and returns an iterator , which is stored in .
The statements in Lines through output the result of the search .
Because ' is the fourth character in charList , its is .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Note that the function isupper from the header file cctype is passed as the third parameter to the function Line .
The statements in Lines through output the result of the search .
The first uppercase character in charList is , which is the third element of charList ; its Next , we describe the functions and .
Both of these functions have two forms .
The prototypes of the function are : template , class , template , class , class , binaryPredicate ; Both forms of the function search the range for the last occurrence as subrange of the range .
If the search is successful , the function returns the in where the match occurs ; otherwise , it returns .
That is , the function returns the of the last element in the range where the range is subrange of .
In the first form , the elements are compared for equality ; in the must be true .

The prototypes of the function are : template , class , template , class , class , binaryPredicate ; The first form returns the  within the range , of the first element of that is also in the range .
The second form returns the  within the range , of the first element of for which , is true .

If no match is found , both forms return .

The program in Example illustrates how to use the functions and .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : Line : Line : Line : is found in .
The last occurrence of in is at position Line : Line : is not in .

Line : Line : The first element of is found in at position The statements in Lines through create and initialize the int arrays , and .
The statements in Lines and declare an int pointer and an ostream iterator , respectively .
The statements in Lines and output the values of and .
The last occurrence of in starts at position is , at the seventh .
The statements in Lines through output the result of the search .
The statement in Line uses the function to find the last occurrence of , as subsequence , within .
Because does not appear as subsequence in , it is an unsuccessful search .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The statement in Line uses the function to find the position in where the first element of is also an element of .
The first element of , which is also an element of , is .
Its position in is , the second element of .
The statements in Lines The Functions remove , and The function remove is used to remove certain elements from sequence , and the function is used to remove elements from sequence by using some criteria .
The function copies the elements of sequence into another sequence by excluding certain elements of the first sequence .
Similarly , the function copies the elements of sequence into another sequence by excluding certain elements , using some criteria , of the first sequence .
These functions are defined in the header file algorithm .

The prototypes of the functions remove and are : template forwardItr , class forwardItr first , forwardItr last , const ; template forwardItr , class forwardItr first , forwardItr last , unaryPredicate ; The function remove removes each occurrence of given element in the range first .
The element to be removed is passed as the third parameter to this function .
The function removes those elements , in the range first .
Both of these functions return forwardItr , which points to the position after the last element of the new range of elements .
These functions do not modify the size of the container ; in fact , the elements are moved to the beginning of the container .
For example , if the sequence is , and the element to be removed is , then after removing , the resulting sequence is ,
The function returns pointer to element is after .

The program in Example further illustrates the importance of this returned Let us now look at the prototypes of the functions and .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Similarly , the function copies all of the elements in the range , except the elements for which is true , into the sequence starting at the position destFirst .
Both of these functions return an outputItr , which points to the position after the last element copied .

The program in Example shows how to use the functions remove , and .

EXAMPLE Functions remove , and .

Sample Run : Line : Character  c Line : Character after removing : c Line : Character after removing the uppercase letters : c Line : intList : Line : after copying all the elements of intList except : Line : after copying all the elements of intList except numbers less than : The statement in Line creates  charList , of type char and initializes charList using the array created in Line .
The statement in Line declares two iterators : and .
The statement in Line declares an ostream iterator , screen .
The statement in Line outputs the value of charList .

The statement in Line uses the function remove to remove all occurrences of ' from charList .
The function returns pointer to one past the last element of the new  which is stored in .
The statement in Line outputs the elements in the new .
The statement in Line outputs the elements in the new .

The statement in Line creates  intList , of type int and initializes intList using the array  created in Line .
The statement in Line outputs the elements of intList .
The statement in Line copies all of the elements , except the occurrences of , of intList into .
The intList is not modified .
The statement in Line outputs the elements of .
The statement in Line creates  of type int of components and initializes all of the elements of to .
The statement in Line uses the function to copy those elements of intList that are greater than .
The statement in Line outputs the elements of .

The Functions replace , and The function replace is used to replace all occurrences , within given  of given element with new .
The function is used to replace the values of the elements , within given  satisfying certain criteria with new .
The prototypes of these functions are : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The function replaces all of the elements in the , for which is true , with the specified by newValue .

The function is combination of replace and copy .
Similarly , the function is combination of and copy .
Let us first look at the prototypes of the functions and .

If the of an element in this is equal to oldValue , it is replaced by newValue .
The function copies all of the elements in the into the container starting at destFirst .
If , for any element in this  is true , at the destination , its is replaced by newValue .
Both of these functions return an outputItr positioned one past the last element copied at the destination .

The program in Example shows how to use the functions replace , and .

EXAMPLE Functions replace , and .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : Line : Character  c Line : Character after replacing with : c Line : Character after replacing the uppercase letters with : c Line : intList : Line : after copying intList and replacing with : Line : after copying intList and replacing any numbers less than with : The statement in Line creates  charList , of type char and initializes charList using the array created in Line .
The statement in Line declares an ostream iterator , screen .
The statement in Line outputs the of charList .
The statement in Line uses the function replace to replace all occurrences of ' with ' in charList .
The statement in Line outputs the elements of charList .
In the output , the line marked Line contains the outputs of Lines through .
The statement in Line uses the function to replace the uppercase letters with  in the charList .
The statement in Line outputs the elements of charList .
In the output , the line marked Line contains the output of Lines through .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The statement in Line outputs the elements of intList .
The statement in Line declares of type int .
The statement in Line copies all of the elements of intList and replaces with .
The intList is not modified .
The statement in Line outputs the elements of .

The statement in Line creates  of type int , of components .
The statement in Line uses the function to copy the elements of intList and replaces all of the elements less than with .
The statement in Line outputs the elements of .
In the output , the line marked Line contains the output of Lines through .

The Functions swap , and The functions swap , and are used to swap elements .
These functions are defined in the header file algorithm .
The prototypes of these functions are : template void , template , class void first ,

The function swaps the values to which the iterators first and second point .

The function swaps the elements of the range with the consecutive elements starting at position .
It returns the iterator of the second range positioned one past the last element swapped .
The program in Example illustrates how to use these functions .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : Line : Character  Line : Character after swapping the first and second  Line : Character after swapping the third and fourth  Line : Character after swapping the fifth and sixth  Line : intList : Line : intList after swapping the first four with four starting at the sixth element of intList : Line : and intList after swapping their Line :  List : intList : The statement in Line creates the charList and initializes it using the array declared in Line .
The statement in Line outputs the values of charList .
The statement in Line swaps the first and second of charList .
The statement in Line , using the function , swaps the third and fourth of charList .
The statement in Line uses the iterator to swap the fifth and sixth of charList .
The statement in Line outputs the values of the of charList .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The statement in Line outputs the values of the of intList .
The statement in Line uses the function to swap the first four of intList with the four of intList , starting at the sixth element of intList .
The statement in Line outputs the of intList .
The statement in Line outputs the of the array  and the statement in Line outputs intList .

The Functions search , sort , and The functions search , sort , and are used to search and sort .
These functions are defined in the header file algorithm .

Watch the Video The prototypes of the function search are : template , class , template , class , class , binaryPredicate ; Given two ranges of  and , the function search searches the first element in the range where the range occurs as subrange of .
The first form makes the equality comparison between the of the two ranges .
For the second form , the comparison , must be true .
If match is found , the function returns the position in the range where the match occurs ; otherwise , the function returns .

The prototypes of the function are : template forwardItr , class size , class forwardItr first , forwardItr last , size count , const ; Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

The first form returns the position in the range where subsequence of count consecutive has values equal to value .
The second form returns the position in the range where is true .
If no match is found , both forms return last .

The prototypes of the function sort are : template void first , randomAccessItr ; template randomAccessItr , class void first , randomAccessItr last , compare ; The first form of the sort function reorders the in the range in ascending order .
The second form reorders the according to the criteria specified by op .

The prototypes of the function are : template forwardItr , class bool first , forwardItr last , const ; template forwardItr , class Type , class bool first , forwardItr last , const searchValue , compare ; The first form returns true if searchValue is found in the range , and false otherwise .
The second form uses function object , op , that specifies the search criteria .

Example illustrates how to use these searching and sorting functions .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : Line : vecList : Line :  Line : in vecList .
The first occurrence of in vecList is at the position Line : two consecutive occurrences of in vecList at the position Line : vecList after sorting : Line : in vecList .

The statement in Line creates  vecList , and initializes it using the array created in Line .
The statement in Line creates an array ,  of two components and initializes .
The statement in Line outputs vecList .
The statement in Line uses the function search and searches vecList to find the position the first in vecList where occurs as subsequence .

The statements in Lines through output the result of the search ; see the line marked Line in the output .

The statement in Line uses the function to find the position in vecList where two consecutive instances of occur .
The statements in Lines through output the result of the search .

The statement in Line uses the function sort to sort vecList .
The statement in Line outputs vecList .
In the output , the line marked Line contains the output of the statements in Lines through .

The statement in Line uses the function to search vecList .
The statements in Lines through output the search result .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The prototypes of the functions implementing this algorithm are : template forwardItr first , forwardItr ; template forwardItr , class forwardItr first , forwardItr last , binaryPredicate ; The first form of uses the equality criteria ; that is , it looks for the first consecutive occurrences of the same element .
In the second form , the algorithm returns an iterator to the element in the range for which , is true , in which elem is an element in the range and nextElem is an element in this range next to elem .
If no matching elements are  both algorithms return last .

The algorithm merge merges the sorted lists .
The result is sorted .
Both lists must be sorted according to the same criteria .
For example , both lists should be in either ascending or descending order .
The prototypes of the functions to implement the merge algorithms are : template , class , class outputItr , outputItr ; template , class , class outputItr , class outputItr , outputItr destFirst , binaryPredicate ; Both forms of the algorithm merge merge the elements of the sorted ranges and .
The destination range , beginning with the iterator destFirst , contains the merged elements .
The first form uses the operator , for ordering the elements .
The second form uses the binary predicate op to order the elements ; that is , must be true .
Both forms return the position after the last copied element in the destination range .
Moreover , the source ranges are not modified , and the destination range should not overlap with the source ranges .

The algorithm is used to combine the sorted consecutive sequences .

The prototypes of the functions implementing this algorithm are : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The merged elements overwrite the two ranges beginning at first .
The first form uses the criterion to merge the two consecutive sequences .
The second form uses the binary predicate op to merge the sequences ; that is , for the elements of the two sequences , must be true .

For example , suppose that :

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : Line : intList  Line : Adjacent equal elements are The first set of adjacent equal elements : Line : intList after merging and : Line : Last element of first sorted  Line : First element of second sorted  Line : before : Line : after : The statement in Line creates an intList of type and initializes intList using .
Thus , intList is linked .
The statement in Line creates the of type int and initializes it using .
The statement in Line outputs intList .
The statement in Line uses the function to find the position of the set consecutive identical elements .
The function returns pointer to the first set of consecutive elements , which is stored in .
The statements in Lines through output those consecutive identical elements , if any are .
Notice that the statement in Line outputs contents of the memory space to which is pointing .

The statement in Line clears intList by deleting all of the elements of intList .

The statement in Line uses the function merge to merge and .
The third parameter of the function merge , in Line , is call to , which places the merged into intList .
After the statement in Line executes , intList contains the merged .
The statement in Line outputs intList .
In the output , see the line marked Line , which contains the output of the statements in Lines through .

Notice that is , which contains two sorted subsequences .
The statement in Line uses the second form of the function to find the starting position of the second subsequence .
Notice that the third parameter of the function is the binary predicate  which returns the position in where the first element is than the second element .
The returned position is stored in the iterator  which now points to element .
The statement in Line advances to point to element , which is the first element of the second subsequence .
The statement in Line uses the function Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In the output , the line marked Line contains the output of the statements in Lines through ; the line marked Line contains the output of the statements in Lines through .

The Functions reverse , rotate , and The algorithm reverse reverses the order of the elements in given range .
The prototype of the function to implement the algorithm reverse is : template void first , biDirectionalItr ; The elements in the range are reversed .
For example , if , then the elements in reverse order are ,

The algorithm reverses the elements of given range while copying into destination range .
The source is not modified .
The prototype of the function implementing the algorithm is : template biDirectionalItr , class outputItr first , biDirectionalItr last , outputItr ; The elements in the range are copied in the reverse order at the destination , beginning with destFirst .
The function also returns the position one past the last element copied at the destination .

The algorithm rotate rotates the elements of given range .
Its prototype is : template void first , forwardItr newFirst , forwardItr ; The elements in the range are moved to the end of the range .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

That is , the elements of the source are copied at the destination in rotated order .
The source is not modified .
The prototype of the function implementing this algorithm is : template forwardItr , class outputItr first , forwardItr middle , forwardItr last , outputItr ; The elements in the range are copied into the destination range beginning with destFirst in the rotated order , so that the element specified by middle in the range becomes the first element of the destination .

The function also returns the position one past the last element copied at the destination .

The algorithms reverse , rotate , and are contained in the header file algorithm .
The program in Example illustrates how to use these algorithms .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : Line Line Line Line Line Line : intList : intList after reversal : resultList : intList before rotating : intList after rotating : intList after rotating and copying : Line : resultList after rotating and copying : Line : resultList after rotating and copying : The Functions count , max , min , and The algorithm count counts the occurrences of given value in given range .
The prototype of the function implementing this algorithm is : template inputItr , class : first , inputItr last , const ; The function count returns the number of times the value specified by the parameter value occurs in the range .

The algorithm counts the occurrences of given value in given range , satisfying certain criterion .
The prototype of the function implementing this algorithm is : template inputItr , class first , inputItr last , unaryPredicate .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

It has two forms , as shown by the following prototypes : template const aVal , const ; template Type , class const aVal , const bVal , compare ; In the first form , the operator associated with Type is used .
The second form uses the comparison operation specified by comp .

The algorithm is used to determine the largest element in given range .

This algorithm has two forms , as shown by the following prototypes : template forwardItr first , forwardItr ; template forwardItr , class forwardItr first , forwardItr last , compare ; The first form uses the operator associated with the data type of the elements in the range .
In the second form , the comparison operation specified by comp is used .
Both forms return an iterator to the element containing the largest value in the range .

The algorithm min is used to determine the minimum of two values .
It has two forms , as shown by the following prototypes : template const aVal , const ; template Type , class const aVal , const bVal , compare ; In the first form , the operator associated with Type is used .
In the second form , the comparison operation specified by comp is used .

The algorithm is used to determine the smallest element in given range .

This algorithm has two forms , as shown by the following prototypes : template forwardItr first , forwardItr ; template forwardItr , class forwardItr first , forwardItr last , compare ; The first form uses the operator associated with the data type of the elements in the range .
The second form uses the comparison operation specified by comp .
Both forms return an iterator to the element containing the smallest value in the range .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

There are two forms of this algorithm , as shown by the following prototypes : template void first , randomAccessItr ; template randomAccessItr , class void first , randomAccessItr last , randomAccessGenerator ; The first form reorders the elements in the range using uniform distribution random number generator .
The second form reorders the elements in the range using random function object or pointer to function .

Example illustrates how to use these functions .

Sample Run : Line Line Line Line :  c : Number of Zs in : Number of uppercase letters in :  Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The details are left as an exercise for you .

The Functions and transform The algorithm is used to access and process each element in given range by applying function , which is passed as parameter .
The prototype of the function implementing this algorithm is : template inputItr , class function first , inputItr last , function ; The function specified by the parameter func is applied to each element in the range .
The function func can modify the element .
The returned value of the function is usually ignored .

The algorithm transform has two forms .
The prototypes of the functions implementing this algorithm are : template inputItr , class outputItr , class outputItr first , inputItr last , outputItr destFirst , unaryOperation ; template , class , class outputItr , class outputItr , last , outputItr destFirst , binaryOperation ; The first form of the function transform has four parameters .
This function creates sequence of elements at the destination , beginning with destFirst , by applying the unary operation op to each element in the range .
This function returns the position one past the last element copied at the destination .

The second form of the function transform has five parameters .
This function creates sequence of elements by applying the binary operation is , the corresponding elements in the range and the range beginning with .
The resulting sequence is placed at the destination beginning with destFirst .
The function returns the position one element past the last element copied at the destination .

Example illustrates how to use these functions .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : Line :  c Line : after changing all lowercase letters to uppercase : Line :  Line : The effect of function : Line : after call to function : The statement in Line uses the function transform to change every lowercase letter of into its uppercase counterpart .
The statement in Line outputs the elements of .
In the output , the line marked Line contains the output of the statements in Lines through in the program .
Notice that the fourth parameter of the function transform Line is the function toupper from the header file cctype .

The statement in Line calls the function to process each element in the using the function doubleNum .
The function doubleNum has reference parameter ,  of type int .
Moreover , this function doubles the value of and then outputs the value of .
Because is reference parameter , the value of the actual parameter is changed .
In the output , the line marked Line contains the output produced by the statement in the function doubleNum , which is passed as the third parameter of the function Line .
The statement in Line outputs the values of the elements of .
In the output , Line contains the output of the statements in Lines through .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All of these algorithms assume that the elements within each given range are already sorted .

The algorithm includes determines whether the elements in one range appear in another range .
This function has two forms , as shown by the following prototypes : template , class bool , template , class , class bool , binaryPredicate ; Both forms of the function includes assume that the elements in the ranges .

The function returns true if all of the elements in the range .
In other words , the function returns true if .

The first form assumes that the elements in both ranges are in ascending order .
The second form uses the operation op to determine the ordering of the elements .

Example illustrates how the function includes works .

EXAMPLE function includes function assumes that the elements in the given ranges .

Sample Run : Line Line Line Line Line :    is subset of : is not subset of The preceding output is .
The details are left as an exercise for you .

The algorithm is used to find the elements that are common to two ranges of elements .
This algorithm has two forms , as shown by the following prototypes : template , class , class outputItr , outputItr ; Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The created sequence is placed in the container beginning with destFirst .
Both forms return an iterator positioned one past the last element copied at the destination range .
The first form assumes that the elements are in ascending order ; the second form assumes that both ranges are sorted using the operation specified by op .
The elements in the source ranges are not modified .

Notice that because appears only once in  appears only once in  even though appears twice in .
However , because appears twice in both setD and setE , also appears twice in .

The algorithm is used to find the elements that are contained in two ranges of elements .
This algorithm has two forms , as shown by the following prototypes : template , class , class outputItr , outputItr ; template , class , class outputItr , class outputItr , outputItr result , binaryPredicate ; Both forms create sequence of sorted elements that appear in either two sorted ranges ,
The created sequence is placed in the container beginning with destFirst .
Both forms return an iterator positioned one past the last element copied at the destination range .
The first form assumes that the elements Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The second form assumes that both ranges are sorted using the operation specified by op .
The elements in the source ranges are not modified .

Suppose that you have setA ,  setC , setD , and setE as defined previously .
Then : AunionB AunionC BunionD DunionE .

Notice that because appears twice in setC , it appears twice in AunionC .
Because appears twice in setD and setE , appears twice in DunionE .

Example illustrates how the functions and work .

EXAMPLE set theory functions and functions assume that the elements in the given ranges ordered according to some sorting criteria .

The details are left as an exercise for you .

The algorithm is used to find the elements in one range of elements that do not appear in another range of elements .
This algorithm has two forms , as shown by the following prototypes : template , class , class outputItr , outputItr ; template , class , class outputItr , class outputItr , outputItr destFirst , binaryPredicate ; Both forms create sequence of sorted elements that are in the sorted range .
The created sequence is placed in the container beginning with destFirst .
Both forms return an iterator positioned one past the last element copied at the destination range .
The first form assumes that the elements are in ascending order .
The second form assumes that both ranges are sorted using the operation specified by op .
The elements in the source ranges are not modified .

Suppose that : setE .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In other words , the sequence of elements created by contains the elements that are in union .
The created sequence is placed in the container beginning with destFirst .
Both forms return an iterator positioned one past the last element copied at the destination range .

The first form assumes that the elements are in ascending order .
The second form assumes that both ranges are sorted using the operation specified by op .
The elements in the source ranges are not modified .
It can be shown that the sequence created by contains elements that are in but not in .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run :   The preceding output is .
The details are left as an exercise for you .

The Functions accumulate , and The algorithms accumulate , and are numerical functions and thus manipulate numeric data .
Each of these functions has two forms .
The first form uses the natural operation to manipulate the data .

For example , the algorithm accumulate finds the sum of all of the elements in given range .
In the second form , we can specify the operation to be applied to the elements of the range .
For example , rather than add the elements of given range , we can specify the multiplication operation to the algorithm accumulate to multiply the elements of the range .
Next , we give the prototype of each of these algorithms followed by brief explanation .
The algorithms are contained in the header file numeric .

For example , if the value of init is , the algorithm returns the sum of all of the elements .
In the second form , we can specify binary operation , such as multiplication , to be applied to the elements of the range .
For example , if the value of init is and the binary operation is multiplication , the algorithm returns the products of the elements of the range .

Next , we describe the algorithm .
Its prototypes are : template inputItr , class outputItr first , inputItr last , outputItr ; Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

For example , if the range of elements is :

The first element is the same as the first element in the original range .
The second element is equal to the second element in the original range minus the first element in the original range .
Similarly , the third element is equal to the third element in the original range minus the second element in the original range , and so on .

In the second form of , the binary operation op is applied to the elements in the range .
The resulting sequence is copied at the destination specified by destFirst .
For example , if the sequence is , and the operation is multiplication , the resulting sequence is ,

Both forms return an iterator positioned one past the last element copied at the destination .

The algorithm is used to manipulate the elements of two ranges .
The prototypes of this algorithm are : template , class , class Type , last , Type ; template , class , class Type class , class Type , last , Type  The first form multiplies the corresponding elements in the range .
The products of the elements are then added to the value specified by the parameter .
To be specific , suppose that ranges over the first range and ranges over the second range starting with .
The first form computes : + for all of the corresponding elements .
For example , suppose that the two ranges are , and , and that is .
The function computes and returns : + + + + Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

This form , in fact , computes : The algorithm has two forms , as shown by the following prototypes : template inputItr , class outputItr first , inputItr last , outputItr ; template inputItr , class outputItr , class outputItr first , inputItr last , outputItr destFirst , binaryOperation ; The first form creates of elements in which each element is the sum of all of the previous elements in the range first .

For example , the first element of the new is the same as the first element in the range first .
For example , for the of elements :

Example illustrates how the functions of this section work .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : Line Line Line Line Line :  Sum of the : Product of :   elements of the elements of Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Quick Review Line Line Line Line : Inner of and  Inner of and  using for : with partial  with partial multiplication : The preceding output is .
The details are left as an exercise for you .

QUICK REVIEW .

The three main components of the STL are containers , iterators , and algorithms .

STL containers are class templates .

Iterators are used to step through the elements of container .

Algorithms are used to manipulate the elements in container .

The main categories of containers are sequence containers , associative containers , and container adapters .

The three predefined sequence containers are  deque , and .

container stores and manages its objects in dynamic array .

Because an array is random access data structure , elements of can be accessed randomly .

The name of the class that implements the container is .

Item insertion in container is accomplished by using the operations insert and .

Item deletion in container is accomplished by using the operations , erase , and clear .

An iterator to container is declared using the typedef iterator , which is declared as public member of the class .

Member functions common to all containers are the default constructor , constructors with parameters , the copy constructor , the destructor , empty , size , swap , begin , end , rbegin , rend , insert , erase , clear , and the relational operator functions .

The member function begin returns an iterator to the first element into the container .

The member function end returns an iterator to one past the last element into the container .

In addition to the member functions listed in item above , the other member functions common to all sequence containers are insert , erase , clear , and resize .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The copy algorithm is used to copy the elements in given range to another place .

The function copy , using an ostream iterator , can also be used to output the elements of container .

When we create an iterator of type ostream , we also specify the type of element that the iterator will output .

Deque containers are implemented as dynamic arrays in such way that the elements can be inserted at both ends of the array .

deque can expand in either direction .

The name of the class containing the definition of the class deque is deque .

In addition to the operations that are common to all containers , other operations that can be used to manipulate the elements of deque are assign , at , the array subscripting operator , front , and back .

List containers are implemented as doubly linked lists .
Thus , every element in the list points to its immediate predecessor and its immediate successor the first and last .

The name of the class containing the definition of the class list is list .

In addition to the operations that are common to sequence containers , other operations that can be used to manipulate the elements in list container are assign , front , back , remove , unique , splice , sort , merge , and reverse .

The five categories of iterators are input , output , forward , bidirectional , and random access iterator .

Input iterators are used to input data from an input stream .

Output iterators are used to output data to an output stream .

forward iterator can refer to the same element in the same collection and process the same element more than once .

Bidirectional iterators are forward iterators that can also iterate backward over the elements .

Bidirectional iterators can be used with containers of type list , set , multiset , multimap , map , and multimap .

Random access iterators are bidirectional iterators that can randomly process the elements of container .

Random access iterators can be used with containers of type vector , dequeue , and string , as well as arrays .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Quick Review .

The default ordering criterion is the relational operator ,

The predefined associative containers in the STL are set , multiset , map , and multimap .

Containers of the type set do not allow duplicates .

Containers of the type multiset allow duplicates .

The name of the class defining the container set is set .

The name of the class defining the container multiset is multiset .

The name of the header file containing the definition of the classes set and multiset , and the definitions of the functions to implement the various operations on these containers , is set .

The operations insert , erase , and clear can be used to insert or delete elements from sets .

Most of the generic algorithms are contained in the header file algorithm .

The main categories of STL algorithms are nonmodifying , modifying , numeric , and heap .

Nonmodifying algorithms do not modify the elements of the container .

Modifying algorithms modify the elements of the container by rearranging , removing , changing the values of the elements .

Modifying algorithms that change the order of the elements , not their values , are also called mutating algorithms .

Numeric algorithms are designed to perform numeric calculations on the elements of container .

function object is class template that overloads the function call operator ,

The predefined arithmetic function objects are plus , minus , multiplies , divides , modulus , and negate .

The predefined relational function objects are , greater , less , and .

The predefined logical function objects are , and .

Predicates are special types of function objects that return Boolean values .

Unary predicates check specific property for single argument ; binary predicates check specific property for is , two arguments .

Predicates are typically used to specify searching or sorting criteria .

In the STL , predicate must always return the same result for the same value .

The functions that modify their internal states cannot be considered predicates .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The STL provides three , and insert iterators to insert the elements at the destination .

The uses the operation of the container in place of the assignment operator .

The uses the operation of the container in place of the assignment operator .

Because the vector class does not support the operation , this iterator cannot be used for the vector container .

The inserter iterator uses the insert operation in place of the assignment operator .

The function fill is used to fill container with elements , and the function is used to fill in the next elements .

The functions generate and are used to generate elements and fill sequence .

The functions find , and are used to find the elements in given range .

The function remove is used to remove certain elements from sequence .

The function is used to remove elements from sequence using specified criterion .

The function copies the elements in sequence into another sequence by excluding certain elements from the first sequence .

The function copies the elements in sequence into another sequence by excluding certain elements , using specified criterion , from the first sequence .

The functions swap , and are used to swap elements .

The functions search , sort , and are used to search elements .

The function is used to find the first occurrence of consecutive elements satisfying certain criterion .

The algorithm merge merges two sorted lists .

The algorithm is used to combine two sorted , consecutive sequences .

The algorithm reverse reverses the order of the elements in given range .

The algorithm reverses the elements in given range while copying into destination range .
The source is not modified .

The algorithm rotate rotates the elements in given range .

The algorithm copies the elements of the source at the destination in rotated order .

The algorithm count counts the occurrences of given value in given range .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The algorithm max is used to determine the maximum of two values .

The algorithm is used to determine the largest element in given range .

The algorithm min is used to determine the minimum of two values .

The algorithm is used to determine the smallest element in given range .

The algorithm is used to randomly order the elements in given range .

The algorithm is used to access and process each element in given range by applying function , which is passed as parameter .

The function transform creates sequence of elements by applying certain operations to each element in given range .

The algorithm includes determines whether the elements of one range appear in another range .

The algorithm is used to find the elements that are common to two ranges of elements .

The algorithm is used to find the elements that are contained in two ranges of elements .

The algorithm is used to find the elements in one range of elements that do not appear in another range of elements .

Given two ranges of elements , the algorithm determines the elements that are in the first range but not the second range or the elements that are in the second range but not the first range .

The algorithms accumulate , and are numerical functions and manipulate numeric data .

EXERCISES The number in parentheses at the end of an exercise refers to the learning objective listed at the beginning of the chapter .

Mark the following statements as true or false .

The STL containers are classified into the following categories : When you declare vector object and specify its size as , then only Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The function end returns the position of the last element in the .
The function copy is used to copy the elements from one place to .

for loop can be used on sequence containers even if .

Elements in an associative container are sorted according to some .
You can use iterators to step through the elements of container .
function object is class template that overloads the function call .
The function replaces all occurrences , within given .
The function is used to find the first occurrence of Suppose that is vector container and :

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Suppose that setA , setB , setC , and setD are defined as follows : int int int int .

Further suppose that you have the following declarations : int int int int int .

What is stored in AunionB , AunionC , BunionD , AintersectB , and , setA + setA + setB + setB , setB + setC , setC + setD , setD + setA + setB , setA +

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Redo the Election Results programming example of Chapter so that it uses the STL class to process candidates data .

Redo the DVD Store programming example of Chapter so that it uses the STL class to process of DVDs .

Redo Programming Exercise of Chapter so that it uses the STL class to process the of DVDs rented by the customer and the of store members .

Redo Programming Exercise of Chapter so that it uses the STL class to process the of DVDs owned by the store , the of DVDs rented by each customer , and the of store members .

Redo the Postfix Expression Calculator program of Chapter so that it uses the STL class stack to evaluate the postfix expressions .

Redo Programming Exercise of Chapter so that it uses the STL class stack to convert the infix expressions to postfix expressions .

Redo the simulation program of Chapter so that it uses the STL class queue to maintain the of waiting customers .

Write program to play the Card Guessing Game .
Your program must give the user the following choices :

Guess only the face value of the card .

Guess only the suit of the card .

Guess both the face value and suit of the card .

Before the start of the game , create deck of cards .
Before each guess , use the function to randomly shuffle the deck .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Right to left Right to left .

Right to left .

Left to right Left to right .

Right to left sizeof .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Right to left Right to left Right to left throw .

Left to right Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

For example , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Therefore , the character at position is the is .
Moreover , the character at position represents the space character .

The first characters , that is , the characters at positions and at position are nonprintable characters .
The following table shows the abbreviations and meanings of these characters .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

EBCDIC Binary Coded Decimal Interchange EBCDIC .

For example , the character in the row marked number in the first and the column marked number in the second is .
Therefore , the character at position is the is .
Moreover , the character at position represents the space character .
The preceding table does not show all the characters in the EBCDIC character set .
In fact , the characters at positions and are nonprintable control characters .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

APPENDIX PERATOR VERLOADING The following table lists the operators that can be overloaded .

Operators that can be overloaded +

The following table lists the operators that cannot be overloaded .

Operators that cannot be overloaded .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

APPENDIX ADDITIONAL TOPICS Binary Representation of Nonnegative Integer Chapter remarked that is the character in the ASCII character set , but its position is because the position of the first character is .
Furthermore , the binary number is the binary representation of .
The number system that we use daily is called the decimal number system or base system .
The number system that the computer uses is called the binary number system or base system .
In this section , we describe how to find the binary representation of nonnegative integer and vice versa .

Note that : Similarly : In general , if is nonnegative integer , then can be written as : ak  for some nonnegative integer  and where or , for each ,
The binary number .
In this case , we usually write : ðak and say that to the base is .

For example , for the integer , and .
Thus , so the binary representation of is , that is :  If no confusion arises , then we write as .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Thus :  It follows to find the binary representation of nonnegative , we need to find the coefficients , which are or , of various powers of .
However , there is an easy algorithm , described next , can be used to find the binary representation of nonnegative integer .

First , note          Let us consider the integer .

We can show this continuous division obtaining the remainder with the help of Figure .

Determining the binary representation of Notice in Figure , starting at the second  the second column contains the quotient when the number in the previous is divided by the third column contains the remainder of division .
For example , in the second 

For each  the number in the second column is divided by , the quotient is written in the next  below the current  the remainder is written in the third column .
When using Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Binary Representation of Nonnegative Integer .

You can write the binary representation of the number starting with the last remainder in the third column , followed by the second to last remainder , so on .

Figure shows the quotients the remainders .

Determining the binary representation of From Figure , it follows that :  Converting Binary Number to Base To convert number from base to base , we first find the weight of each bit in the binary number .
The weight of each bit in the binary number is assigned from right to left .

The weight of the rightmost bit is .
The weight of the bit immediately to the left of the rightmost bit is , the weight of the bit immediately to the left of it is , so on .

Consider the binary number .
The weight of each bit is as follows : weight .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

For each bit , we multiply the bit by to the power of its weight then we add all of the numbers .
For the above binary number , the equivalent decimal number is : The previous sections described how to convert binary number to decimal number .
Even though the language of computer is binary , if the binary number is too long , then it will be hard to manipulate it manually .
To effectively deal with binary numbers , two more number systems , octal hexadecimal , are of interest to computer scientists .

The digits in the octal number system are ,
The digits in the hexadecimal number system are ,
So in hexadecimal is in decimal , in hexadecimal is in decimal , so on .

The algorithm to convert binary number into an equivalent number in octal is quite simple .
Before we describe the method to do so , let us review some notations .
Suppose ab represents the number to the base .
For example , means to the base , means to the base .

First we describe how to convert binary number into an equivalent octal number vice versa .
Table describes the first eight octal numbers .

TABLE Binary representation of first eight octal numbers .

To find the equivalent octal number , starting from right to left we consider three digits at time and write their octal representation .
Note that the binary number has only digits .
So when Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Binary Representation of Nonnegative Integer .

In this case , we just add two to the left of the binary number ; the equivalent binary number is .

To convert an octal number into an equivalent binary number , using Table , write the binary representation of each octal digit in the number .

Next we discuss how to convert binary number into an equivalent hexadecimal number and vice versa .
The method to do so is similar to converting number from binary to octal and vice versa , except that here we work with four binary digits .
Table gives the binary representation of the first hexadecimal numbers .

TABLE Binary representation of first hexadecimal numbers .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Now , add one zero to the left Hence ,

Next , to convert hexadecimal number into an equivalent binary number , write the binary representation of each hexadecimal digit into that number .

More on File In Chapter , you learned how to read data from and write data to file .
This section expands on the concepts introduced in that chapter .

Binary Files In Chapter , you learned how to make program read data from and write data to file .

However , the files that the programs have used until now are called text files .
Data in text file is stored in the character format .
For example , consider the number .
If is stored in file , then it is stored as sequence of two character ' followed by the character .
The machine representation of ' is and the machine representation of ' is .
Therefore , in text file , is stored as .
When this number is read by program , it must first be converted to its binary format .
Suppose that the integers are represented as binary numbers .
The binary representation of is then .
Similarly , when program stores the number in text file , it first must be converted to its text format .
It thus follows that reading data from and writing data to text file is not efficient , because the data must be converted from the text to the binary format and vice versa .

On the other hand , when data is stored in file in the binary format , reading and writing data is faster because no time is lost in converting the data from one format to another format .
Such files are called binary files .
More formally , binary files are files in which data is stored in the binary format .
Data in text file is also called formatted data , and in binary file it is called raw data .

allows programmer to create binary files .
This section explains how to create binary files and also how to read data from binary files .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

More on File .

Consider the following statement : This statement opens the file .
Data in this file will be written in its binary format .
Therefore , the file opening mode specifies that the file is opened in the binary mode .

Next , you use the stream function write to write data to the file .
The syntax to use the function write is : char , where fileVariableName is the object used to open the output file , and the first argument buffer specifies the starting address of the location in memory where the data is stored .
The expression the size of the data , in bytes , to be written .

For example , suppose num is an int variable .
The following statement writes the value of num in the binary format to the file associated with outFile : char , Similarly , suppose empSalary is an array of , say , components and the component type is double .
The following statement writes the entire array to the file associated with outFile : char , Next , let us discuss how to read data from binary file .
The operation of reading data from binary file is similar to writing data to binary file .
First , the binary file must be opened .
For example , suppose inFile is an ifstream variable , and program has already created the binary file .
The following statement opens this file :

To read data in the binary format , the stream function read is used .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

The expression specifies the size of the data , in bytes , to be read .

The program in the following example further explains how to create binary files and read data from binary file .

The details are left as an exercise for you .

In the program in Example , the statement in Line declares the struct variable and also initializes it .
Because has three components and we want to initialize all the components , three values are specified in braces separated by commas .
In other words , struct variables can also be initialized when they are declared .

The program in the following example further explains how to create binary files and then read the data from the binary files .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Sample Run : ID First Name Ashley Brad Lisa Sheila Rita Ajay Jose Sheila Tommy Salma Jennifer Steve Last Name White Smith Johnson Robinson Gupta Kumar Ramey Duffy Pitts Quade Ackerman Sharma Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the to remove additional content at any time if subsequent rights restrictions require it .

More specifically , you used ifstream objects to read data from file and ofstream objects to write data to file .
However , the files were read written sequentially .
Reading data from file sequentially does not work very well for variety of applications .
For example , consider program that processes customers ' data in bank .

Typically , there are thousands or even millions of customers in bank .
Suppose we want to access data from the file that contains such data , say , for an account update .
If the data is accessed sequentially , starting from the first position and read until the desired data is found , this process might be extremely time consuming .

Similarly , in an reservation system to access reservation information sequentially , this might also be very time consuming .
In such cases , the data retrieval must be efficient .
convenient way to do this is to be able to read the data randomly from file , that is , randomly access any record in the file .

In the preceding section , you learned how to use the stream function read to read specific number of bytes , and the function write to write specific number of bytes .

The stream function seekg is used to move the read position to any byte in the file .
The general syntax to use the function seekg is :

The offset can be calculated from the beginning of the file , end of the file , or the current position in the file .

Moreover , offset is long integer representation of an offset .
Table shows the values that can be used for position .

TABLE Values of position .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the to remove additional content at any time if subsequent rights restrictions require it .

More on File .

One byte is used to store each character of this line of text .
Moreover , the position of the first character is .

Sets the reading position of inFile to the byte , which is at position .
That is , it sets the reading position just after the digit or just before the letter .

That is , it sets the reading position just before the letter .

The program in the following example further explains how the functions seekg and seekp work .

Sample Run : Line Line Line Line : The first  Current read : Seventh from the beginning : Byte from the end : The input file contains the following line of text : The following program illustrates how the function seekg works with structs .

EXAMPLE Suppose customerType is struct defined as follows : struct customerType .

More on File .

You can use the function seekg to move the reading position of this file to any record .
Suppose inFile is an ifstream object used to open the binary file .

The following statement calculates the size of customerType struct and stores it in the variable  long .

The following program further illustrates how the function seekg works with structs .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

More on File .

Using the function seekg , the reading position in file can be moved to any location in the file .

Similarly , the function seekp can be used to move the write position in file to any location .
Furthermore , these functions can be used to create binary file in which the is organized according to the values of either variable or particular component of struct .
For example , suppose there are at most , say , students in class .
Each student has unique ID in the range to .
Using the students ' IDs , we can create random access binary file in such way that in the file , is written at the location specified by its ID .
This is like treating the file as an array .
The advantage is that , once the file is created , from the file can be read , directly , using the ID .
Another advantage is that in the file , the is sorted according to the IDs .

Here , we are assuming that the student IDs are in the range to .
However , if you use , say , or number as student ID and there are only few students in the class , the in the file could be scattered .
In other words , lot of space could be used just to store only few .
In such cases , more advanced techniques are used to organize the so that it can be accessed efficiently .

The program in Example illustrates how to use the students ' IDs to organize the in binary file .
The program also shows how to output the file .

More on File .

Sample Run : First Name Sheila Ajay Ashley Tommy Rita Brad Salma Steve Sheila Lisa Jose Jennifer Last Name Duffy Kumar White Pitts Gupta Smith Quade Sharma Robinson Johnson Ramey Ackerman Current The data in the file is as follows : Ashley White Brad Smith Lisa Johnson Sheila Robinson Rita Gupta Ajay Kumar Jose Ramey Sheila Duffy Tommy Pitts Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the to remove additional content at any time if subsequent rights restrictions require it .

As indicated in Chapter , there are two versions of Standard and Standard .
For the most part , these two standards are the same .
The header files in Standard have the extension , while the header files in Standard have no extension .
Moreover , the names of certain header files , such as , in Standard start with the letter c .
The language evolved from .

The header as , and specially designed for .

Recall that when header file is included in program , the global identifiers of the header file also become the global identifiers of the program .
In Standard , to take advantage of the namespace mechanism , all of the header files were modified so that the identifiers are declared within namespace .
Recall that the name of this namespace is std .

In Standard , the extension of the header files that were specially designed for was dropped .
For the header files that were brought from into , the extension was dropped and the names of these header files start with the letter c .

Following are the names of the most commonly used header files in Standard and Standard : Standard Header File Name Standard Header File Name cassert cctype cfloat fstream iomanip iostream climits cmath cstdlib cstring Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Naming Conventions of Header Files in Standard and Standard .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

This appendix discusses some of the most widely used library routines several named .
For additional explanation and information on functions , named constants , and so on , check your system documentation .
The names of the Standard header files are shown in parentheses .

The following table describes the function assert .
Its specification is contained in the header file cassert .

If the value of expression is , execution of the program terminates immediately .
The expression , the name of the file containing the source code , and the line number in the source code are displayed .

To disable all of the assert statements , place the preprocessor directive NDEBUG before the directive .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Function Name and Parameters .

Function Return Value Function returns an int value as .

If ch is letter or digit character , that is , it .

Function returns an int value as .

If ch is control character ASCII , character value or , it returns .

Function returns an int value as .

If ch is digit , it returns .

Function returns an int value as .

If ch is lowercase , it returns .

Function returns an int value as .

If ch is printable character , including blank ASCII ,   through , it returns .

Function returns an int value as .

If ch is punctuation character , it returns .

Function returns an int value as .

If ch is whitespace character , newline , tab , carriage return , form , it .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

If ch is an uppercase letter , it .

Function returns an int value as .

If ch is an uppercase letter , it returns the ASCII value of the lowercase equivalent of ch .

ASCII value of ch , otherwise .

Function returns an int value as .

If ch is lowercase letter , it returns the ASCII value of the uppercase equivalent of ch .

ASCII value of ch , otherwise In Chapter , we listed the largest and smallest values belonging to the data types .
We also remarked that these values are system dependent .
These largest and smallest values are stored in named constants .
The header file cfloat contains many such named constants .
The following table lists some of these constants .

Minimum positive long double value Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In Chapter , we listed the largest and smallest values belonging to the integral data types .

We also remarked that these values are system dependent .
These largest and smallest values are stored in named constants .
The header file climits contains many such named constants .
The following table lists some of these constants .

Named Constant Description .

Minimum short Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Hyperbolic sine of Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Function Name and .

The returned is as .

An int if Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Associated with the string type are data type and named constant .
These are defined as follows : An unsigned integer type .

The maximum value of type The type string contains several functions for string manipulation .
In addition to the string functions listed in Table , the following table describes additional string functions .

In this table , we assume that strVar is string variable and is string variable , string constant , or character array .
The name of the function is shown in bold .

Expression Effect , istreamVar is an input stream variable type istream or .

Characters until the newline character are input from istreamVar and stored in strVar .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Removes all of the characters from strVar starting at index pos .

If is less than the current storage size of strVar , the storage size of the string is truncated to .
If is greater than the current storage size , the string is expanded to size and the additional space is filled with copies of the character specified by the char variable ch .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

APPENDIX MEMORY SIZE ON SYSTEM AND RANDOM NUMBER GENERATOR program similar to the following prints the memory size of the data types on your system .

Sample Run : Size Size Size Size Size Size Size Size Size Size Size Size of of of of of of of of of of of of unsigned unsigned unsigned Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

To use the function rand , the program must the header file cstdlib .
The header file cstdlib also contains the constant .
Typically , the value of is .
To find the exact value of , check your documentation .
The function rand generates an integer between and .
The following program illustrates how to use the function rand .
It also prints the value of .

Sample Run : The value of  random  random between and : random between and : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Booch , Analysis and Design , Reading , MA ,

Sahni , and .
Rajasekaran , Computer Algorithms , Computer Science Press ,

Josuttis , The Standard Library : Tutorial and Reference , Reading , MA ,

Knuth , The Art of Computer Programming , Volume : Fundamental Algorithms , Reading , MA ,

Knuth , The Art of Computer Programming , Volume : Seminumerical Algorithms , Reading , MA ,

Knuth , The Art of Computer Programming , Volume : Searching and Sorting , Reading , MA ,

Lippman and .
Lajoie , Primer , Reading , MA ,

Sen , Discrete Mathematics : Theory and Applications , Cengage Learning Asia , Singapore ,

Hensen , Data Structures in Pascal , Little Brown and Company , Boston , MA ,

Sedgewick , Algorithms in , Reading , MA , Parts , Part ,

Stroustrup , The Design and Evolution of , Reading , MA ,

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

APPENDIX ANSWERS TO EXERCISES Chapter .

All programs must be loaded into main memory before they can be executed .

Similarly , all data must be brought into main memory before program can manipulate it .

The operating system monitors the overall activity of the computer and provides services .

In machine language the programs are written using the binary codes while in language the programs are closer to the natural language .
For execution , language program is translated into the machine language while machine language need not be translated into any other language .

To load an executable program into main memory .

compiler reports syntax errors .

Analyze the problem , outline the problem and its solution requirements , and design an algorithm to solve the problem .

Implement the algorithm in programming language , such as , and verify that the algorithm works .

Maintain the program by using and modifying it if the problem domain changes .

To find the weighted average of the four test scores , first you need to know each test score and its weight .
Next , you multiply each test score with its weight and then add these numbers to get the average .

Get Get Get Get , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Then we divide the price of the pizza by the of the pizza .
Let radius denote the radius , denote the of the circle , and price denote the price of the pizza .
Also , let denote the price per square inch .

Get radius .
Get price .
The following algorithm computes the volume and surface of the sphere .

The following algorithm computes and outputs the billing amount .

Enter the number of items bought .

Get price iii .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Suppose averageTestScore denotes the average test score , highestScore denotes the highest test score , testScore denotes test score , sum denotes the sum of all of the test scores , count denotes the number of students in class , and studentName denotes the name of student .

First , you design an algorithm to find the average test score .
To find the average test score , first you need to count the number of students in the class and add the test score of each student .
You then divide the sum by count to find the average test score .
The algorithm to find the average test score is as follows :
Set sum and count to .

Repeat the following for each student in class .

Increment count and update the value of sum by adding the current test score to sum .

Use the following formula to find the average test score : otherwise sum count ;
The following algorithm determines and prints the names of all of the students whose test score is below the average test score .

Repeat the following for each student in class :

Get studentName and testScore print studentName c .
The following algorithm determines the highest test score .

Get first test score and call it highestTestScore .

Repeat the following for each of the remaining students in class : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Get testScore testScore ;
To print the names of all of the students whose test score is the same as the highest test score , compare the test score of each student with the highest test score , and if they are equal , print the name .
The following algorithm accomplishes this .
Repeat the following for each student in class :
Get studentName and testScore print studentName You can use the solutions of the subproblems obtained in parts through to design the main algorithm as follows :

Use the algorithm in part to find the average test score .

Use the algorithm in part to print the names of all of the students whose score is below the average test score .

Use the algorithm in part c to find the highest test score .

Use the algorithm in part to print the names of all of the students whose test score is the same as the highest test score .

is case sensitive .

The fifth letter of is uppercase while the fifth character of is lowercase .

Both the operands of the operator must be integers .
Because the first operand ,  is value , the expression is invalid .

Both the operands of the operator must be integers .
Because the second operand ,  is value , the expression is invalid .

Both the operands of the operator must be integers .
Because the second operand , +  is value , the expression is invalid .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Input failure : trying to read the .

The values of and are unchanged .

The function getline reads until it reaches the end of the current line .
The newline character is also read but not stored in the string variable .

The file contains the output produced by the program .

The file contains the output produced by the program .
The old contents are erased .

The program would prepare the file and store the output in the file .

Amy Bob .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Omit the semicolon after else .
The correct statement is : endl ; else "

The correct code .

The output is : Discount .
The semicolon at the end of the statement terminates the statement .
So the statement is not part of the statement .
The statement will execute regardless of whether the expression in the statement evaluates to true or false .

The output is : Discount .
The semicolon at the end of the statement terminates the statement .
So the statement is not part of the statement .
The statement will execute regardless of whether the expression in the statement evaluates to true or false .

Replace the while loop statement with the following : Replace the statement :

Loop control variable : The initialization statement : Loop condition : Update statement : The statement that updates the value of  +

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

In pretest loop , the loop condition is evaluated before executing the body of the loop .
In posttest loop , the loop condition is evaluated after executing the body of the loop .
posttest loop executes at least once , whereas pretest loop may not execute at all .

In , the second argument in the function call is missing .

In and , the function call requires one more argument .

The function requires actual parameters .
The type and the order of these parameters is : int , double .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

The function computes mk , where and are the arguments of the function and .

This function computes .

In void function , return statement is used without any such as .

In void function , return statement is used to exit the function early .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

If the input is , the output is : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Because there is no for an anonymous type , you cannot pass an anonymous type as parameter to function and function cannot return an anonymous type value .
Also , values used in one anonymous type can be used in another anonymous type , but variables of those types are treated differently .

The statement in Line should be : using namespace .

Heelo Thlre Giamond Dold c .

Regular exercise Regular exercise and low fat diet health insurance insurance Regular exercise can reduce health insurance .

This declaration is correct .

Array size must be positive .
correct answer is : int .

This declaration is correct .

Array size must be positive integer not range .
correct answer is : int ; Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

This declaration is correct .

The size of score is , so the call should be ,

The array gpa is of type double , whereas the parameter of tryMe is of type int .
So there will be mismatch data type error .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Invalid ; the assignment operator is not defined for .

Invalid ; the relational operators are not defined for .

Invalid ; the assignment operator is not defined for .

First row of beta : c .

Second row of beta : Third row of beta : First row of beta : Second row of beta : Third row of beta : First row of beta : Second row of beta : Third row of beta : First row of beta : Second row of beta : Third row of beta : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Invalid ; the member of newEmployee is struct .
There are no aggregate output operations on struct .
correct statement is : c .
Invalid ; employees is an array .
There are no aggregate assignment operations on arrays .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The type of function print is missing .
Also , constructor has no type .
The statements in Lines and should .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The functions print , getSalary , and getNumOfServiceYears are accessors ; functions setData and updateSalary are mutators .

The class temporary has only one constructor .
Because this is constructor with default parameters , it can be used to initialize an object without specifying any parameters .
For example , the following statement creates the object newObject and its instance variables are initialized to  and , respectively : temporary newObject .

The statement in Line creates and initializes the instance variables of this object to  that is , 
The statement in Line creates and initializes the instance variables of this object as follows :
The statement in Line creates and initializes the instance variables of this object as follows :
The statement in Line creates and initializes the instance variables of this object as follows :

There are two operations for class objects : Member access and .

constructor is member of class , and it executes automatically when class object is instantiated and call to the constructor is specified in the object declaration .
constructor is included in class so that the objects are properly initialized when they are declared .

destructor is member of class , and if it is included in class , it executes automatically when class object goes out of scope .
Its main purpose is to deallocate the dynamic memory created by an object .

The statement in Line should be :

The statement in Line is invalid because the member function printX is not static member of the class , and so cannot be called by using the of class .

The statement in Line is invalid because is private static member variable of the class .

Some of the member variables that can be added to the class employeeType are : department , salary , employeeCategory as supervisor and , and employeeID .
Some of the member functions are : setInfo , setSalary , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter getSalary , setDepartment , getDepartment , setCategory , getCategory , setID , and getID .

The base class is computers and the derived class is personalComputers .

This is public inheritance .

Private members of the object newCylinder are xCoordinate , yCoordinate , radius , and .

Missing  in the statement .
The statement should be : class derivedFromTemp : public temp .

First constructor of class one will execute , then constructor of class two will execute , and finally constructor of class three will execute .

It cannot be accessed directly outside of the class .
Also is private member of the class superSmart .
It cannot be accessed directly outside of the class .

Valid Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

It cannot be used to call its member function print .

It cannot be used to access its members .

Between the preprocessor directive and .
The definitions of the classes one and two can be placed between these directives as follows :

In private inheritance , the public members of the base class are private members of the derived class .

The protected members of the base class are private members of the derived class .

The private members of the base class are hidden in the derived class .
They cannot be directly accessed in the derived class .
They can be accessed by the member functions friend of the derived class through the public or protected members of the base class .

In public inheritance , the public members of the base class are public members of the derived class .
They can be directly accessed in the derived class .

The protected members of the base class are protected members of the derived class .
They can be directly accessed by the member functions friend of the derived class .
The private members of the base class are hidden in the derived class .
They cannot be directly accessed in the derived class .
They can be accessed by the member functions friend of the derived class through the public or protected members of the base class .

The protected members of base class can be directly accessed by the member functions of the derived class , but they cannot be directly accessed in program that uses that class .
The public members of class can be directly accessed by the member functions of any derived class as well as in program that uses that class .

The members setX , print ,  and setY are protected members in class third .
The private member of class first is hidden in class third , and it can be accessed in class third only through the protected and public members of class first .

Because the memberAccessSpecifier is not specified , it is private inheritance .

Therefore , all of the members of the class first become private members in class fifth .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

To create pointer in the variable declaration , operator is placed between the data type and the variable name .
For example the statement int ; declares to be pointer of type int .

To dereference pointer in an expression , the operator is placed to the left of the pointer .
For example , if is pointer of type int , the expression endl ; outputs the data stored in the memory space to which points .

So the expression , in Line , does not have valid value .

The operator delete deallocates the memory space to which pointer points .

Because at compile time dynamic arrays have no first and last elements , so the functions begin and end cannot be called on dynamic arrays .

In shallow copy of data , two or more pointers point to the same memory space .
In deep copy of data , each pointer has its own copy of the data .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The copy constructor makes copy of the actual variable .

Classes with pointer data members should include the destructor , overload the assignment operator , and explicitly provide the copy constructor by including it in the class definition and providing its definition .

ClassA : ClassA : ClassB :

Because employeeType is an abstract class , you cannot instantiate an object of this class .
Therefore , this statement is illegal .

This statement is legal .

This statement is legal .

friend function is nonmember of class , whereas member function is member of class .

Because the left operand of is stream object , which is not of the type mystery .

In Line , the return type of the function should be bool .

The correct statement is : friend bool , const .

In Lines , the return type of the function + should be discover .
Also since + is friend function of the class , the name of the class the scope resolution in the heading of the function , in Line , are not needed .
The correct statements are : Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Chapter friend discover , const ; discover .

Suppose that class , say temp , overloads the postincrement , tempObj is an object of the class temp .
Then , the statement ; is compiled as , the statement ; is compiled as .
The dummy parameter distinguishes between the functions .
Similar conventions for the operators .

The answer to this question is available at the Web site accompanying this book .

When the class has pointer data members .

Error in Line .
template instantiation can be for only type or userdefined type .
The word " between the angular brackets must be replaced either with type or type .

Sunny Day .

If an exception is thrown in try block , the remaining statements in that try block are ignored .
The program searches the catch blocks in the order that they appear after the try block looks for an appropriate exception handler .
If the type of thrown exception matches the parameter type in one of the catch blocks , the code of that catch block executes , the remaining catch blocks after this catch block are ignored .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Also , the try block has no associated catch block , that is , there is no catch block that follows the try block .
The statement just before the catch block disassociates the catch block from the try block .
The correct code is : double .

Leaving the try block .

Current balance : Balance must be greater than c .
Current balance : Balance must be greater than .

Entering the try block .

Exception : Lower limit violation .

After the catch block Entering the try block .

Exception : After the catch block Entering the try block .

Exiting the try block .

After the catch block Entering the try block .

Exception : After the catch block .
throw statement .

function specifies the exceptions it throws in its heading using the throw clause .

The case in which the solution is defined in terms of smaller versions of itself .

function that calls another function and eventually results in the original function call is said to be indirectly recursive .

The statements in Lines and .

The statements in Lines and .

Any nonpositive integer .

It is valid call .

It is an invalid call .
It will result in infinite recursion .

It is valid call .

It does not produce any output .

It does not produce any output .

It does not produce any output .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The general case is specified by the option otherwise .

Before deletion , the link field of the third node stores the address of the fourth node .
After deletion , the link field of the third node will store the address of the next node , which is the old fifth node .
If there was no fifth node , then after deletion , the link field will store the value nullptr .
Therefore , after deleting the fourth node , the link field of the third node is changed .
So pointer to the third node is needed .

After the execution of the statement in Line , is nullptr , so does not exist .
This code will result in error .

The output of this code is :
The function begin returns an iterator to the first node of linked list .

The function end returns an iterator one past the node of linked list .

The item to be deleted is not in the list .

The answer to this question is available at the Web site accompanying this book .

The answer to this question is available at the Web site accompanying this book .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

If the stack is nonempty , the statement ; returns the top element of the stack , and the statement ; removes the top element of the stack .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The answer to this question is available at the Web site accompanying this book .

The answer to this question is available at the Web site accompanying this book .

Suppose that the list is of .
Consider the first of the outer for loop , that is , when the value of .

Now the inner loop executes .
Before the execution of the inner for loop , the variable isSorted is set to true , assuming that the list is sorted .
If the list is already sorted , then the expression + in the if statement always evaluates to false , so the body of the if statement never executes .
Because the inner loop executes times , there are comparisons .
In the second of the outer loop , because the variable isSorted is true , the loop condition , evaluates to false , so the outer for loop terminates .
It follows that , if the list is already sorted , the outer for loop executes only once .
Hence , the total number of comparisons is .

After partitioning , elements in the first sublist are smaller than the pivot and in the second sublist they are larger than the pivot .
The merge sort partitions the list by dividing it into two sublists of nearly equal size by breaking the list in the middle .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The function partition is called times and the number of comparisons to sort the list is .

Quick sort : merge sort :

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Thus , there are pointers in all the nodes of the binary tree .
The pointer pointing to the root node is an external pointer .
Each of the remaining nodes has one pointer pointing to it , which is pointer from the parent node .
The remaining pointers in all the nodes , which is + are nullptr .
This implies that the binary tree has + empty subtrees .

Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

The vertices and are connected .
path from vertex to vertex is .

The vertices and are not connected .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

container is used to store data , while an algorithm is used to manipulate the data stored in container .

An STL function object contains function that can be treated as function using the function call operator .

uses the operation of the container , while uses the operation of the container to add elements to the container .
Furthermore , cannot be used for the vector container .

All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

 mb fa c c .

abacus , abs function , absolute value , abstract classes , abstract data type , binary search trees , binary trees , graphs , implementing , linked lists , lists , abstraction , acceptAmount function , accessor functions , accumulate algorithm , accumulate function , class , action statement , actual parameter list , actual parameters , changing value , corresponding to formal parameters , virtual functions , Ada , addFirst function , additionalBonus variable , addition compound , addition , overloading , add operation , addQueue function , addresses , address of , addressOfX function , addressType struct , addVotes function , adjacency lists , adjacency matrix , adjacent , function , function , adjacent from , adjacent to , function , age variable , aggregate operations , Aiken , Howard , algorithm header file , algorithms , classifications , dominant operations , function overloading , generic , heap sort algorithms , implementing , modifying algorithms , nonmodifying algorithms , numeric algorithms , recursive algorithms , repetition , subproblems and , aliases , allocating memory .
See memory allocation American National Standards Institute , American Standard Code for Information Interchange , amountDue variable , analog signals , analytical engine , and logical  and , Android , anitaHouse variable , anonymous data types , Standard , namespace mechanism , Standard Template Library , string data type , append function , Apple computer , apple object , application programs , areaAndPerimeter , area function , area variable , arguments , arithmetic expressions , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index expressions , grouping with parentheses , infix notation , integral expressions , mixed expressions , operands , Polish notation , postfix notation , prefix notation , Reverse Polish notation , arithmetic function objects , arithmetic operators , addition , associativity , division , data type , integral data type , modulus , multiplication operator , negation operator , order of precedence , remainder operator , subtraction operator , arithmetic overflow and underflow exceptions , arrayAsParameter function , lists , binary search algorithm , insertion sort , pivot , quick sort algorithm , selection sort , sequential search , sequential search algorithm , sublists , arrayClass class , array index operator , overloading , arrayListType class , as abstract data type , arrays , accessing components , aggregate operations , auto declaration of elements , base address , in bounds , circular , class objects , components , copying , constant arrays as formal parameters , constructors , copying elements between , and , declaring , default size , dynamic , elements , implementing queues , implementing stacks , index , index out of bounds , initializing , initializing during declaration , integral data types and indexes , largest element in , for loops , manipulating lists , memory location , multidimensional , number of components in , outputting data , parallel , parameters to functions , partial initialization during declaration , passed by reference , passed by value , pointers to , printing , processing , random access data structure , for loops , reading data into , searching for specific item , selection sort , sequential lists , size , smallest element in , sorted and unsorted sublists , sorting , static , stepping through with loops , strings , struct data type in , in structs , versus structs , summing elements , variables , arraySize variable , array subscript operator , arrivalTimeEmp array , arrivalTime variable , artificial intelligence , ASCII .
See American Standard Code for Information ASCII character set , assemblers , assembly languages , assert function , assert statement , assign function , assignment , associativity , classes , versus equality relational , order of precedence , overloading , pointer variables , assignment statements , assigning value of struct variable , compound , initializing variables , peek function , simple , functions , associative containers automatically sorted elements , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index binary search trees , multiset associative container , set associative container , associativity , assignment , operators , relational operators , asymptotic notation , at function , Augusta , Ada , Countess of Lovelace , auto declaration and for loops , automatic variables , variable , averageAndGrade function , average parameter , average variable , AVL trees , Babbage , Charles , back , back function , insert iterator , back pointer variable , backslash escape sequence , backspace escape sequence , bad allocation error message , exception , bar graphs , base , base , base cases , baseClass class , base classes , constructors , copying values of derived class object into , destructors , private members , redefining member functions of , virtual destructors , baseSalary variable , base system , base system , Basic , bCh variable , class , bClass class , bDay object , begin function , beg iterator , beg pointer , Bell Laboratories , function , bidDirectional bidirectional iterator , bidirectional iterators , notation , billingAmount function , binary code , binary digits , binary numbers , converting decimal number to , converting to decimal , binary , binary operators , overloading , overloading as member functions , overloading as nonmember functions , relational operators , binary search , binary search algorithm , lists , technique , key comparisons , recursive algorithm , while loops , binarySearch function , function , binary search trees , abstract data type , analysis , associative containers , deleting nodes , height , inserting items , key comparisons , key in root node , left subtree , right subtree , root node , search algorithm , searching , traversing , binary system , binary trees , abstract data type , binary search trees , branches , traversal , children , copying , deleting nodes , destroying , directed branch , directed edge , empty , functions as parameters , height , implementing , inorder sequence , inorder traversal , leaf , left child , left subtree , length of path , traversal , level of node , nodes , nonrecursive inorder transversal , nonrecursive postorder traversal , nonrecursive preorder traversal , nonrecursive traversal algorithms , parent , paths , postorder sequence , postorder traversal , preorder sequence , preorder traversal , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index right child , right subtree , root node , shallow copy of data , traversal algorithms , traversing , visiting nodes in sorted order , binaryTreeType class , binding , binSearch function , binToDec function , bits , bitWeight variable , blank space ' blanks parameter , blank special symbol , block of statements , blocks , Bloodshed Software , board array , board pointer , pointer , body , bool data type , Boolean alias , bool reserved word , bool variables flag variable , logical expressions , design , boxType class , brackets , branch control structures , branches , traversal , breadth first traversal algorithm , breadthFirstTraversal function , break reserved word , break statement , breed variable , bSearchTreeType class , bubble sort , bubble sort algorithm , bubbleSort function , bugs avoiding , patches , build command , buildListBackward function , buildListForward function , business function , variable , bX variable , bytes , case sensitivity , integrated development environments , calBurnedInAWeek variable , calBurnedInOneDay variable , calculateAverage function , calculatePay function , calculateTotalVotes function , callPrint function , candidateList object , candidateType class , capacity function , carDealers multidimensional array , carType enumeration type , case reserved word , case sensitivity , case statements , cashOnHand member variable , cashRegister class , cassert header file , cAssignmentOprOverload class , casting , cast operator , catch block parameter , catch blocks , catching exceptions , Builder , cctype header file , cCustomer object , ceil function , celsius variable , constant , central processing units , cExpObject object , cExpPtr pointer , cfloat header file , change variable , character arrays , characterCount function , characters , arithmetic operations , ASCII values , bytes , char variables , collating sequence , comparing , encoding schemes , maximum number ignored in line , next available , putting last from input stream back , reading , relative position in strings , storing in memory , strings , character sets , char data type , arithmetic operations , converting to int data type , extraction operator , pointer variables , reading values , relational operators , charItr iterator , charList vector , charList vector list , char variables , checkTitle function , chExp variable , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index children , chips , ch pointer variable , ch variable , cin statement , extraction operator and , get function , ignore function , cinget identifier , cin variable , circle class , circle object , object , object , circleType class , circular array , circular linked lists , circumference function , citySalesTax variable , classes , abstract classes , abstract data type , address of , assignment , assignment operators , base classes , operations on , class templates , clients , components , constructors , copy constructor , declaring variables , defining , derived classes , destructors , examples of , exception classes , formal parameters , friend functions , functions , identifying , inheritance , instance variables , manipulating sets , member access , members , nodes as , member variables , design , programming , pointers , pointer variables , private members , protected members , public members , pure virtual functions , relating , reusing , static members , versus structs , Unified Modeling Language diagrams , virtual destructors , classExample class , classifyDigits function , classifyNumber function , classIllusFriend class , class instances , class keyword , class members , class objects , arrays , initializing , class reserved word , class templates , containers , classTest class , clear function , clearGraph function , clearList function , clients , casting , cList array , clocks array , clockType abstract data type , clockType class , header file , clockType objects , close file stream function , cmath header file , cntItr iterator , COBOL , code , prewritten , codeOk variable , coins enumeration type , collating sequence , colors enumeration type , colorType enumeration type , column processing , columns variable , commands , commas , comments , common input , common output , compareCode function , compare function , compareThree function , search algorithms , sorting algorithms , comparison tree , compilers , error messages , integral data types , syntax errors , binding , complex numbers , complexType class , components , classes , grouping different types , composition , compound assignment statements , compound statements , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index compStudent enumeration type , Computer History Museum , computer programs , computers , language of , machine language , processing programs , software , concatenating strings , conditional expressions , conditional operator , connected vertices , constant functions , constants declaring references parameters as , memory allocation , named constants , const reserved word , constructors , arguments , arrays , automatically executing , base classes , containers , default , default parameters , derived classes , formal parameter list , invoking , name of , number of arguments , parameters , passing arguments to , without parameters , contactType struct , container adapters , containers , associative containers , class templates , constructor , copy constructor , copying elements , default constructor , destructor , filling with elements , header files , iterators , for loops , member functions , number of elements in , operations , outputting elements of , pointers , position of elements , sequence containers , stepping through elements , continue statement , control statements , control structures , associativity of relational operators , block of statements , bool data type and logical expressions , comparing numbers , compound statements , loops , if statements , int data type and logical expressions , logical expressions , for loops , multiple selections , nested , selection , relational operators and string data type , repetition , selection , switch structures , selection , while loop , conversion constructor , CONVERSION named constant , convertEnum function , copiesInStock variable , copy algorithm , copyArray element , algorithm , copy constructor , containers , overloading , copy function , copyList function , copyStack function , copyText function , copyTree function , cos function , cost member variable , costOfOneBox variable , counted for loops , while loops , counter variable , count function , function , count variable , course enumeration type , courseGrade array , courseGrade function , courseGrade variable , courseScore parameter , coursesEnrolled array , courses enumeration type , courseType class , cout statement , debugging , setprecision manipulator , switch statement and break statement , cout variable , extension , programs See also programs creation , expressions , functions , header files , main function , comments , output statements , preprocessor directives , processing , comments , subprograms , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index createDVDList function , createGraph function , createSpanningGraph function , createWeightedGraph function , creditCardBalance variable , cScore formal parameter , cstddef header file , cstlib header file , function , cstring header file , aggregate operations , arrays of strings and , character arrays , comparing , copying , double quotation marks , functions , length , null terminated , output , reading , storing in memory , ct container , ctime header file , curly braces , currentCustomer variable , current parameter , current pointer , current variable , customerNumber variable , customers , customerType class , c variable , cycle , cylinders , cylinderType class , dangling , pointers , data First In First Out , fixed , Last In First Out , list form , manipulating , copying , modifying , nodes , operations on , retrieving , shallow copy , table form , writing to output stream , data abstraction , dataTypeName , data types , anonymous , bool data type , char data type , comparing values , conversion , defining , domains , double data type , enumeration types , explicit type conversion , float data type , data type , formal parameter list , implicit type conversion , int data type , integral , long data type , long double data type , long long data type , names , operators , parameters , short data type , simple data types , string data type , structured , synonyms or aliases , unsigned char data type , unsigned int data type , unsigned long data type , unsigned long long data type , unsigned short data type , functions , variables , dateType class , dateType struct , extension , dA variable , constant , dClass class , dDay variable , debugging cout statements , drivers , logic errors , loops , software patches , stubbs , syntax errors , decimal alias , decimal data type , decimal numbers , converting binary number to , converting to binary number , decimal point and trailing zeros , precision , decimalNumber variable , decimal reference parameter , decimal system , decision making , if statements , programs , declaration statements , declarative statements , decreaseTransactionTime function , decrement operator , overloading , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index decToBin function , deep copy , versus shallow copy , default constructor , automatically providing , containers , invoking , default parameters , default reserved word , NDEBUG preprocessor statement , statement , definition , deleteFromTree function , deleteItem item , deleteNode function , delete operation , delete operator , deleteQueue function , denominator variable , departureTimeEmp array , depth first traversal algorithm , depthFirstTraversal function , deq deque container , deqIt iterator , deque class , deque containers and bidirectional iterators , deque header file , deque objects , deque sequence container , dereferencing operator , iterators , precedence , derivedClass class , derived classes , actual parameter to formal parameter , base class , constructors , copying values into base class object , destructors , formal parameter of base class , functions , header files , member variables , private members , private member variables , protected members , public member function , public members of base class , redefining member functions of base class , destFirst iterator , destination , destroy function , destroyList function , destroyTree function , destructors , base classes , containers , derived classes , naming , overloading , IDE , dftAtVertex function , dft function , die class , die default constructor , difference engine , digital signals , digraph , dimensions , directed branch , directed edge , directed graphs , directly recursive functions , discardExp function , Discrete Mathematics : Theory and Applications and , discriminant , dispenserType class , displayMenu function , displayResults function , displayRules function , divByZero class , divByZeroObj parameter , divideList function , dividend variable , divides function object , division by zero , divisionByZero class , divisionByZero exception , division by zero exception , division compound , division , divisor , divisor variable , dMonth variable , documenting programs , doDivision function , dog object , dogType class , header file , domains , do reserved word , doSomething function , dot notation , dot , double data type , doubleDimensions function , queues , doubleFirst function , doubleList function , doubleNum function , double precision , double quotation escape sequence , doublyLinkedList class , doubly linked lists back pointer , deleting nodes , empty state , first element , initializing , inserting nodes , last element , length , list sequence container , pointers , printing , reverse order printing , searching , traversing , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index loops , draw function , drivers , drivingCode variable , dummyClass class , dummyExceptionClass class , dummy parameter , variable , dvdBinaryTree class , dvdCheckIn function , dvdCheckOut function , dvdCheckTitle function , dvdListType class , dvdPrintTitle function , dvdSearch function , dvdSetCopiesInStock function , dvdTitle variable , dvdType class , dvdUpdateInStock function , dYear variable , dynamic arrays , accessing components , deallocating , deque sequence container , list pointer variable pointing to , new  for loops , vector sequence container , dynamic binding , dynamic memory , dynamic arrays , dynamic variables , early binding , EBCDIC .
See Extended Decimal Interchange edges , edges array , edgeWeights array , Eiffel , electrical signals , Electronic Numerical Integrator and Calculator , elem element , elements auto declaration , copying between arrays , largest , returning values , smallest , sum of , elemNext element , elemType parameter , ellipse class , else reserved word , pairing with if statements , else statements , file , employees array , employeeType class , employeeType struct data type , empty function , empty strings , encapsulation , encoding schemes , end function , statement , end iterator , endl keyword , endl manipulator , while loops , end pointer , enumeration types , arithmetic operations , cast  declaring variables , identifiers , illegal , increment and decrement operations , indexes , legal , loops , operations on , as parameter to functions , relational operators , arrays , enumerators , enum reserved word , while loops , eof function , equal algorithm , algorithm , equalTime function , function object , equal to , versus assignment , overloading , erase function , error messages compilers , exception classes , error variable , escape character , escape sequences , evaluateExpression function , evaluateOpr function , evens variable , exabytes , example function , exception class , exception classes , exception handling division by zero exception , exception classes , fixing error and continuing , logging error and continuing , mechanisms , stack unwinding , terminating program , blocks , exception classes , exceptions , catching , division by zero , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index logging , processing thrown in function calling environment , propagating , throwing , throwing and rethrowing , executable code , executable statements , file extension , exit function , expert systems , exp function , explicit type conversion , expN namespace , expressions , assigning value to variable , columns exceeding required columns , if statements , output , outputting value in columns , precedence , output , saving value of , switch statement , true or false , while loops , extClockType class , Extended Decimal Interchange Code , external variables , extern reserved word , extraction , binary , char data type , cin statement , double data type , file stream variables , int data type , newline character , operands , overloading , reading multiple data items , white spaces , fabs function , fact function , factorization function , fahrenheit variable , FALSE named constant , false reserved word , feetAndInchesToMetersAndCent function , feet variable , fenceCostPerFoot variable , fertilizerCostPerSquareFoot variable , Fibonacci number , Fibonacci sequence , file , files , appending , closing , end of , opening , reading data from , file stream variables , fileStreamVariable variable , fillArray function , fill function , fillNames function , function , function , function , find function , function , finishedSquareFootage member , first , first formal parameter , First In First Out , queues , first iterator , first member , firstName variable , firstNum variable , firstOutOfOrder index , parameter , parameter , pointer , pointer , first pointer variable , function , firstRect variable , first variable , fixed data , fixed decimal format , fixed manipulator , while loops , flag variable , float data type , data type , expressions , notation , numbers , absolute value , comparing for equality , converting to integer , decimal point and trailing zeros , default type , division operator , double data type , fixed decimal format , formatting , precision , scientific notation , floor function , function , foreignLanguages variable , for indexed variable , for loop control , for loops , auto declaration of elements , body , break statement , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index copying , continue statement , counted , counter , counting backward , immediately exiting , indexed , infinite , initializing array components , initial statement , inputting data , largest element , loop condition , loop control variables , nesting , scope of identifier , simple or compound statements , sorting lists , stepping through array elements , terminating , arrays , update statement , versus while loops , formal parameter lists , constructors , data types , formal parameters , actual parameters , base address passed to , base class objects , changing value of , constant arrays as , const reserved word , memory allocation , as pointer , for loops and , reference parameter , value parameter , virtual functions , void functions , formatting flags , FORTRAN , forwardIterator forward iterator , forward iterators , forwardItr iterator , found parameter , function , free tree , friend functions , extraction operator , insertion operator , operator functions as , operator overloading , operator , friend reserved word , front , front function , insert iterator , fstream class , fstream header file , fullTimeEmployee class , funcA function , funcArrayAsParam function , funcB function , funcExp function , func parameter , functionABC function , functionA function , functional header file , functionB function , function call , functionC function , function header , function objects , arithmetic , logical , predicates , relational , function overloading , algorithms , function prototypes , functions , arguments , arrays as parameters to , body , calling , classes and , class members , class templates , constructors , default parameters , definition , depending on another function , derived classes , destructors , directly recursive , empty , enumeration types parameter to , exceptions thrown by , formal parameter lists , formal parameters , function templates , global identifier access , header files , heading , identifiers , illegal arguments , immediately exiting , inability to nest , indirectly recursive , infinite recursion , istream data type , local variables , mathematical , names , overloaded operators , overloading , parameters , passing by reference , pointers , pointer variables , predefined , processing thrown exceptions , pure virtual functions , recursive , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index returning multiple values from , reusing , binding , search algorithm growth rate , signatures , stacks implementing calls , stack unwinding , standard , static , string data type , structured programming , struct variables and , tail recursive functions , testing , throwing and rethrowing exceptions , arrays as parameters , virtual , void functions , writing other functions with , functionSeven function , functionSix function , function stub , function templates , function type , functionXYZ function , funcValueParam function , funExample function , funOne function , funTwo function , gameCount variable , gameResult function , gamewinner variable , general cases , generate function , function , generic algorithms , gen function , getArrivalTime function , getCost function , getCourseName function , getCourseNumber function , getCredits function , getCurrentBalance function , getCurrentCustomerArrivalTime function , getCurrentCustomerNumber function , getCurrentCustomerTransactionTime function , getCurrentCustomerWaitingTime function , getCustomerNumber function , getData function , getDay function , getEvensCount function , getFirstName function , getFreeServerID function , get function , getGpa function , getHeight function , getHoursEnrolled function , getLastName function , getLength function , getline function , getMonth function , getNoOfItems function , getNumber function , getNumberOfBusyServers function , getNum function , getOddsCount function , getRadius function , getRemainingTransactionTime function , getScore function , getStudentData function , getTime function , getTotalVotes function , getTransactionTime function , getWaitingTime function , getWidth function , getYear function , getZerosCount function , gigabytes , global identifiers , header files , iostream header file , global named constants , global positioning satellites , globalType namespace , global variables , memory allocation , scope resolution operator , static variables , struct variables , gpa component , gpa variable , grade enumeration type , grade parameter , grade variable , graphics and binary trees , graphIt iterator , graph pointer , graphs , abstract data type , adjacency lists , adjacency matrix , applications , breadth first traversal algorithm , cycle , definitions , depth first traversal algorithm , destination , directed , edges , empty , free tree , minimal spanning tree , notations , operations on , origin of edge , paths , printing , representations , rooted tree , shortest path , simple graphs , source vertex , spanning tree , strongly connected , subgraphs , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index traversing , undirected , vertices , weight , weighted graphs , weighted tree , weight of the path , graph theory , graphType class , function object , greater function , greater than , greater than or equal to , greedy algorithm , guess variable , Hamblin , Charles , devices , hardware , Harvard University , relationship , head , header files , class templates , derived classes , functions , global identifiers , extension , multiple inclusions of , ordered linked lists , predefined functions , unordered linked lists , heading , head pointer , heap sort algorithms , height binary search trees , binary trees , subtrees , height function , height variable , extension , languages , Hollerith , Herman , horizontal tab character , hours variable , hoursWorked variable , houseType struct , hr variable , preprocessor identifier , IBM , identifiers , blanks in , blocks , cmath header file , declaring before using , enumeration data types , functions , global , iomanip header file , iostream header file , legal and illegal , local , named constants , naming , predefined , rules to access , words , scope of , std namespace , switch structure , undeclared , statement , statements , comparing with if statements , compound statements , conditional , expressions and semicolon , incorrect , logical expressions , nesting , range of values , if reserved word , if statements , comparing with statements , compound statements , decision maker , ending , exceptions , expressions , input failure , input variables , logical errors , and logical operator , nested , selection , pairing else with , problems with expression in , semantic errors , ifstream class , ifstream data type , ifstream variables , ignore function , object , object , illustrate class , immediate successors , implementation files , class templates , object code , implicit type conversion , in bounds , inches variable , incident , preprocessor directive , includes function , include statement , incrementHours function , incrementMinutes function , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index increment operator , iterators , overloading , operator , operator , incrementSeconds function , incrementWaitingTime function , incrementY function , inData variable , indentation , nested if statements , indexed for loops , indexes , enumeration type , integral data types , out of bounds , arrays , indexLargestElement function , index variable , indirection operator , indirectly recursive functions , infile stream variable , inFile variable , infile variable , infinite loops , for loops , infinite recursion , infix expressions , infix notation , info component , information hiding , inheritance , multiple , private members , protected members , public members , single , stream classes , initializeArray function , initialize function , initializeList function , initializeQueue function , initializeStack function , initializing variables , init parameter , function , inorder function , inorder sequence , inorderTitle function , inorder transversal nonrecursive algorithm , inorderTraversal function , function , inpStr object , input discarding portion of , strings , input devices , input failure , if statements , input files extensions , nonexistent , reading beyond end of , specifying at execution time , input file stream , inputIterator input iterator , enumeration types , files , prewritten operations , streams , string data type , functions , input statement , input streams , fail state , next available character , opening nonexistent input file , reading invalid data , restoring to working state , input stream variables , if statements , inputting strings , reading string into variables , returning true or false , returning value , insertAt function , insertEnd function , inserter insert iterator , insertFirst function , insert function , insertion operator , associativity , file stream variables , friend functions , overloading , setprecision manipulator , syntax error , insertion point , insertion sort , analysis , lists , average case behavior , key comparisons , insertionSort function , insertItem item , insert iterators , insertLast function , insertNode function , instance variables , inStock array , intArray array , intConstVecIt iterator , int data type , converting to char data type , extraction operator , logical expressions , pointer variables , intDeq deque container , integer alias , integerManipulation class , integers , converting numbers to , division operator , larger of two , relational operators , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index integral data types , arithmetic operators , array indices , integral expressions , integrated circuits , integrated development environments , resources provided by , file creation , interestRate variable , interface files , International Organization for Standardization , intersection , intExp variable , intGtIt iterator , intItr iteration , intList array , intList list , list container , list container , list container , list container , intList object , object , object , object , intList struct variable , intList vector , intList vector container , intList vector object , int pointer , int reserved word , intSetA set associative container , intSet set associative container , int variables logical expressions , memory allocation , intVecIter iterator , class , invalid string position error message , inventory class , functions , iomanip header file , ios class , iostream class , iostream header file , global identifiers , identifiers , stream variables , isDVDAvailable function , isEmpty function , isEmptyList function , isEmptyQueue function , isEmptyStack function , isFound variable , isFree function , isFull function , isFullQueue function , isFullStack function , isFull variable , isGuessed variable , isIdentifier identifier , isItemAtEqual function , islower function , isNegative variable , isObject parameter , isPalindrome function , isstreamVar variable , isTallEnough variable , istream class , istream class object , istream data type , class , istream iterators , istream object , istreamVar input stream variable , isupper function , isVowel function , iteration and problem solving , iterative control structures , iterators , bidirectional iterators , declaring , dereferencing operator , forward iterators , increment operator , input iterators , linked lists , output iterators , random access iterators , stream iterators , vector container declaration , iter iterator , function , variable , Jacquard , Joseph , Java , Jobs , Steven , variable , keyboard , keys , keywords , kilobytes , algorithm , languages variable , larger function , local declaration , overloading , larger function template , largerInt function , largest function , largestInRows function , largestVotes variable , lastElem vector iterator , last formal parameter , Last In First Out , last member , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index lastMerged pointer , lastName variable , last parameter , last pointer variable , last variable , late binding , leaf , leavesCount function , left child , left manipulator , left subtree , legalAge variable , lenCodeOk variable , length , class , length function , length identifier , lengthPtr pointer variable , length variable , function object , less function object , less than , less than or equal to , letterCount array , letterCount variable , letter variable , level , traversal , libraries , predefined functions , linear searches , lineCount variable , link component , linked implementation of queue , linked implementation of stacks , adding node , copying , empty stack , full stack , initializing stack , overloading assignment , removing element , top element , linked lists merge sort algorithm , merging sublists , middle node , sublists , linkedListIterator class , linked lists , abstract data type , building backward , building forward , circular linked lists , copy constructor , copying , deallocating memory , deleting items , destructor , doubly linked lists , first , head , implementing stacks , initializing , inserting items , iterators , length , links , nodes , ordered , overloading assignment , pointers , printing , printing backward , printing in reverse order , processing nodes , properties , quick sort algorithm , retrieving data from nodes , selection sort , sequential search , sorted , structure of nodes , traversing , unordered , linkedListType class , default constructor , iterator , member variables , linkedQueueType class , linkedStackType class , linkedStackType function , linker , links , Linux , list array , array , array , array , array , list class , list containers and bidirectional iterators , listCont list container , listElem member , list formal parameter , list header file , listIt iterator , listLength member , list list container bubble sort , operations , list objects , listOne object , listOne parameter , list pointer , list pointer variable , lists , abstract data type , empty , equal items , full , index , length , linked lists , maximum size , operations performed on , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index ordered , outputting elements , removing elements from , repeating elements , searching , sequential , sorted or unsorted , sorting , unordered , list sequence container , listSize function , listTwo object , listTwo parameter , listType class , listType class template , listType struct , list variable , lLink pointer , loader , local declaration , local identifiers , local variables , function object , logical expressions , assert function , associativity of relational operators , bool data type , bool variables , evaluating , int data type , int variables , logical expressions , order of precedence , reversing value , evaluation , true and false values , logical operators , logical expressions , logical values as operators , order of precedence , logical errors if statement , silent killer , logical expressions , statements , input stream variable in if statements , logical operators , logical function objects , function object , function object , class , logic errors , long data type , long double data type , long data type , loop condition , loop control variable , loop invariants , loops , body , break statement , copying , debugging , loops , enumeration types , exiting early from , index out of bounds , infinite , iterative control structures , for loops , multidimensional arrays , number of iterations , posttest , pretest , sentinel , stepping through array elements , verifying with loop invariants , while loop , algorithm , lowerSublist sublist , Lukasiewicz , Jan , luxuryTax variable , machine language , Mac OS , main function , main memory , make command , algorithm , makeSale function , manipulating data , manipulators , map containers and bidirectional iterators , Mark , mathematical functions , mathStudent enumeration type , matrix array , function , max function , maxIndex variable , maxListSize function , maxQueueSize variable , maxSaleByPerson function , maxSaleByQuarter function , function , maxSize variable , maxStackSize variable , max variable , megabytes , member access operator , member access operator arrow , member functions , binary operators , calling member functions , constant functions , definitions , implementing , member variables , objects , operator functions as , overloaded operators , operator as , operator as , redefining from base class , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index member objects passing arguments to constructors , member selection operator , member variables access by member functions without modifying , base classes , derived classes , initializing , member functions modifying , copy , objects , memory data transfer between devices and , optimizing use of , memory allocation constants , dynamic variables , formal parameters , global variables , int variables , new  member variables , recursive functions , reference parameters , static member variables , value parameters , variables , memory cells , memory leak , merge function , mergeList function , merge sort algorithm analysis , technique , linked lists , merging sublists , partitioning list , pivot , mergeSort function , merging sorted lists , message variable , metersAndCentToFeetAndInches function , methodologies .
See programming methodologies microprocessors , middle member , middle pointer variable , mid variable , miles variable , function , min function , minimalSpanning function , minimal spanning tree , minLocation function , minus function object , min variable , mismatch algorithm , mixed expressions , mnemonic , mobile computing applications , modifying algorithms , mod , modular programming , modules , modulus compound , modulus function object , modulus , month variable , moveDisks function , move function , movieDirector variable , movieProducer variable , movieProductionCompany variable , variable , variable , msTreeType class and abstract data type , mstv array , multidimensional arrays , dynamic , multimap containers and bidirectional iterators , multiple inheritance , comments , multiple selections , multiplication compound , multiplication , multiplies function object , multiset associative container , multiset containers and bidirectional iterators , mutator functions , variable , myBox object , myClass class , myClock object , myException class , myList array , myList variable , myRectangle object , myRectangle parameter , mySport variable , myStack class , header file , myString variable , myTime object , myYard object , name array , named constants , declaring , global , identifiers , name member , name object , name pointer variable , namesMultiSet multiset associative container , namespace mechanism , namespace member , identifier , namespace reserved word , namespaces , nameType struct , name variable , arrays , negate function object , negation , negative integer operands and modulus , negativeNumber class , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index negative numbers , nested , blocks , control statements , control structures , statements , if statements , for loops , switch statements , while loops , newElement variable , newEmployee struct variable , newHead variable , newHouse struct variable , newItem variable , newLastElem vector iterator , newline escape sequence , extraction , newNode node , newNode variable , newNum variable , new  dynamic arrays , memory allocation , newString class , newString data type , newStudent struct variable , newYard object , nextNum function , algorithm , next pointer variable , nodeCount function , nodes , binary trees , children , as class or struct , search algorithms , data , deallocating memory , deleting , info component , inserting , iterators to first and last , level , link component , linked lists , links , paths , pointers , processing , retrieving data from , root node , visiting in sorted order , nodeType struct , nodeType type , nonmember functions binary operators as , functions as , overloading , as , as , nonmodifying algorithms , nonprintable characters , nonrecursive algorithms converting recursive algorithms to , printing linked list backward , nonrecursive inorder transversal , nonRecursiveInTraversal function , nonrecursive postorder traversal , nonrecursive preorder traversal , nonRecursivePreTraversal function , nonrecursive traversal algorithms binary trees , inorder transversal , postorder traversal , preorder traversal , member variables memory allocation , noOfGuesses variable , noOfServiceYears variable , named constant , noOfStudents variable , Notepad , function object , not equal to , not , algorithm , nthFibonacciNum function , nthFibonacci variable , null character , NULL named constant , null pointer , nullptr null pointer , null strings , strings , num array , NUMBER named constant , numberOfBlanks variable , numberOfItems variable , numberOfStudents variable , numbers converting from binary to decimal , converting from decimal to binary , double data type , inputting , larger , manipulating , outputting in columns , reading , reading characters as , number variable , numeric algorithms , numeric header file , num identifier , numOfBathrooms member , numOfBedrooms member , numOfBoxesSold variable , numOfCarsGarage member , numOfVolunteers variable , numptr pointer variable , num reference parameter , num variable , variable , variable , variable , variable , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index object code , objectOne object , design , programming , programming languages , Object Pascal , objects , accessing class members , accessing implementation details , aliases , identifying , information hiding , initializing , iterators , member functions , member variables , operations performed on data , overloading , out of scope , passed by reference , passed by value , pointer to itself , private member variables , relevant data , objectThree object , objectTwo object , objectType enumeration type , file extension , odds variable , ofstream class , ofstream data type , ofstream variables , oldYard object , one class , arrays , declaring , processing , simulating table form data , size , one function , one value parameter , ONE variable , selections , OOD .
See design OOP .
See programming language open function , open stream member function , operands , data types , extraction , postfix expressions , returning address of , operating systems , operations , function , function , function , + function , function , function , function , function , function , function , function , function , function call  functions , overloading , member functions , nonmember functions , restrictions , this pointer , reserved word , operators associativity , data types , explicitly overloading , order of precedence , overloading , postfix expressions , precedence , op  opOverClass class , orderedArrayListType class , orderedLinkedList class , ordered linked lists deleting nodes , header file , insert first node , inserting node , insert last node , operations on , searching , traversing , ordered lists , orderedListType class , ordered sets , orderedSetType class , origin , or logical , osIdentifier identifier , osObject parameter , ostream class , ostream class object , class , ostream iterators , copy function and , ostream object , ostream data type , ostreamVar variable , otherClock object , otherClock reference parameter , otherDeq deque container , otherIntSet set associative container , otherList list container , otherList object , otherVecList vector container , outData variable , extension , outfile object , outfile stream variable , outFile variable , outF parameter , exception , out_of_range class , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index out_of_range exception , output , columns , numbers , formatting , generating , new  sending to output device , screen , or file , output devices , output files extensions , specifying at execution time , output file stream , outputIterator output iterator , output iterators , output , overloading , output statements , output streams , writing data to , output stream variables , overflow , class , overloaded operators , overloading array index , assignment , binary operators , copy constructor , decrement , destructor , extraction , function name , functions , increment , insertion , operators , output , unary operators , package object , paintSale array , palindromes , parallel arrays , parallel edges , parameterized stream manipulators , parameterized types , parameter passing , parameters , arrays as , data types , default , functions as , manipulators , names , objects as , passed by reference , predefined functions , reference variables as , struct variables , arrays passing , void functions , parametric polymorphism , paramObject formal parameter , paramObject object , parent , array , algorithm , algorithm , function , partition function , partTimeEmployee class , header file , Pascal , Blaise , Pascaline , passed by reference arrays , struct data type , struct variables , arrays , variables , passed by value arrays , class objects , struct data type , struct variables , variables , patches , paths , payCheck variable , payment variable , payRate variable , dynamic array , peek function , perimeter function , perimeter variable , personal computers , personalInfo class , personalInfo constructor , personType class , header file , petabytes , pet object , pet pointer , petType class , header file , formal parameter , pigLatinString function , PI named constant , pivot , variable , variable , plus function object , member variable , object , pointer arithmetic , pointer data type , pointerParameters function , pointers , accessing class or struct components , address of operator , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index to arrays , class member functions and , dangling , data types , dereferencing , dereferencing operator , dynamic variables , first container element , formal parameters as , to functions , last container element , memory space , nodes , related memory , return type of function , root node , shallow versus deep copy , value parameter , pointer variables , assigning value to another pointer variable , assignment , asterisk symbol and , char data type , classes and , comparing for equality , data types , declaring , functions , increment and decrement operations , initializing , int data type , integer values , operations on , root , storing memory addresses , value of , variable , variable , variable , variable , Poisson distribution , Polish notation , polymorphism , polynomials , factoring , poolCapacity function , poolFillTime function , function , function , pop function , algorithm , pop operation , popularSport variable , position iterator , positive integers , postcondition , postfix expressions , evaluating , operands , operators , printing result , symbol , postfix notations , overloading , postorder function , postorder sequence , postorder traversal and nonrecursive traversal algorithms , postorderTraversal function , posttest loops , pos variable , power function , pow function , pointer , pointer variable , precision , precondition , predefined functions , predefined identifiers , predicates , reference parameter , prefix notation , overloading , preorder function , preorder sequence , preorder traversal and nonrecursive traversal algorithms , preorderTraversal function , preprocessor , preprocessor directives , pretest loops , variable , variable , algorithm , prewritten code , price member , primeFactorization class , algorithm , printArray function , printData function , printDate function , print function , printGrade function , printGradeReports function , printGraph function , printHeading function , printing arrays , doubly linked lists , graphs , linked list backward , linked lists , linked lists in reverse order , postfix expression result , reverse order doubly linked lists , struct variables contents , arrays , printMatrix function , printpersonalInfo function , printReport function , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index printResult function , printResults function , printShortestDistance function , printStars function , printTime function , printTreeAndWeight function , private access specifier , private inheritance , private members , private member variable , problem cycle , problems analysis , design , structured design , subproblems , problem solving , identifying objects , iteration , largest element in array , recursion , subproblems , techniques , processVotes function , program development environment , programming , problem cycle , problem solving , structured , programming languages , equality , languages , semantic rules , semantics , syntax , syntax errors , syntax rules , programming methodologies design , structured design , programmingScore member , programs , See also programs altering sequential flow of execution , basic operations , blank spaces , brackets , commas , curly braces , decision making , documentation , error messages , executing , expressions , fixing exception and continuing , functions , handling exceptions , header files , identifiers , indentation , keywords , line numbers , logging exception and continuing , logic errors , machine language version of , main function , comments , numeric data , design , output statements , placing and indenting braces , predefined functions , processing , prompt lines , proper structure , pseudocode , reading data from file , repetitively processing , reserved words , runtime errors , selection , selectively processing , sequentially processing , comments , special symbols , structured programming , style and form , subprograms , syntax errors , syntax rules , terminating , tokens , translating pseudocode into , blocks , whitespaces , progScore parameter , project files , prompt lines , protected access specifier , protected members , protected variables , pseudo , pseudocode , ptrMemberVarType class , file , public access specifier , public inheritance , public member functions , public members , public static member , pure virtual functions , function , function , push function , algorithm , push operation , putback function , value parameter , pointer variable , queueADT class , abstract data type , queue class , queueFront pointer variable , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index queue header file , queueRear pointer variable , queues , adding elements , back , breadth first traversal algorithm , constructors , deleting elements , destructors , empty , first element , First In First Out structure , front , full , implementation as arrays , initializing , last element , linked implementation of , maximum size , middle elements , operations , rear , relational operators , temporary , waiting customers queue , queues simulation , queueType class , queuing systems , customers , designing , main program , server list , servers , transaction time , waiting customers queue , waiting time , quick sort algorithm analysis , lists , technique , key comparisons , for loops , partitioning list , recursion , quotient variable , value parameter , rAccessIterator random access iterator , radiusPtr pointer variable , radius variable , rand function , random access data structure , random access iterators , random access memory , random number generator , random numbers , function , for loops , arrays , auto declaration , dynamic arrays , formal parameters , sequence containers , syntax errors , vector objects , ranges accessing and processing elements by applying function , consecutive elements meeting criteria , copying elements , counting occurrences of values , elements appearing in another range , elements common to two ranges , elements not appearing in another range , element sum of previous elements , finding elements , largest element in , last element , maximum of values , minimum of values , multiplying elements in multiple , randomly ordering values , replacing elements , reversing order of elements , rotating elements , searching elements , sequence of elements , smallest element in , sorting elements , subrange , summing elements , swapping elements , RATE member , rate variable , rbegin function , readCode function , readCourses function , readIn function , read statements , real alias , real numbers and relational operators , rear , rebuild command , recFriendObject formal parameter , recMergeSort function , records , recQuickSort function , rectangle class , rectangleFriend function , object , object , object , object , rectangleType class , overloading binary operators , private members , rectangleType constructor , recursion , direct , Fibonacci number , indirect , infinite , largest element in array , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index printing linked lists in reverse order , problem solving , quick sort algorithm , removing , selection control structures , Tower of Hanoi , recursive algorithms , base cases , binary search algorithm , converting into nonrecursive algorithms , largest element in array , sequential search algorithm , recursive definitions , base cases , directly recursive functions , general cases , indirectly recursive functions , infinite recursion , recursive algorithms , recursive functions , tail recursive functions , recursive functions , designing , local variables , memory allocation , parameters , unlimited copies of itself , reference parameters , changing values of parameter , class objects , declaring as constant , formal parameters , manipulating actual parameters , memory allocation , functions , reference variables as parameters , ref formal parameter , regionNumber variable , registered variable , relational function objects , relational operators , associativity , binary operators , char data type , enumeration types , integers , order of precedence , queues , real numbers , simple data types , stacks , string data type , remainder operator , removeAt function , function , function , remove function , function , rend function , re object , repetition , loops , for loops , while loop , replaceAt function , function , function , replace function , function , reserved words , residential function , resize function , rethrowing exceptions , retrieveAt function , retrievePlay function , return escape sequence , return reserved word , return statement , returning only one value , secret function , functions , void functions , function , reverse function , reverseNum function , Reverse Polish notation , reversePrint function , rFibNum function , right child , right manipulator , rightmost bit , rightObject formal parameter , right subtree , rLink pointer , rollDice function , roll function , root , rooted tree , root node , binary search trees , level of , pointer , root pointer , function , rotate function , row order form , row processing , rows variable , runSimulation function , binding , class , runtime errors , words , ryanHouse variable , saleByQuarter function , salePrice variable , sales array , salesPersonList array , salesPersonRec struct data type , salesTax variable , sale variable , scholarship variable , scientific manipulator , scientific notation , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index scope class members , function names , identifiers , namespace member , scope resolution operator , score parameter , score variable , screen , screen ostream iterator , search algorithms , asymptotic notation , binary search , binary search trees , search algorithms , dominant operations , growth rate of functions , keys , number of comparisons , sequential search algorithm , while loops , searchDVDList function , search function , searching arrays for specific item , criteria , doubly linked lists , elements , linear search , ordered linked lists , sequential search , server list , unordered linked lists , searchItem function , searchItem variable , function , searchValue element , second formal parameter , second iterator , secondNum variable , second pointer variable , secondRect variable , second variable , secret function , sec variable , selection control structures , selections , multiple , selection sort , selectionSort function , selection structures statements , if statements , switch structures , variable , variable , selector , identifiers , sellProduct function , semantic errors , if statements , semicolon at end of for loops , semantic rules , semantics , semicolons , sentence object , sentinel , while loops , seqCont sequence container , seqSearch function , sequence containers deque sequence container , list sequence container , member functions , for loops , vector sequence container , sequences copying elements , filling , removing elements , sequential lists , sequential search , lists , linked lists , sequential search algorithm , lists , serverID variable , server list , serverListType class , servers , busy , set of , serverType class , set associative container declaring , inserting and deleting items , operations on , setBusy function , set containers and bidirectional iterators , setCopiesInStock function , setCourseInfo function , setCurrentCustomer function , setCustomerInfo function , setData function , setDate function , function , setDimension function , setfill manipulator , setFree function , setInfo function , function , setLength function , setName function , setNameRateHours function , setNum function , setpersonalInfo function , setprecision manipulator , setRadius function , sets , manipulating , ordered , setServerBusy function , setSimulationParameters function , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index function , setTime function , setTransactionTime function , function , setVotes function , setWaitingTime function , setWidth function , setw manipulator , setX function , shallow copy , versus deep copy , shape class , shift operator , evaluation , short data type , shortest path , shortest path algorithm , shortestPath function , showChoices function , showpoint manipulator , showSelection function , signatures , significant digits precision , silent killer , simple assignment statements , simple data types , initializing during declaration , relational operators , valid input , variables , simple graphs , simple paths , Simula , simulation parameters , simulations implementing , queues , single inheritance , comments , single precision , single quotation escape sequence , size function , slicing problem , smallestWeight array , smallIndex variable , Smalltalk , software , patches , sortCourses function , sorted linked lists , sorted lists , binary search , merging , sort function , algorithm , sorting arrays , criteria , elements , lists , selection sort , sorting algorithms , bubble sort , insertion sort , key comparisons , merge sort algorithm , quick sort algorithm , selection sort , source , source code , source code file , source file , sourceName file , source program , source vertex , spanning tree , special symbols , speed variable , sphereRadius variable , sphereVolume variable , splice function , sports enumeration type , sqrt function , square class , squareFirst function , srand function , algorithm , algorithm , stackADT class , stack class , stack header file , stack object , stacks , adding elements , base address of array , comparing , converting recursive algorithms into nonrecursive algorithms , copying , empty , full , implementing as arrays , implementing function calls , initializing , Last In First Out data structure , linked implementation of , overflow , pop operation , push operation , relational operators , removing elements , top element , top operation , underflow , unorderedLinkedList class , unwinding , stackTop variable , stackType class , else statements , Standard , standard functions , standard input device , standard output device , Standard Template Library , algorithms , associative containers , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index components , container adapters , containers , function objects , insert iterators , iterators , standing enumeration type , starsInLine parameter , statements , repetition , statement terminator , statement terminator , stateSalesTax variable , static arrays , static binding , reserved word , static functions , static members , static member variables memory allocation , static reserved word , static variables , status variable , stdexcept header file , std namespace , stepwise refinement , strcmp function , strcpy function , stream classes , stream extraction operator , overloading , stream functions , stream insertion operator , overloading , syntax error , stream manipulators , stream member functions , stream objects , streams , stream variables , passing by reference to functions , string concatenation operator , string data type , additional operations , binary operator , functions , predefined operations , processing array of strings , relational operators , usage , variables , string header file , stringList object , stringList vector container , named constant , string objects , strings , accessing individual character in , arrays , comparison , clearing , concatenating , containing blanks , containing message , converting to string , empty , input , inserting , length , manipulating , null , output , output statements , palindromes , reading , relative position of characters , replacing , searching , size , slash within , storing in string variable , subscript out of range error , substrings , writing , data type , string variables , strlen function , strongly connected , Stroustrup , Bjarne , str pointer , str string variable , struct data type accessing members , arrays , versus arrays , versus classes , components , defining , length , members , passing by reference , passing by value , public members , struct data type , values , struct reserved word , structs accessing components with pointer , declaring , nodes as , public members , struct statement , structured data types , structured design , structured programming , struct variables assigning value , comparing , declaring , functions and , as global variables , name , passing as parameter by value or by reference , printing contents , reading and writing , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index str variable , variable , variable , variable , strVar string variable , stubbs , studentID array , studentList array , studentName array , student object , studentPtr pointer variable , student struct variable , studentType class , studentType struct , studentType struct variable , style member , subgraphs , subproblems , subprograms , subscript , overloading , subset , substr function , subtraction compound , subtraction , subtrees , sumArray function , sumDigits function , sumRows function , sum variable , sumVotes variable , surface area , swap function , function , switch reserved word , switch statements , break statement , case statement , default label , evaluating expression to logical value , expressions , general rules for , identifier , immediately exiting , multiple selections , nesting , range of values , selector , skipping remainder of , switch structures , syntax , syntax errors , correcting in fashion , detecting , identifying , for loops , semicolon after expressions in statements , selections , understanding and fixing , syntax rules , system programs , header files , tab escape sequence , tableType data type , tail recursive functions , target , tax member , temp array , temperature variable , temp formal parameter , tempHouse variable , template instantiations , template reserved word , templates , class templates , function templates , tempNum variable , temp object , temporary queue , tempRect object , tempRect variable , temp variable , vector , vector , terabytes , terminate function , ternary  testAddress class , header file , test class , testCopyConstr function , function , testFunc function , test function , header file , testScore member , testScore parameter , testScore variable , testTime function , variable , variable , variable , variable , variable , text editors , TextPad , global variable , this pointer , overloading , this reserved word , three class , three function , throwing exceptions , throw reserved word , throw statement , simulations , time function , timeZone variable , title parameter , member , tokens , tolerance variable , tolower function , design , top function , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index topological ordering , top operation , totalAverage variable , totalNumOfBoxesSold variable , totalSaleByPerson function , totalSaleByQuarter array , totalSales variable , totalScore variable , totalVotes variable , toupper function , trailCurrent pointer , transaction time , transactionTime function , transactionTime variable , transform function , transistors , traversal algorithms and binary trees , treeHeight function , treeLeavesCount function , treeNodeCount function , treeRoot object , TRUE named constant , true reserved word , try blocks , blocks , tTime parameter , tuitionRate variable , Turbo Pascal , variable , two class , arrays , accessing components , column processing , declaring , dynamic , entering elements , enumeration types , indexes , initialization during declaration , initializing , outputting elements , passing as parameters to functions , passing by reference , printing , processing , row order form , row processing , processing , storing in memory , data , two formal parameter , two function , two local variable , two value parameter , TWO variable , selections , extension , type casting , type conversion , Type data type , typedef iterator , typedef iterator , typedef iterator , typedef iterator , typedef iterator , typedef pointer iterator , typedef reference iterator , typedef reserved word , typedef iterator , typedef iterator , typedef statement , typedef iterator , Type formal parameter , type name , typename keyword , member , unary operators , overloading , underflow , class , undirected graphs , Unicode , Unified Modeling Language diagram , union , algorithm , unique function , Universal Automatic Computer , University of Pennsylvania , UNIX , marker , unorderedArrayListType class , bubble sort algorithm , function templates , unorderedLinkedList class , queue derived from , stacks derived from , unordered linked lists , deleting nodes , elements unordered , header file , inserting first node , inserting items , inserting last node , searching , unordered lists , inserting item , length , removing item from , replacing items , traversing , unorderedListType class , unordered sets , unorderedSetType class , unorderLinkedList class , unsetf stream member function , unsigned char data type , unsigned int data type , unsigned long data type , unsigned long long data type , unsigned short data type , unwinding stack , update function , updateServers function , updateVotesByRegion function , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index updateWaitingQueue function , algorithm , upperSublist sublist , The United States Census Bureau , usCoins variable , data types , exception classes anonymous object of , error messages , throwing exceptions , functions , order in programs , scope of identifier , functions , void functions , header files , identifiers , variables , using namespace statement , using reserved word , using statement , variable , validSelection function , value parameters , class objects as , formal parameters as , memory allocation , not passing results to calling function , functions actual parameter list , assignment statements , calling , data types , formal parameter list , function prototypes , function stub , local declaration , output statements , as parameter in function call , reference parameters , returning value , return statements , return type , syntax , using value , values functions unable to return value of type array , ordered set of , tracing through sequence , val value parameter , varChar variable , variables , allocating , arrays , assigning value to , auto declaration , automatic , changing value , as class members , data types , declared within block , declaring , declaring and initializing , declaring when defining enumeration type , dynamic , incrementing and decrementing values , initializing , input stream , int data type , invalid data , memory allocation , naming , not initialized , output stream , passed by reference , passed by value , protected , putting data into , reading string into , simple data types , standard input device , static , storing value in , string data type , using value without initializing , using without declaring or initializing , vecCount container , vecItr iterator , vecList vector , vecList vector container , vector class , vector containers , bidirectional iterators , declaring iterator , first element , manipulating data , number of elements in , processing elements , vector header file , vector objects declaring , initializing during declaration , inserting element , multiplying each element by , for loops , vector sequence container , vertex component , vertices , adjacent , adjacent from , adjacent to , component , connected , cycle , depth first ordering , incident , labeling , loops , simple paths , source , weight of the edge , virtual destructors , virtual functions , virtual reserved word , visited array , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .

Index visit pointer , Visual Express , Visual Studio , Visual Studio , vList vector , void functions , function stub , volume , volume function , volume variable , von Leibniz , Gottfried , von Neumann , John , votesByRegion array , votesByRegion variable , wages variable , waitingCustomerQueueType class , waiting customers queue , waitingCustomersQueue variable , waitingTime variable , weight , weighted graphs , weightedGraphType class , weighted tree , weightFound array , weight of the edge , weight of the path , weight reference parameter , weight variable , global variable , what function , while loops , binary search algorithm , body , break statement , continue statement , decision maker , empty or null , equivalent to for loops , expressions , Fibonacci number , flow of execution , immediately exiting , iterations , loop condition , loop control variable , loop entry condition , nesting , never executing , positive numbers , repeating statements , search algorithms , sequential search algorithm , while reserved word , white spaces , extraction operator , inputting , width variable , variable , variable , Windows , Windows console environment , winLoc variable , winningObject function , Wordpad , Wozniak , Stephen , wrappingCostPerSquareFeet variable , writeTotal function , array , catch block parameter , formal parameter , member , object , variable , alias , yard object , array , yearBuilt member , yearToDatePaid variable , formal parameter , object , yourClock object , yourList array , yourList variable , yourRectangle object , yourTime object , private static variable , static member variable , variable , zeros variable , zettabytes , variable , Copyright Cengage Learning .
All Rights Reserved .
May not be copied , scanned , or duplicated , in whole or in part .
Due to electronic rights , some third party content may be suppressed from the eBook .

Editorial review has deemed that any suppressed content does not materially affect the overall learning experience .
Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it .
