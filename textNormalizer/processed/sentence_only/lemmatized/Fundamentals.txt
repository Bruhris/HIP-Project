southern adventist university 
legal notice
permission grant hardcopie freely distribute material follow condition  
copyright legal notice copy document whole part 
material sell distribute commercial purpose write permission copyright holder 
instructor educational institution freely document class primary optional textbook condition specify
local electronic copy document term specify hard copy  
copyright term electronic representation document whole part 
material sell distribute electronic form commercial purpose write permission copyright holder 
instructor educational institution freely store document electronic form local server primary optional textbook condition specify
additionally  hardcopy local electronic copy contain uniform resource locator url 
simply message 
computer program  perspective  sequence instruction dictate flow cal impulse computer system 
impulse affect computer memory interact display screen  keyboard  mouse  computer across network way produce magic  permit human perform useful task  solve high level problem  play game 
program allow computer assume role financial calculator  transform machine worthy chess opponent 
note extreme here  
high level illusion achieve computer user oblivious low level activity machinery hood  speak 
surprisingly  programmer today write software high  abstract level
accomplished computer programmer develop sophisticated software little interest knowledge actual computer system run 
powerful software construction tool hide low level detail programmer  allow solve problem high level term 
concept computer programming logical mathematical nature 
theory  computer program develop computer 
programmer discuss viability program reason correctness efficiency examine abstract symbol correspond feature real world programming_language real world programming_language 
exercise valuable  practice computer programmer isolate machine 
software write real computer system 
compute professional know software engineer develop software drive system 
system define underlie hardware operating_system 
developer concrete tool like compiler  debugger  profiler 
examine context software development  include computer system tool 
software computer truly universal machine transform proper tool task hand 
refer program piece software tangible object  software actually intangible 
store medium 
hard drive  cd  dvd  usb pen drive example medium software reside 
cd software  software pattern cd 
order software store computer memory 
typically computer program load memory medium like computer hard disk 
electromagnetic pattern represent program store computer hard drive 
pattern electronic symbol transfer computer memory program execute 
program instal hard disk cd internet 
case  essence transfer medium medium pattern electronic symbol direct work computer system 
pattern electronic symbol represent sequence zero digit binary base number system 
example binary program sequence underlying computer hardware  specifically processor  zero here mean electrical signal graphic device part display screen red 
unfortunately  only minuscule number people world able produce  hand  complete sequence zero represent program microsoft word intel base computer run windows operating_system 
who produce binary sequence claim enjoy task 
word program old mac os computer powerpc processor work similarly windows version produce company  program express pletely sequence zero
intel core processor windows machine accept completely binary language powerpc processor mac 
processor machine language 
human want speak machine language computer  processor software express language  software develop year 
software represent printed word symbol easy human manage binary sequence 
tool exist automatically convert high level description required low level code 
high level programming_language like allow programmer express solution programming problem term close natural language like english 
example popular hundred high level programming_language devise past year include fortran  cobol  lisp  haskell  perl  python  java  
programmer today  especially high level application  worry detail underlie hardware platform machine language 
think ideally conversion tool accept description natural language  english  produce desire executable code 
possible today natural language complex compare computer programming_language 
program call compiler translate computer language year  natural language 
natural language  human  inherently ambiguous 
understand properly limited subset natural language  human artificially intelligent computer system require vast amount background knowledge capability today software 
fortunately  programming_language simple structure strict rule form statement express solution problem solve computer 
follow program fragment write programming_language  
statement program fragment look similar expression algebra 
see sequence nary digit 
word    call variable  hold
mathematician variable hundred year first digital computer build 
programming  variable represent value_store computer memory 
program express language  language  execute directly processor 
compiler translate code code 
high level language code call source_code 
compile language code call target code 
compiler translate source_code target language 
beauty high level language source_code compile target platform 
target compiler
minor change source_code require architectural difference platform  work move program program rewrite hand language 
just importantly  write program human programmer free think write solution problem  specific language 
programmer variety tool enhance software development process 
common tool include  
editor allow user enter program source_code file 
gramme editor increase programmer productivity color highlight language feature 
syntax language refer way piece language arrange form sentence 
illustrate  sentence tall boy run quickly door 
boy tall run door quickly
word original sentence  arrangement follow rule english 
similarly  programmer follow strict syntax rule create form computer program 
only form program acceptable compile execute 
syntax aware editor color special annotation alert programmer syntax_error program compile 
compiler translate source_code target code 
target code language embed device 
target code source language  example  early compiler translate high level language 
result code process compiler produce executable program 
compiler today translate directly language 
complete set build tool include preprocessor  compiler  linker  preprocessor add modify content source_file compiler begin process code 
service preprocessor mainly nclude library routine program
compiled code incapable run need additional code complete executable program 
miss code precompile store repository code call library 
program_call linker combine programmer compile code library code complete program 
generally think preprocessor  compiler  linker work separate program  tool only process take place  translate source_code executable program 
debugger allow programmer easily trace program execution order locate correct error program implementation 
debugger  developer simultaneously run program see line source_code responsible program current action 
programmer watch value variable program element see value change expect 
debugger valuable locate error call bag repair program contain error 
profiler collect statistic program execution allow developer tune propriate part program improve performance 
profiler time portion program execute run  long portion take execute 
profiler testing purpose ensure code program actually testing 
know coverage 
common software release user exercise part program execute anytime testing 
purpose profiling find part program improve program run fast 
programming component development process illustrate figure developer integrate development environment ide 
ide include editor  ger  programming comprehensive program 
example ide include microsoft visual studio  eclipse foundation eclipse cdt  apple xcode 
plethora tool tool vendor  claim  programming process trivial program automatic 
tool valuable certainly increase productivity developer  write software 
substitute sound logical thinking  creativity  common sense  course  programming experience 
extension programming_language product bell lab early 
develop write unix operating_system  widely system level software embed system development 
initially object orient programming feature see later add generic_programming capability 
close relationship allow program utilize large collection code develop c
widely industry commercial software development 
industrial strength gramme language develop complex system business  science  engineering 
example software write include microsoft window  microsoft office  macos  adobe creative suite 
order meet need commercial software development accomplish complex 
experienced programmer accomplish great  beginner time difficult time
professional software developer enjoy flexible design option permit  beginner need structure option master simple concept move complex
book attempt cover facet programming_language 
experienced programmer look book cover detail 
focus here introduce programming technique develop habit 
end  approach avoid esoteric feature concentrate programming basic transfer directly imperative programming_language java   python 
stick basic explore advanced feature only handle problem hand 
list advantage develop software high level language develop software machine language 
ide improve programmer productivity 
properly write program structure 
syntax correct  compiler_will generate error_message produce executable machine language 
introduce simple example program associate fundamental concept 
concept present valid programming_language
language implement concept slightly syntax  idea directly transferable language like java   ada 
actual name file irrelevant  name  simple  accurately nature program 
extension common extension source_code 
create file text editor compile run program 
program print message 
direct preprocessor add predefine source_code exist 
process automatically invisible
here want object ostream library  collection precompile code program like
iostream library contain element handle input output display  user input keyboard  deal file 
item list  std   cout  part language
item  input output  develop  compile  store ostream library 
compiler need aware ostream item compile program 
nclude directive specify file  call header  contain specification library code 
compiler check std   cout code specification iostream header ensure library code correctly 
program write nclude iostream directive  program 
here declare function_name
program contain function executable 
detail meaning parenthesis will later
general function sjand  opening curly brace end line mark beginning body function 
body function contain statement function execute 
statement direct execute program print message simple c+ + program 
statement fundamental unit execution program 
function contain statement compiler translate executable machine language instruction 
variety kind statement  follow explore kind statement 
statement end semicolon 
detailed explanation statement
note line program end semicolon
put semicolon include preprocessor directive 
put semicolon line contain mai put semicolon curly brace 
option involve commandline environment collection independent tool 
option ide see section combine tool convenient package 
visual studio dominant ide microsoft 
windows platform  apple mac developer xcode ide 
appendixja overview visual studio ide develop simple program 
myriad feature configuration option powerful ide bewilder learn program 
command line environment programmer need only type simple command console window edit  compile  execute program 
developer prefer simplicity flexibility command line build environment  especially complex project 
prominent command line build system gnu compiler collection http  
gcc compiler  call  standard conform compiler
gcc compiler toolset microsoft window  apple mac  linux platform  free  open source software project world wide development team 
appendix bjprovide overview gcc compiler 
visual studio xcode offer command line development option
appendix bjprovide overview visual studio command line development process 
omit std   prefix short name  cout 
directive optional  omit long name 
name std stand standard   std prefix cout part collection name call standard namespace 
std namespace hold name standard type function standard conform development environment 
component standard_library third party er reside separately name namespace 
include open source project commercial library 
approach offer advantage small program  example book online tutorial 
blanket usi ng directive allow programmer short name focused using_directive  line code focused usi ng directive  especially program multiple element std namespace 
choice usi ng directive difference final product  executable gram 
compiler generate machine language code version using  focus usi ng  blanket usi ng 
select approach enhance ability write manage software project 
important note blanket usi ng approach place  generally courage complex software project 
point fully appreciate rationale avoid usi ng namespace std directive  later  section will ence understand disadvantage blanket usi ng namespace std directive 
will strive practice start avoid blanket usi ng statement 
generally will full name element std namespace focused using_directive code sense
statement mai function version program service object call std   cout 
std   cout object print text computer screen 
text message source_code call string  string character 
string enclose quotation mark  
symbol insertion operator 
think message print insert  cout object 
cout object represent output_stream  text program print console window 
end message contain symbol sequence 
know character escape sequence  combination backslash letter represent newline_character 
printing line complete  subsequent printing occur next line 
newline_character effectively cause cursor move next line 
read statement left right  cout object  responsible display text screen  receive text print terminate newline_character move next line 
simplicity  will refer type statement print statement  word print statement 
minor exception  statement function definition 
single print statement function_name
function  include mai contain multiple statement 
list  print statement draw arrow screen  
body consist statement open curly brace close curly brace 
curly brace delimit body function 
word delimit mean determine boundary limit
symbol determine beginning function body  symbol specify end function body 
list list identical  close inspection see std   cout only once mai only semicolon mai
semicolon terminate statement  only statement 
notice single statement spread line 
statement mai
read second version 
list std   cout object need nclude usi ng directive 
legal useful write function empty body  function_will execute 
list empty mai function truly simplest executable write  run
general  contain multiple function  defer generality now  will restrict attention program only amain function 
purpose program write will form show figure program generally will print need directive bring std   cout definition ostream
depend need need additional nclude directive 
mai function definition require executable  will fill body statement wish 
later  program_will sophisticated  will need augment simple template 
preprocessor directive statement std   cout printing stream object 
allow short name cout std   cout 
write program print name console window 
write program print first last name console window 
first name line  last name next line 
file distribute executable file program_will run window pc visual studio instal 
single span multiple line source_code 
explore building block develop program 
integer whole number  mean fractional part  integer positive  negative  zero 
example integer include    
contrast  integer  whole number 
support number numeric non numeric_value 
program integer 
notice program see early 
list quotation mark  
number unadorned quote 
expression  represent single newline_character 
multiple character comprise string double quote    single character represent distinct type datum enclose single quote  
program behave identically  list print value number print message contain digit
distinction here portant  will see section presence absence quote big difference output 
std   endl expression involve newline_character  perform additional work normally
program significant printing execute fast terminate output line std   endl 
difference speed ligible print console  great print hie output_stream 
program ence program execution speed imperceptible  nonetheless  will prefer  print newline habit form require keystroke edit code 
major modern computing platform microsoft window  apple macos  linux 
windows handle newline differently macos linux 
historically  character  represent  know feed lf short  character mean carriage return  cr short 
terminology come old fashioned typewriter feed piece paper roller carriage move left user type imprint symbol form leave right 
end user advance roller move paper lf move carriage back way left cr 
windows character sequence cr lf line  macos linux lf 
issue attempt edit text hie write editor platform editor platform 
news standard guarantee std   cout output_stream translate character source_code correct character sequence target platform 
mean print  std   cout  will behave identically major platform 
source_code  integer contain comma 
mean write number thousand  hundred sixty  
modern support single quote  digit separator   
digit separator improve human comprehension read large number source_code 
mathematic  integer unbounded  way  set mathematical integer infinite 
range integer limited computer finite amount memory 
exact range integer support depend computer system compiler 
bit computer system represent integer range 
number print negative 
compiler_will issue warning statement 
section explore error vs
compiler find error source  will generate executable code 
warning potential problem compiler produce executable program 
here see programmer heed warning program execution produce meaningless output 
limited range value common programming_language number store fix amount memory 
large number require storage memory 
order model infinite set mathematical integer infinite amount memory need 
will see later  support integer type great range 
section  detail implementation integer 
true  variable represent value number 
list variable store integer_value
variable program declare 
declaration specify type variable 
word variable integer 
name integer variable
variable type
support type integer  type require space computer memory 
compiler declaration reserve proper amount memory store variable value 
declaration enable compiler verify programmer variable properly program  example  will see integer add just_like mathematic 
data_type  addition possible allow 
compiler ensure variable involve addition operation compatible addition 
report error
compiler_will issue error programmer attempt undeclared variable 
piler deduce storage requirement verify variable proper usage declare 
once declare  variable redeclare context 
variable change type lifetime 
assignment statement associate value variable 
key assignment statement know assignment_operator 
here value assign variable 
mean value will store memory location compiler reserve variable_name 
need concerned variable store memory  compiler take care detail 
declare variable assign reassign
meaning assignment equality mathematic 
read assign value   value  distinction important mathematic equality symmetric   
statement will_produce compiler error  error     leave operand value 
observe print statement list identical  program 
introduce object multiple variable type declare desire  initialize single statement 
follow statement declare variable declaration statement  int   follow statement declare integer variable initialize int   here value undefined 
declaration split multiple declaration statement  int  int int  case multiple declaration statement type_name here nt statement 
compiler map variable location computer memory 
visualize variable corresponding memory location box show figure name box variable name 
figure show follow sequence code affect memory 
statement still refer separate box memory location 
simply mean value_store box memory location copy box memory location  remain distinct box memory location 
original value find box overwrite content box copy
assignment reassignment affect 
name alti tude  sum  equally permissible 
variable name purpose program 
variable_name program readable human 
program contain variable  choose variable_name render obscure collection symbol understandable 
variable_name example identifier 
identifier word name
identifier name variable 
will see later identifier name function class 
identifier follow form  
remain character alphabetic character upper low case  underscore  digit abcdefghijklmnopqrstuvwxyzabcdefghij 
here example valid invalid identifier  
follow word valid identifier qualify variable_name    total   flag 
follow word valid identifier  sub total dash legal symbol identifier  first entry space legal symbol identifier  begin digit  pound sign legal symbol identifier  class class reserve word 
reserve number word special identifier 
call reserved word keyword  word special define structure program statement 
table list reserved word 
purpose reserved word reveal book 
reserved word table identifier 
fortunately  accidentally attempt reserved word program variable_name  compiler_will issue error see section compiler error 
list reserved word  usi ng  namespace  nt 
notice nclude  cout  mai reserve word 
programming_language require programmer declare variable type variable determine variable
language allow variable 
language know dynamically type language 
statically type language 
statically type language  type variable explicitly specify statement program 
requirement declare variable initially like minor annoyance  offer advantage  
variable declare  compiler catch typographical error dynamically type language detect 
example  follow section code  int   identifi first line end capital   second line  identifi end digit zero 
distinction difficult impossible see editor printout code 
compiler detect typo second statement  last letter zero declare 
dynamically type language create variable 
variable declare  compiler catch invalid operation 
example  variable declare type programmer accidentally assign non numeric_value variable 
dynamically type language  variable silently change type introduce error program 
 compiler report improper assignment error  once declare variable change type 
ideally  require programmer declare variable force programmer plan ahead think carefully variable program require 
purpose variable tie type  programmer clear notion variable purpose declare
programmer need simple double check variable purpose write variable declaration require 
declare type variable specifie purpose only limited way  opportunity catch error beneficial 
statically type language generally efficient dynamically type language 
piler know storage variable require base type 
space variable value will change life variable  type change 
dynamically type language allow variable change type  variable type change program execution  storage require change memory variable allocate hold type 
memory reallocation run time slow program execution 
case sensitive language 
mean capitalization matter  reserved word  reserve word 
identifier case sensitive variable call name variable call name 
confusing human reader  distinguish variable merely name differ capitalization 
reason  poor practice give variable name reserved word letter capitalize 
type short write just short  represent integer occupy byte memory nt type 
short type occupy memory  necessarily represent small range integer_value nt type 
standard require short type small nt type  represent set integer_value 
tong nt type  write just long  occupy storage type able represent large range value 
standard require long type big type 
finally  long long int type  just long long  large long 
standard guarantee follow relative range value hold  short int int long int long long int small embed device  example  type occupy exact amount memory advantage type
system  will difference range 
integer like type exclude negative number 
type include word unsigned name  mean allow negative sign 
unsigned type come potential size manner sign type 
standard guarantee follow relative range unsigned value  unsigned short unsigned unsigned long unsigned long long table list difference signed unsigned integer type visual 
notice correspond sign unsigned integer time occupy amount memory 
result  unsigned type twice range positive value sign counterpart 
application require negative number  unsigned type option 
source_code  unadorned numerical literal decimal_point interpret
order represent long  append long  permit low case elle  long  avoid display printer font look like digit 
ll suffix long long literal 
suffix unsigned integer unsi gne  unsigned short  ul unsigned long  ull unsi gne long long 
capitalization unimportant  capital ls prefer 
computational task require number fractional part 
example  formula ematic compute area circle give circle radius  involve value approximately 
support non integer number  call float point number 
name come mathematical calculation decimal_point move float  ous position number maintain proper number significant digit 
type float double represent type float point number 
type double stand double precision float point   represent wide range value digit
first line list declare variable_name assign value 
second line list print value variable  third line print literal value 
literal numeric_value decimal_point program automatically type double  type double 
literal float point value float  append number  
float point number approximation mathematical real number 
case nt data_type  range float point number limited  value require fix amount memory 
way  nt double 
integer range nt data_type represent exactly 
true float point type 
real number
contain infinite number digit  float point number finite precision only approximate value 
number digit limit  number finite number digit exact representation  example  number contain digit double type approximate 
section contain consequence inexact nature float point number 
express float point number scientific notation 
programming editor
number left capital
list  avogadro speed scientific constant  degree precision measure calculate  vary 
support name constant 
constant declare like variable addition const keyword  const double  once declare initialize  constant like variable way constant reassign 
illegal constant left side assignment declaration statement 
subsequent statement like  
convention  programmer generally express constant name capital letter  way  source_code human reader distinguish constant quickly variable 
support numeric data_type  
guarantee range integer_value least large nt type 
integer literal suffix   type long 
low case elle allow suffix difficult human reader distinguish low case elle digit 
attempt change name 
guarantee range nt least big range short 
unsigned type limit nonnegative value  represent twice positive value nt type 
language standard specify minimum range precision numeric data_type  compiler exceed specified minimum 
variety numeric type specialized purpose build highly efficient program 
will little need type 
example will mainly numeric type nt integer  double approximation real number  frequently  unsi gne nonnegative integral value need 
char data_type represent single character  letter alphabet upper low case  digit  punctuation  control character like newline tab character 
system support american standard code interchange ascii character set 
standard ascii represent character 
table list ascii code character 
source_code  character enclose single quote  
standard double quote  reserve string  compose character  string
value ascii code character
print    corresponding character 
print declare type char  numeric type 
first print statement  
second print statement 
third print literal character  directly output_stream 
integer character freely assign range char small range nt  care take assign value cha variable 
character non printable character 
ascii chart list common non printable character  newline_character carriage return character backspace character alert  character cause beep  sound tone system tab character formfeed character 
special non printable character begin backslash symbol 
backslash call escape symbol  signify symbol follow special meaning interpret literally 
mean literal backslash character represent backslashe  
special non printable character code embed string 
embed backslash string  escape example  statement 
follow statement behave identically   end line      end   microsoft windows platform  character sequence   carriage return  line feed end line text file 
unix linux  line text file end line feed 
apple macintosh system  text file line end carriage return character 
compiler adhere standard will ensure character program output_stream will produce correct end line character sequence give platform 
call enumerate  enumeration 
enum keyword introduce enumerate 
value list curly brace constitute value variable enumerate attain 
name value enumerate valid identifier see section 
give color define declare variable enum show follow code fragment  color  orange  here variable custom color  value orange 
declare enumerate type manner illegal reuse enumerate value name enumerate program 
follow code  enumerate value light 
style enumerate definition know unscoped enumeration 
inherit scope enumeration style programming_language 
standards committee introduce recently enhanced way define enumerate type know scope enumeration  know enumeration class 
scope enumeration solve problem duplicate enumeration value type 
follow definition legal program  
prefix name value  operator enable compiler distinguish value 
scope enumeration require name prefix program contain enumerate type 
modern development  scope enumeration preferable unscoped enumeration 
familiar unscoped enumeration  publish code old book unscope enumeration 
scope unscope  value name enum unique 
convention captialize first letter enum associated value  language enforce convention 
enum handy represent small number discrete  non numeric option 
example  program control movement small robot 
allow orientation forward  backward  leave  right 
program encode movement integer  mean leave  mean backward 
implementation will work  ideal 
integer assume value just value expect 
compiler ensure integer variable represent robot move will stay range 
programmer mistake rare circumstance assign value range 
program will contain error result erratic behavior robot 
enum type  programmer only name value enum  compiler_will ensure mistake happen 
enumerate necessarily value nt 
imagine integer enum list value 
require variable declare
ordinarily mean specify variable  int  char  double  variable initialize declare  int  char   double  value nt   char  double 
auto keyword allow compiler automatically deduce variable initialize declare  auto  auto   auto  auto keyword accompanying initialization  example  follow declaration illegal  
automatic deduction auto useful begin programmer 
just easy specify variable 
value auto will clear advanced feature see section 
will follow line code print
will follow line code print
large system 
variable_name like reserved word 
require programmer declare variable
advantage declare variable 
difference float double 
print follow code fragment 
numeric type introduce build expression perform
operator combine value variable form complex expression 
examine rest program will see superfluous assign_value variable here 
statement usual print ment  terminate end line marker  
want cursor remain end print line user type value line message prompt value 
user press enter key complete input  cursor will automatically move next line 
first number enter will assign valuel  second number enter will assign 
once user press enter key  value enter assign variable 
user choose type number  press enter  type second ber  press enter
user enter number separate space press enter only once 
program_will proceed user enter number 
std   ci input stream object assign_value multiple variable
compiler_will generate error_message  legal code 
statement  will assign variable user input desire 
comma operator meaning context  here treat like statement separator  variable involve std   ci input stream object 
will need comma operator way  aware potential pitfall 
here context std   ci object know extraction 
notice ward  std   cout object 
std   ci object represent input stream flow program user input keyboard 
extract datum input stream std   ci assign piece datum  order  variable right 
variable left assignment  will receive value statement cutis 
right assignment arithmetic expression involve variable addition 
expression evaluate add variable 
once expression value determine  value assign variable 
expression value 
process determine expression value call evaluation 
evaluate simple expression easy 
literal value evaluate 
value variable_name value_store memory location reserve
value complex expression find evaluate small expression combine operator form potentially
operand
operator + serve unary operator 
unary only operand 
unary expect single numeric expression literal number  variable  complex numeric expression parenthesis right  compute additive inverse operand 
operand positive great zero  result negative value magnitude  operand negative zero  result positive value magnitude 
zero unaffected 
example  follow code sequence  int   std         program print 
omit unary + follow statement +  change statement behavior 
arithmetic_operator subject limitation data_type operate  example  system large  expression + will evaluate correct answer correct answer fall range nt 
add  subtract  multiply  divide nt  result integer 
long operation exceed range nt  arithmetic work expect 
division  matter 
statement std        
integer whole number  fractional part answer discard 
process discard fractional part leave only whole number part call truncation 
truncation round  example  divide  truncate 
modulus compute remainder integer division  
figure long division hand illustration integer division modulus operator work 
modulus useful first
list show convert give number second hour  minute  second 
contrast integer arithmetic  float point arithmetic double behave expect  
cha store internally number see section  perform arithmetic ter 
will little need apply mathematic character  useful 
example  letter alphabet occupy ascii value   
case letter code   
capitalize letter  need only subtract  char   std      section code print
remember offset letter  compute letter  case  assign value range     statement will assign capitalize version
hand  value range  will receive meaningful value 
expression contain mixed element  example  follow program fragment int  double   +  add double  result assign double 
arithmetic perform 
show figure  range nt fall completely range double  value represent double 
express double 
large system  minimum digit double precision adequate represent integer exactly 
mean value represent double 
converse true 
double type wide type type narrow double type 
reasonable  able assign value double variable 
process call widen  safe widen double 
follow code fragment 
assign adoubletoanint variable possible  double value range nt 
double variable fall range nt whole number  int variable unable manage fractional part 
follow code fragment  double  int  second line assign
truncation lose fractional part see section 
note proper rounding
visual compiler_will warn potential problem  warning     conversion double  int   possible loss datum warning remind lose assignment 
compiler linker will generate executable program warning present  carefully scrutinize warning 
warning useful  easy error due truncation point number creep calculation 
convert wide type narrow type like double nt call narrow 
assign float point value integer variable 
know value assign range nt  value fractional part truncation harm  assignment safe 
perform assignment warn compiler  procedure call cast  call type cast 
cast force compiler accept assignment issue warning 
follow statement convince compiler accept double assignment warning  int  reserved word stati perform narrow conversion silence compiler warning 
item convert case variable place parenthesis  desire type case type angle bracket 
statement int  change type variable  declare double remain double variable 
statement copy value temporary memory location  convert integer representation process 
cast literal value expression  
widen conversion safe  type cast require 
narrowing potentially 
print value close  impossible represent value system bit integer 
assign value wide type variable narrow type  programmer assume responsibility ensure actual value narrow range narrow type 
compiler ensure safety assignment 
cast sparingly great care cast create spot program immune compiler type checking 
perform mixed arithmetic add nt double compiler matically produce machine language code copy value temporary memory location transform double equivalent 
perform double precision float point arithmetic compute result 
integer arithmetic occur only operand nt 
double wide double dominate
mixed type arithmetic expression  dominant type coerce dominant type order perform arithmetic operation 
enumerate type 
scene  compiler translate enumerate value integer 
first value enumeration  second value 
underlie implementation enumerate type integer  compiler allow free exchange integer enumerate type 
follow code will compile  
std   cout print object know print integer  know color class value 
want treat enumerate type_value underlie integer  type cast 
list show extract underlying integer_value enumerate type 
expect output color   red  color   orange  color   yellow  color   green 
enumerate type encode integer internally  programmer perform metic enumerate type involve cast 
opportunity rare  need perform arithmetic variable  numerical type  enumerate type 
precedence expression contain kind operator  apply first 
associativity expression contain operator precedence  apply first 
see precedence work  expression + interpret +  + 
normal arithmetic  multiplication division equal importance perform addition subtraction 
multiplication division precedence addition subtraction 
expression + multiplication perform addition  multiplication precedence addition 
multiplicative operator   equal precedence additive operator binary + equal precedence
multiplicative operator precedence additive operator 
standard arithmetic  addition perform first  parenthese override precedence rule 
expression + evaluate 
multiple set parenthesis arrange nest way acceptable standard arithmetic 
see associativity work  expression operator equal precedence 
first subtraction operator apply second   correct interpretation 
correct interpretation 
tion operator leave associative  evaluation leave right 
interpretation agree standard arithmetic rule 
binary operator assignment leave associative 
assignment exception  right associative 
see associativity issue assignment  statement legal call chain assignment 
assignment statement expression 
statement  assign value variable 
expression assign value variable evaluate value assign  
assignment right associative  compiler interpret chain assignment example write  behave follow  
expression evaluate first  value assign value expression value 
expression evaluate 
value assign
value expression value
now value  equal 
expression evaluate 
value expression equal value  value assign
value expression equal variable    equal 
case precedence  parenthesis override natural associativity sion 
unary operator high precedence binary operator  unary operator right associative 
mean statement 
note mean human reader  compiler 
common industry program review correctness programmer technical manager 
choose identifier see section comment assessment process 
practice  team programmer develop software 
programmer require finish fix part program write
write comment help understand quick increase productivity modifying old unfinished 
difficult believe  programmer work month later difficult time remember part
comment help greatly 
text contain comment ignore compiler 
support type comment  single_line comment block comment  
comment begin double forward slash symbol continue end line 
compiler_will ignore symbol content rest line 
type comment useful append short comment end statement  sum number  compute average value here  executable statement comment line 
compiler_will read assignment statement here  will ignore comment 
compiler generate machine example precede example  example line source
block comment second type comment begin symbol effect symbol encounter 
parenthesis  block comment nest block comment 
block comment handy multi line comment  computation complete display 
audience comment take account  generally   routine  activity require remark 
extra time take write comment worth effort 
program comment helpful human reader ignore compiler 
aspect source largely irrelevant compiler people find valuable formatting 
imagine difficulty read book text indentation space separate paragraph
comparison source computer program  book organization simple 
decade software construction programmer establish small collection source format style industry find acceptable 
reformatte program valid compile machine language inal version 
argue original version easy read understand quickly reformatte version 
element list organize ter 
experienced programmer find list list visually painful 
distinguish characteristic list 
statement line 
statement unnecessarily split line text 
visually  line text imply action statement perform 
close curly brace align vertically line contain correspond open curly brace 
easy determine curly brace match nest properly 
tray logical structure program 
ability accurately communicate logical structure program important write complex program 
program complex logic frequently multiple nest curly brace example  see list troubleshoot  cpp 
consistent  organized arrangement curly brace difficult determine opening brace closing brace 
statement constitute body indent space 
visually phasize element logically enclose 
curly brace alignment  indentation emphasize logical enclosure important complex program
space spread statement group piece statement 
space easy visually separate operand operator comprehend detail expression 
people find statement subtotal + tax  easy read  lack space second version difficult pick individual piece statement 
first version extra space  clear operator variable_name begin end 
natural language like english  book divide distinct compose paragraph 
paragraph distinguish first line indent extra space paragraph 
space separate word sentence 
hard read book sentence print like theboyranquicklytothetreetoseethestrandedcat 
give programmer large amount freedom format source 
compiler read character source symbol time leave right line move next line 
extra space help readability  space allow place  variable_name reserved word unbroken unit 
common coding convention universal programming demonstrate list 
programmer low case letter variable_name  express constant name capital letter  example  pi mathematical constant pi 
require constant capitalize  capitalize human read source_code quickly distinguish variable constant 
figure show common way programmer indentation place curly brace source_code 
ansi style popular publish source_code 
whitesmith banner style frequently  wiki review way format code 
observe accepted formatting style indent block statement contain mai function 
software development organization adopt set style guideline  call code tion 
guideline dictate indent space  place curly brace  assign name identifier 
programmer work organization require follow style guideline code produce 
enable member development team read understand quickly code write
code review correctness code repair extend  original programmer long development team 
force style  important consistent style code write 
program complex will need additional curly brace level indentation organize code write 
consistent style especially standard style show figure easy read verify code actually express intent 
easy find fix error 
way  haphazard format increase time take develop correct software programmer mistake hide poorly format code 
software development tool boost programmer productivity  programming editor ability automatically format source_code accord standard style 
editor correct code style programmer type text 
standalone program know pretty printer transform arbitrarily format source_file properly format
seasoned programmer mistake due carelessness propose solution problem faulty correct implementation incorrect solution will produce correct program 
regardless reason  programming error fall category  
compile time error result programmer misuse language 
syntax_error common compile time error 
example  english boy walk quickly 
boy walk quickly 
violate grammatical rule english language 
similarly  statement  syntactically correct obey rule structure assignment statement section replace assignment statement slightly modify version  +  statement like program variable properly declare  compiler_will issue error_message  example  visual compiler report error     leave operand value syntax allow expression like left side assignment_operator 
visual report  error    undeclared identifi common compile time error include miss semicolon end statement  mismatch curly brace parenthese  simple typographical error 
compile time error easy repair 
compiler pinpoint exact location problem  error depend circumstance program execute 
exact error reproduce simply recompile source_code 
compiler reputation generate cryptic error_message 
little help novice programmer
combination error lead message error line follow line contain actual error 
once encounter error time compiler message familiar  able deduce actual problem report message 
unfortunately complex language simple compile time error result message incomprehensible begin programmer 
detect  ple  malformed assignment statement variable declaration 
violation language detect compile time 
program run completion terminate error 
commonly program   list circumstance will crash 
user enter  example   program work nicely 
user type number  program report error terminate 
division zero undefined mathematic  integer division zero illegal 
program attempt division run time  system detect attempt terminate program 
program way example  world  look like respectable integer 
user type  program crash valid way represent integer 
compiler compile source line dividend divisor  give dividend declare generate slightly machine language code dividend declare double
compile code expect text enter user digit extra decoration 
deviation expectation result run time error 
similar result occur user enter text represent integer  like fred 
observe case entry valid inappropriate integer zero entry non integer fred impossible compiler check problem compile time 
compiler predict user will enter program run 
mean programmer write code handle bad input user
continue exploration programming  will discover way program robust user input see list example 
solution involve change way program run depend actual input user 
run  value zero enter run time error arise 
answer compute correct general 
only time correct answer print visor 
program contain error  compiler run time system able detect problem 
error type know logic error 
list example program contain logic error 
list compile generate run time error  produce incorrect result 
begin programmer tend struggle early compile time error due unfamiliarity language 
compiler error_message actually programmer friend 
programmer gain experience language program write complicated  number compile time error decrease trivially fix number logic error increase 
unfortunately  compiler run time environment powerless insight nature location logic error 
logic error  tend difficult find repair 
tool debugger frequently help locate fix logic error  tool automatic operation 
error escape compiler detection run time error logic error commonly call bug 
compiler unable detect problem  bug major source frustration developer 
frustration arise complex program bug only reveal situation difficult reproduce exactly testing 
will discover frustration program complicated 
news programming experience disciplined application programming technique help reduce number logic error 
bad news software development inherently human intellectual pursuit  logic error inevitable 
accidentally introduce later find eliminate logic error integral part programming process 
list programmer attempt print value variable give know value 
run  program produce random result print value memory associate variable  program initialize memory location 
list assign double value variable  know section 
warning error  compiler generate executable  warning prompt 
default visual warning level compile ide level command line option command line  high warning level 
reduce level disable warning altogether  recommend 
only reason want reduce warning level compile old exist source meet standard 
develop high warning level prefer help programmer 
note  complete program example book compile cleanly visual set warn level 
level helpful detect common logic error 
avoid warning simple addition
section show stati coerce wide type narrow type 
visual warning level  compiler issue warning cast
little add cause programmer reflect correctness construct 
enhanced warning level prevent programmer oblivious situation 
kind arithmetic perform complex expression determine operator operator basis 
fahrenheit degree celsius formula 
value point fahrenheit celsius curve cross  result  zero 
first test only coincidentally correct 
unfortunately  print result zero regardless input 
problem division statement degreesf  division multiplication equal precedence  leave associative  division perform first 
operand integer  integer division perform quotient zero divide  remainder 
course zero time zero  result 
float point value involve expression degreesf result assign float point variable  irrelevant 
decision exact type operation perform operator operator basis  globally entire expression 
division perform first involve integer_value  integer division float point piece involve 
solution simply float point literal degreesf  force double precision float point division recall literal double 
correct result  subject round truncation  finally compute 
list integer division modulus split give second hour  minute  second 
user enter  program print hr  mi sec 
notice assignment
remainder divide assign back
statement alter value current value great 
similar statement occur frequently program like +  statement increment variable big 
statement like evidence assignment mean mathematical equality 
follow statement mathematic + surely true  equal
case  deposit dollar bank insist dollar bank  equal
dollar    soon rich 
 statement simply mean  add assign result back  variation list 
list perform logic compute time piece    simple arithmetic produce slightly output print hr  min  sec  list display 
trivial modify list print  list include extra arithmetic put lead zero front single digit value digital clock display 
float point number float point number offer distinct advantage integer 
float point number  especially double great range value integer type 
float point number fractional part integer
integer  offer big advantage float point number exactness 
see integer exact float point number will explore way computer store manipulate integer float point type 
computer store datum internally binary form 
binary base number system simple familiar decimal base number system only digit  
decimal system digit           
lack digit  decimal integer equivalent binary representation 
binary number place value system decimal system 
familiar base place value system work 
binary decimal number share digit  will subscript binary number  represent decimal value hundred  ioo binary number
clear will attach subscript decimal number  decimal system  easy add +   sum + little complicated  early elementary student soon discover  
sum + +  carry 
rule add binary number short simple decimal number  + + + + sum +  carry 
typical large sum + 
distinguish number bit require store type  range value represent 
mathematical integer finite  integer type correspond finite subset mathematical integer 
commonly integer type
nt  regardless value  occupy amount memory number bit 
exact number bit processor specific 
bit processor  example  build manipulate bit integer efficiently 
compiler system likely bit nt  compiler bit machine represent nt bit 
bit computer  number occupy bit memory 
simplicity  will focus unsigned integer  unsi gne type 
unsi gne type visual occupy bit 
bit represent value  visual unsi gne type represent integer 
hardware computer system only bit integer type  common compiler support bit unsi gne value range 
simplify exploration property computer base integer  will small  mythical unsigned integer type will call unsigned ti ny 
unsigned ti ny type small range value small useful actual type real program 
unsigned ti ny type only bit storage  table show value variable type unsigned tiny assume 
table  unsigned tiny value 
see arithmetic work  try add +  + easy involve carry 
next will try +  
twos column  + + io  carry column
next example illustrate limitation finite representation 
sum +  + sum carry column column  carry column
need sixth column column  place value  unsigned ti ny type limit bit 
carry place lose 
large unsi gne ti ny value  + 
possible store value unsigned tiny just impossible store value unsi gne variable 
exceed capacity unsigned ti ny type just 
add large possible unsigned ti ny   result small possible value  
figure cyclic nature bit unsigned integer 
add produce 
visual bit unsi gned follow cyclic pattern show figure figure  addition move value clockwise circle  subtraction move value counterclockwise circle 
numeric limit reach  value roll like mobile odometer 
sign integer exibit similar cyclic pattern show figure
figure cyclic nature bit sign integer 
add produce 
attempt exceed maximum limit numeric type result overflow  attempt exceed minimum limit call underflow 
integer arithmetic overflow underflow produce valid  incorrect integer result 
compiler check computation will result exceed limit type impossible general add integer variable value determine run time 
significantly  overflow underflow situation generate run time error 
logic error program perform integral computation final result intermediate value  range integer type
float point number fractional part decimal place  term float_point refer imal point number float leave right result calculation example   decimal place value produce decimal place result 
integer type  float point type distinguish number bit storage require corresponding range value 
type float stand single precision float point  double stand double precision float point 
float point number serve rough approximation ematical real number  see  severe limitation compare actual real number 
modern computer system float point number store internally exponential form accord standard adopt institute electrical electronic engineer ieee 
decimal system  scientific notation familiar form exponential notation  mole contain molecule 
here call mantissa  exponent 
ieee standard binary exponential notation  mantissa exponent binary number 
single precision float point number type float occupy bit  distribute follow  mantissa bit 
will call mythical float point type tiny float 
first bit bit tiny float type will represent mantissa  remain bit store exponent 
bit mantissa right binary point 
base bit exponent course 
figure illustrate value 
simplify matter mantissa exponent negative 
bit  mantissa assume possible value 
bit constitute exponent ti ny float  exponent assume possible value 
table list possible value ti ny float mantissas exponent assume 
number show figure
table combine mantissa exponent reveal possible ti ny float value
range tiny float number 
just state range misleading 
figure plot possible ti ny float value real number line 
figure plot possible ti ny float number real number line 
note number dense near zero sparse move right 
precision range 
precision range 
range tiny float type represent only whole number 
gap  example  value miss represent exactly close approximation 
example  miss 
scheme duplicate number  example  bit pattern represent decimal value  duplication limit number value represent give number bit 
ti ny float example bit string redundant 
number uniformly dense 
value near zero  number sparse away zero 
unsigned tiny type discuss section exhibit weakness 
integer give range present  bit string represent value  integer uniformly distribute across specify range 
standard integer type great range unsigned tiny type  share quality  value range present  bit string represent unique integer_value 
standard float point type bit tiny float type  exhibit problem 
table  tiny float value 
first bit bit string constitute mantissa  last bit represent exponent 
give bit produce bit string 
notice due way mantissa exponent combine produce identical value  bit string yield only unique tiny float value 
solely problem implementation float point number  computer language hardware adhere ieee standard exhibit problem 
overcome problem truly represent compute mathematical real number need computer infinite amount memory infinitely fast processor 
program additional nclude directive  ttinclude iomanip preprocessor directive allow std   setp reci si output_stream manipulator direct std   cout output_stream object print decimal place float point value 
program execution  first subtraction yield correct answer 
now know point number like exact internal representation only approximation 
exact answer second subtraction  round reported result decimal place  answer match 
float point arithmetic produce result close approximation true answer 
list  compute zero roundabout way  
number exact decimal representation  
exact binary representation  
surely reported answer  close correct 
careful avoid overflow underflow  integer arithmetic exact computer tem  fast float point arithmetic 
application demand absolute correct answer ger computation  choose integer 
example  financial calculation important keep track cent 
exact nature integer arithmetic integer attractive option 
deal number  integer type first choice programmer 
limitation float point number unavoidable computer finite resource 
promise inevitable approximate value infinite characteristic finite way 
inexactness  double precision float point number day world solve sophisticated scientific engineering problem  example  float point number enable space probe reach distant planet 
example program demonstrate inexactness float point number  problem largely away agree compute digit possible round result digit 
float point number trade precision practicality 
variable increase decrease
statement +  increment big statement execute 
short statement accomplish effect  
alone statement  version increment decrement operator work identically 
behavior embed complex statement 
list demonstrate increment operator work slightly differently 
just statement 
just statement  statement execute 
see  pre increment operator incremented variable uate expression 
contrast  post increment operator original cremente variable evaluate expression 
post decrement operator behave similarly 
begin programmer avoid increment decrement operator complex expression 
will frequently standalone statement danger misinterpret behavior part complex expression 
general way simplify statement modify variable simple 
mean statement 
arithmetic assignment especially handy variable long name modify  + 
accidentally reverse order symbol arithmetic assignment 
special operator allow programmer examine manipulate individual bit datum value 
know bitwise operator 
operator consist     
application programmer generally need bitwise operator bit manipulation essential system programming task 
bit unsigned integer 
bit position number right leave  start zero 
figure show individual bit position number 
bitwise operator   take integer subexpression compute integer result 
expression evaluate follow  bit ei  bit result  bit result 
bitwise operator   take integer subexpression compute integer result 
pression ei evaluate follow  bit  bit result  bit result 
example  expression evaluate  bit zero 
bit result bit zero
bitwise exclusive refer xor operator take integer subexpression compute integer result 
expression evaluate follow  bit bit 
bit bit  bit result  bit result 
example  expression evaluate  
bit match position  position set zero result 
bitwise negation operator unary operator invert bit expression 
expression evaluate follow  
sign integer representation call complement binary  slight variation standard binary layout 
suffice nt expression evaluate bit pattern  sign integer represent 
shift operator move bit integer left right  
shift leave 
expression integer type  shift bit left place 
zero fill vacate position 
bit shift left side discard 
expression evaluate  shift place left yield observe equal
shift right 
expression integer type  shift bit right place 
fill vacate bit left depend integer sign unsigned example  vs
bit shift right side discard 
expression evaluate  shift place left yield original bit position 
confuse left shift operator output_stream insertion tor 
operator identical  context differentiate
left operand integer type  mean leave shift  left operand stream put object like std   cout  mean right hand operand output_stream object display 
similarly  input stream object std   ci purpose right shift operator integer 
developer bitwise operation variety system level programming task 
example  graphical user interface gui  user generate event interact application mouse keyboard 
event click mouse button graphical element like button window 
multiple piece event store single integer 
example  bit key hold mouse button click 
bit responsible rjn key  bit tiqb key 
require action part program combination key press 
example  suppose variable hold key user depress recent mouse click 
bit string 
answer zero  mean bit 
see expression mean key simultaneously 
mask ensure bit
see mask  bit integer variable  selectively turn bit statement 
next  unsigned value  
bit integer variable  selectively turn bit statement  fully appreciate utility bitwise operator mask purpose conditional execution concentrate application programming system programming book  will little bitwise operator isolated situation 
aware presence  accidental lead difficult diagnose compiler message logic error 
like arithmetic_operator work operand  combine bitwise binary operator    assignment simplify modification variable  example  follow statement  turn bit determine
computer program example algorithm  recipe lasagna 
case lasagna  noodle cook boiling water layer filling bake 
inappropriate place raw noodle pan ingredient  bake later remove bake noodle cook boiling water separately 
way  ordering step important computer program 
point obvious  follow sound argument  
relationship degree celsius degree fahrenheit express 
english description correct 
integer division 
point assignment  degreesf value zero 
execute program compute assign variable receive degreesf value user 
example  suppose integer variable program 
interchange value variable 
want original value original value 
code reasonable    problem section code first statement execute  value original value 
second assignment superfluous change value
solution require third variable remember original value variable reassign 
correct code swap value  
informal notion solve problem valuable early stage program design  coded program require correct detailed description solution 
algorithm see simple 
statement  follow statement 
introduce language construct permit optional repetitive execution statement 
construct allow build program interesting complex algorithm require happen 
lose sight complicated algorithm correct correct 
algorithm design implementation derail inattention small detail 
sort follow binary operator order high low  +   
write program receive integer_value user 
program print sum addition  difference subtraction  product multiplication  quotient division  remainder division modulus 
program only integer 
explain result produce operation 
write program receive double precision float point value user 
program print sum addition  difference subtraction  product multiplication  quotient division 
program only integer 
sample program run look like user enter colon  program print rest enter first number  enter second number  + 
explain result produce operation 
happen attempt
give follow declaration  
purpose comment 
program list  list  list compile machine code behave exactly
program clearly
human readability important consideration 
follow program contain error 
assume comment program accurately program intend behavior 
line list comment  compile time  run time  logic error present 
line contain error 
distinguish compiler warning compiler error 
concerned warning 
advantage enhance warning reporting capability compiler 
follow program attempt compute circumference circle give radius enter user 
give circle radius  circle circumference  give formula  
mathematic  midpoint point xi  xj yi compute formula 
 write program receive mathematical point user compute print midpoint 
sample run program produce 
user literally enter    parenthesis comma show 
see suppose want allow user enter point  assign component point variable_name component variable_name 
add follow code fragment program achieve desire effect  
next will assign variable 
assign character variable_name comma  value variable  character ri variable 
 comma  variable just placeholder user input program 
reality  user type character place parenthesis comma long number proper location relative character  example  user type   program_will interpret input point 
table list calorie content food 
run walk burn calorie mile 
write program request value user  number bean burritos  salad  shake consume order 
program display number mile run walk burn calorie represent food 
program run follow user type number bean burritos  bowl salad  milkshake eat 
will run mile expend energy 
program precede execute exactly statement regardless input 
follow linear sequence  statement  statement 
linear program like limited problem solve 
introduce construct allow program statement optionally execute  depend context input program execution 
boolean expression limited surface  essential build interesting useful program 
support non numeric data_type bool  stand boolean 
term boolean come name british mathematician george boole 
branch discrete mathematic call boolean algebra dedicate study property manipulation logical expression 
compare numeric type  bool type simple represent only value  true false 
list simple program demonstrate boolean able 
see run list  boolean value false true represent integer integer 
precisely  zero represent bool value false  non zero integer positive negative mean true 
direct assignment bool variable integer result warning visual report truncation int  bool   variable still interpret true 
data_type bool basically convenience programmer  program bool variable rewrite integer achieve result 
boolean value variable freely compatible interchangeable integer  bool type convenient context involve truth value number 
important note visual compiler issue warning last assignment ment list 
non zero value true  prefer integer equivalent true see attempt print literal value true 
need assign boolean variable value true false equivalent extremely rare  compiler message alert programmer check sure assignment mistake 
boolean variable boolean expression 
expression compare numeric expression equality inequality boolean expression 
simple kind boolean expression relational operator compare expression 
table list relational operator 
table show simple boolean expression associated value 
expression like legal little expression true equivalent  simple  likely confuse human reader 
boolean expression extremely useful truth value depend value variable 
relational operator binary operator leave associative 
low dence arithmetic_operator  expression 
mistake show here 
visual will issue warning include message 
recall section  compiler warning violation
expression allow statement 
simple expression side effect alter behavior program 
example pression + + 
list show + + behave standalone statement expression large statement 
mon example function_call expression standalone statement 
tunately  compiler issue informative warning useless expressionstatement keep developer track 
boolean expression section first arcane little practical program 
boolean expression essential program able adapt behavior run time 
truly useful practical program impossible availability boolean expression 
way list user enter zero divisor 
fortunately  programmer take step ensure division zero occur 
list show
case  printing statement execute only variable di vi sor value zero 
boolean expression determine single statement follow right parenthesis execute 
zero  message print  program print
figure show program execution flow statement  list 
code style dictate indent body emphasize optional execution improve program readability 
programmer will place statement body line example  follow statement optionally assign  
legal  mean statement empty body 
case assignment part body 
assignment statement body will execute regardless truth value boolean expression 
assignment statement value value assign  see section 
mistake begin programmer context 
sual warn level check assignment conditional expression  default level
list show curly brace group multiple statement
assignment statement printing statement part body statement 
give truth value boolean expression program run  statement will execute statement will execute 
compound statement consist zero statement group curly brace 
curly brace define block statement 
matter style programmer curly brace 
format follow code 
multiple statement body compound statement curly brace  compiler interpret code fragment write 
programmer mean write
curly brace optional body consist single statement 
body consist only statement curly brace semicolon terminate statement body terminate statement 
curly brace delimit body  semicolon require body close curly brace 
empty pair curly brace represent empty block 
empty block valid compound ment 
undesirable aspect list user enter zero  program print
feedback user
statement optional clause execute only boolean sion false 
list statement desire effect 
clause contain alternate body execute condition false 
program flow execution show figure list avoid division zero run time error cause program terminate prematurely  still alert user problem 
application handle situation way  example  substitute default_value di vi sor zero 
general form statement
reserved word begin statement 
condition boolean expression determine run program_will execute statement statement 
simple statement  condition parenthesis 
program execute statement condition true 
statement readable  indent statement space line 
part statement call body
reserved word begin second part statement 
program execute statement condition false 
statement readable  indent statement space line 
part statement call body
body clause statement compound statement  
attempt statement discover need leave clause 
due imprecise representation float point number see list section  programmer caution equality compare float point expression 
list statement demonstrate peril equality float point quantity 
list display value round equivalent  internally exact representation slightly
include header omani std   setprecision stream manipulator force display decimal place float point number print 
observe output list quantity identically actually slightly
simple boolean expression  involve relational  combine complex 
introduce compound boolean expression  computer science degree require  computing course 
operating system programming_language 
isolate course  student successfully complete operating_system programming_language qualify degree 
student pass operating_system programming_language will meet requirement 
similarly  programming_language operating_system insufficient  student complete operating_system programming_language surely qualify 
logical work exactly way 
ei boolean expression  true only ei true  false false  compound expression false 
illustrate logical mathematic course 
differential equation linear algebra 
computer science degree require course 
student who successfully complete differential equation take linear algebra meet requirement 
similarly  student take linear algebra differential equation 
important note student elect take differential equation linear algebra way mathematic minor  requirement fulfilled 
logical work similar fashion 
give boolean expression  compound pression false only false  true true  compound expression true 
note logical inclusive exclusive
informal conversion imply exclusive statement like  like cake ice cream  tion
computer programming inclusive  subexpression expression true  expression true 
show combination truth value simple
logical unary operator see section  require single boolean operand right 
mean expression evaluate 
relational operator compare operand 
result parison boolean value  freely convertible integer 
cation relational operator lead surprising result  example  expression expression true  regardless value
programmer intent represent mathematical notion fall range 
expression evaluate great equal evaluate true  integer 
integer   sion true 
evaluate false  integer 
integer  expression true 
problem due strictly distinguish boolean integer_value 
correct way represent mathematical notion case simultaneously great equal equal 
revise boolean expression little verbose mathematical representation  correct formulation 
follow section code assign value bool  bool int  int  
operator evaluate leave right  mean false  need evaluate false  value expression ei true 
logical operator first test expression left 
find expression false  bother check right expression 
approach call short circuit evaluation 
similar fashion  expression ej  true  matter value ei logical expression true subexpression false 
operator short circuit evaluation
short circuit evaluation important 
situation show important 
order subexpression affect performance 
program run  complex pression require time computer evaluate simple expression 
classify expression take long time evaluate expensive expression 
compound boolean expression expensive boolean subexpression expensive boolean subexpression  order evaluation expression affect behavior program  place expensive boolean expression second 
first subexpression false expensive second subexpression evaluate  first pression true expensive second subexpression avoid 
subexpression order prevent run time error 
especially true
suppose wish print word  ok  variable   
correct statement
nest statement build arbitrarily complex control flow logic 
list behave follow  
program check condition first 
zero  execute program evaluate second condition print range  execute print statement follow outer statement print
execute program find great equal zero  check second condition 
second condition meet  display range message 
regardless  program print terminate 
program display message range condition nest meet 
way  first condition second condition meet range message print 
list show 
list logical check condition time 
logic simple  only statement  expense slightly complex boolean expression condition 
second version preferable here simple logic desirable goal 
program logic simplify list 
list statement alone insufficient implement behavior 
list specific message simple notification acceptance 
program print exactly message base variable 
single statement choose execution path 
list series statement print bit binary string binary equivalent decimal integer supply user 
outer check see proper range 
program work only nonnegative integer_value  range 
inner compare user supply enter integer decrease power
number large program  print digit console  remove remainder operator power contribution
number least big give power program print move modify input 
place end check remain will program print remain 
following show sample run list 
figure illustrate execution list user enter 
only statement 
sole statement list ensure user ger proper range 
statement originally list
clever sequence integer arithmetic operation replace original conditional logic 
program behave identically logic simple 
list troubleshoot 
simple troubleshooting program attempt diagnose computer work 
potential enhancement unlimited  version only deal power issue simple fix 
notice computer power fan disk drive sound light visible  program direct user seek help
decision tree capture basic logic program show figure step perform 
applicable  fuse blow 
computer system user serviceable fuse blow power surge 
power receptacle 
circuit breaker fuse problem 
program direct user easy check first 
progressively introduce difficult check continue 
base experience troubleshoot computer run properly  able think enhancement simple program 
note list curly brace place strictly
inclusion list improve readability gram logic easy understand 
subscribe philosophy curly brace body  idea situation improve code readability 
suppose wish improve english presentation abbreviation 
spell hour  minute  second  careful singular form hour  minute  second corresponding value
list statement express time unit correct number 
list code segment responsible print time value english word unit protect statement only allow code execute time value great zero 
exception processing time value zero  program print 
note statement responsible determine singular plural form nest statement determine value will print
list show select option 
print exactly message depend user input 
notice body contain single printing statement body  last contain statement 
control logic force program execution check tion turn 
first condition match win  correspond body will execute 
condition true  last large message will print 
curly brace delimit body body contain only single statement single deeply nest statement mighty big statement 
sequence line indent level identify construct multi way statement 
list multi way transform numeric date month day format expand english form international spanish form  example  convert february febrero 
figure compare structure statement program list program like list 
program like list  statement nest  program like list statement sequential 
tool construct complicated conditional statement 
important resist urge overly complex 
problem compute maximum integer_value user 
complete solution leave exercise section here will outline strategy 
now  allow extra variable call max 
variable meaning  name 
set max equal nl 
mean know moment  nl big number max nl value 
compare max 
large max  change max value reflect determine large  large max  reason change max  change
compare max 
large max  change max value reflect determine large  large max  reason change max  change
follow process 
extra variable max strictly think problem solution easy 
think want series statement large multiway construct 
tempt write logic
will work  logic complicated efficient operation require machine cycle execute 
complicated  difficult write correctly  addition code type
easy mistake  will produce correct result 
complicated logic decide later add variable  will need change condition code course  sure modify condition correctly 
implement simple strategy outline need only add simple statement additional variable 
introduce loop  ability execute statement repeatedly 
easily adapt first approach allow user type number like program report maximum number user enter 
second approach complex logic adapt manner 
first approach end clean  simple logic  efficient program  code easy extend 
list demonstrate common mistake assignment_operator equality operator intend 
program  run  print message  insist user enter regardless actual 
recall section assignment expression value 
value assignment expression value assign  expression 
additionally  variable nput assign value 
common coding error  compiler check misuse assignment 
warn level  example 
visual will issue warning assignment conditional expression expect  warn  assignment conditional expression occasionally assignment conditional expression warrant  compiler perform check default 
purpose idea direct compiler perform extra check 
carefully compound conditional find 
confuse logical logical common programming error 
substitute  expression true  matter assign variable
boolean expression true know tautology 
variable assume false 
regardless subexpression will true  compound logical expression true 
expression just complicated way express true 
common error contrive compound boolean expression false  know contradiction 
suppose wish exclude value give range  example  reject value range accept number 
boolean expression follow code fragment task 
number zero great timel course  expression contradiction cat way express false 
correct code fragment  replace operator 
write program request integer_value user 
value inclusive  print  ok   print
write program request integer_value user 
value inclusive  print  ok   print   
follow program attempt print message contain english word correspond give integer input 
example  user enter value  program print  enter 
current state  program contain logic error 
locate problem repair program_will work expect 
write program request integer_value user 
print maximum minimum value enter 
user enter value      program maximum minimum 
program handle tie properly  example  user enter      program report minimum maximum 
write program request integer_value user 
print value enter duplicate  print  duplicate   print  unique  
write code 
copy  paste  modify printing statement 
counting common activity  computer routinely large value  way 
like print value variable call  increment variable  repeat process variable large 
process execute section code know iteration  loop  implement loop way 
list statement display variable count
approach take list  trivial modify list change literal value 
expression parenthesis boolean expression 
boolean expression true program execution reach whi le statement  program execute body whi le statement check condition
program repeatedly execute body whi le long boolean expression remain true 
boolean expression true whi le statement execute  body whi le ment execute  body execute repeatedly long boolean expression remain true 
statement     constitute body whi le statement 
curly brace statement body 
statement general form  
reserved word whi le begin whi le statement 
boolean expression condition determine body will will continue cut 
expression enclose parenthesis show 
statement statement execute boolean expression true 
statement body whi le statement 
statement compound statement multiple statement enclose curly brace  see 
reserved word whi le statement look identical statement 
begin programmer confuse accidentally type mean whi le vice versa 
behavior statement reveal problem especially nest complex logic  mistake hard detect 
figure show program execution flow list 
program check whi le condition execute body  check condition time execute body 
condition initially false program execution skip body completely continue execute statement follow whi le body 
condition initially true  program repeatedly execute body condition false  point loop terminate 
program execution continue statement follow loop body 
observe body execute boolean expression condition initially false 
list count zero long user wish
boolean variable control loop execution 
important note expression inside condition evaluate opposite truth value variable  expression affect value
list program allow user enter number nonnegative integer 
user enter negative value  program long accept  display
initialization zero couple condition whi le guarantee program_will execute body loop least once 
statement ensure negative entry will add sum 
program execution leave loop execute print statement end 
list show whi le loop simple counting 
program keep track number value enter 
program simply accumulate
little awkward list condition twice  once whi le
user wish enter negative value nonnegative value 
simplify code common idiom std   ci extraction operator condition whi le statement 
integer  expression 
user enter   loop terminate 
user type  beginning  loop enter 
statement long statement +  execute only legitimately assign 
variable long need initialize value simply loop enter first time  now assign check condition whi le 
list  program execution will terminate letter user type  entry  ctrl will terminate sequence just 
wish technique reuse std   ci later  reset std   ci extract discard keystroke enter last valid extractor operator 
recovery process cover section now  idiom control loop only program require additional user later execution 
customary right justify column number  list powersofl print power significant digit leave align 
right align number stream object call steam manipulator 
specific stream manipulator need name std   
observe order compiler need aware
need std   find ostream header_file  additional preprocessor include directive require  ttinclude iomanip std   manipulator  condition  output_stream next item print 
value pass condition  stream right justify number space specify std   
place reveal trick improve output program 
whi le statement list troubleshoot 
bulk body list wrap whi le statement 
boolean variable call flag 
think flag value false raise true 
case  flag raise  signal program terminate 
way code organize  matching opening curly brace closing curly brace find scan upward source_code close opening curly brace indentation level find 
programming logic now complex proper placement curly brace crucial human reader quickly decipher program work 
see guideline indentation curly brace placement improve code readability 
just like statement  body contain arbitrary statement  include statement 
loop nest loop 
see nest loop work  program print multiplication table 
elementary school student multiplication table  time table  learn product integer 
multiplication table 
want multiplication table program flexible allow user specify table size 
will begin development work simple program add feature
first  will worry print table row column title  will print line separate title content table 
initially will print only content table 
will see need nested loop print table content  still manage first attempt 
first attempt will print row table rudimentary manner 
once satisfied
list st print proper place just supply need detail
next step refine way program print
contain size number 
number represent product current current column  example  number  column 
vary column number size 
list contain need refinement 
number column line nicely  number correct position tive
std   setw stream manipulator introduce list powersof right justify number digit area 
list contain ment adjustment 
list add code 
list work  
important distinguish only once loop repeatedly 
column head across top table loop  print once 
work print heading row distribute execution outer loop 
heading give row print result previous row print 
code fragment like    print way  digit number  print space print extra space 
net effect right justify digit number character space printing area 
technique allow column time table properly right align 
nest loop  row control variable outer loop  column control inner loop 
newline print content row display  value print inner column loop line 
nested loop iterative process repeat 
time table example  whi le loop print content row  multiple row print 
inner loop print content row  outer responsible print row 
list triply nest loop print arrangement letter c
string print permutation abc 
execute program check condition only top  loop 
mean boolean expression condition false program complete execute statement body loop  remain statement loop body complete loop once check condition 
word  statement exit loop middle body 
ordinarily behavior problem 
intention execute statement body indivisible unit 
desirable exit body recheck condition middle loop
break conti nue statement give programmer flexibility design control logic loop 
break_statement cause exit body loop 
variation list 
condition whi le list tautology 
mean condition true false 
program execution reach whi le statement guarantee enter loop body whi le loop way escape 
statement loop body  
case break_statement  execute conditionally base value variable nput  exit loop 
list break_statement execute only user enter negative number 
program execution encounter break_statement  jump loop 
skip statement follow break loop body 
software designer believe programmer break_statement sparingly deviate normal loop control logic 
ideally  loop single entry point single exit point 
list single exit point break_statement  programmer commonly break_statement statement condition tautology 
add break_statement loop add extra exit point top loop condition check point  break_statement 
multiple break_statement single loop dubious avoid practice 
break_statement questionable dispensable 
logic list fairly simple  restructuring list straightforward  general  effort restructure code avoid break_statement complicate logic bit require introduction additional boolean variable 
show figure program break_statement rewrite break_statement
break version introduce boolean variable  loop control logic little plicate 
break version memory extra variable time execute require extra check loop condition iteration loop 
extra memory insignificant  rare  specialized application  extra execution time imperceptible 
case  important issue complicated control logic give section code  difficult code write correctly 
situation  violate single entry point  single exit point  principle  simple break_statement acceptable loop control option 
break_statement insufficient jump completely middle nest loop 
goto statement allow program execution flow jump specified location function 
list goto statement jump middle nest loop 
 program flow will jump specified label program 
example  label name end  name arbitrary 
like variable_name  label name choose intend purpose 
label here name end come nest whi le loops 
label name identifi see section  label distinguish colon ately follow name 
label represent target goto jump 
goto label statement function 
goto statement  whi le superfluous  example 
list rewrite whi le statement show list 
early programming_language like fortran early version basic structure statement like whi le  programmer force goto statement write loop 
problem goto statement easy develop program logic difficult understand  original author code 
see wikipedia article spaghetti code http  
structured programming revolution introduce construct whi le statement result disappearance goto situation 
modern programming_language form whi le statement  goto statement largely ignore case break nest loop 
similarly restrict goto statement abnormal exit nest loop 
conti nue statement similar break_statement  conti nue statement necessarily exit loop 
conti nue statement skip rest body loop check loop condition 
loop condition remain true  loop execution resume top loop 
list show conti nue statement action 
programmer continue statement frequently break_statement easy 
transformation simple break elimination see ure loop condition remain additional variable need 
version conti nue efficient version sual gnu compiler generate machine language code list 
logic version complex continue version 
break_statement compelling reason continue statement 
programmer add continue statement last minute exist loop body handle exceptional condition like ignore negative number example initially unnoticed 
body loop lengthy  programmer add tional statement continue near top loop body touch logic rest loop 
conti nue statement merely convenient alternative programmer 
version prefer 
infinite loop design  example  long run server application  like web 
figure code left generically represent loop continue statement 
begin programmer create infinite loop accident  infinite loop represent logic error program 
intentional infinite loop obvious 
easy write intentional infinite loop 
accidental infinite loop common  puzzle begin programmer diagnose repair 
list attempt print integer associated factor 
type behavior frequent symptom unintentional infinite loop 
factor display properly  factor 
first properly display program hang 
program short  problem easy locate 
program  error challenge find 
list debug task nontrivial involve nest loop 
programmer intend stay loop long remain range 
list outer loop condition  condition false  tautology 
check inner loop condition  see acto  expression false  tautology 
condition whi le true initially gain access body 
code body modify state program way influence outcome condition check iteration 
mean code body loop modify variable condition 
eventually variable assume value condition false  loop terminate 
list outer loop condition involve variable constant 
fortunately  last statement body outer loop increment 
inner loop condition involve variable
statement inner loop modifie  imperative modify loop 
news incremente body inner loop  bad news increment operation protect body statement 
inner loop contain statement  statement 
statement turn statement body  
run correctly 
programmer debugger step program see infinite loop arise 
common technique put print statement strategic place examine value
condition  true  loop continue 
section example show power conditional execution iteration 
program  vary height width base input user 
list functionality 
program_will execute outer whi le loop body long user enter value great zero  user enter zero program terminate
expect behavior 
last statement body outer whi le  
possibility infinite loop here 
body outer loop consist statement  body enclose curly brace 
group statement enclose curly brace block form 
variable declare block local block 
variable scope section source_code variable exist point declaration end block declare 
example  variable height declare block mai body  local mai 
variable declare block body outer whi le statement  local outer whi le statement 
attempt body outer statement error 
mean variable local section code 
mean exist scope 
variable program name variable 
odd variable program name  people room name 
people  name 
similarly  meaning variable depend context  name necessarily unique 
inner loop play distinct role  
first inner loop print space 
number space print equal height tree first time outer loop decrease iteration 
correct behavior succeed move contain lead space asterisk 
second inner loop print asterisk tree 
first time outer loop  zero  left side asterisk print  central asterisk print top tree  right side asterisk print 
time loop number left hand right hand star print increase central asterisk print  tree grow wide side line move
observe + value express need number asterisk perfectly 
asymmetrical  note third inner loop require print trail space line asterisk print 
space invisible  reason print
example  prime number only divide remainder     factor 
prime number once merely intellectual curiosity mathematician  now play important role cryptography computer security 
task write program display prime number value enter user 
logic list little complex list 
loop outer whi le iterate value  
local body outer loop  introduce 
expression zero divide remainder exactly tri actor factor
execute program determine value tri factor set false exit loop break 
loop continue completion  program set false  mean find factor prime 
statement inner loop  
true  prime  print extra space separation output produce subsequent iteration 
important question ask include  
user enter  will print 
case  condition outer loop true  
inner loop skip  change true  print 
behavior correct small prime number only prime 
whi le condition ensure value
body whi le will enter 
only newline print  number display 
behavior correct 
inner loop guarantee terminate 
order enter body inner loop  change loop 
eventually  tri will equal  loop will terminate 
outer loop guarantee terminate 
order enter body outer loop  equal
inner loop teed terminate show previous answer  eventually will exceed loop will end 
version break introduce slightly complicated condition whi le move statement body  ri initialize true loop 
time loop reassign  tri will false time zero 
exactly factor
false  loop continue  false  loop end come equal
due operator precedence  parenthesis
parenthesis improve readability  expression include 
parenthesis place need   
recall post increment operator variable surround expression  variable incremente 
whi le body now contain only statement  curly brace need 
list condition statement achieve result 
list condition whi le statement achieve result 
loop rewrite follow code fragment just std   coutandone   
list happen statement contain std   ci
asterisk follow code fragment print 
asterisk follow code fragment print 
asterisk follow code fragment print 
print follow code fragment 
print follow code fragment 
rewrite follow code fragment break_statement eliminate variable 
code behave identically code fragment 
rewrite follow fragment eliminate conti nue statement 
suppose give language support structured statement like whi le 
task modernize adapt 
follow fragment adapt now structure whi le statement replace goto 
goto free still behave identically fragment 
print follow fragment 
write program accept single integer_value enter user 
value enter program print
user enter positive integer   program print 
write program allow user enter exactly twenty double precision float point 
write program allow user enter number nonnegative double precision float point value 
user terminate input list negative value 
program print sum  average arithmetic mean  maximum  minimum value enter 
nate negative value computation 
first number user supply negative  program simply print text number
redesign list draw sideway tree pointing right  example 
statement sufficient implement algorithm involve conditional execution looping 
break conti nue statement convenient
additional conditional iterative statement convenient circumstance 
additional statement include 
explore form express conditional execution iteration 
swi tch statement convenient alternative multi way statement like
reserved word swi tch identify swi tch statement 
require parenthesize expression follow word swi tch evaluate integral value 
integer type  character  boolean expression acceptable 
float point sion non integer type forbid 
body swi tch enclose require curly brace 
occurrence word case follow integral constant colon 
call integral constant case label 
label literal value const symbolic value see section 
non const variable expression expressly forbidden 
case label define position code  executable statement 
case label represent target program execution flow jump 
case label match switch expression  statement follow label execute break_statement encounter 
statement break_statement follow case label optional 
way execute set statement case label empty statement label  key  key user 
user enter statement swi tch execute 
case label match  statement follow execute break_statement encounter 
control flow transfer body swi tch 
way  break swi tch work just_like break loop  rest body statement skip program execution resume next statement low body 
miss break_statement  common error  omission intentional  cause statement succeed case label execute 
process continue break encounter end swi tch body reach 
default label match case label match 
serve catch option like final multi way statement 
default label optional 
miss case label match expression  statement swi tch body execute 
swi tch statement restriction general multi way  
swi tch argument integral expression 
case label constant integral value 
integral literal constant acceptable 
variable expression allow 
illustrate restriction  follow statement translate easily alent swi tch statement  
code easily translate swi tch statement 
variable case label 
second choice check inequality exact match  direct translation case label impossible 
last condition  variable check 
control flow switch_statement determine single value example  value  multi way statement constrained 
applicable  swi tch statement allow programmer compactly express multi way selection logic 
programmer find swi tch statement easy read equivalent multi way construct 
positive consequence swi tch statement restriction allow compiler produce efficient code swi tch equivalent
choice option  swi tch statement swi tch statement will likely fast correspond multi way
limit application convenient nonetheless 
follow code fragment assign 
conditional operator symbol 
operand classify ternary operator only 
type conditional expression dominant expi conditional expression expression
statement statement 
example  absolute value number define mathematic follow formula   word  absolute value positive number zero number  lute value negative number additive inverse negative number 
following expression represent absolute value variable 
seasoned programmer understandable  sparingly specibc nature 
here work  
condition whi le specify set include value desire range 
initialization ensure condition will true initially  program will execute loop body least time 
user chance enter value program execution inside loop 
initialization loop check artificial 
only ensure entry loop body 
unnatural check valid value user chance enter
loop check condition body execute least once
statement bottom check loop behave exactly manner 
list whi le statement check valid input 
figure compare flowchart loop 
statement general form  
condition associate end loop 
condition boolean expression enclose parenthesis 
statement exactly like statement general form whi le loop see section 
compound statement enclose curly brace 
body statement  statement  guarantee execute least once 
whi le loop convenience programmer essential programming construct 
easy transform code statement code behave identically whi le statement
practice  programmer whi le loop frequently whi le loop algorithm require top check loop bottom check loop 
whi le statement include reason 
transform algorithm express naturally bottom check loop top check loop lead awkward code 
whi le
simply count
counting frequent activity perform computer program 
program element require order program count  
variable keep track count  list  count aptly name counter variable 
counter variable give initial value 
case  initial value 
variable modify incremente program count 
way determine counting complete 
list  condition whi le statement determine counting complete contine 
specialized loop package programming element convenient statement 
call statement  general form
header  contain parenthesis  contain part  separate semicolon  initialization 
initialization part assign initial value loop variable 
loop variable declare here declare here  scope limit statement 
mean loop variable only loop 
mean free reuse variable name loop declare variable name loop variable 
initialization part perform time 
condition part boolean expression  just_like condition statement 
condition check time body execute 
modification part generally change loop variable 
change condition will eventually false loop will terminate 
modification perform iteration body execute 
notice last part modification follow semicolon  semicolon strictly separate part 
statement like body loop 
compound statement curly brace 
whi le loop  count component variable declaration  initialization  condition  modification scatter code 
loop  programmer able determine important loop control look statement 
recall list print multiplication table screen 
loop ideal step row column 
control loop now package respective statement spread place ma
version  easy programmer forget update counter variable row column 
hard programmer forget loop variable update  right front statement header 
bad programming practice following statement  
modify loop control variable body loop loop variable modify body  logic loop control long completely isolate ment header 
programmer look statement understand completely loop work 
prematurely exit loop break action violate concept keep loop control logic place header 
language allow practice  experience show avoid
violate advice  kind loop 
whi le whi le loop imply degree control regularity expect loop 
list rewrite list replace
show list  conditional expression loop limit simple test loop control variable  legal boolean expression 
programmer logical   operator create complex boolean expression 
modification part loop limit simple arithmetic elaborate 
statement support complex header  simple
ordinarily loop manage just control variable  initialization  condition  modification part straightforward 
programming situation warrant overly complicated construction  kind loop 
part statement initialization  condition  modification  body omit  
break goto body infinite loop intend 
modification miss 
programmer empty loop produce non portable delay program execution 
programmer example  need slow graphical animation 
attempt empty loop non portable reason 
program actually execute loop  slow computer will delay long fast computer 
timing program delay will differ computer
bad compiler detect code functional effect optimize away empty loop 
mean compiler_will ignore statement altogether 
common idiom intentional infinite loop statement control 
statement support omission part header  construct avoid 
intention loop allow programmer see aspect loop control place 
control responsibility handle header kind loop 
programmer select simple name control variable statement 
recall variable_name choose reflect meaning program 
come surprise common name integer control variable loop 
practice root mathematic variable  commonly index vector matrix 
mathematical structure programming analog array vector  explore computer programmer considerable loop array 
allow break  conti nue  goto statement body statement 
like whi le statement  break cause loop termination  continue cause condition check determine iteration continue  goto jump label function 
previously mention  loop control restrict header  break  conti nue  goto loop avoid 
loop rewrite whi le loop behave identically 
example  loop int      
loop conveniently package loop control header  whi le loop distribute small section code 
loop organization loop control code 
loop outperform
compiler produce essentially code construct 
loop prefer example 
follow code fragment  
print print print print print print print user enter
print follow code fragment 
rewrite follow code fragment swi tch statement 
rewrite follow code fragment multi way swi tch statement 
rewrite follow code fragment multi way swi tch statement 
rewrite follow code fragment whi le loop statement 
rewrite follow code fragment conditional operator
enter number  root root root root root root root square root 
code acceptable application  algorithm exist work fast produce precise answer 
problem code work significant scientific engineering application formula part source_code  formula involve square root way 
mathematic  example  square root compute distance geometric point    yi
electrical engineering physic  root mean square set value  
copy paste relevant portion square root code ing location source_code require square root tation 
develop program require compute root mean square 
will need copy code list program need compute square root  way package square root code reuse
code reusable package function 
function unit reusable code 
will write reusable function  examine function standard_library 
collection standard precompile code store library 
programmer part library code code build sophisticated program 
mathematic  function compute result give  example  function definition +  
function work like mathematical function 
introduce function concept  will look standard function implement mathematical square root 
 function name sequence code perform specific task 
program consist collection function 
example function mathematical square root function 
function  name sqrt  program see section 
square root function accept numeric produce double result  example  square root  present  sqrt respond 
figure visualize square root function 
programmer sqrt function program  function black box  grammer function
sq rt function exactly need square root program  
list  library function sqrt eliminate
sqrt function
table list commonly mathematical function cmath library 
compiler need augment code check see sqrt function properly 
expression function invocation  know
function service code
here  mai function caller service sqrt function 
mai call  invoke  sq rt pass value nput 
expression sq nput evaluate square root value variable input 
scene inside black box precompile code value input variable square root 
special precompile code constitute sq rt function  write programmer team programmer work library vendor tool disposal 
will write function  now will enjoy function
call function  pair parenthesis follow function name 
pass input sq rt  pass nput sqrt function   program give function access mai nput variable 
sqrt function change value mai nput variable  simply variable value perform computation 
follow simple analogy help explain communication work sqrt 
mai function work work delegate work case hard part sq rt 
mai need square root nput  write value nput variable piece paper hand sqrt 
sqrt function accept mai note begin work task compute square root number note mai give 
finish  sqrt sqrt hand back piece paper answer  sqrt throw away piece paper originally pass
receive note sq rt note discard note 
mai function continue business 
sq rt function access mai original nput variable  only copy nput  write piece  similarly  sq rt function variable work  mai oblivious way access sqrt finish return compute answer  sqrt discard copy nput analogy  function  throw away  paper copy nput mai give 
function_call parameter temporary  transitory value only communicate function 
parameter live only long function execute 
figure illustrate program execution involve simple function_call 
figure show program execution begin mai function 
here mai call sqrt function twice 
vertical bar represent time function active   function variable 
figure diagram right visualize execution program left 
time flow left right 
rectangular bar represent time function active 
program execution begin man function 
here  man call sqrt function twice 
shaded part mai bar show time mai wait sqrt complete 
observe function active duration program 
sqrt function accept single numeric argument 
parameter caller pass sqrt literal number  numeric variable  arithmetic expression  function invocation produce acceptable numeric result 
function  like sq rt  return caller 
caller result way  show list 
next last statement pass result call sq rt sq rt  compute  
caller code attempt pass parameter function incompatible type expect function  compiler_will issue error 
list show program call sqrt function time place need 
note figure caller square function  function black box  caller strictly function function accomplish task 
safely treat function black box 
service function concerned internal detail 
guarantee influence function behavior only parameter pass  affect function
function affect code  compute 
function take parameter  example  function require ment order produce result 
function select return large parameter 
function visualize function
notice parameter contain parenthesis follow function name  parameter 
caller perspective function important part  
function name identify location code execute 
function name follow rule variable_name  function_name example identifi see section 
caller exact number type parameter function expect 
caller attempt call function parameter  compiler_will issue error_message compile code 
similarly  caller pass parameter compatible type specify function  compiler_will report error_message 
function compute result return caller 
caller result compatible function specify result type 
result type return caller parameter_type pass caller completely unrelated 
function prototype  return_type list first  follow function name 
name easy function example  sq rtcompute square determine large
library function programmer directive source_code 
file specify nclude directive contain prototype library function 
mathematical function produce result  require function return value caller 
function exit expect integer_value caller  return result back caller 
prototype function return voi return_type  
exi function terminate program execution 
integer argument pass exi return operating_system value determine program terminate normally due error 
program automatically return zero mai finish execute exi call
void function useful side effect produce value compute 
example side effect print console  datum network  animate graphical image 
compute cosine value specify radian  cos cosx  trigonometric 
cmath library define constant name 
programmer constant represent infinity undefined value slope vertical line fraction zero denominator 
complete list numeric function find http  
spacecraft distance planet  fix 
satellite orbit planet circular orbit 
wish compute away satellite will spacecraft progress degree orbital path 
will let origin coordinate system locate center planet respond center circular orbital path 
satellite initially point xi  yi spacecraft stationary point xl 
spacecraft locate plane satellite orbit 
need compute difference distance move point satellite fix point spacecraft time satellite orbit 
mathematic solution follow problem  
figure orbital distance problem 
diagram  satellite begin  distance
solution  give initial  moving  rotation degree origin will yield    xi + 
square root function improve efficiency prime program 
sqrt function loaded 
caller pass double parameter  compiler generate code call double version 
caller pass float variable  compiler select float version sqrt 
pass sqrt  compiler decide version convert automatically float  double  long double 
compiler need help resolve ambiguity  duce additional variable type double compiler_will double version sqrt function 
option type cast convert integer type acceptable sqrt function 
clock function cti library request operating_system amount time execute program run 
unit return call clock system dependent  convert second constant  define cti library 
visual  constant  mean call clock return number millisecond program run 
call clock function measure elapse time 
list measure 
expression double cast require force division  result truncate integer 
comparison  efficient version  list  square root optimization take only second display prime 
exact time will vary depend speed computer 
turn program execution time take print output  compute prime number print 
compare algorithm redirect program output file 
executable program name  redirect output command line issue command 
create text file name runl view text editor 
content exactly print screen redirection
run redirection  time difference dramatic  unoptimized version erate prime number second  optimize square root version require only second generate number prime 
fast prime generator find list  completely algorithm generate prime number 
nclude cti header standard ti function program 
enhanced warning level
function exist determine character punctuation character like comma semicolon 
standard character function program  include cctype header 
random number useful game simulation 
example  board game die pair dice determine place player advance 
die cube contain spot face 
number spot range
player roll die pair dice  face meaning game play 
face roll determine random complex tumbling die 
software adaptation game involve dice need way simulate random roll die 
algorithmic random number generator actually produce pseudorandom number  true random number 
pseudorandom number generator period  base nature algorithm
generator long pattern number produce repeat exactly 
sequence true random number contain repeat subsequence 
news practical algorithmic pseudorandom number generator period large application 
programmer standard function generate pseudorandom number  srand rand  
call rand 
number print program random 
algorithm give seed begin  formula produce next 
seed determine sequence number ate  identical seed value generate identical sequence 
run program sequence display seed  
order allow program run display sequence  seed run 
establish seed run 
way  random  seed run time ti function find cti library 
call ti return number second midnight january  
obviously differ program run  execution will seed 
notice number return rand large 
pseudorandom value range maximum value implementation dependent 
maximum value visual rand function  correspond large bit si gne value 
cstdli header define constant represent large value range 
follow statement 
ordinarily need value limited range  like 
simple arithmetic modulus operator produce result need 
nonnegative integer positive integer  expression 
suppose need compute square root number program 
idea write code perform square root calculation 
source_code way help distinguish variable_name function_name 
ordinarily program_call srand function 
list  mai function sqrt function compute square root argument mai
follow code fragment part program 
fragment contain call standard library function 
answer question follow way  
code fragment contain compile time error  write word error answer 
code fragment contain compile time error determine output compile time  fragment literal output 
code fragment contain compile time error determine exact output compile time  possible evaluation write word example answer possible literal output code fragment produce 
geometry  write computer program give length side right triangle adjacent right angle compute length hypotenuse triangle 
program complex  programmer structure program way fectively manage complexity 
human difficult time keep track piece time 
easy bogge detail complex problem 
trick manage complexity break problem manageable piece 
piece detail address  detail hide possible piece 
problem ultimately solve put piece form complete solution 
program write function mai
number statement function increase  function unwieldy 
code function work call monolithic code 
monolithic code long complex undesirable reason  
difficult debug 
sequence code work correctly  difficult find 
divide conquer strategy  programmer decompose complicated function like mai simple function 
original function job delegate work function 
way original function think  work  code organization aspect  function allow bundle functionality reusable part 
see library function dramatically increase capability program 
capitalize library function possible  need function exhibit custom behavior standard function 
fortunately create function  function call numerous place program 
function purpose general write function properly  able reuse function program
recall handwritten  square root code see list 
know option standard_library function sqrt  will illustrate custom function opment write square root function base code list 
list see definition function 
clearly standard sqrt function
aspect function  
definition function specify function return_type parameter_type  code determine function behavior 
list definition function mai function 
programmer function function invocation 
function invoke function sqrt function 
function exactly definition invocation 
name function name 
name identifi see section 
type function return_type 
function_return value caller  type
parameter function specify type parameter accept caller 
parameter parenthesized comma separate list like function prototype see tion oj 
function prototype  parameter name associate type 
body function definition body enclose curly brace 
body contain code execute function invoke 
figure dissect function definition 
prompt function simply print message 
program run follow  
program execution  like program  begin first executable statement function_name mai
first line mai function simply declare variable need compiler housekeeping  next line actually begin executable code 
first executable statement print message program intent 
next statement call prompt function 
point program execution transfer body prompt function 
code prompt execute end body return_statement encounter 
prompt contain return_statement  prompt body print statement will execute 
prompt finish  control pass back point mai call prompt 
next action prompt call read valuel keyboard 
second call prompt transfer control back code prompt function 
print message 
second call prompt finish  control pass back mai point second input statement assign keyboard 
remain statement mai execute  program execution terminate 
prompt counttolq function bit underwhelming 
prompt function eliminate  call prompt replace statement body 
counttolq function  convenient simple line statement hide complexity loop 
prompt function advantage 
prompt remove call ompt replace print statement prompt  sure message print identical 
simply call prompt  know message print will identical only possible message print body prompt 
alter behavior function mechanism call parameter pass 
function write accept caller  caller supply order function 
caller communicate parameter require function 
counttolq function little want count number 
list generalize list count high caller need 
caller pass exactly integer parameter type assignment compatible integer call 
attempt will result compiler error warning   error  miss parameter call 
quick look first line prompt definition confirm assumption  
prompt declare return contain retu rn statement 
retu rn statement specify exact return caller 
return encounter tion execution  control pass back caller 
function_call specify return_statement  statement promptq  
note list  declare variable_name result inside prompt function 
variable local function  mean variable prompt 
mean free name prompt function context  will interfere result variable prompt 
enhance prompt function 
currently prompt print message 
parameter  customize message prompt print 
first line function definition  int prompt int call formal parameter 
formal parameter like variable function body  declare function parameter list  declare function body 
formal parameter parameter formal definition function 
parameter function definition call formal parameter 
formal parameter behave local_variable function body  name formal parameter will conflict local_variable mal parameter name function 
mean function developer choose parameter name represent parameter role function 
write function  predict caller actual parameter 
able handle value caller
compiler_will ensure type caller parameter compatible declare type formal parameter 
formal parameter parameter declare function formal definition 
actual parameter parameter supply caller caller actually invoke call function 
function definition require formal parameter declare follow function name 
caller actual parameter_type declaration call function 
give function define list  follow caller code fragment illegal  
special type voi function return
name function identifi see section 
function name purpose function 
parameterlist comma separate list pair form type_name type type name identifi represent parameter 
caller tion communicate function parameter 
parameter specify parameter list function definition call formal parameter 
parameter know argument 
parameter list empty  empty parameter list pass function caller 
body sequence statement  enclose curly brace  define action function perform 
statement include variable declaration  variable declare body local function 
body contain only statement  statement  statement regardless  curly brace require 
observe multiple piece pass function multiple parameter  only piece pass function return 
recall great 
problem divide piece plywood inch long inch wide square piece maximum size waste material 
  cut plywood twelve inch inch square piece show figure 
cut square large inch inch  plywood square 
figure show large square fare 
addition basic arithmetic geometry  function play vital role cryptography  enable secure communication across insecure network 
list implement straight forward naive algorithm seek potential factor integer small value user 
algorithm efficient  especially large number 
logic easy follow  deep mathematical insight require 
soon will see algorithm computing 
need compute place program  package code function copy multiple place 
follow code fragment define function compute great common divisor integer 
determine large factor divisor common parameter  
function name gcd expect integer argument 
formal parameter name numl 
return integer result 
body declare local_variable  mi  local statement 
last line body return_statement 
return_statement require function return value 
avoid function require retu statement 
void function retu statement  simply consist retu rn follow semicolon word  return value  like gcd return_statement 
voi function contain retu statement simply return end body 
recall section local_variable meaning only scope 
mean write function name local_variable fear name part program 
function local_variable name variable influence
local function definition hide code function definition 
formal parameter local_variable  reuse name formal parameter function problem 
strange name function program refer distinct variable 
block statement function definition constitute context local_variable 
simple analogy help 
united states  city street name street  example  thoroughfare name street francisco  california 
dallas  texas street name street 
city town context term street 
person francisco ask   will receive direction francisco street  dallas ask question will receive dallas specific instruction 
similar manner  assign variable function block localize identity function 
think program execution person travel united states
program thread execution execute statement time  mean compiler current context interpret name encounter statement 
similarly  risk overextend analogy  person physically locate city time 
street bustling  multi lane boulevard large city  street name remote  rural township narrow dirt road 
similarly  like name variable completely type 
variable_name function represent integer  function string variable_name
advantage local_variable occupy space computer memory only function execute 
space allocate local_variable parameter function begin execute 
function finish control return caller  variable parameter scope  memory hold free purpose run program 
process local_variable allocation deallocation happen time caller invoke function 
handle memory management program execution find section once write complete function definition function program 
invoke programmer define function exactly way standard_library function like sqrt section rand section 
function_return value declare void  invocation expression type allow 
parameter function_call know actual parameter 
function gcd call part assignment statement  int   
variable  expression  literal freely actual parameter 
function compute return result 
result assign variable 
function_call parameter mechanism work 
actually simple 
actual parameter  order  assign bind formal parameter function definition  control pass body function 
function body finish execute  control pass back point program function call 
value_return function  replace function_call expression 
statement int   integer_value assign
expression right function_call  function invoke determine assign 
value variable val assign formal parameter numl  literal value assign formal parameter 
body gcd function execute 
return_statement body encounter  program execution return back function call 
argument return_statement value assign
process copy actual parameter formal parameter work exactly like assignment 
mean compiler  possible  automatically will widen narrow see section value actual parameter compatible correspond formal parameter  example  val declare cha value automatically copy temporary location convert nt 
temporary value bind formal parameter numl 
note gcd call place program  parameter value pass invocation  gcd compute result invocation 
invocation example include  
result call assign
right side assignment statement evaluate assign left side  original value calculate  function_return value update
function_return ger value result actual parameter function_call 
pass result function_call actual parameter function_call call_function composition 
compiler_will report error function_call agree function definition 
possible problem include  
number actual parameter agree number formal parameter 
pass actual parameter assignment compatible formal parameter 
example  pass std   object define  int  std   error  second parameter wrong type compiler_will detect std   coutis valid int report error 
result context expression type allow 
example  function return void int expect  std    error  srand return
mean value actual parameter copy formal parameter purpose execute function code 
work copy actual parameter  function execution affect value actual parameter caller 
list illustrate consequence pass value 
increment  begin execution increment  end execution increment  increment  memory variable mai unaffected ncrement work copy actual parameter 
support way pass parameter call pass reference 
pass reference duce section function communicate return_value caller way caller pass parameter value 
prompt function see early  
informally return result variable  return only value result variable 
caller access
local_variable function exist only function active execute 
function_return caller local_variable disappear memory 
subsequent invocation  function local_variable reappear function active disappear finish 
list illustrate important point organize program  
complete work program long limit mai function 
effort test primality delegate separate function  ma focus simple task  generate number function hard work ing give number prime  now simple logically coherent 
function coherent focus single task 
coherence desirable property function 
function complex try difficult write correctly debug problem detect 
complex function decompose small  coherent function 
original function call pler function accomplish task 
here  mai concerned determine give number prime  simply delegate work function finding 
function precede comment nature function 
explain meaning parameter  function return 
comment mai function  mai parameter  return code operating_system program termination 
exterior comment function comment function explain detail function accomplish task 
call return depend pass
mean express condition like 
expression suffice 
just loop exactly entry point exactly exit point  preferably function_will single return_statement 
simple function small number return
now easily adapt concept function 
list function_name nt range 
high low value specify parameter 
function flexible program completely range specify still work correctly 
function suppose call low number pass parameter high number pass second parameter 
function_will accept parameter
important component program now function  detail perfect independently mai
note result call roll pass directly argument
call  value mai hei ght variable copy formal parameter tree name hei ght 
compiler keep track hei ght base declare 
just represent finitely decimal base number system  represent exactly binary base number system fix number digit 
problem arise imprecision  software application write float point number perform precise calculation  direct spacecraft distant planet 
case small error result complete failure 
float point number safely effectively  care 
build confidence float point number  list  
add  just list  now lem 
represent exactly constraint double precision float point representation  repeat addition lead round error accumulate time 
+ round equal  add time  exactly 
compare point number essentially determine absolute value difference small  example  
ab function introduce section incorporate
short circuit evaluation boolean expression involve logical see section  operator equality  elaborate check perform 
function like equal compare float point value equality 
decompose code function show ing 
goal collection function simple 
want program structure logically organize 
figure trace activation function list
list  function play specific role  example  row header print label row print vertical bar separate row label body table 
reuse function list 
notice long nest loop program 
observe function contain loop 
time loop call pri  pri contain loop 
nest iteration  still present 
realistically  functional decomposition list extreme 
relative simplicity program justify separate function narrow focus  complex software system decompose manner 
only list give insight take complicated problem break simple  manageable piece  program understand function invocation process work 
see situation user wish print multiplication table list 
function type void label return arrow 
mean mai value_variable 
true variable     parameter
variable maintain automatically begin execute left end bar space release finish right end bar  printing table program_call pri time  call function parameter row column local_variable col come life disappear function_return 
follow point important parse process  
early definition twi ce function_declare identifi twi ce compiler 
quently compiler expect caller twi ce pass single argument compatible nt type 
compiler know call twi ce will_return integer_value 
parenthesis name twi ce statement expression function_call 
parenthesis integer literal  clearly compatible nt type 
expression twi ce evaluate nt  operator integer_value std   output_stream object 
compiler verify code function twi ce function correctly 
place twi ce definition mai function definition  compiler_will report error twi ce call mai
compiler parse source_code line line top bottom file 
compiler see identifi first technically  run time environment allocate space local_variable point declaration 
variable declare block  like temp body  variable discard end block execution 
compiler need know function return_type parameter_type order verify caller invoke function correctly 
turn satisfy compiler need know twi ce function mai full definition 
list alternate organization
essentially function definition tion body 
semicolon terminate declaration  curly brace function_declaration 
name parameter 
function_declaration compiler need determine caller invoke function correctly 
function caller declaration source_file 
mean code twi ce declaration twi ce  code function independently declaration twi ce 
list localfuncdefl list concrete example difference local global declaration 
note allow declare function body function 
argue represent way compile code execute ma method begin run first  call function 
read source_code top bottom see detail mai function see implementation detail function mai call 
frequent way organize function source_code separate function_declaration  function invocation  function definition distinct file 
function_declaration header_file  function definition file  call code include mai separate file 
compiler compile file separately  produce multiple machine language object file file visual 
linker combine separate object file single executable file 
technique detail 
practice comment function definition programmer who need extend function 
essential include  
purpose function 
function purpose evident merely name 
especially true function perform complex task 
sentence explain function helpful 
role parameter 
parameter name type obvious definition  purpose parameter apparent merely name 
helpful purpose parameter 
function number interesting function purpose  exactly return caller 
helpful clarify exactly value function produce 
require commercial environment  
author function 
specify exactly who write function 
email address include 
question function arise  contact invaluable 
date function implementation last modify 
additional comment add time function update 
update specify exact change person responsible update 
code adapt source  list source 
reference consist web url 
follow fragment show beginning comment function definition  
armed knowledge function definition  rewrite list
list list standard sqrt function cmath library 
generally speak  choice standard_library function write custom function functionality  choose standard_library routine 
advantage standard_library routine include  
effort produce custom code eliminate entirely  devote effort part application development 
write custom code  test ensure correctness  standard_library code  immune bug  generally subject complete test suite 
library code developer  lurk error expose early  code exercise only program write  error apparent
program wide audience  bug lie dormant long time 
standard library routine know trust  custom code  due limited exposure  suspect gain wide exposure adoption 
standard routine typically tune efficient  take great deal effort custom code efficient 
standard routine document  extra work require document custom code  write documentation hard work 
list test custom square root function range float point value 
list equal function list 
third parameter specifie tolerance  difference first parameter specify tolerance  first parameter equal 
function equal function 
function equal function
observe  tolerance square computation small tolerance check result 
function  strict notion equality 
wrong answer billion test represent error rate 
error rate small  function perfect 
value cause function important application  function trustworthy 
happen caller pass parameter function 
variable point local function local block body conditional iterative statement 
local variable desirable property  
local_variable occupie memory only variable scope 
program execution leave scope local_variable  free memory variable 
free memory local_variable function invocation 
variable_name function conflict 
compiler derive local_variable function declaration variable function 
compiler_will look declaration local_variable definition function 
way local_variable function interfere local_variable declare function 
local_variable transitory  value lose function invocation 
desirable variable live long program run  function complete 
contrast local_variable  global_variable declare function local function 
function text source_code point global_variable declaration legally access modify global_variable 
list modification list global_variable name result share function program 
list global_variable  argl  
name long mai function 
global_variable access modify function  nput  report  add  subtract 
course translate statement function machine language  compiler resolve variable encounter follow  
variable local declaration local_variable parameter  compiler_will local_variable parameter  global_variable name exist 
local able  take precedence global_variable 
local declaration hide global declaration scope local_variable 
variable local declaration declare global_variable  compiler_will global_variable 
variable local declaration global declaration  variable undefined  error 
situation local_variable hide global_variable name  way access local_variable like name global_variable local_variable scope 
suppose program global_variable name function local_variable name 
statement  scope local_variable will assign local 
follow statement will assign global_variable scope local_variable name      operator call scope resolution operator 
special syntax global_variable access function  only access hidden global_variable 
value local_variable statement variable give value  initialization assignment  compiler_will issue warning 
example  visual 
value properly assign 
global variable  need initialize
numeric global_variable automatically assign value zero 
mean initialization ing superfluous  will assign zero automatically 
boolean global_variable automatically assign zero zero represent false see section 
general  local_variable prefer global_variable reason  
function local_variable exclusively perform input operation like std   ci object  behavior influence only parameter pass
non local_variable function behavior affect function modify non local_variable 
simple example  follow trivial function program  
guess  correct 
ncrement function simply return add argument 
ncrement function behave way time call argument 
next  follow function program  
difficult locate error function fault tion assign incorrect value global_variable 
situation complicated 
function only local_variable test correctness isolation tion  function affect behavior function 
function behavior only influence only parameter 
exclusion global_variable function lead functional independence 
function depend scope correctly perform task dependent function 
function operate global_variable depend global_variable correct state function complete task correctly 
nontrivial program contain dependent function difficult debug extend 
truly independent function global_variable programmer define function help test correctness isolation 
additionally  independent function copy program  paste program  work modification 
functional independence desirable quality 
global_variable  global constant generally safe
code function global constant dependent constant  constant change  developer need worry function access global constant disturb value 
global constant function drawback term program maintenance 
program evolve  code add remove 
global constant remove meaning change course program development  change will affect function global constant 
list global constant assist display digital timer 
function control initialization update deal strictly
logic mai keep simple 
code extract  give number isolate pri
pri function now anytime value need express   format 
second conversion constant   global constant function access
case function constant  sense place conversion factor place 
function divide responsibility way develop independently  design clean program easy develop debug 
constant ensure share value corrupt function 
exclusion function definition global_variable global constant guarantee will produce result give parameter value 
behavior totally predictable 
ncrement modify global_variable  ing way influence program behavior 
increment pure function 
pure function perform input output example  std   std   ci object  global_variable 
ncrement pure  compute function impure 
follow function impure perform output  int nt 
pure function simply compute return_value observable side effect 
space computer memory local_variable function_parameter allocate run function begin execute 
function finish return  memory function local_variable parameter free purpose 
function call  variable local_variable parameter will occupy computer memory 
function local transitory  function ordinarily retain call 
way variable local function retain call 
ing show declare local_variable staff allow remain computer memory duration program execution 
local declaration static int  allocate space assign zero once beginning program execution 
space set release program finish execute 
recall list include follow function  
caller prompt loop like 
notice caller responsibility keep track proper number pass ompt 
caller mistake pass wrong number want manage detail 
move responsibility track input prompt  static variable possible  list 
local static variable inherit programming_language  need ishe introduction object see 
function stati variable way implement executable code persistent state 
object natural flexible way achieve effect 
 program multiple function name 
function program name  function overload 
function compiler know associate call function definition 
compiler identify function name  function uniquely identify signature 
function signature consist function name parameter list 
parameter list  only type formal parameter important  name 
parameter_type match exactly  number position  function signature
follow overloaded function  
overloaded function convenience programmer 
overloaded function allow programming_language support overload  name create function perform basically task accept parameter_type 
programmer choose name similar function let compiler properly resolve difference 
overloading important issue constructor  special function_call object creation 
follow call 
see  caller supply parameter specify parameter default  default caller call 
mix non default default parameter parameter list declaration  default parameter parameter list non default parameter 
overload see section enable programmer write definition function name 
mix overloading default argument produce
factorial express
factorial define nonnegative integer 
mathematician precisely define factorial way  
note factori al function slightly optimize change condition
figure trace function activation recursive function factori al call mai argument 
arrow activation bar argument pass caller  arrow show value pass back caller 
length bar represent time invocation function active 
function optionally call definition  base case 
sort conditional execution statement select recursive case base case base parameter pass function 
invocation correspond base case call move execution close base case 
function recursive execution converge base case 
recursive invocation bring function execution close base case 
function_call clause statement 
base case execute condition statement true 
define only nonnegative integer  initial invocation facto ri al pass value zero great 
zero parameter base case result recursive call 
positive parameter result recursive call parameter close zero
nature recursive process progress base case  recursion terminate 
easily write non recursive function  list show 
function recursive non recursive version 
generally  basic algorithm recursive non recursive function  non recursive function_will efficient 
function_call expensive operation compare variable assignment comparison 
body non recursive function invoke function  recursive version call function call last recursive invocation 
iterative version efficient recursive version 
iterative version function technically efficient recursive version  system tell difference 
execution time difference version negligible 
reason function  grow  fast  mean return fairly large 
acto ri al large value fit
work  efficient 
run list will see gcd terati function compute result give argument 
list showcase difference performance function compute gcd large integer 
gcd function produce result fast terati 
note gcd function recursive 
difference algorithm 
list express gcd function recursively  hard rewrite still follow euclid algorithm loop recursion task exercise end
concept algorithm solve kind problem understand express recursively 
later  once detail recursive version perfect  developer rewrite algorithm iterative fashion 
list example recursive function 
segmentsl function 
beginning infinite fibonacci sequence see kipedia 
sequence integer begin follow 
subsequent element sequence sum precede element  third number +  fourth number +  fifth number + 
number comprise fibonacci sequence know fibonacci number 
note fibonacci number
mathematical property fibonacci number bear diverse field biology  nomic  art 
common problem compute lb fibonacci number 
zero th  st  nd  rd  th  th 
recursive function compute th fibonacci number follow easily definition fibonacci sequence  return nth fibonacci number int fibonacci return  return  
facto rial function compute correct result  tendency call time 
figure recursive computation offibonacci 
rectangle represent invocation fibonacci fuunction 
call top diagram represent initial call offibonacci 
arrow pointing argument pass invocation offibonacci  arrow pointing represent value_return invocation 
invocation fibonacci arrow pointing away invocation represent base case  observe invocation receive base case 
see recursive process fibonacci invoke function total time 
possible reuse function copy paste technique only function definition programmer define global_variable  programmer define global constant  programmer define function 
function programmer define external entity  copy paste extra code order function compile 
name external variable function copy conflict exist name will compile rename offend variable function resolve conflict 
change code opportunity introduce bug accidentally  process require absolute care 
avoid issue introduce copy paste function wish reuse program only local_variable parameter 
function truly independent function reuse easily multiple program 
notion copy source_code ideal 
easy copy incomplete error introduce copy 
code duplication wasteful 
program system need function  scheme include code 
redundancy waste space 
finally  compelling demonstration weakness copy paste approach  discover bug function program build
discover error fix program still will contain bug 
source_code update  recompile 
problem complicated program author 
contact multiple developer tell fix function 
situation similar update correct function efficient 
problem program define function  function definition mean identical  mechanism tie common definition
like reuse function copy
fortunately  way develop function separate file combine code independently develop function
compile source_file separately  linker combine compile code executable 
need way compiler verify call code source_file correctly invoke function define source_file 
simple line code list prime 
visual studio  simply add project specify header_file  name prime 
file contain prototype function see early discussion function prototype section 
caller code intend function nclude file compiler check see caller function properly 
attempt  example  pass argument result compiler error prototype specify single integer argument 
require  serve check see implementation code file faithful prototype specify 
file compile separately  compiler_will report error implementation disagree header_file 
note file contain mai function  mai will file 
observe need nclude ostream header  std   cout std   ci object file 
cmath header nclude sqrt function 
visual studio will automatically compile link
visual studio command line tool  order build type 
executable file name determine name first source_file list  case primetester 
gcc tool visual studio  order executable name primetester microsoft windows version gcc tool  issue command 
gnu compiler_will separately compile source_file produce machine language object 
function now readily program 
function program  compile place special file call library 
form need recompile time build require
place dynamic library  code load link nin time share execute program 
cover library creation text 
  list clock function ctime library measure elapsed time section execute program 
program programmer aware type constant  define ctime header_file 
programmer clock function properly correctly perform arithmetic include messy type cast operation 
armed knowledge global_variable section separate compilation multiple source_file  programming interface low level timing function library 
observe code list allow client code restart later lose previously accumulate time 
implementation global_variable  sta runni ng maintain state
global_variable influence function   
fourth function_return value variable 
trace type messy arithmetic casting
module simple interface caller hide detail timing actually happen 
ease module  servere limitation 
suppose wish measure long take function execute function execution  separately time small section code function 
function finish execute  like know long take function job long portion code take execute 
essentially need independent timer  module possible conduct taneously timing 
will see superior way model execution will object enable maintain simultaneous stopwatch need 
compiler generate machine code take care detail
system software like operating_system device driver need access specific memory location order interoperate hardware 
system programmer  able write code access low level detail 
developer high level application need access address variable achieve specialized effect 
byte computer memory number unique address 
first address  location number sequentially maximum value allow operating_system hardware 
variable store memory  variable live address 
operator call address operator 
regardless type expression 
address just nonnegative integer_value  special notation deal address 
follow declaration 
symbol show variable declaration variable pointer 
will refer variable place memory 
case  sequence assignment allow pointer refer variable 
order access memory pointer  unary operator 
context declaration  unary operator call pointer dereferencing operator 
continue code sequence int   int   statement  copy value address reference pointer
figure illustrate full sequence 
notice assignment modifie variable value 
pointer way
important note statement  first assignment statement see just single variable_name left assignment_operator 
statement legal expression represent memory location store value 
here  stand place variable  easily assign value
unary operator distinct meaning depend context  
operator inverse operator 
declare pointer assign int  uninitialized pointer  call wild pointer 
local_variable  content undetermined bit 
declare type  interpret bit address  net effect uninitialized pointer point random location computer memory 
attempt dereference   certainly ask trouble 
statement attempt write value unknown theprogramm memory location 
address part area memory operating_system set execute program  operating_system step issue run time error 
possible result misuse wild pointer 
possible  spurious address execute program domain 
case value overwrite variable compiled machine language instruction program
error difficult track overwritten value variable detect program attempt variable 
statement misuse uninitialized pointer away source_code source_file code attempt clobber variable 
program programmer naturally look code failure occur code vicinity
strict disallow mixing pointer non pointer across assignment 
system programmer need assign pointer address memory  permit assignment special kind type cast 
familiar see section will work 
strict come assignment pointer non pointer vice versa 
easy mistake omit operator need  special cast force programmer pause mixed assignment truly attempt mistake 
modern compiler support reserved word nullptr represent pointer 
platform  nullptr map address zero  bound running program 
dereference result run time error 
adept programmer find source null pointer access problem quickly debugger 
allow direct integer assignment pointer  int  
programmer assign pointer point nullptr keyword
compiler support exist source_code  literal zero assignment still work 
nullptr keyword improve source_code readability 
represent integer_value pointer type  follow statement legal declare pointer integer  
way  first statement change point  second statement change memory point 
superficially  statement look similar easy confuse 
next  statement 
nullptr reserve word part standard 
name nullptr simply identifi example  variable function_name old er 
nullptr constant literal zero sidere null pointer reference 
backwards compatibility old  allow place nullptr  possible avoid practice write
nullptr literal allow compiler perform type checking 
see suppose programmer believe variable pointer integer  simple integer  
case compiler powerless detect problem integer  zero valid integer_value 
integer pointer  compiler_will flag following  programmer believe pointer integer nullptr  
support kind variable way similar pointer 
symbol part type_name variable declaration  int reference variable 
declaration create variable refer memory location variable
alias
pointer variable  treat variable dereferencing
list demonstrate reference variable alias variable 
reassign change exactly way  reassign change exactly way 
variable  hand  independent
reassign affect  reassigning affect
space symbol declare reference variable significant  specifically  statement 
reference syntax simple pointer syntax dereference reference variable order assign memory location refer 
ptr pointer ref reference follow statement  
reference variable initialize actual variable declare 
pointer variable declare initial value assign later 
follow statement  int legal  will assign later int  illegal  initialize declare attempt compile code visual prompt compiler issue error error  reference initialize 
way bind reference variable variable lifetime 
follow code fragemnt  
declaration bind variable life
statement simply assign value reference 
contrast  freely bind pointer variable variable choose time 
reference variable  example here work like pointer bind variable redirect point
pointer  illegal attempt assign nullptr reference variable 
difference reference pointer will explore here 
reference variable simple syntax pointer variable pointer dereferencing operator work reference 
major difference pointer reference adopt pointer programming_language  reference 
programmer library tion write important mix reference code 
section reveal ver important practical application pointer reference role enable pass reference function 
default technique pass parameter function pas value see section 
unfortunately  swap function simply interchange copy actual parameter  actual rameter
like write function interchange caller variable 
pass reference achieve desire effect 
pass reference way  pointer parameter reference parameter 
pability allow function modify value variable caller 
list correct version variable interchange program 
formal parameter swap  pointer integer  integer
order access integer pointer name refer  dereference 
swap body prefix pointer dereferencing operator  
statement int  assign local_variable value variable point 
mai pass address first parameter call swap  case point effectively way access memory location mai
function assign value mai variable
swap statement  
reality  pass reference pointer still pass value 
pass copy value  pass copy address 
difference attempt reassign reassign memory point 
original address copy address  still address numeric location memory 
support pass reference pointer see section 
program library  programmer familiar pointer technique pass reference 
 simple way implement pass reference reference parameter 
formal parameter swap  reference integer  signify symbol follow declaration 
reference exactly like integer  need dereference operator change value integer aliase 
reference  alias variable memory location
mean modify  modify variable reference  case mai
statement int  assign local_variable value way statement ultimately assign value
reference parameter introduce advanced object orient feature implement cleanly 
argue simple situation like swa function  pointer pass reference desirable reference parameter pass reference pointer pass reference  caller force pass address actual parameter modify 
way doubt pass reference
reference parameter  pass value pass reference distinguish call site  call reference parameter look exactly like pass value invocation 
general  pure pass value_function prefer pass reference function 
function pass reference cause side effect 
mean change state program way determine only look inside function see work 
function access global_variable see section cause side effect 
program development easy function treat black box perform computation isolation possibility affect local context 
result function work assign variable change state program  change responsibility caller  responsibility function
pass value  function parameter local_variable come existence function execute  parameter local_variable disappear function finish  affect function execution 
side effect free function develop test isolation rest program 
once programmer satisfied correctness  need touch remainder system develop 
function side effect  dependency part program  change system require programmer modify evaluate exist function 
function contain conditional statement loop  base datum receive 
code function  fix compile time 
follow function  
function_return result time pass parameter
evaluate function sense behave differently depend argument pass caller  add parameter 
way call evaluate expect multiply parameter
evaluate function hard code perform addition 
want evaluate function able perform arithmetic operation time program execution 
unfortunately  evaluate currently write adapt perform arithmetic operation 
news rewrite evaluate flexibly adapt caller change arithmetic need 
allow programmer pass_function parameter function 
function return function result 
function accept function parameter return_function result know high order function 
will see  high order function open possibility enable customize behavior function plug function achieve effect 
achieve high order function function pointer 
program execution  compile machine language code function reside computer memory program able invoke function 
mean function memory address just variable specific memory address 
pointer function hold starting address compile code function 
parameter name pointer function accept integer parameter return integer result 
list  first parameter caller pass evaluate address function prototype match formal parameter specify evaluate definition 
multi ply function qualify accept integer parameter return integer result 
expression evaluate   
relaxed syntax function pointer apply pointer datum 
function pointer restrict function_parameter 
give definition follow code fragment legal  declare pointer function accept 
code fragment part complete program print 
high order function function pointer powerful tool develop flexible program 
function parameter dynamically customize behavior function  essentially  ge pass function 
will put high order function 
variable  determine address computer memory 
give declaration  
complete follow function assign reference parameter component point intersection line 
first line pass point jci  yi  second line pass point    
line intersect single point parallel  function assign infinity ix iy 
infinity double precision float point constant define cmath header_file 
represent large number effectively treat infinity 
variable point assume only value time 
see  individual variable create interesting useful program  variable represent only value time limitation 
list average number enter user 
program conveniently display value user enter compute display age 
suppose number value average increase 
list guide  introduce twenty additional variable  length program_will necessarily grow 
average number approach impractical 
list modify average value easily ing separate change constant 
code change average number difficult 
original age program  display number enter 
significant difference  retain value enter reason  
value redisplaye entry user visually verify correct entry 
programmer want display value persistent way  example  user type value graphical user interface component  like visual grid spreadsheet 
sophisticated program need process value way  example  wish display just value enter value like great zero  limit determined user finish enter number 
situation retain value variable future recall 
will examine common sequence type  vector array 
vector array sequence type sequence imply element order 
nonempty sequence follow property  
nonempty sequence unique first element 
call linear ordering 
linear ordering begin first element repeatedly visit successor element reach last element 
ambiguity element come next sequence 
data_structure examine std   vecto rs  primitive array  std   ray  sequence type 
vector name  access value contain position block memory manage vector 
vector store sequence value  value type 
collection value type homogeneous 
declare way  vector 
declare initial size follow  nt  
here initially hold integer 
element zero default 
note size 
note element curly brace  parenthese 
list element curly brace constitute initializer list 
kind declaration practical only small vector 
figure conceptual illustration vector    
visual studio support initializer list syntax 
code fragment show square bracket allow access individual element base element position
number square bracket distance beginning
expression li st element beginning distance zero beginning  second element distance away beginning 
execute assignment statement  li st conceptually look like figure classifie square bracket   binary operator  require operand  name index 
vector hold valid data_type 
follow code fragment declare vector differ type  
here li st empty contain integer_value  collecti double precision point number initially contain value contain initializer  letter hold ercase version first letter english alphabet 
figure illustrate object 
observe key point 
vector store element contiguous block memory 
mean  example  memory occupy element index follow memory occupy element index element index 
element locate numeric index 
first element index zero 
figure vector contain type element 
note object 
subscript nology come mathematician who subscript reference element mathematical sequence example  represent second element mathematical sequence 
convention mathematic  first element position zero 
expression li st read aloud li st sub  consequence zero begin index  hold element  last element  
element access index behave just_like variable type  example  
follow example illustrate variety expression qualify legal index  
compiler_will issue warning float point index reason 
element index index  possible element locate index  execute program_will truncate float point index integer order select proper element
integer contain element  follow loop print element 
variable value start end  last valid position
follow loop print content reverse order  
list loop achieve generality
original program  now conveniently extend program handle value wish 
need only change definition constant allow program handle number value 
centralization definition size eliminate duplicate hard code value lead program maintainable 
suppose occurrence replace literal value 
program work exactly way  change size require touch place program 
duplicate scatter program  common error update change
duplicate update agree  inconsistency result error program 
faithfully constant program literal numeric_value  eliminate possibility inconsistency 
first loop list collect input value user 
second loop only print first print trail comma element 
comma display last element  program print last element loop finish 
compiler_will insist programmer numeric_value index  programmer ensure index bound
index consist arbitrary integer expression value determine run time  compiler check bind access  example  code 
attempt access element bound vector produce know undefined behavior 
language standard term program behavior specify  compiler writer free want 
run program venture undefined behavior will crash  continue execute indication problem behave correctly time 
word  actual program behavior system dependent compiler dependent 
code represent undefined behavior logic error  action inconsistent across platform compiler 
simply program behavior unpredictable 
unpredictable behavior incorrect behavior 
case  bound access simply access memory vector 
include memory belong execute program  modern operating_system will terminate gram produce error_message 
visual program build debug version default ide  program print content vector first time crash print second time 
microsoft window display dialog box show figure program run linux macos simply print console  
program vector  terminate message  check source_code 
follow code fragment show proper improper vector access       
support variation statement special syntax object like vector support traversal 
commonly know range base foreach  statement  version statement permit vector traversal index variable keep track position 
follow code fragment range base statement print content integer vector name vec  int vec 
read statement vec  std   cout    colon pronounce   first interation range base loop variable represent first element vector vec 
second iteration represent second element 
third time third element  forth 
declare variable assume role vector element iteration loop 
note range base loop require control variable keep track current index vector  loop take care detail  free programmer task 
general form range base statement
element variable range base loop declare reference  code
possible range base statement traverse vector 
rangebase statement iterate forward vector element move backwards 
range base statement convenient want only portion element vector 
example include visit element vector only first third element 
specialized case standard loop integer control variable 
option traverse vector creative way 
object access special function_call method 
programmer refer method member_function 
method function associate class object 
method invocation involve slightly syntax function invocation  example  obj object support method name accept parameter  invoke behalf obj statement  
dot_operator connect object method invoke 
special invocation syntax  method work like global function introduce method accept ter return value 
vector support number method  will focus 
see declare vector size space
method call increase number
method perform opposite action 
call remove last effectively reduce number
declare list add end list add end list add end list remove list remove list 
programmer short syntax exclusively  long expression illustrate square bracket operator method std   class object 
see  programmer vigilant avoid bound index operator method 
class additional method  index bound check 
expression vec bound check represent undefined behavior 
functionally equivalent expression vec 
acceptable range index  method guarantee produce run time error 
list variation listing method operator method 
run time error bad  undefined behavior bad manifest unpredictable run time error program behave differently across multiple platform 
size method return number
follow code fragment print content list  int  int   list     exact type si ze method return here std   vectorci   si 
type define std   nt class 
compatible unsigned type assign variable show
avoid additional local_variable follow  unsigned   list     notice declare type unsigned  int 
prevent warning compare 
comparison sign unsigned integer type potentially dangerous 
see take warning lightly 
 sign value  unsigned value 
unsigned data_type represent sign number 
attempt compute unsi gne minus bit system produce  definitely zero 
safe  assign value si ze method variable unsigned variable control loop iteration 
range base statement possible 
empty method convenience method  vec expression vec 
note empty method empty  simply return true empty false
clear method remove leave empty 
invoke clear initially empty effect 
clear size method will_return zero  empty method will_return true  call operator method index value include zero will exhibit undefined behavior 
case  print function pass value  program execution invocation pri will copy datum actual parameter li st formal parameter 
potentially large  generally inefficient pass value show
pass value require function invocation create object formal parameter copy actual parameter local function 
approach pass reference  twist  void nt int elem  
symbol caller invoke pri will pass reference see section 
copy address actual parameter caller formal parameter copy datum caller 
pass address efficient system address size single nt  example  contain nt 
pass value function invocation copy integer caller actual parameter function formal parameter 
section call value parameter passing prefer call reference parameter pass 
function pass value modify actual variable caller pass
observe closely function_declare formal parameter vtobeaconst reference 
mean function modify actual parameter pass caller 
pass object constant reference allow achieve efficiency pass reference safety pass value 
pass const reference pass value 
function receive ter pass value modify parameter return modify copy 
function pass const reference modify parameter pass
like function  sum function list intend modify content parameter 
sum function need only look content  parameter declare const reference 
general  function purpose modify reference const 
list function_name fill pseudorandom integer_value 
function list call method clear empty 
call clear first want ensure empty add element 
function proceed add random number random integer empty 
function return object 
list practical example function 
function examine value range begi 
function helper function 
function classifie value prime  code function add value value range  will contain prime number range 
end  prime return contain prime number specify range 
return local_variable build scalar type like int  double  char   function normally copy local_variable return caller 
copy local_variable exist only function declare actively execute 
function finish execute return back caller  run time environment reclaim memory hold function local_variable parameter space function 
return_value simple scalar type object large  especially caller pass large range 
modern compiler generate machine code eliminate need copy local 
technique know return_value optimization  come play function_return object declare function 
return_value optimization  compiler  know  variable will disappear variable return caller  generate machine language code space caller memory space  call_function 
caller maintain space object  persist function_return 
return_value optimization return vector value situation like fear time consume copy operation 
due vector contain large number element 
function mean modify content declare const reference 
generally safe return value function
support higher dimensional vector 
dimensional visualize table row column 
literally create element  element contain integer 
note type integer 
call matrix 
case  declaration specify contain row column 
figure show logical structure create follow sequence code   nt    
row arrange horizontally  value column arrange vertically 
assignment statement example  first index here signify row second index here denote column element
literally  expression mean  element index index
syntax similar initialization list dimensional vector  declare initialize 
note row set curly brace  row look like
type alia 
case typedef directive work identically usi ng alia 
inherit typedef keyword programming_language 
alias support aliase capability primitive typedef 
reason  prefer usi ng aliase typedef write pure code 
here replace explicit const std   double word auto 
piler able infer variable context  mat std   std   double  element 
build vector dimension high
slice  simply  vector 
example  statement 
practice  vector
begin extension programming_language  directly support object orient programming 
vector represent sequence type 
language primitive construct call array 
true root  support array vector 
library array vector 
addition  program large number library build past + year  library process array 
modern construct like std   suit role array play past  nonetheless important programmer familiar array 
array variable refer block memory like hold multiple value simultaneously 
array value contain access position block memory designate array 
like element array
array local global_variable 
array build core language 
mean need add include directive array program 
array come variety  static dynamic 
programmer supply static array declare example  follow statement  list array integer int  declare li st array integer 
value square bracket specify number element array  fix life array 
value square bracket constant value determine compile time 
literal value symbolic constant  variable 
contrast declaration initial specify variable value determine run time  int 
number square bracket  least large number element initialization list 
equal symbol require array initialization 
optionally equal symbol show here initialize vector  require vector 
declaration omit initializer list  int  
code fragment show square bracket point declaration allow access individual element base element position block memory assign array 
syntax identical object 
vector  first element array index 
compiler number type array determine memory allocate array 
array declaration  example  
vector  compiler_will insist programmer integral value index 
identically vector  programmer ensure array index 
programmer supply number 
undecorated array name source_code behave like constant pointer beginning element array 
array pass actual parameter function_call  
clear function actually modify content array 
function work array actual element  copy element 
array  default pass reference element contain 
default  array content open corruption errant function 
order protect array
directly support empty array 
physical array contain least element 
time array conceptually empty  example  wish pass empty  array sum function 
pass second parameter empty array contain element  pass first parameter 
array will need create real array truly need 
array name source_code reference location memory  address first element element index array 
way array name similar constant pointer see section pointer 
treat way array identifier like pointer 
similarly  direct pointer point array  treat pointer array 
short way accomplish  reference array location memory 
assignment statement clearly strate association array variable pointer variable 
note opposite assignment impossible  array declare left side assignment_operator 
pointer variable participate addition subtraction expression 
statement + +  change address store subsequently pointer will point next integer position memory 
assign array  incremente redirect point next element 
expression way write array indexing operator pointer 
type require byte storage  incremente pointer simply add address hold 
amount add depend type pointer  example  system bit byte integer  add integer pointer variable increment address  
compiler know type pointer variable programmer declare variable 
compiler  automatically adjust arithmetic work properly 
pointer point memory array type array  incremente pointer correctly reposition pointer point next element array 
expression + dereference address position away address reference
pointer notation represent array parameter function 
array print 
recursion terminate array length zero 
pass pointer array array size  pass pointer 
first pointer point beginning array pointer point just past end array 
list show square bracket array access
advantage begin end pointer approach allow programmer pass slice array function  example  wish print element array index index 
programmer need worry manage memory static array 
compiler run time environment automatically ensure array space hold element 
space hold local array free automatically local array scope declaration 
global array live lifetime execute program 
memory management static array  work just_like scalar variable 
static array significant limitation  size static array determine compile time 
programmer change size array source_code recompile program  once program compile executable program static array size fix 
application circumstance execute program determine size array 
static array lack flexibility 
list create array hold million entry 
notice array number global_variable local mai
system limit amount storage local_variable function 
local variable reside area memory know stack 
local variable exist memory only function invoke  stack grow shrink function execute return 
global variable  hand  exist computer memory life program execution 
global variable store know static memory 
limit amount static memory global_variable amount memory ram virtual memory disk   global limit high local limit 
million double precision float point number consume byte megabyte visual system 
default stack size local_variable visual only megabyte  stack size increase adjust compiler linker build option 
approach take list work  waste memory resource 
modern computing  user multiple program open time 
program tie maximum amount memory need  real memory ram computer will force virtual memory shuttle portion run program memory disk drive 
virtual memory access greatly degrade speed program  user experience suffer 
important program resource wisely 
statically allocate large array need approach 
statement space single pointer  merely byte bit system byte
value expression start address newly allocate_memory block 
access dynamic array pointer  static array array behave like constant pointer  pointer reassign point
reserved word memory array element  classify operator 
area memory dynamic allocation area local_variable stack global_variable static memory 
dynamic memory come heap 
variable local mai live stack 
pointer  store memory address 
return address memory heap 
need worry array big local mai content consume stack space 
execute program automatically stack local_variable function caller invoke function 
execute program automatically deallocate local_variable function_return 
programmer need explicitly manage local_variable 
dynamically allocate_memory  require attention part programmer 
statement delete  free space hold delete free memory hold array 
programmer sible deallocate memory allocate
notice square bracket empty 
run time environment keep track amount memory free
develop habit ensure associate call delete 
delete statement omit list  program case likely will behave differently operating_system reclaim dynamic_memory program hold program finish execute 
problem arise long run program allocate deallocate dynamic_memory time 
program run extended period time  like web server operating_system kernel  crash due failure properly deallocate memory 
condition know memory leak program overtime memory release memory back delete 
eventually program heap space crash 
behave like constant pointer  reassign name left 
code will compile 
declare array  dynamic populate fill increase value copy array
illustrate key difference vector array  possible assign array 
array static array  simple assignment illegal 
array dynamic array 
figure show process work 
important note allocate dynamically program eventually delete free space long
failure properly deallocate constitute memory leak 
follow scenario  
only simple assignment create alia  create memory leak 
reassign originally point block memory allocate behalf  pointer reference block memory  block unreachable execute program 
list require user enter front number value average 
inconvenient  people notoriously poor counter 
solution allocate minimal size  resize fill
list approach 
notice programmer listing 
vector  fix size 
impossible change size static short edit source recompile 
order change run time size dynamic 
just support higher dimensional vector  support multidimensional array 
follow statement   declare dimensional integer 
case  declaration specify contain row column 
figure show logical structure create
row arrange horizontally  value column arrange vertically 
assignment statement example  first index here signify row second index here denote column element
array initialize manner first subscript optional  second subscript
declaration parameter complicated  vector  simplify syntax aliase statement  statement double  define name 
give alias statement define name mat express
vector  allow array dimension high
slice  array
implement string array char 
language additionally support string object see section 
language  only option char array 
term string refer array character language 
section  mention term string refer string 
string array character 
string literal sequence character enclose quotation mark 
mean last character array ascii zero  
space reserve number character string  include null terminating 
array character properly null terminate 
follow code fragment safe acceptable  
follow code fragment safe  
string hold viable character plus null terminator 
user type short word length character  problem 
time user type character will fit array  execute program_will problem 
problem know buffer overrun 
case  buffer overrun lead buggy program 
bad case  clever user exploit buffer overrun compromise software system 
buffer overrun logic error take great care avoid
follow code safe way user input  
second parameter specify maximum length string  include terminate null character  will place string 
last argument  stdi construct object std   ci 
order program include cstdio header 
follow code beg disaster  
case point random location memory uninitialized  code allocate buffer receive input character std   ci 
program behavior execute code undefined  likely will lead program crash 
insidiously  depend operate system manage memory  program run fine time crash only rarely 
regardless  program contain bug 
pass array function caller size array function process array properly 
string null terminate  size
function list determine character present string 
function list pointer notation traverse string 
need know advance number character string start beginning keep scan character turn find character look encounter null terminate character 
only way loop scan null terminate seek 
here  loop encounter null terminating  exit return null 
null simply ascii zero boolean false 
loop locate sought  exit return will ascii zero 
null ascii value great zero  call code interpret return boolean true 
standard string function include 
function_return integer zero lexicographically
function_return integer great zero lexicographically
function_return zero string identical 
follow code fragment 
function_return integer zero first character lexicographically first character dictionary 
function_return integer great zero first character lexicographically first character
function_return zero first character string identical 
familiar string code library  library string 
string tend problematic  case stri ng object see possible 
windows command prompt command 
filename call command line argument 
addition program  name 
command line argument allow user customize way behavior program launch
example user specifie file copy name copy 
program process command line argument array 
cmdlineargs extra 
program print first line show program run 
command shell print await user  command  user type remainder first line 
response  program print remain line 
parameter argc contain number count argument command line type user 
declaration cha rgv rgv array string 
notice rgv simply name file contain program 
command line argument string  integer 
important note array object associated method 
square bracket notation array represent special operator method 
square bracket array access notation part core language inherit c
creator vector library design vector behave possible like primitive array 
array part language beginning  vector add adopt syntactical feature array 
array vector square bracket element access  locate first element index zero 
access block memory hold multiple element 
vector object add additional capability convenience vector choice developer 
table summarize difference vector array 
vector close association array vector object thin wrapper dynamic array 
capaci ty pointer point memory location just past block memory allocate array 
capacity pointer present array manage vector will space allocate vector currently need 
algorithm determine amount extra space need balance demand storage economy fast call 
execute program attempt vector reach capacity  operation fast  attempt vector capacity force run time memory manager following  
resize copy array time consume process  especially size vector grow 
vector capacity tune average time perform fast need consume extra memory 
vector add value raw array convenient method add element resize array manage 
vector keep track size 
array convenient method vector
overhead vector impose raw dynamic array negligible 
prefer vector array write code 
vector  need library accept only array 
note first parameter start address wrap array  second parameter
standard  std   vector class method name datum return pointer first array vector manage 
rewrite statement
example show  object array danger able library deal only array 
happen array need function expect easy
disadvantage technique copy element arr array manage
object demand full control array manage 
automatically free memory array scope 
force manage preexist array lead problem way  
code create array later delete content array attempt point problem 
scope automatically deallocate array manage 
code originally create array attempt access deallocate array similar predictably disastrous result 
reason developer standard_library design std   class full control manage array 
create object array create copy array 
will see easy write function generic way accept process array equal efficiency 
vector convenient data_structure work dynamically allocate array 
object orient type equivalent static array 
std   array preferred way represent statically allocate array 
order std   ray class follow preprocessor directive  ttinclude array declare static array int  write arr  first expression angle bracket specify type element hold array  second expression specify array statically allocate size 
compiler able compute size  mean size integral literal define integral constant 
like static array  size specify run time 
std   vector  size std   array object remain fix duration program execution 
like std    std   array object keep track size support reassignment 
list show determine number element std   ray object size method  just std   object 
programmer manage primitive array associated pointer carefully array pointer misuse common source difficult find repair bug program 
vector effectively take care memory management problem plague raw array 
additionally  vector functionality convenience array
see  easy adapt context require array 
list algorithm develop greek mathematician eratosthene who live 
principle algorithm simple  list integer large 
prime number  multiple prime number multiple factor 
rest list mark multiple    
move next number list case  
mark prime  rest list mark multiple number    
continue process list prime want 
recall list  print prime number 
redirection see section  list take second 
comparison  list fll  take second perform task system 
comparable square root version 
list  take second run 
goal print prime number  original version average second  half minute 
square root version average second 
version average second 
value unoptimized original version take little hour minute  square root version take respectable second  version average only second run 
array type represent linear sequence element 
vector array venient store collection datum  limitation 
section will kind aggregate data_structure call associative container 
associative container permit ment access key index 
index  key restrict integer expression 
associative container choice kind problem 
single declaration statement declare integer name li st contain value   
keep track number element contain 
std   ray class common static array dynamic array 
complete follow function add positive value integer 
example  vec contain element       call ti ve vec evaluate  + + + 
function_return zero empty 
function affect content
complete follow function count number integer 
example  vec contain element      call vec evaluate  contain number  
function_return zero empty 
function affect content
complete follow function compare integer vector see contain exactly element exactly position 
function_return true vector equal  return false 
example  vecl contain element      contain element      call equal vecl  evaluate true 
contain element      call equal vecl  evaluate false second third element position 
vector unequal size equal 
function affect content vector 
complete follow function determine element
function_return true element second first  return false 
example  vecl contain element       contain element    call contai ns vecl  evaluate true 
contain element     call contai ns vecl  evaluate false first 
contain element     call contai ns vecl  evaluate false twice only once vecl  vecl contain element 
function affect content vector 
element row line  successive row line 
declaration nt   std   int  std   int  
declare ceate dynamic array name hold integer 
extra attention programmer need give static array program finish 
extra attention programmer need give dynamic array program finish 
extra attention programmer need give array program finish 
single declaration statement declare integer array name li st contain value   
array keep track number element contain 
complete follow function add positive value array integer 
example  array ar contain element       call evaluate  + + + 
function_return zero array empty 
complete follow function sum number array integer 
example  array arr contain element      call arr evaluate  + 
function_return zero array empty 
function affect content array 
element row line  successive row line 
give follow declaration function_body  
consequence omission 
list common error programmer deal dynamic_memory 
introduce fundamental vector 
sort arrange element sequence order common activity 
example  sequence integer arrange ascend order small large 
sequence word string arrange lexicographical commonly call alphabetic order 
sort algorithm exist  perform
will sort algorithm easy implement 
selection sort algorithm easy implement  perform acceptably small sequence 
sequence  represent index sequence  selection sort work follow  
examine element  
element  exchange small element 
length increase goto step 
condition step meet  algorithm terminate sorted sequence 
command goto step  step represent loop 
begin translate description
order determine element  introduce name purpose keep track position small element find
will set equal initially wish locate element element find position 
interchange value memory reference parameter
effectively interchange value variable caller  context 
need write function interchange value integer show list 
standard_library include std   swap work just_like swap function list  remove custom swap definition list replace call swap call std   swap  program_will work just
actually easy modification  simply change line  
take little effort  still possible
next question intriguing  rewrite selecti function pass additional parameter  sort way want 
sort function flexible high order function see section accept ordering function parameter 
list arrange element way selecti function 
comparison function pass sort routine customize sort behavior 
basic structure sort algorithm change  notion ordering adjustable 
second parameter selecti  sort routine arrange element ascend order 
caller pass selecti rearrange element descend order 
creative ordering possible elaborate comparison function 
selection sort efficient simple sort  advanced sort average  fast selection sort  especially large datum set 
general purpose sort quicksort  devise c
quicksort fast know general purpose sort 
sort common datum processing activity  standard library function quicksort qsort quicksort 
key function list locate  function simply lead interesting display locate result 
locate find match  return matching element  locate element find match  return 
alignment simplify di splay function 
kind search perform locate know linear search  process take straight line path beginning end element order 
figure illustrate linear search 
alternative linear search binary search 
order perform binary search element sorted order 
binary search exploit sorted structure clever simple strategy quickly zero element find  
empty  return 
check element middle
element seek  return middle element large element seek  perform binary search first half
middle element small element seek  perform binary search second half
approach analogous look telephone number phone book manner  
open book center 
name person visible page  look phone number 
person last name alphabetically name visible page  apply search left half open book  apply search right half open book 
discontinue search failure person name visible page present 
empty  zero  equal equal 
case empty bi na rch will skip loop body return 
correct behavior empty possibly contain item seek 
variable represent midpoint value compute
problem arise large  large value 
expression + overflow range integer produce meaningless result 
subsequent division late help 
result expression + overflow range integer expression + + + small value add fi st 
think  think problem   worry
large number competent  professional software engineer fall prey oversight see http  
calculation ensure 
mi location seek element check statement  loop terminate  return correct 
second statement ensure decrease increase time loop 
loop terminate reason  eventually will large loop will terminate 
loop terminate reason  function_return 
correct behavior 
second statement exclude irrelevant element search 
number ment remain effectively cut half 
figure illustrate binary search work 
implementation binary search algorithm complicated simple linear search algorithm 
ordinarily simple algorithm process data_structure potentially hold large amount datum  complex algorithm employ clever trick exploit structure datum binary search dramatically outperform simple  easy code algorithm 
fair comparison linear vs
revise linear search algorithm
notice original version linear search  loop will terminate element examine  will terminate early encounter element large seek element 
sort  need continue search once begin see element large seek value  seek large element sorted 
suppose search contain element 
bad case look element large currently loop linear search take iteration 
case look element small currently function return element 
number loop iteration range average linear search require comparison loop finish function_return 
now binary search contain element 
comparison size left half original size 
seek item find probe  number remain element search 
next time loop  number element leave half third iteration  search space drop half process cut search space half continue time loop process locate seek element run element
problem determine time set divide half only element remain solve logarithm 
binary search  bad case scenario find seek element require loop log iteration 
analysis help determine search
quality algorithm judge key characteristic  
time processor cycle take run 
space memory take run 
situation  search algorithm process sequence only extra local_variable  large sequence require essentially space 
big difference here speed 
binary search perform elaborate computation time loop  operation take time  binary search slow 
linear search simple operation loop  loop execute time loop binary search  slow 
deduce fast algorithm way  empirically analytically 
empirical test
list measure run time kind search compare algorithm empirically 
list apply linear search binary search vector size play result 
size range 
program function ti compute average run time linear search binary search 
function direct search ti perform pass parameter pointer function 
second parameter ti specify number run function compute average 
notice program average linear search run execute binary search run 
subject binary search function run execute quickly  run adequate sample evaluate performance  especially small vector binary search execution time close resolution timer 
binary search execute quickly  easily afford let ti run test compute accurate average 
list stream manipulator std   std   setpreci si dress output 
std   manipulator adjust std   number mal place  std   setpreci si manipulator specify number digit display decimal_point 
manipulator tandem allow align column number decimal_point 
vector linear search take average second system  binary search require small fraction second 
time binary search small progression time wander bit perfectly ascend order 
operating_system perform task program run 
give active program slice processor time run 
operate system interrupt execute program give task time run 
program processor time sharing imperceptible  significant difference run program 
see result operating_system attend matter binary search vector size  time slightly high expect pattern value 
ideally perform test multiple time average result accurate picture 
increase vector size  linear search run second minute  second  binary search still take second 
empirically  binary search perform dramatically linear search 
wonder binary search vector item slightly slow vector contain element 
execution perform computer run microsoft window 
microsoft windows  timer resolution clock function millisecond  value nary search near timer resolution 
window multitaske operating_system  mean manage number task program simultaneously 
measurement perform lightly loaded system   mean program execution user download file  browse web 
window  modern multitasking oss  run service program background steal processor time slice 
continually check network connection  track user mouse movement 
binary search algorithm speed couple multitaske os millisecond timer resolution lead minor timing anomaly 
addition empirical approach  judge algorithm analyze source_code function 
arithmetic operation  assignment  logical comparison  vector access require time execute 
will assume activity require unit processor   assumption strictly true  will give acceptable result relative comparison 
will follow rule analyze search algorithm  relative result comparison purpose will fairly accurate 
determine average  loop iteration vector length 
initialization happen only time call 
activity involve loop return_statement happen time 
function_return  only return execute call 
table show breakdown linear search 
determine bad case loop bi na rch iterate log time vector contain element 
initialization loop perform once call 
action loop occur log time  only return_statement execute call  statement only path choose loop iteration 
table show complete analysis binary search 
will call binary search function 
figure show plot function 
 linear function + binary function log + 
mean linear search perform binary search vector size 
code linear search complicated  complete work small vector binary search finish sophisticated computation 
unfortunately empirically compare run time search vector small demonstrate linear search fast small vector 
output list show  search complete work time resolution timer vector element 
empirically analytically  see binary search fast large vector  linear search impractical large vector 
useful possible arrangement element vector 
sort algorithm  example  work correctly initial arrangement element vector 
test sort function  programmer check see produce correct result arrangement small vector 
rearrangement collection order item call permutation 
list print permutation content give vector 
permute function list recursive function  call inside definition 
see recursion alternative iteration  permute function here iteration recursion generate arrangement glance  combination algorithm design technique here difficult follow  actually understand process ignore detail code 
first  notice recursive call argument begi large  end remain
mean recursion progress end index change  begin index keep increase reach end index 
recursion terminate equal end 
simple form function look like 
loop iterate fix number time  replace loop statement body duplicate number_time  example  rewrite code int   std     
process transform loop series statement loop perform know loop unrolling 
compiler unroll loop code execution fast 
unroll loop loop control variable case need initialize once importantly  need check value update iteration loop 
purpose unroll loop pe rm optimize
try understand algorithm work 
order unroll perform loop  will case vector 
series swap permute swap operation allow 
leftmost third figure show original content initial call permute 
branch represent iteration loop  vary 
vector state first swap recursive call permute 
middle third figure show state first recursive call permute 
branch represent iteration loop  vary begi 
vector state first swap next recursive call permute 
level recursion element index zero fix  remainder processing chain recursion restrict index great zero 
rightmost third figure show state second recursive call
function recursive call
function merely print current content vector 
arrow figure  represent call return permute 
illustrate recursive call chain 
arrow pointing leave right represent call  arrow point right leave represent return function 
number associate arrow order call return occur execution permute 
second column left show original content vector first swa call first recursive call permute 
swap element red 
third column show content vector second level recursion 
third column element index zero fix  recursion level begi value zero 
loop recursive call swap element highlight red 
rightmost column point begi equal  permute function call effectively terminate recursion 
list exercise vector manipulation recursion  standard_library function_name rearrange element vector 
list loop print permutation vector element 
section show generate permutation vector orderly fashion 
need produce permutation choose random 
example  need randomly rearrange content order vector test sort function see will_produce original order sequence 
generate permutation  put vector vector  select permutation random vector vector 
approach inefficient  especially length vector permute grow large 
fortunately  randomly permute content vector easily quickly 
list contain function_name permute randomly permute element vector 
notice permute function list simple un nest loop recursion 
permute function vary index variable index next last element
loop  function obtain rand see section pseudorandom index great equal
exchange element position random position 
point element index small fix will change function execution continue 
loop increment index  process continue value
correct  permute function able generate valid permutation
important permute function able produce possible permutation equal probability  way  want permute function generate permutation
permute function list fine  slight variation algorithm  
see difference permute 
function choose random index valid index  permute restrict random index valid index great equal
mean exchange element element position loop iteration 
approach superficially just permute  produce uneven distribution permutation 
list exercise permutation function time   tally permutation 
exactly possible permutation threeelement 
million run  permute function distribution possible permutation
see misbehave  need examine permutation produce 
top tree show original    
second row show possible result configuration first iteration loop 
leftmost tuple represent element index zero swap element index zero effectively change 
second tuple second row represent interchange element index index 
third tuple second row result interchange element position 
underlined element represent element recently swap 
only item tuple underline  function merely swap item
bottom row tuple contain possible outcome
compare figure figure second row tree permute identical second row tree  third row
second time loop permute function attempt exchange element index zero element 
see first element tuples row underline 
third row contain exactly instance possible permutation   
mean correct permute function bias individual permutation  function 
complete follow function reorder content reverse original order 
example  contain element        transform        
note function physically rearrange element just print element reverse order 
complete follow function reorder content number odd number 
value sort ascend order self  odd number follow sort ascend order
example  contain element          transform          note function physically rearrange element just print element reverse order 
complete follow function shift element backward place 
last element shift back end copy first position 
example  contain element          pass function  transform          note function physically rearrange element vector  just print element shift order 
complete follow function return true contain duplicate element  return false element unique 
example      contain duplicate once      element once 
empty duplicate 
linear search unsorted 
complete follow function ng return true element integer ascend order precisely  non descending order  contain plicate 
example  follow statement 
sort function ng function previous problem 
loop test permutation integer 
find permutation contain element ascend order exit loop 
think sort algorithm 
technician need assemble card  card shelf 
video card substantial amount functionality standard package 
video card replace card vendor card capability 
computer will work card subject availability driver operating_system standard interface allow component work
software development today increasingly component base 
software component like hardware component 
software system build largely assemble pre exist software building block 
support kind software building block 
simple function investigate powerful technique build user design software object 
object orient 
first oo programming_language  first oo language gain widespread variety application area 
oo programming_language allow programmer define  create  manipulate object 
variable represent object considerable functionality compare primitive numeric variable like nt double 
like normal variable  object type 
object instance class  class mean type 
object type class 
std   std   ci object time  std   instance std   ostream class std   type std   ostream 
code object client object  example  follow code fragment std      std   object client std   
function see client std   std   ci object 
object service client 
standard_library class stri ng specify string object 
order string object  preprocessor directive ttinclude string 
declare stri ng object like variable  string  assign literal character sequence st ri ng object familiar string quotation syntax  string  joe   std       jane   std      assign stri ng object simple assignment_operator  string  joe     
case  assignment statement copy character 
assignment copy character string  share content 
assignment  change string will affect string 
code string class define assignment_operator work context string object 
ng class method name si ze behave exactly like length method 
ng class define method name allow programmer access
similarly  +    syntactally sweeten way write +    perform concatenation  append back
substr method extract show figure addition method  standard ng library number global function process string 
function syntax allow compare string   
complete list method function find 
precise type std   std   ostream  std   ci type std   stream 
like object  std   std   ci method 
operator actually method 
second statement call method behalf std   object pass value variable
statement std      
return_value simply std   invoke method  argument 
read value keyboard assign
method call return std   ci return_value invoke pass variable reference 
notice easy cause program input program 
user enter   arguably integer 
program produce incorrect result 
additional method std   ci object build robust program 
list detect illegal input continue receive input user acceptable value 
user enter value type compatible declared type variable  expression evaluate true 
determine user entry correct sufficient programmer corrective measure 
additional step 
bad input character user cause std   ci object enter error state 
character user type assign give variable remain keyboard input buffer 
clear stream object remove leftover keystroke 
ask user retry clear bad character enter result problem stream object enter error state bad character remain keyboard buffer 
solution flush keyboard buffer character user enter last valid datum entry 
once stream object reset error state keyboard buffer empty  user input proceed usual 
ostream stream class number method  will here 
mean assign complete line text keyboard
read complete line text keyboard  include embed space
vector useful persistent 
datum persistent exist program execution 
execution program user create populate vector 
user content vector disk quit program 
later  user run program reload vector disk resume work 
user quit program  later run program load previously list number 
user number list file file name 
notice function pass std   stri ng eter const reference 
reason std   object see section technique avoid copy string pass function 
function see  caller actual string reference  work copy string object 
const specifier prevent function modify string pass 
take time copy string especially long string  copy occupy extra memory 
case copy pass const reference ideal approach 
open file point
output file stream reason  include disk full insufficient permission create file give folder 
once associated file open  std   ofstream object like std   cout output_stream object  data record text file print screen 
just like std   cout  operator std   ofstream object stream lator like std   setw 
std   cout object object class std   ofstream family class concept know inheritance 
inheritance detail chapterjttj purpose point  relationship mean std   cout object std  ofstream object 
difference  course  effect console window std   cout write text file give std   ofstream object 
execute program write datum file std   ofstream object scope  file object automatically will close file ensure datum program write file completely disk 
std   ofstream class close method allow programmer manually close file 
useful file object recreate file  list 
list  std   fstream object read datum file 
open file point
std   ofstream object  filename string file name identify file read 
open file program call ensure file successfully open 
input stream object open properly file exist  file name misspell  path file incorrect 
input stream insufficient permission bad sector disk 
once open associated file  input file stream object behave like std   ci object  datum come text file keyboard 
mean familiar operator getli ne function completely compatible std   fstr earn object 
std   ci object std   ifstream 
output_stream object  std   fstream object automatically will close associated file scope 
input output_stream technique know buffer 
buffer rely 
fast write datum memory disk 
buffer special place memory hold datum write disk 
program write buffer fast directly disk 
buffer full  program operating_system write complete content buffer disk 
understand concept buffering  task build wall brick 
estimate wall will require brick 
once ready start build wall drive building supply store purchase brick 
drive job site place brick position mortar require 
now ready place next brick  drive back store next brick 
drive back job site set brick 
repeat process time 
put brick possible vehicle first trip  subsequent trip store load brick need wall complete 
analogy  transport vehicle buffer 
output_stream object special place memory call buffer 
like vehicle transport brick  memory buffer fix capacity 
program write buffer quickly directly disk 
operator write individual value buffer  buffer full  output_stream datum buffer disk request operating_system 
brick  efficient just character time display 
buffering process speed significantly input output operation program 
std   stream object write datum buffer lifetime flush remain datum buffer disk  buffer full 
buffer fix size  last part datum likely will completely fill buffer 
analogous last load brick need wall full load 
still need remain brick complete wall vehicle fully loaded 
situation ensure buffer flush full close file completely 
output_stream object write text std   endl stream object flush buffer close file 
mention std   endl briefly section std   endl interchangeably represent newline console printing 
performance advantage buffering file input output  choice std   endl big difference file processing 
list compare performance std   endl situation 
list write vector contain integer console text file 
number line 
std   endl flush stream object buffer addition print  expect reduce program performance minimize benefit buffering case 
multiple run list system reveal terminate line generally only slightly fast std   endl write console window 
terminator consistently time fast std   endl write text file 
list exploit special relationship std  cout std   stream object 
pri pri function accept std   ostream object second parameter 
note caller  mai pass std   cout object fout object printing function time  compiler complain 
defer nation work tt 
support mathematical complex number std   complex class 
recall mathematic complex number real component imaginary component 
write bi  real part  ordinary real number  bi imaginary part real number 
std   complex class template class like vector 
angle bracket specify precision complex number component  std   complex float fc  
here  real component imaginary coefficient fc single precision float point value  dc 
imaginary part zero  number number case  double 
imaginary number scientific engineering application exceed scope book  conclude brief class 
need solve problem involve plex number  find http  
list show care randomly permute
suppose wish generate pseudorandom number range 
range span number 
visual  large handle maximum value 
expression rand will evaluate number desire range 
pseudorandom number generator just likely produce number
program generate billion pseudorandom value range 
actual value give number will vary 
list evaluate quality rand modulus technique generate billion pseudorandom number loop 
count number time pseudorandom number generator produce count number time
note near beginning range 
verify consistency result  repeat test time 
program report result individual trial  end compute average trial 
figure show full  table contain row individual number 
element row
way obtain 
only way obtain value range 
next line program show result trial  monitor activity billion number generation 
deal pseudorandom number  result trial will exactly billion run close 
note consistent result run 
expect number time approximately time number consistently time  average time 
number consistently time  average 
note  mean value time 
figure show expression rand produce distribution 
figure show abbreviate list number rand function produce apply modulus operation 
add miss row ellipsis represent  table contain row 
value row equivalent modulus  example 
leftmost column complete  modulus operator produce value range 
rand function return value great  specifically  program rand produce 
list  rand modulus produce only way    
base analysis  list generate number way way 
ratio agree empirical observation behavior list 
consequence bias mean value small range 
bias definitely undesirable pseudorandom number generator 
sophisticated mean produce pseudorandom number 
rand function weakness undesirable scientific  ing  mathematical application  rand linear congruential generator algorithm see http  wiki 
mean pattern sequence number generate will repeat exactly call rand time 
visual  rand period 
list verify period rand 
list long long int integer data_type need count limit nt type  
short name long long just long long 
visual byte store long type  range value identical 
visual  type long long occupy byte allow long long data_type span range 
represent literal long long source_code  append ll suffix  
expression represent byte version  represent long long byte version 
list print first pseudorandom number generate  print 
careful observer detect repetition time able predict next pseudorandom value program produce 
predictable pseudorandom number generator random number generator 
generator game chance render game perfectly predictable clever player 
pseudorandom number generator long period 
mersenne twister see wiki ster widelyused  high quality pseudorandom number generator 
long period  ly  proximately lo 
implementation mersenne twister generate billion pseudorandom number second  program generate pseudorandom number exclusively need run year begin repeat
safe assume observer will able wait long able witness repeat pattern sequence 
standard library contain class programmer instantiate object generate pseudorandom number mersenne twister algorithm 
generate dom number ensure number fall uniformly distribute specified range value
fortunately  standard library multitude class allow shape production object mathematically sound distribution 
pseudorandom generator consist piece  
object place srand 
object perform role rand function  characteristic 
uni stri buti object constrain pseudorandom value range  replace simple problematic modulus erator 
list upgrade list improve random number generation base class 
program run see attempt program generate value average time generate average time 
count imately equal expect target 
examine trial individually  see predispose great
al program generate slightly time  slightly great time 
multiple trial show tion program consistently generate approximately time approximately time 
object produce pseudorandom number generator object 
mt object generate pseudorandom number  uni stri buti object constrain pseudorandom number desire range 
programmer create object ce object 
ce object seed value  potentially hardware source  generator object 
pass fix integer_value constructor want generator produce perfectly reproducible sequence value  example  follow code fragment 
ce   uni stri buti little complicated srand rand modulus operator  extra effort worth application 
object orient approach modular allow substitute object pseudorandom number generator class place choose 
swap normal distribution distribution 
familiar probability theory familiar variety probability distribution  bernoulli  poisson  binomial  chi square 
standard_library contain distribution class model probability distribution
programmer mix match generator object distribution ject need achieve specialized effect 
flexibility useful place 
string example strict palindrome spacing punctuation reverse exactly 
complete follow function determine give string strict palindrome 
return true string strict palindrome false
empty string read forward backward  palindrome 
class std   ci object 
suppose user type line text press enter key 
example  user type following  sky blue statement assign std   stri ng variable_name msg complete line text  include space 
early time programmer write software machine language computer system piler invent 
introduction variable association high level programming_language mark great step forward late 
long programmer need low level detail processor absolute memory address 
name variable tion allow programmer abstract away machine level detail concentrate concept integer character transcend computer electronic 
object level abstraction simple variable 
object allow programmer simple value developer focus complex like geometric shape  bank account  aircraft wing 
programming object represent real world possess capability simple variable study point 
object typically consist collection datum code 
bundle datum code object store service part software system 
object form computational unit part computer application 
programming object model real world object naturally collection simple variable encapsulate considerable complexity 
object easy developer build complex software system 
classify object orient language 
modem programming_language degree object orientation 
show programmer define  create  custom object 
mathematician represent single point order pair real number  express 
 double type serve approximate subset mathematical real number 
model point coordinate range double precision float point number double variable 
point conceptually  here variable 
consequence  function compute distance point require parameter    yj point  ideally  able variable represent point 
approach problem  
numeric index name distinguish component point object 
agree mean coordinate point pt mean coordinate point pt  compiler powerless detect error programmer expression like pt pt 
restrict size
programmer accidentally push extra item back mean represent point object 
compiler defend program treat empty point object 
represent object general 
bank account object 
bank account object diverse account number integer  customer name string  interest rate double precision float point number 
implementation object impossible element type 
addition store datum  want object active agent computational task 
need able associate code class object 
need fundamentally programming construct represent object 
examine specifically handle object  first will explore capability sirable 
automobile user driver car transportation 
user interface car fairly simple  automobile complexity 
driver vide input car steering wheel  accelerator brake pedal  turn signal control  shift lever 
automobile produce output driver speedometer  tachomet  instrument light gauge 
standardized driver automobile interface enable experienced driver drive modern car need special training model 
typical driver car effectively understand detail work 
drive point point driver need know number cylinder engine  engine horsepower  vehicle front wheel drive rear wheel drive 
driver look hood engine  driver confirm detail inside engine considerable effort expense 
detail interest only auto enthusiast mechanic 
only select automotive engineer capable understand appreciate esoteric detail vehicle design implementation 
way programming object object orient programming_language analogous automobile component 
object possess considerable capability  programmer object need know only object need know work 
object interface client code wish object 
typical object selectively expose part client keep part hide client 
object designer  hand  know complete detail object implementation expert object work 
programmer define structure object keyword  struct class 
construct similar 
will class construct will struct section class serve pattern template execute program produce object 
will concentrate facilitate object orient programming class  
notice semicolon follow close curly brace class definition 
semicolon require  easy forget 
convention class_name begin capital letter  class_name just identifier like variable_name function_name 
here  class_name poi
body class curly brace 
element declare class know member class 
poi class specify double precision float point data component name
component know instance variable 
community refer member datum datum_member 
name instance variable include field attribute 
declaration class body publi label 
public member poi class  mean client code poi object full access object field 
client examine modify component poi object 
once poi class definition client create poi object show
important note poi object 
represent class object 
variable object  instance  class poi
object copy field name
conceptual view point object 
double precision float point number system require byte memory 
point object store double  poi object least byte memory 
practice  object slightly big sum individual component computer architecture restrict 
mean object include extra byte  si zeof operator determine exact number byte object occupie 
visual  expression si zeof evaluate 
client dot operator object access object member 
dot_operator binary operator  left operand expression represent class instance object  right operand name member class 
assignment statement list  statement follow demonstrate assign object directly need copy individual member object 
assignment statement accomplish following   need assignment way   direct object assignment example  suppose wish implement simple bank account object 
determine account consist name  number  balance amount money account 
define bank account class
define hold instance account class easily
show object contain object imply object arbitrarily complex structure 
sample run listing  print 
enter  account number  account  sheri njame bjalance enter  account number  account  mary ajdd njame bjalance enter  account number  account  larry ajdd njame bjalance enter  account number  account  terry ajdd njame bjalance enter  account number  account  gary 
program allow user sort bank account database way parison function 
notice similar comparison function const reference parameter efficiency see section 
observe function local_variable name name 
object field name name 
function name identifier way problem 
compiler distinguish identifi qualified object variable dot operator acct 
similar name  datum acct 
class develop
pen account  passive entity builtin functionality 
addition define structure datum object  class define function operate behalf object 
recall bank account class  account  section 
need able protect internal detail bank account object permit client interact define  control manner 
non programming example 
deposit dollar bank  bank custody money 
still money  theoretically reclaim time 
bank store money safe  money safe
suppose wish withdraw dollar account 
total account  transaction problem 
wrong follow scenario  
enter bank 
leave bank 
process normal bank handle withdrawal 
perfect world honest mistake 
reality  customer dishonest intentionally take money report 
faithfully count fund  bill stick honest mistake pick bill
place bill wallet money detect error 
clearly bank need control procedure handle customer withdrawal 
work programming object  situation restrict client access internal object 
client code able change directly bank account object reason  include  
withdrawal exceed account 
federal law dictate deposit amount report government agency  bank want customer able add fund account way circumvent process 
account number change give account life account 
protect internal detail bank account object permit client interact define  control manner 
trick hide completely client object field special function_call member function method access hidden field 
method only mean client change object internal state 
follow revise account class  
part class explicitly label implicitly private  private label place private member first unlabele section class 
way  member class automatically private label 
programmer like put public member private member class definition  class account public  
case pri vate label
order enforce spirit wi thd raw function  will method  add deposi method put fund account 
list enhance account class
method look like function  class method know member_function 
client access method dot operator  
withdraw method variable  amt  result 
variable amt result local withdraw amt method parameter  result declare body wi thd raw 
field declare private section class 
wi thd raw method affect field object call  affect field acctl object 
see variable code method  kind variable 
compiler establish exact nature variable follow order  
method parameter variable declare method parameter list  parameter method 
case free function  method parameter variable local method 
local variable variable declare body method  variable local method 
local_variable  will affect variable function 
instance variable variable parameter method  declare method body  declare instance variable class  instance variable object client invoke method 
global variable variable parameter method  declare method body  declare instance variable class  global_variable 
global_variable exist  variable undeclared  compiler_will report error 
important note compiler check order 
mean legal give parameter method local_variable name instance variable class 
case method code access instance variable global_variable simple name 
local_variable hide instance global_variable view 
section gain access hidden variable 
method overload just_like global function see section 
mean multiple method class name  signature
recall function signature consist name parameter_type  method signature consist name parameter_type 
see section object storage space data field 
object require space method 
mean only individual object execute program maintain object field 
exact organization memory vary operating_system  datum process program section  stack  heap  static memory 
simple data_type like nt  field object declare local function method reside segment memory know stack 
like simple data_type  field object allocate heap 
field global stati local object reside static section execute program memory 
code see counter object will store single integer_value field 
visual sizeof counter sizeof int
local counter object consume byte stack space  global counter object byte static memory  dynamically allocate counter object byte heap space 
addition static  stack  heap memory datum  execute program reserve section memory know code segment store machine language program function method 
compiler translate method machine language regular function 
nally  method nc counter class identify long name 
counter   nc 
counter   nc method  compile code work exactly like normal function unrelated class 
client code counter ctrl   declare couple counter object 
counter object share reset method  call counter   clear reset field proper counter object 
trick reset method counter class accept parameter  actually receive secret parameter correspond address object left side dot 
code method influence field correct object
crucial piece still miss 
sure field object reasonable initial value client begin object 
class define constructor ensure object will begin define sate 
constructor look similar method 
code constructor execute behalf object client create object 
class  client constructor initialize object 
function method  class constructor overload 
list exercise enhanced account class offer deposi wi thd raw method  constructor 
constructor return_type  void 
constructor list initialize field value supply client 
comma separate list colon curly brace begin body constructor call constructor initialization list 
initialization list contain name field initial value parenthesis 
field object initialize body constructor execute 
case code constructor adjust zero issue warning client attempt create account initial negative 
wi thdraw method ensure once create  account object will negative 
notice client require constructor parameter point object declaration  client create account object 
account  illegal  supply argument constructor 
detail deposit withdraw fund responsibility object client code 
attempt withdraw dollar change account  client check return_value wi thd raw feedback user error 
program take step correct situation 
constructor specify parameter call default constructor 
programmer specify constructor class  compiler_will default constructor
programmer define constructor class  compiler_will generate default constructor 
see consequence constructor policy 
define constructor class  compiler automatically will create default constructor accept parameter 
compiler generate constructor affect state newly create instance 
class feature allow define complete type 
will define type model mathematical rational number 
mathematic  rational number define ratio integer  second integer nonzero 
commonly call fraction  rational number integer component call numerator denominator 
rational number possess property  example  fraction numerator denominator still equal 
list show define rational number 
simplerational class define type natively rational number type 
constructor accept numerator denominator value client 
constructor allow client declare si mplerati onal object simplerational frac  
constructor ensure si mplerati onal object denominator will zero 
free function  method member_function si mplerati onal class 
function return_statement require special attention 
function declaration compiler know function_return si mplerati onal object 
expression curly brace retu rn keyword  
retu statement create fraction object numerator product numerator object supply caller 
similarly  denominator return object product denominator function parameter 
curly brace initialization syntax pass parameter function  example 
compiler know accept single simplerational object parameter 
compiler generate code caller curly brace initialization list create si mplerati onal object pass function 
type certainly leave desire 
display rational number object std   conveniently 
standard arithmetic_operator like +  compare rational number 
section address shortcoming 
easy careless  confused  inept programmer change object state way corrupt behavior entire system 
malicious programmer intentionally tweak object sabotage system 
case  software system control medical device military missile system  result deadly 
way protect internal object world  simple strategy qualify field method  genetically refer class_member  publi pri vate 
compiler enforce inaccessibility private member 
list  example  client code directly modify denomi nator instance variable si mplerati onal object zero 
client influence value numerator denomi nator only method class designer 
accessibility rule  call visibility rule permission  determine part class object accessible world 
great deal flexibility assign access permission  general principle exist follow  foster program easy build extend 
general  field vate 
client able arbitrarily change state object 
allow allow client code put object undefined state example  change denominator fraction zero 
object state only change result call object method 
build primitive type like double offer protection client access 
ception private field rule apply simple object programmer naturally treat primitive type 
recall geometric poi class find list 
field point object safely assume legitimate float point value  reasonable application client treat poi object primitive type 
case field public 
method service client code part publi section class 
example  follow method  
method assist service method mean world pri vate section class 
allow publi method decompose pler  coherent activity threat client code access primitive method 
private method call helper method auxiliary method 
programmer intentionally choose limit access part object 
restrict access obviously limit client control object create 
disadvantage first glance  access restriction actually number advantage  
flexibility implementation 
class conceptually consist part  class interface visible part 
client see public part object 
public method public variable class constitute interface class 
class interface specify
client see private method vate variable 
private invisible client  class developer free want private part class 
class implementation specify accomplish need
like object black box  client need know object work merely rely object
real world object follow design philosophy 
digital wristwatch 
display give user current time date 
produce output mode  example  elapse time stopwatch mode wake time alarm mode 
present user only button change mode  start stopwatch  set time 
irrelevant user  user concerned
user risk great peril open watch look intricate internal detail 
user mean interact watch only interface display button 
similarly  automobile present accelerator pedal user 
user know push pedal car fast 
pedal connect fuel injection system possibly system  like cruise control cable  wire  type linkage only automotive designer mechanic 
driver prefer oblivious hood detail 
change interface class disturb client code write ject class 
example  maintainer si mplerati onal class decide mp ra object immutable  client create mp le ra object client adjust numerator denomi nator value 
nator  disappear 
unfortunately  method public part si mplerati onal interface client 
exist client code method  remove private  alter type parameter change interface render exist client code incompatible 
client code write accord original interface long will correct 
change si mplerati onal interface break client code 
class flexibility alter interface class once class release client change risk break exist client code 
hand  alter private class_will break exist client code class  private class invisible client 
private part class change  client need only recompile code  client programmer need modify source_code 
class  resilient change component expose client 
class flexible possible  mean maximize ability improvement class future  hide possible client 
reduce programming error 
client code misuse part class private client see private part class 
properly restrict client access impossible client code put object ill define state 
client coax object illegal state class interface  design implementation class faulty 
example  client si mplerati onal object zero  method constructor contain logic error 
client able place object illegal state 
object great deal functionality 
class fairly simple interface client  service require significant amount complex code accomplish task 
challenge software development deal overwhelming complexity task 
difficult  impossible  programmer able comprehend time tail large software system 
class design interface hidden implementation mean reduce complexity 
private component class hide  tail contribute complexity client programmer manage 
client programmer need exactly object work  detail object work present nonetheless 
trick expose detail only class 
class hide implementation detail class 
object class context  class worry context class_will
perspective class  complexity client code class eliminate 
developer client code detail application code develop 
application code will object 
hidden detail class object represent client developer 
perspective client code  complexity code object work eliminate 
concept hiding call encapsulation 
detail expose party only
sum  proper encapsulation result
finally  encapsulation model limit 
possible protect object code
method class full access member define class 
believe part class protect method  split class multiple class suitable restriction result component class 
give definition geometric poi class list  complete function 
class constructor overload 
give definition si mplerati onal number class section  complete follow free function_name reduce  
minimum maximum value allow coordinate 
develop circle class like rectangle class method compute perimeter area 
rectangle instance variable circle  cally  circle corner  need specify width height 
center point radius naturally circle 
build circle class appropriately 
give rectangle ci rcle class question write enclose function  
ifcircis big  function_return false 
position rect ci rc influence result 
follow code  
introduce basic object orient programming  private datum  public method 
point program copy fraction  client rational variable rati onal  execute pri rational formal parameter
function finish execute  formal parameter scope memory free 
function_return back caller  leave caller rational sole remain
mplerati onal object small byte visual  cess create serve formal parameter  copy content actual eter formal parameter  finally clean formal parameter unnecessary work part execute program 
pass reference single memory address function 
need copy datum function 
safety pass function modify caller actual parameter formal parameter declare const 
pass type const reference type approach automatically
default pass default 
guarantee safety type expense reduced efficiency type 
pas warrant type 
caller pass copy function modify return modify back caller 
caller original plus modify return function 
pass const reference possible  require little code 
follow sample code illustrate  
caller zerol function show here  
give poi class section statement point pt  declare variable pt poi
primitive datum  declare pointer object  
pointer initialize point valid 
assign pointer refer exist  pt  dynamically allocate heap   class constructor accept parameter  need argument
poi class example  assign pointer refer exist  acct  dynamically allocate heap   moe     note include argument expect class constructor 
statement allocate_memory execute constructor code initialize newly create 
figure illustrate pointer account 
dynamically allocate entity  programmer careful delete deallocate object create
dot syntax access field pointer bit awkward  
parenthesis  statement evaluate parenthesis place show here 
simple syntax access field pointer 
pointer eliminate need parenthesis     pair symbol arrow_operator constitute space allow  mean look like arrow pointing right 
associate left point arrow 
arrow_operator access method reference pointer  
delete decoration free single dynamically allocate object  point object previously allocate
here  variable  occupy space stack 
space variable automatically deallocate complete 
problem point memory allocate memory free function 
pointer only way memory  function finish  memory lose life program 
condition know memory leak 
program run completion quickly  leak undetected 
long run program web server  memory leak cause program crash period time 
problem arise code leaks memory execute repeatedly eventually memory
correct function write void 
support vector array object  present special challenge 
first  simple 
special initialization need constructor 
class define constructor accept argument supply constructor require argument 
follow statement illegal  
create space acct element  expect default constructor properly initialize element 
only constructor class require argument  compiler refuse accept declaration acct 
compiler mean produce code need initialize element programmer begin
solution pointer  std    account pointer note create object 
programmer subsequently iterate create individually element 
method dehnition programmer access secret parameter reserved word
method parameter name field
legal  method parameter local_variable method name field class 
problem local_variable parameter hide access field 
unqualified name refer parameter field
solution name parameter 
strong argument name field  name parameter method 
access field case  thi pointer 
thi reserved word  expression thi mistake field object method invoke 
pointer involve pass current object function method 
remember syntax pointer  thi pointer  thi object point 
thi serve implicit parameter pass method  illegal expression body method 
behavior desirable  method change state asi mplerati onal object  tract object suppose constant 
unfortunately  correct behavior accidental 
compiler analyze method determine exactly
follow code will compile  
method modify si mplerati onal object  expect invoke constant object acceptable  compiler reject
compiler understand suppose specifically  design able determine method will change state object 
programmer supply additional help compiler 
method suppose change state object  method declare const 
si mplerati onal class  method nator simply return  copy fraction denominator 
method intend modify instance variable 
look code method  see method change si mplerati onal object 
programmer mistake spurious copy paste error statement  
unfortunately  way stand now  compiler detect error  will contain logic error 
remove possibility error declare nator const  
const keyword closing parenthesis parameter list opening curly 
declare method merely defensive programming strategy class developer 
method declare call object  illegal voke method object 
version si mplerati onal method  follow code 
declare method need change field object 
similarly  declare method suppose change field object 
method object  method object 
maximum flexibility  declare method prevent method suppose
invoke method object  invoke method object 
maximum flexibility  declare method prevent method suppose
ffinclude header_file source_file need myclass object  file compile separately link rest project file 
class_name prefix poi  only compiler distinguish method definition global function definition  distinguish method method name parameter_type class 
method signature method just_like global function signature  method signature include class_name
follow represent distinct signature  
poi  signature method poi class_name accept parameter 
class mean multiple program  compiler recompile method time header_file include source_file 
method declaration definition separate  compiler compile code definition once  linker combine compile code client code
client programmer look content header_file 
method definition mine  client programmer see exactly method work 
disadvantage  example  client programmer assumption fast method take execute order method process datum vector 
assumption influence client code call method 
class maintainer change implementation method  client 
ordering datum change result fast processing now slow 
improvement graphic processing algorithm cause animation run quickly method rewrite 
class designer maximum flexibility  client programmer able see detail method implementation form assumption 
client programmer need know method accomplish
enforce hidden method implementation  
separate method declaration definition 
put class declaration header_file method definition
compile file object file 
client code now compile include
programmer find inline style difficult detail 
complicate determine object class suppose sprinkle class declaration 
code list nclude header compiler expose trafficlight class declaration  compile compiler know method implementation faithfully agree declaration 
method definition trafficli ght   change specify parameter declaration problem 
include  type signalcolor undefined type 
notice class declaration list prefix method name trafficli ght   
prefix compiler treat identifier global 
interpret free function  method 
si gnalcolor declare trafficli ght class  need trafficlight   prefix 
signalcolor global type code nclude 
observe variable trafficli ght class private 
mean once client create traffic light object only way client influence value change method 
impossible client force traffic light object cycle incorrectly  example  client traffic light change directly yellow green pass red way yellow green 
code follow function definition violate definition mle  int const std   nt list int   
first appearance denote local_variable name si ze  second call si ze method std   class 
statement define declare only variable  method define std   class compiler process definition header_file 
variable distinct definition context  redeclaration right display code error 
like variable  class only definition 
build general purpose class mean widely program take care violate definition mle 
violate definition rule accidentally define class only once 
see accidentally violate definition rule  follow simple example 
suppose simple counter class declare  class counter int count  
similarly  header include order compiler accept gadget  declaration ti cker field 
client code wish wi dget object nclude statement  
client program_will build problem 
program need wi dget object gadget object 
header_file know gadget class header_file wi dget  include header_file code class 
include directive
include header_file insufficient compiler able check client type correctly 
client code  will compile 
case problem 
include include definition counter class twice  compiler see definition counter 
definition identical  violate definition rule result compiler error 
issue here know multiple inclusion  arise header_file nclude header_file 
multiple inclusion problem  programmer legitimate need type object program 
fortunately  solution simple 
standard way prevent multiple inclusion wrap class definition follow  ttifndef 
semicolon end line begin fndef  ttdefine  endi preprocessor directive  statement 
word follow fndef define preprocessor directive valid identifier  practice produce unique word tie name header_file
convention capital letter underscore show identifier contain dot 
put underscore header_file name likely name will program 
header_file name  preprocessor wrapper ifndef ttdefine declare class here endif like program  preprocessor maintain collection variable 
preprocessor define variable influence compilation process 
preprocessor define variable merely artifact compilation unavailable execute program 
preprocessor directive fndef uate true preprocessor see definition give preprocessor variable  fndef return false see definition preprocessor variable 
define directive define processor variable 
net effect directive preprocessor will include header_file once process source_file 
mean compiler_will see class definition exactly once  satisfy definition rule 
preprocessor directive wrap class tion header_file
predict widespread class_will practice cessor trick general purpose class create 
will avoid problem multiple inclusion 
point result  result 
convenient overload output_stream custom class 
std   cout object std   ostream class overload method name allow print primitive type like integer float point number 
create poi rati onal  std   ostream class method build handle object
order std   cout programmer define object define global function form  os  const represent programmer define 
notice function_return std   ostream 
first parameter std   ost ream  function_return object pass
programmer define  expression  evaluate reference std   cout 
process return object pass allow chain     
give definition  client write code point      point       point       +    +    
class developer function  client print object just easily print basic data_type 
overload std   class  now easily
class define method 
method unary accept parameter  method binary accept only parameter 
miss  parameter object apply  pointer 
see method work  enhanced rational class  class enhancedrational int numerator  int denominator  public  
rational class  example  impossible enable binary + high precedence binary context rati onal object class object 
variable declare class declaration know instance variable instance object class maintain copy variable 
mean  example  change numerator rational object will affect numerator rational object 
convenient variable constant object class share 
global variable constant certainly will work  global tie class 
stati keyword class specify object class share field  example 
unusual static field define class declaration 
wi dget class supply statement 
factory object unique serial number 
serial number sequential  object serial number large produce
important warranty claim  client able alter serial number object 
widget class list show static variable manage serial number object 
execute program initialize seri rce time beginning program execution call function 
mean seri rce properly initialize program create wi dget object 
time client create object  constructor assign individual object serial stati variable 
constructor increment seri rce  next object create will serial high previous wi dget 
programmer class static field public constant client 
sider list model simple traffic light little differently list 
state traffic light object lamp illuminate determine integer  represent red  stand green  mean yellow 
convenient client symbolic constant red  green  yellow try remember integer_value stand color 
constant publi client freely access constant  client alter value 
additional benefit const initialize stati const field class body
need define stati const field class body non const stati field 
code trafficsi gnal class access constant public fully qualify name trafficsi gnal   red  trafficsi gnal   green  trafficsi gnal   yellow 
statement initially yellow traffic light 
red  green  yellow public field constant  client modify subvert behavior traffic light object 
obvious  constant rafficsi gnal class declare stati c
recall section default 
mean client write code
object creation client integer argument represent traffic light 
red  green  yellow constant instance variable constant non stati fields  trafficsi gnalalt object copy field  red  green  yellow field exist traffic light object 
lead chicken egg problem create first trafficsi gnalalt object symbolic constant red  green  yellow 
constant exist traffic light object  need traffic light object constant 
execute program initialize stati class field invoke mai function 
mean datum pertain class exist object class create declare stati c
stati class variable exist instance class 
allow method declare stati c
stati method execute behalf class  instance class 
mean stati method access instance variable non stati field class  call non stati method 
stati method execute behalf class  access field instance class 
explain restriction static method access non static datum_member 
nonstati method access instance variable object call  stati method call non stati method indirectly access instance variable 
restriction only way class method  stati non stati access stati data member call astatic method 
look perspective  non stati method thi implicit parameter 
language support struct feature  class keyword 
struct support method constructor 
 struct contain method constructor 
default  member st ruct public  apply ri vate publi label class fine tune client access 
similarity  programmer favor class struct programmer define type method 
struct construct useful declare simple composite data_type mean treat like primitive type 
nt type  example 
manipulate directly integer  integer method hidden part 
likewise  geometric point object consist coordinate assume valid float point value 
sense allow client code manipulate directly coordinate  force client method like 
hand  unwise allow client modify directly denominator rati onal object  fraction zero denominator undefined 
 default object define struct accessible client object 
contrast  client default access internal object instance class 
default member access struct instance public  default member access class instance private 
struct feature sense  redundant 
retain struct keyword  program library struct 
program expect utilize library struct restrict struct definition limited form support c
struct definition contain non publi member  method  constructor 
private member default inaccessible code
ordinarily only method permission see modify private instance variable invoke private method
access protection allow programmer modify tation hide internal affect exist client code
design access dictate public pri vate label struct limit 
time advantageous design grant special access precisely specify function class object
example  variation si mplerati onal list 
name opaquerati onal show here  
 nator   nator method si mplerati onal 
require operator function overload accept opaquerati onal object 
grant access function ri end reserved word 
list specify ri end function allow client display humanreadable form opaque rational number object operator output_stream object 
printonlyrational int numerator  int denominator  public  
observe function member_function pri ntonlyrational 
ordinarily unable access numerator denominator field pri ntonlyrational object 
see  compiler allow theoperator function access private instance variable parameter 
choose list implement function
reserved word ri end front compiler free function  allow member_function declare friend 
list gadget constructor access private datum element wi dget object initialize gadget object 
gadget   compare method access datum wi dget parameter pass
access possible wi dget declare gadget friend 
note gadget object freely access private member wi dget object  wi dget object special access gadget object 
friendship cally symmetric  ri end declaration directional 
relationship mutual  programmer declare wi dget friend gadget  object class freely access internal detail
note grant friendship unilaterally function  way
suppose class 
suppose class friend class class friend class
friendship transitive  mean friend friend automatically friend
strict friendship relationship 
designer class need declare additional friend
class friend_function class need 
object orient design avoid friend possible 
ideally  class grant friendship class design class control developer 
friendship weaken encapsulation see 
class grant friendship class class control developer class method class manipulate internal object type potentially place ill define state 
nator method eliminate need friend_function 
note readonly rati onal object subtly pri ntonlyrati onal object 
client see numerator denominator field readonlyrational object desire  pri ntonlyrati onal object print only   client readily print pri ntonlyrati onal object easily discern individual numerator denomi nator value 
pri ntonlyrati onal readonly rati onal class represent read only fraction object once client create object client change
truth  readonly rati onal class versatile  programmer incorporate readonlyrati onal object tion display output graphical interface 
pri ntonlyrati onal object limit access output_stream 
pri ntonlyrati onal class serve application need limited access 
suppose widget class object  function proc accept single widget object parameter 
know class widget  follow definition function proc
suppose follow definition class gadget  
counter cl  const counter  
counter cl  const counter  determine follow statement legal 
private static method 
algorithm recursive gcd great common divisor method introduce tion cm least common multiple method derive mathematical relationship  gcd lcm method declare pri vate mean directly client code 
great common divisor least common multiple concept number theory client direct need 
client code expect functionality typical rational ber  addition reduction  private method public  method functionality closely rational number 
private method stati method instance variable 
object require compute great common divisor integer 
legal gcd cm instance method  instance method only power alter state object 
faulty coding accidentally modify instance variable difficult track
class method compiler spot attempt access instance variable
public instance method 
instance method  reduce  +  ope rato modify state object invoke 
class still produce immutable object 
method +   reduce private helper method accomplish respective task 
linear search vs
program clock function 
programmer take care implement timing code correctly section code time 
process error prone  specialized type infrequently 
obvious name equivalent unsigned integer  programmer need consult library reference ensure proper
programmer incorrectly apply parenthesis double 
timing code supplemental actual code profile  diately obvious look complete code statement part timing code statement part code time 
section offer solution shortcoming raw type  constant  tion time library 
unfortunately  mention section functional approach limitation 
code list global_variable maintain state timer 
only copy global_variable 
mean grammer timer function independently measure elapsed time overlap event  example  measure long take function execute simultaneously measure long section code function take execute 
programmer time multiple  simultaneous activite raw library clock function directly  back begin  messy  potentially error prone code 
object solution 
follow client code stopwatch object keep track 
code stopwatch object simple code timer function ing 
add benefit  developer think stopwatch object real physical stopwatch object  push button start clock call start method  push button clock call method  read time result method 
need time once 
stopwatch  course  programmer declare stopwatch object 
object maintain instance variable  stopwatch object keep track time independently active stopwatch object 
programmer stopwatch object code likely mistake cause detail work hide inaccessible 
object wrap messy detail code convenient package 
give experience design type class  now adequately equip implement stopwatch class 
list header hie define structure capability stopwatch object 
class declaration see client create stopwatch object constructor take care initialization detail 
method client  sta rt  reset  reset method include set clock back zero begin
note messy  detail variable private client see directly affect value stopwatch object 
stopwatch class list address weakness non object orient approach note 
code implement method stopwatch class 
once method correct  programmer stopwatch object execution section code worry detail actually
client code introduce error code code hide stopwatch class 
detail code long intertwine code time  code locate stopwatch class 
easy programmer maintain code
stopwatch class convenient interface programmer replace lowerlevel detail call system time function 
stopwatch currently void false  
alternate design print error_message exit program execution client attempt see stopwatch 
aspect stopwatch class notable  
stopwatch object instance variable  instance variable record client last call start method 
constructor set initial value instance variable   runni ng 
sta rt method note system assignment runni ng 
statement reverse  include assignment runni ng 
closely possible just include statement client code start method call 
notice sta assign stopwatch
method  system note assignment runni ng include assignment runni ng 
accurate accounting client code execution 
method compute accumulate 
design allow client stopwatch restart later lose early segment
method return compute method compute current alter variable 
client avoid call stopwatch object interfere accurate client code execution 
stopwatch timer  ensure element order low high  size  list  search element list linear search 
design stopwatch class allow client create multiple stopwatch instance  instance will keep track
practice profile execute program  generality unnecessary 
rarely developer need overlap code  timer program
multiple section code check stopwatch  simply start check reset start section code time 
section show function pointer customize ordering selection sort perform vector integer 
function list accept function pointer parameter addition vector 
function pointer point function accept integer parameter return true false 
function suppose kind order rule determine first integer parameter precede second integer parameter 
suppose wish analyze number comparison number swap sort function perform give vector ordering strategy 
way sort function keep track number time call comparison function swap function return finish 
define hold piece datum comparison swap function return only value 
significantly alter code sort algorithm
prefer keep sort algorithm focus task sort remain uncluttered additional logging code 
pass function pointer sort function pass specially craft 
design want  specifically  design special perform comparison keep track comparison perform 
let swap  log swap perform 
notice comparison object wrap comparison function pointer  contain swap method  maintain integer counter 
comparison object pass sort routine customize sort behavior function pointer keep track number swap perform integer counter 
list  basic structure sort algorithm remain regardless ordering determine comparison object 
see result number dictate algorithm number element swap depend ordering element nature comparison 
sort sort array selection sort reduce number function perform  see  require swap 
detect error code interact execute program 
process exercise code reveal error demonstrate lack thereof call testing 
informal testing point adequate  software development demand formal approach 
gain experience develop software will realize testing require skill creativity program
recently testing afterthought 
testing see glamorous designing coding 
poor testing lead buggy program frustrate user 
test write largely program design coding complete 
problem approach major design flaw reveal late development cycle 
change late development process invariably expensive difficult deal change early process 
weakness standard approach testing lead test drive development 
testdriven development testing automate  design implementation test just important design development actual program 
pure tdd  developer write test write application code test application code write 
simple test object keep track number test perform number failure 
client test object check result computation predict result 
notice equal method  check equality double precision float point number private  mean internally method class 
equal method work way equal function examine list 
second test check see sort function_will disturb sorted  pass test problem 
example coincidental correctness 
sum function  programmer careless begin index
notice first test catch error  element zeroth position zero affect outcome 
tester creative devious try force code test demonstrate error 
section class standard library generate high quality
class construct allow creatively combine multiple source functionality
uni formrandomgenerator class simplified interface programmer who need cess high quality pseudorandom number 
scene  uni formrandomgenerator object contain uni stri bution object object 
constructor accept minimum maximum value range pseudorandom number desire 
structor range construct uni stri buti object range 
constructor initialize object field 
uni formrandomgenerator constructor pass constructor class temporary ce object 
uni formrandomgenerator object ce only create field need later 
uni formrandomgenerator object contain ce field 
create uni formrandomgenerator object produce pseudorandom integer range 
expression gen syntactic sugar gen 
expression gen 
list simplified remake list 
list see uni formrandomgenerator class
create large unsigned integer type_name bi gunsi gne 
bi gunsi gne object represent sign integer arbitrary precision  standard unsigned integer primitive type  bi gunsi gne object represent unsigned integer large
float point type  bi gunsi gne value retain digit precision 
internally  bi gunsi gne class hold std   vector integer 
integer vector          
element vector represent digit place value integer  example  internal vector contain follow element follow order  interpret associated bi gunsi gne object mathematical nonnegative integer 
gunsi gne class implementation follow feature  
class constructor accept argument initialize gunsi gne object vector contain single element equal zero 
class constructor accept single unsigned integer 
constructor populate internal vector element correspond value parameter 
class constructor accept gunsi gne argument 
client constructor create gunsi gne object exiting gunsi gne object 
class constructor accept std   st ng object represent teger 
client constructor need create large integer value exceed range unsigned long long 
string argument contain only digit 
class access friend_function name add gunsi gne object return gunsi gne result 
class access ri end function_name operator allow client print gunsi gne value easily build integer type 
see possible design class client produce object exhibit sophisticated behavior 
build class scratch 
way create exist process know inheritance 
process inherit characteristic exist  developer extend customize inherit functionality add
recall section write datum file easy print screen 
easily adapt std   stream object
answer  surprisingly  adapt function  work std   stream object 
std   object type std   ostream std   stream 
allow automatic conversion build numeric type  example  widen double  double truncate nt 
type build language  standard conversion apply 
come programmerdefine type  compiler unable generate automatically code convert type
time sense imagine attempt convert object type stopwatch list object type tester list 
object type std   stream convert automatically object type ostream 
think part standard_library  conversion program
conversion take place 
object type std   st ream object automatically treat ostream object ostream std   stream class special way 
std   stream derive ostream 
ostream base std   stream derive 
term superclass base  case derive call subclass 
base derive terminology interchangeably super subclass  community tend prefer term base derive super subclass 
process know inheritance derive inherit characteristic base 
term derivation  subclasse specialization place term inheritance 
consequence derivation process  instance derived treat instance base 
show function process instance 
ability allow subclass object context expect superclass object know liskov substitution principle  computer scientist barbara liskov 
term special meaning context inheritance 
suppose derive
base derive 
treat instance derive instance base  declare object dd  object declare 
developer std   ofstream begin blank slate 
ost ream exist first  developer specify std   stream way std   stream object treat specific kind ost ream 
section will examine simple example illustrate mechanic inheritance 
source_code explicitly show definition method name method inherit
note inheritiance work direction only 
class inherit method inherit method 
give definition class follow code illegal  myb  
private inheritance useful rare situation  majority objectoriented software design public inheritance 
objectoriented language support private inheritance 
object orient design  multiple inheritance common single inheritance base 
next section simple example show inheritance work 
inheritance design tool allow developer take exist produce enhanced
enhanced come expense exist code  inheritance programmer touch source_code base 
developer leverage exist code base duplicate derived_class 
demonstrate inheritance enhance simple 
text object wrap std   stri ng object  string object private text  client string object directly 
client see string method  modify wrap string only limited way append method 
notice method  append  mark vi rtual 
vi rtual keyword designer text intend class derive text will able customize append method 
observe declaration append method include override specifier 
keyword fancytext override  custom method declare vi rtual base 
const const leave  
body constructor empty  initialization happen constructor initialization list 
want assign constructor first parameter  inherit member text  text private base 
mean fancytext constructor initialize directly 
constructor base know parameter  first expression constructor initialization list part 
base initialization expression first initialization list require object inherit base initialize add derived initialize 
next expression initialization list  
body constructor empty initialization work
fancytext alter way work 
fancytext override herite method 
keyword ri de emphasize code method fancytext intend differently code text method 
case fancytext   method build string result concatenate string  first string front bracket string  second wrap string  third string trail bracket string 
notice second string obtain expression 
member specifier vate mean sible period 
derive class special privilege
order perform delegation text   simply  unqualified expression equivalent thi  call fancytext  
mean invoke unqualified definition fancyt ext   recursive call  want 
method declare vi rtual base automatically virtual derived_class 
override keyword add language 
prior method derive signature virtual method base  method implicitly overrode base version 
problem programmer intend override method derive signature wrong 
result method overload original method override
programmer ove de specifier signature match base version  compiler_will report error 
ri de specifier way programmer explicitly communicate intention 
backwards compatibility override keyword optional 
presence enable compiler verify method actually override avi rtual method base 
programmer take care faithfully reproduce signature method override 
ri de keyword context sensitive keyword  mean keyword 
fancytext   append method override inherit append method insert special separator string exist wrap text string string append 
like fancytext   fancytext   append method delegate actual concatenation operation base ing text   append 
code fancytext directly influence text field 
fixedtext  declare define list list  
fixedtext simple fancytext 
add field override method 
constructor accept parameter client permit mine content wrap string text field word fix 
inherit text field method text 
notice assignment  copy object only field fancytext object common text object  text field 
plain text object  racket   connector field capable store additional datum contain fancytext object 
cess lose derived_class datum assign base_class instance know object slicing 
part will fit base_class instance slice 
figure illustrate object slicing 
figure show attempt assignment meaningless base_class instance miss need derived_class instance 
failure properly assign
fi xedtext class instance contain additional datum plain text instance 
legal assign derived_class instance variable base type 
derived_class instance specific kind base_class instance 
contrast  legal assign base_class instance variable derive type 
relationship only directional  derived_class base_class 
text  fancytext  fixedtext class form small class hierarchy 
represent relationship class hierarchy graphical form unified modeling language uml 
figure show uml diagram simple text class hierarchy 
rectangle represent class 
text  base_class  top figure derived_class text 
inheritance arrow point derived_class base_class 
arrow represent relationship flow upward 
visual layout level detail uml diagram succinctly communicate relationship class source_code 
uml large  complex graphical language model facet software development process 
uml http  
nature machine code generate expression 
compiler translate high level expression machine language instmction cause program execution jump part compiled code 
program execution jump
variable declare type ext  program execution jump compiled text   method address pass implicit parameter method compile code access text field 
compiler determine method execute base declared type object  process know static binding early binding 
static binding case non virtual method case see virtual method 
situation pointer object object
variable text object  assignment  perfect sense 
variable declared type fancytext  fancytext object text object  assignment  
declare type pointer text object  pointer fancytext object   expression call fancytext    text   
compiler determine method call case 
answer surprising  compiler determine method call 
case virtual method invoke pointer  running program  compiler  determine exactly code execute 
process know dynamic binding late binding 
static binding easy understand  method execute depend declared type variable method invoke 
compiler keep track declared type variable  choice easy 
inheritance relationship complicated 
example declare type pointer  compiler give authority select method call expression  only choice text    actually point fancytext object 
execute program know code execute 
know instance class_contain copy field declare class 
reality  class_contain least virtual method  instance class_will contain extra  hidden  field  pointer array virtual method pointer 
array method pointer commonly call vtable 
vtable exist class  instance class store pointer share vtable 
compiler assign index virtual method class 
example  text class_contain virtual method  index  index append 
figure illustrate typical scenario vtable 
case compiler translate expression machine language equivalent  invoke correct method instance point
similarly append method   suffix  internally  suffix  
point text instance  vtable point vtable array text class 
point fancytext instance  point vtable array fancyt ext class 
case correct method select program execution 
extended analysis capability complicate compiler  compiler ready complicated piece software 
attempt add ability prove futile anyway cause compiler general determine method invoke 
see follow code fragment  
figure object associated vtable 
will find evidence source_code dash pointer vtable show diagram 
virtual method involve compiler produce executable code build hide data_structure scene 
client call virtual method pointer object  run time environment locate exact method execute follow vtable pointer store object
observe class override inherit method  vtable reference code vtable 
code generate pseudorandom number run time 
generate number  direct point plain object  direct point object 
method will code call  ext   fancyt ext   
code generate pseudorandom number run time  compiler powerless determine exact type object point  compiler determine method call 
compiler generate code jump method find address store associate vtable index correspond method 
list demonstrate vtable pointer occupy space object 
novtable object require byte integer field  hasvtable object occupy byte byte integer field byte secret vtable pointer 
dynamic binding enable powerful technique object orient programming call polymorphism 
know collection homogeneous element 
homogeneous mean element type 
homogeneity take deep meaning inheritance relationship involve 
list declare type text std   
inheritance  only text hold pointer simple object  simultaneously hold pointer object 
see  expression mai function polymorphic  actual method invoke        depend exact type object point 
append method polymorphic
assume value element loop execution  exact type object point varie 
element text pointer object  only element point pure object  rest element point fi xedtext object 
pointer object object achieve polymorphism 
remember pointer store memory address see section 
pointer  matter type point byte bit system byte bit system 
text object pointer object  assign fancyt ext object element text  assignment slice extra field object 
pointer assignment avoid slicing problem 
reason pointer static binding method virtual virtual invoke behalf object  compiler choose method base declared type object 
contrast  dynamic binding virtual method call pointer object  exact type object determine method selection 
derive class override behavior inherit virtual method need 
programmer perspective  program
list package single class functionality class list 
non polymorphic code differentiate text object texttype custom enumeration type 
note method polymorphic early example now conditional logic swi tch statement execute code actual kind object wish model 
approach avoid inheritance polymorphism issue  
object carry burden possible object 
plain object hold left bracket  right bracket separator string fancy object require 
amount memory string occupie depend length number character hold  empty std  st ng object require memory 
application manage mainly plain object consume memory need 
inheritance  developer introduce type touch code exist class 
programmer wish introduce object example avoid inheritance considerable change code  involve following  
small point 
modify exist introduce error 
cause existing application depend text
inheritance  programmer add touch exist 
pre exist application will continue function usual introduce inheritance 
inheritance need access original source order augment data_type 
part pre compiled library  modification 
inheritance  derive exist access control source implementation 
illustrate issue  suppose wish add object bound length list 
texttype type     connector   maximum number character
extend enumeration texttype   bound 
add field limit
note object require special method  still add case label match texttype   bound type 
failure add case label mean object respond unknown type  string 
definitely add append ensure concatenation operation object long 
append method know work flawlessly introduce object  now suspect 
act modify introduce subtle bug  reteste 
non polymorphic small  contain only method 
now suppose access source list 
pure object will string field  period 
fix object contain only single string field 
fancytext object will contain string field  object will maintain string integer_value 
type object will contain only datum require  datum require possible kind object 
derive leave original code base untouched 
code damage fancytext  fi xedtext class 
compile code list 
need header_file list  specify interface
header client wish object  source_code implementation need compile client code object 
linker need compiled listing order link produce executable program  point build process source_code list compile code
inheritance polymorphism approach modular  code work efficient easily supply version compile link application 
modularity enable multiple programmer work independently implement separate class interfere
suppose third party library name message similar class
addition reveal contain  time client call message object method
message method name return number 
message message message modify message  source_code library 
message work 
like maintain collection object  store single vector 
element vector type 
part hierarchy  relationship exist class 
let experiment possible solution problem 
copy object 
try simply copy content object 
unfortunately notice  code call only once  create txt object object 
single call access count
subsequent call object  object 
mean object vector  object vector take advantage service object
inheritance polymorphism encapsulate object object 
messagetext  public 
instance messagetext wrap pointer object 
constructor call wrap object method  messagetext object ject artificially elevate access count object 
call messaget ext object method actually call method object manage 
follow code  
prove sneak object vector object 
technique adapt interface name  adapter design pattern 
adapter design pattern useful property similar incompatible interface 
technique inheritance polymorphism derive desire interface suppose object similar ality interface method  need treat object object 
able adapter design pattern follow  
derive
figure illustrate pack dimensional shape dimensional container 
want determine minimum area container hold give collection part 
real world application compute size small circuit board hold collection electronic component 
program_will simple give only rough approximation  take account geometry orientation individual shape merely compute total area component 
actual answer generally will large result compute program 
interesting problem arise method derive need inherit variable 
variable declare pri vate base  derive method access
pri vate specifier mean   know unwise general instance variable public  break encapsulation 
encapsulation desirable property  third level access protection protect 
protect member  datum method  inaccessible code code derive 
protect illustrate shape code 
assignment zero  virtual method shape special  call pure virtual method pure virtual_function 
special syntax signify method implementation 
possible body method 
contain least pure virtual method abstract 
possible create instance abstract 
compiler enforce restriction  follow statement  
abstract represent abstract concept 
shape abstract concept 
circle  rectangle  kind shape  just shape  kind shape 
create instance abstract_class  abstract_class useful organize hierarchy 
note appearance protect access specifier 
method derive directly indirectly rectangle will able access length wi dth field 
field will inaccessible code class 
list implementation rectangle method 
circle double radius  
drawablerectangle   draw method need access field length wi dth able draw rectangle 
important remember drawablerectangle object contain field inherit rectangle  length wi dth field declare private protect rectangle  drawablerectangle   raw able access field 
support level protection member  
protect member inaccessible non derived class 
sum  private mean accessible period 
public mean open 
ordering impose selection sort function varied custom comparison tion 
object determine sort ordering collect datum number comparison element interchange sort function perform 
list slight variation list 
list client code test class 
design class interesting  
counter field private  only method class access acomparer object datum 
virtual method  compa mpl 
derive class  see override
suffix stand implementation   compare 
public compare swap method delegate part work protect compa mpl method 
compare swap method declare vi rtual  derived_class override
compare swap method manage compa counter field 
derived_class see field  designer derived_class overriding compa mpl swap 
swap method report result client non virtual  derived_class override behavior 
observe designer class allow nature swap derived_class flexible  rigid enforcement accounting perform report 
proper protect pri vate specifier base_class show afford class designer great deal control exactly derived_class designer
derive class adapt behavior  behavior non negotiable 
kind customization programmer want class
overridden method   write text log file 
compare compare compare compare compare compare swap compare compare compare compare compare swap compare compare compare compare swap compare compare compare swap compare compare compare development selection sort function problem  programmer review content log file examine sort progress determine problem lie 
design compa class structure allow inherit class fine tune detail disturb overarch framework 
inheritance polymorphism allow add functionality exist code base 
virtual method extension point derived_class add custom behavior 
construction programming_language option programmer come manage memory execute program 
explore frequently option introduce modem technique aim reduce memory management problem plague project past 
modern operating_system reserve section memory execute program 
code section memory hold program compiled executable instruction 
datum section memory contain global_variable see section persistent local_variable stati local  see section 
variable datum section exist life execute program  constant see section  execute program freely change value 
value_store variable find data segment change program execution  size datum segment change program execute 
program source_code precisely define number global stati local_variable 
compiler compute exact size datum segment 
heap execute program obtain dynamic_memory 
memory heap  delete return previously allocate_memory back heap 
size heap grow shrink program execution program allocate deallocate dynamic_memory delete 
stack local_variable function_parameter live 
space local_variable parameter function call disappear function_return 
size stack grow shrink program execution function execute 
operating system generally limit size stack 
deep recursion consume considerable amount stack space 
improperly write recursive function  example omit base case exhibit  infinite  recursion  will consume space stack 
situation know stack overflow 
modern operating_system will terminate process consume stack space  embed system stack overflow undetected 
heap space typically plentiful  operating_system virtual memory execute program space real memory 
extra space virtual memory come disk drive  operating_system shuttle datum disk real memory need execute program 
program virtual memory run slow program little virtual memory 
virtual memory unlimited  program memory leak eventually run memory 
way function method call subsequent return work  stack grow shrink regular fashion 
expand function_call room execute function local_variable parameter expand function_call function  function_return  stack contract back original size function invocation 
variable remove stack reverse order creation stack 
stack consist contiguous chunk memory area unused space chunk 
heap grow shrink program execute delete  expansion traction regular 
function allocate object dynamic array function later program execution deallocate object array delete 
cuting program delete dynamically allocate_memory order allocation 
mean memory allocate heap contiguous  space deallocated object intersperse space allocate object 
memory heap fragmented program execution 
global variable static local_variable data segment live life execute program 
run time environment initialize global begin execute clean mai return 
run time environment initialize static local function method first invocation 
non static local_variable stack exist only function execute 
program_call return function time  function local_variable disappear time 
execute program create dynamic_memory need  hold long finally release long need 
quantity global datum fix program begin execute  stack datum persistent life execute program 
mean execute program manage vary amount datum arbitrary amount time heap source memory datum 
time environment automatically manage global local memory 
unfortunately  programmer write code manually manage heap datum 
problem manual memory management simple system turn difficult task 
development large software system early day frustrating experience 
memory management issue delete frequently source difficult find fix logic error 
programmer adhere strictly follow tenet  
call associated call delete allocate_memory long need 
sound simple clear delete
call calc  variable exist 
figure show memory strand local pointer scope end function execution 
calc function local_variable 
life stack 
call calc complete  function clean code automatically release space help variable function automatically manage memory parameter local_variable 
problem assign point memory allocate heap  stack 
function execution manage stack memory only 
function execution complete  memory point deallocate automatically 
bad heap memory reference local_variable now unreachable variable remain viable know
correctly write calc function option case  
option easy solution 
calc function need dynamically allocate array  create deallocate return 
single function definition see later correspond delete perfect match pair 
unfortunately  common case 
calc need local working space  handle stack local_variable 
way memory clean automatic 
option possible only caller invoke calc function exactly once  additionally case global pointer  invoke calc attempt global pointer 
common occurrence 
heap enable execute program add extra datum run time persist across function_call 
theory process simple  
problem here see delete 
hide calc  caller exercise delete 
delete_operator free memory allocate
attempt delete memory allocate undefined behavior represent logic error 
pointer call alias 
follow code 
multiple delete memory undefined behavior represent logic error 
memory previously deallocate delete access 
attempt access 
efficiency reason delete_operator generally mark heap space modify content memory 
careless mer accidentally memory delete pointer obliviously still live problem manifest free memory eventually reallocate call result program  work  mysteriously dictable time 
debug situation difficult 
aliase problem concept variable 
variable name natural assume represent object 
er reference introduce possibility aliasing  reference semantic 
reference semantic enable useful technique call reference traversal dynamic data_structure like link list  reason identity object reference semantic require extra caution 
simple sure exactly correspond delete  practice difficult determine exactly delete 
suppose  example  obtain
enter create node create node create node create node create node create node create node destroy node destroy node destroy node 
destroy node destroy node destroy node destroy node destroy node destroy node destroy node leave observe widget   destroy twice 
system program crash printing leave
double deletion classify undefined behavior  represent bug program 
return process  traverse vector release dynamically allocate_memory ensure delete object once 
careful account allocation object value  know program early call store result global_variable outlive call process 
need implement code complex global accounting infrastructure keep track memory allocation 
node contain integer node  contain node field contain integer node  nest containment
structure understandably illegal  compiler_will issue error 
allow class struct field type class struct define 
object definition look similar  legal structure  
pointer simply memory address hood  pointer variable size regardless declare type 
ability object refer object like merely interesting curiosity  practical application 
suppose wish implement sequence structure like vector 
self referential structure define build node object link pointer 
list build small link   
figure line next field node represent null pointer 
list augment simple node struct add constructor program dynamic_memory call  possible only know node ahead time 
enable visit node nl    finally will point  last node list 
next field nullptr  loop reassign next field  will nullptr  loop will terminate 
value nullptr boolean context false  simplify boolean pression 
follow statement       simple 
know node value ahead time  following 
sense link list only element unknown ahead time 
dynamically allocate space element
armed knowledge class  encapsulation  method  build client friendly  dynamic link list type 
code find list intlistl   list  list demonstrate power link list 
list header_file simple integer link list class 
struct declare intli stl class 
nest struct 
declaration private section oflntlistl  type know only code intli stl class 
declaration nest intli stl class  complete name type intli stl   
recall struct equivalent class  default access member public 
define nest class manner define nest struct 
notice intli stl class private method addition public method 
code class execute private method directly 
private method helper method public method invoke accomplish task 
public method delegate work private helper method 
delegation here 
private method recursion require parameter type intlistl   unknown intli stl class 
client unable private method directly  public 
public method expose client detail class implementation  specifically keep intlistl   type head tai instance variable hide client 
observe overloaded length method private public print method intlistl class declare const 
print list request length modify intlistl object 
client print length method constant intlistl object 
attempt insert clear constant intlistl object will yield compiler error 
error here sense nsert definitely will modify list object  clear potentially will modify list object potentially here clear will modify empty list 
clear method responsible deallocate list node  effectively clean memory hold list 
list sample client code exercise link list 
observe client code pointer
pointer manipulation hide intli stl class 
pointer programming tricky  easy introduce subtle  hard find bug  encapsulation once result easy robust application development 
node struct private intli stl  reach programmer who link list 
show intlist   dispose method  pointer variable condition conditional statement loop 
null pointer interpret false  non null pointer true 
mean pointer  statement 
programmer short syntax 
order understand recursive method work  think structure node object interpretation  node object hold datum item pointer rest list follow 
pointer node null non null 
null pointer represent empty list 
non null pointer represent non empty list consist part  first element list rest list 
next field node object null  rest list empty 
arm view list now examine behavior recursive link list method detail  
length empty list zero 
length non empty list least non empty list contain least element 
notice  recursive call delete node list delete current node 
attempt access datum pointer delete deallocate datum result undefined behavior  logic error attempt
mean code dispose write
recursive method review recursion  recursion strictly function 
express public clear function show follow code snippet  iterative version clear 
mention section give basic algorithm implement recursively iteratively  iterative version will efficient 
recursive call require additional stack store fresh local_variable parameter 
only recursive method function require memory  take time complete execute program perform extra work set need recursive invocation restore context recursive invocation return 
build large link list  call recursive clear method consume considerable stack impose significant performance overhead 
future version link list code will iterative version clear method 
optimize method  will choose route 
application age large list frequent call method  iteration take considerable time 
add integer variable intlistl class keep track number element list 
variable affect class_member follow  
constructor initialize variable zero 
insert method increment variable time client add element list 
clear method reset variable zero 
time spend loop element list count considerable large list  
intli stl class code define list intlistl list intlistl useful introduce concept implement link data_structure 
intli stl class fundamentally early custom class examine section  tion clea mention ready client alternative std   vector  servere limitation pitfall practically useless application 
section expose weakness introduce modification require viable  high quality class worthy application require dynamic link list data_structure 
intli stl   nsert method dynamically allocate ory list element heap 
essential programmer intentionally call clear finish link list object 
follow function definition  
variable st local function
function finish execute variable st scope 
point stack allocate local intli stl variable_name st reclaim  list heap allocate element remain 
only access program memory st 
present classic memory leak 
observe class design intli stl potential problem 
fortunately way class designer specify action occur end object lifetime 
analogous constructor execute code beginning object existence  destructor special method execute object cease exist 
destructor name class  tilde prefix 
destructor accept argument 
list add destmctor list add previously suggest optimization clear method 
constructor destructor execute 
local global object definition call class structor properly initialize object  example  seq  define object seq 
definition invoke intli constructor set seq 
seq local_variable  destructor execute end function execution 
seq global  destructor execute program finish 
pointer object  point object 
mean definition  invoke intli constructor 
give definition statement  actually create intli object call intli constructor newly create object 
object point destroy programmer delete 
here node constructor identify element create print data field address reside memory 
strict conversion pointer non pointer type easy mistake intend simple stati will work here 
rei remove safeguard treat bit pointer ui  integer type guarantee represent range value pointer 
destructor node object destroy 
list program list  intli object intli object 
function_return  st long exist  long access node allocate 
leave intli
list print following  
show intli destructor properly deallocate dynamic_memory hold link list object 
node constructor execute declare node object create node object assign node pointer 
nsert method create node object  invoke constructor 
node destructor execute object scope delete deallocate dynamically allocate object 
intli destructor delete free node list 
scope end function execution  stack variable away  pointer  object  destructor code execute 
client explicitly free memory delete  
see  dynamically allocate list node store element bring back situation remember finish
case remember delete list
destructor help here 
example demonstrate dynamic_memory enable interesting avoid absolutely achieve behavior need 
destructor perform reverse role constructor  constructor ensure begin life define state  destructor responsible perform action require life
destructor unnecessary class 
link list  destructor essential node comprise link list dynamically allocate
memory allocate corresponding call delete memory long will
clear method will take care memory deallocation  destructor  programmer remember intentionally call clear finish link list 
destructor relieve programmer responsibility remove possibility memory leak 
destructor simply call clea clean resource hold list 
list demonstrate execute program destroy local global
enter enter create widget create widget 
create widget leave destroy widget destroy widget 
destroy widget enter create widget create widget 
destroy widget leave leave destroy widget 
add destructor intlistl class significant step correct deficiency 
run program run completion  program_will crash print
system program crash print last line output 
run list output show program destroy node contain   
program destroy node contain twice 
see program delete memory twice compare memory address parenthesis 
undefined behavior double deletion cause program crash time 
problem statement  
additional guidance programmer  assignment programmer define type simply copy bit memory object right assignment_operator memory reserve object left side assignment_operator 
visual bit executable  example  intli object occupy byte memory byte head pointerplus byte tail pointerplus byte
actual size intli object will vary system system will large bit computer 
verify actual size object system add follow statement list 
produce undesirable result  
mean action modify list manage will modify identically 
assignment_operator copy content 
mean link list object behave differently std   vector object assignment  assign vector copy contain element 
client will expect link list object behave similarly 
aliase problem  least problem 
simply redirect head tai pointer list render node original list unreachable variable program 
program way delete node original list 
constitute memory leak 
object local mai function 
base declaration order  constructor execute constructor 
mean mai finish execute destructor will execute destructor  object destruction occur reverse order object construction local object 
destructor will free node list 
next  destructor will attempt delete memory occupy list 
unfortunately involve reference delete dynamic_memory previously delete 
attempt delete delete memory result undefined behavior result memory corruption 
list crash run 
fortunately way programmer customize assignment work custom type 
tackle assignment distinguish initialization assignment 
follow statement  int  statement define initialize variable 
statement fundamentally follow statement  int   simple type like integer  float point number  character  pair statement surface behave identically single statement
statement involve declaration follow assignment 
initialization assignment
recall section alternate syntax initialization  int  
give programmer full control initialization assignment custom type 
see specify initialization constructor 
order legitimize link list class safe client need additional constructor  call copy_constructor  define assignment_operator class 
node head  point first item list 
expression constructor initialization list follow colon call overloaded version constructor accept argument 
know constructor delegation 
argument constructor simply initialize head tail nullptr 
here call constructor  general  delegation idea 
delegation avoid code duplication  currently code argument constructor  decide add functionality future 
delegate  add extra activity argument constructor add copy_constructor 
constructor begin brand  object 
case link list object  mean constructor worry clean preexist list node 
copy_constructor need ensure head tai instance variable initially null constructor delegation take care visit node list  insert node datum value list
next will assignment 
suppose link list object 
mean assignment course operation deallocate original list node  manage assign list 
failure introduce memory leak 
assignment copy value assign list avoid aliase 
way implement assignment ensure work correctly  assignment nature common operation  programmer develop standard idiom guarantee correctness assignment 
practice dictate implement assignment process 
entail local temporary copy assign list swap list node temporary list list node assign list 
note swap list node simply require swap head tai pointer object 
copy swap process depend correctly implement copy_constructor correctly implement destructor 
miss call delete free preexist list node assign list 
assignment magically meet requirement correct assignment 
recall copy_constructor loop traverse assign list  copy node list 
solve aliase issue explain assignment actually visit node list 
mean assign list object now hold copy assi gn rom list  list object hold list originally manage assign list object 
local_variable list object temp scope end function execution 
temp object destructor execute time 
object now hold assign object original list  destructor properly deallocate node assi gn object original list 
call delete prevent memory leak find link list class destructor 
figure illustrate copy swap process assignment 
assignment leverage code write copy_constructor destructor 
implementation assignment correctly address aliasing memory management issue necessarily duplicate functionality copy_constructor destructor 
note   method declaration return reference object  see last line   body method tually return reference object left side assignment invocation 
recall thi keyword represent pointer object caller invoke method case assign list object 
list object  execute statement 
typical idiom define programmer define type 
define ope rato method return declare return_type voi 
define method return type object intli 
intli object will behavior properly chain assignment see section 
illustrate  suppose   properly declare intli object 
define intli   method return voi follow statement   
original definition intli   method return ence intli object left side assignment thi  compiler complain chained assignment work flawlessly manner chain assignment involve build numeric type  execute chained assignment statement will contain exact copy element 
figure annotate output list update intli class 
amine carefully memory address parenthesis convince implementation correct copy_constructor  assignment  destructor class solve aliasing  memory leak  undefined behavior problem 
create create 
create seql original list create create 
create seq list 
see figure annotate output list update intli class 
output demonstrate assignment now work correctly link list object 
correctly implement copy_constructor  assignment  destructor class solve aliasing  memory leak  undefined behavior
copy_constructor  assignment  destructor special relationship 
method involve rule
rule class designer feel need add copy_constructor  assignment  destructor class  class
way  mistake just special method define class include
rule design guideline  requirement language compiler enforce 
rule exist 
object guarantee perform action end existence failure result undesirable consequence program continue execute  object class contain destructor 
essential action involve release resource
destructor responsible release resource  copy_constructor acquire resource way resource existing 
assignment release resource acquire resource resource exist leave
omit destructor  default destructor resource clean
object acquire resource copy construction assignment release
resource like memory finite  lack destructor will limit number object execute application 
omit copy_constructor  default copy_constructor will copy bit exist
mean copy construct will exact resource manage
destruction exactly object will release resource hold
non destroy will access resource need function 
omit assignment  default assignment will copy bit exist exist 
mean assign will exact resource manage
mean resource assign originally hold reclaimed 
destruction exactly object will release resource hold
non destroy will access resource need function 
sum  reason design class violate rule
lvalue stand left  left side right side assignment_operator 
expression + classify rvalue  only right side assignment_operator left side  example  follow statement illegal  +  illegal 
term temporary program reuse memory purpose 
follow variable declaration  
variable  continue exist  aliase valid quantity 
permit const reference temporary 
follow code fragment legal  
case behave simply const int 
work expect
function accept reference variable  caller attempt pass temporary 
once function begin execute  memory reserve original temporary invalid  compiler rightly permit
simple declaration see give function 
example bit esoteric  pave way efficient link list 
figure annotate output listingi explain 
way  expression represent int li return st function pass actual parameter 
expression st rvalue  temporary  left side assignment_operator 
int li copy_constructor accept const intli parameter  will accept temporary  copy temporary copy_constructor 
wasteful copy transient 
list contain million node  additional construction destruction time consume 
permit special kind reference rvalue know rvalue_reference 
rvalue ence enable programmer alias temporary copy 
follow code  
figure annotate output list 
examine carefully node memory address parenthesis 
execute program first create temporary intli return 
copy construct temporary destroy temporary 
print link list  program finally destroy li st 
call reference parameter  result 
call rvalue_reference parameter  result expression twi ce call twi ce function lvalue  call first version twi ce 
expression + rvalue left side assignment_operator twi ce + twi ce invoke second version twi ce function 
example integer see help understand mechanic rvalue_reference  honestly  rvalue_reference offer little value simple type like integer 
guage designer introduce rvalue_reference specific purpose copy construction assignment temporary efficient 
rvalue reference exactly need link list integer efficient deal temporary list 
list declare fifth generation integer link list class 
contain constructor overload add assignment_operator overload  accept rvalue_reference 
additional constructor know move_constructor  additional assignment know move assignment 
discourse clear  will refer original assignment copy assignment 
compiler disambiguate overloaded method virtue actual parameter pass caller  
caller pass lvalue  compiler generate code invoke copy_constructor copy assignment 
caller pass rvalue  compiler generate code invoke move_constructor move assignment 
purpose move construction efficiently move resource hold temporary create 
want avoid copy temporary 
similarly  purpose move assignment efficiently move resource hold temporary exist create
copy_constructor copy assignment design copy 
safe steal  resource temporary temporary transient later program 
temporary object transient  nonetheless real  nameless object 
class temporary destructor  destructor will execute temporary ephemeral life
mean move_constructor move assignment move temporary resource leave temporary define state temporary destructor job 
follow implement move_constructor intli class  
move_constructor delegate constructor accept argument 
initialize head tail pointer nullptr 
note represent empty  valid link list 
move_constructor exchange head tail pointer create temporary 
effectively move temporary list node move empty  valid  list node temporary 
copy_constructor finish  temporary life
temporary still contain valid list node  destructor execute successfully 
observe copy_constructor traverse list node copy element individually 
mean move construction list node require time move construct empty list 
note parameter move_constructor declare const 
declare const  possible swap content create 
move assignment similar move_constructor  assignment  course  begin initially empty 
ensure move assignment leak memory preexist list node contain 
implementation move_constructor intli class look similar move 
only difference move_constructor will give empty list
move assignment exchange list list 
list empty  general will empty 
move assignment return  pass will cease exist 
destructor will properly dispose original list node 
st function create  account statement begin create 
move_constructor exchange list node empty list find newly create 
point contain original list contain empty list 
destructor execute find node destroy null 
end mai function st destructor delete node st 
note compiler detect function create local result merely return caller 
compiler return_value optimization see tion avoid create extra function return caller 
compiler generate code enable st function create link list directly ronment caller 
addition move construction move assignment bring rule
rule involve copy construction  move construction  destruction  copy assignment  move assignment 
programmer define special method class  compiler automatically will version work properly class support value semantic  example  class value semantic 
class value semantic avoid memory management aliasing issue encounter link list class 
programmer define copy_constructor  destructor  copy assignment  compiler_will automatically supply move_constructor move assignment 
problem program correctness move construction move assignment merely optimization avoid unnecessary creation extra construct signing rvalue 
miss move_constructor mean copy copy_constructor  miss move assignment mean copy copy assignment 
programmer precisely control special method compiler supply itly mark method default delete label 
will detail here  merely example 
 illegal  client integer want client able create object integer argument  overload constructor default constructor force compiler generate default label  show here  
add destructor supply copy_constructor define copy assignment 
justify decision 
reality  struct need destructor 
link list class_will operate flawlessly inner struct destructor 
code struct allocate resource 
outer link list class responsible allocate deallocate memory resource 
link list method manipulate object passive datum 
add destructor only see exactly program destroy object 
enable detect memory leak multiple deletion refine link list class robust useful type 
destructor clean resource impact work compiler generate copy_constructor compiler generate copy assignment_operator
remember  follow rule reason
case  reason destructor prompt write copy_constructor copy assignment_operator properly coordinate destructor 
order emphasize intentional decision violate rule rewrite node 
explicitly default copy_constructor copy assignment_operator  omit accident 
inclusion destructor prevent compiler automatically generate move_constructor move assignment_operator 
declare method default  compiler_will generate
object contain only simple type nt pointer omit explicit default method declaration will
 move  integer merely copy
simple integer resource need steal temporary  simple assignment need 
similarly  pointer refer elaborate object sort  pointer simply address 
copy move construction copy move assignment handle
programmer manually manage dynamic_memory delete follow style inherit directly programming_language 
modern programming_language like python  java  manage dynamic_memory technique call garbage collection 
garbage collection take care account avoid multiple delete memory leak 
garbage collect language programmer need only call equivalent garbage collector take care free space later execute program long dynamically allocate object 
garbage collection work add overhead execute program 
overhead consume extra memory affect program run time efficiency 
strive efficient possible  automatic garbage collector 
garbage collect language typically allocate object heap  manage object uniform manner 
support statically allocate stack allocate object  heap allocate object 
heap allocation sightly slow  heap fragmentation degrade program performance 
follow mantra only pay mean program need heap incur run time cost heap 
efficiency benefit non garbage collect language convenience garbage collection desire 
achieve way 
way see enjoy benefit time 
std   vector class manage dynamic array  delete scene 
software engineer implement std   vector carefully right ing aliasing  memory leak  multiple deletion 
modern possible write program manage dynamic_memory delete directly 
style smart pointer   pointer know  exactly deallocate memory reference 
smart pointer eliminate need manual intervention part programmer 
smart pointer automatically delete associated memory proper time 
std   sha type example standard smart pointer 
suppose follow wi dget type  
std   function eliminate need
scene allocate memory object create  programmer see 
end object lifetime  programmer call delete smart pointer  smart pointer automatically call delete proper time 
std   function enable programmer work dynamically allocate_memory delete directly 
remove possibility memory leak multiple deletion haunt manual memory management 
expression std   red wi name inside angle bracket type object create  value parenthesis argument pass type constructor 
compiler know function_will return type std    need spell exact type left side 
once define way treat syntactically raw pointer  example  point dynamically create object 
destroy widget 
code testl modify value wi dget object 
important note local_variable testl  space std   stack 
call std   red create widget object heap 
scope end testl  execution  desructor automatically call delete deallocate widget heap 
usual function_return mechanism automatically remove stack 
next line output  
next line output  
program include function simply demonstrate std   sha object manage dynamic_memory simple type just fancy type 
simple type report destruction memory free  rest assure std   object will deallocate memory correctly 
next line output  
first invocation 
first call initialize stati local construction std   sha associate widget object 
static local_variable survive call  deallocate program finish execute see 
next line output  
mean destroy widget 
output final test function   see 
create widget destroy widget leave test function allocate just wi dget object 
assign std   sha object widget object 
clear justification name pointer share access object 
std   type  statement 
regardless aliasing  code allocate exactly widget object deallocate widget object function complete execution 
final line program output  
destroy widget 
analyze output listingj carefully  will see constructor call associate destructor call object remember testl rename widget  compare widget creation address widget destruction address  will see match 
heap space wi dget object list  see delete code 
ability deallocate reference memory proper time std   sha object smart pointer 
recall list demonstrate difficulty manage dynamic_memory manually 
list convert raw pointer list std   sha rs 
long need worry who  memory heap allocate object  std   object manage detail 
enter creatin creatin creatin creatin creatin creatin creatin leave destroy widget destroy widget destroy widget destroy widget destroy widget destroy widget destroy widget 
std   smart pointer  know  call delete free object 
give follow widget type  
follow statement  widget object create nullptr  redirect point
point variable reference wi dget object create early 
mean object effectively cut remainder program execution 
abandon object classify garbage 
term garbage technical term computer science refer ory allocate execute program program long access 
reference count garbage collection work follow 
object dynamically create std   constructor std   convenience function associated reference count 
execute program create manage std    set share pointer reference count 
execute follow statement  auto  
share share reference count 
finally reassign  nullptr  reference count contain drop zero 
std   sha class custom assignment_operator 
process assignment alter reference count object manage smart pointer 
assignment cause share pointer reference count come zero  share pointer delete attach assign 
assignment increase reference count assign
std   class method name return reference count current manage share pointer 
list exploit 
create destroy 
class see delete_operator 
destruction first will destroy 
result destruction second destruction second destroy next pointer lead distruction third  follow fourth 
cascade process ultimately destroy node list point 
simple implementation clea achieve result involved clear method list loop  complicated code 
turn simple method problem long list 
see suppose long link list 
clear method set std   null  smart pointer will point first 
smart pointer reassignment case call method scene destroy object point object point  first list 
clean method return process complete  long list  process lengthy 
destruction first require destruction next pointer  
pointer point second list 
destruction pointer trigger destruction second std   object point
mean clean method return  chain event set invoke clean method lead destruction second 
destruction second necessarily destroy next smart pointer second 
turn lead destruction object point third list 
process  destruction third list lead destruction fourth  fifth 
cascade method call continue reach last list 
smart pointer point last  next pointer next last list tai pointer li nkedli st object
destruction next last remove smart pointer
mean clean method next last destroy last 
turn memory leak  clear method set nullptr  eventually last will destroy properly 
work perfectly automatic resource management advertise problem long list 
leave activity linkedlist   clear method destruction next next last smart pointer clean method destroy next last list 
problem destruction first list complete destruction second complete 
destruction second complete destruction third complete  forth 
mean clean method destroy first job  return  clean next pointer  return second complete clean course  complete third clean finish 
theoretically  chain function_call eventually return back action initiate reassignment nullptr  list long  case 
method invocation consume stack space  long list call chain deep overflow stack  cause program crash 
scenario similar recursive function recurse deeply 
system program crash attempt destroy link list contain node 
version clear list iterate list set next pointer node recently visit nullptr 
next iteration pointer destroy reassignment
mean destroy next smart pointer  previous iteration set null 
eliminate chain problem allow previous destroy single function_call return
version deallocate list series separate  isolated function_call return chain function invocation potentially overflow stack 
link list class insert method allow client add element list 
 add follow method  
remove method complicated nsert method nsert method add back end list 
remove method able remove list front  back 
remove method intli smart list class look like following  
flexible sort example list  list  list allow arrange integer vector creative way perform interesting activity log 
example demonstrate power function pointer  inheritance  polymorphism 
flexible powerful technique contain major limitation  deal vector integer only 
comparer class ing list  flexible  selecti function list 
selecti function accept vector integer comparer reference 
need sort vector double precision float point number vector std   stri ng object 
unfortunately  flexible  code handle seemingly minor variation 
look template mechanism enable programmer develop truly generic algorithm data_structure 
will see standard library embrace template nology wealth generic algorithm data_structure greatly assist developer construction quality software 
situation bad follow code      xyz   std      std      
example  follow function compute sum integer  int nt 
second code fragment attempt pass double precision float point value sum function 
unfortunately  sum function accept only vector contain integer 
precisely  sum accept only argument type std   nt  std   double object std   nt 
solution easy  just copy paste original sum function change occurrence double   create overloaded sum function  double std   double double  double elem  + elem  return  work  duplicate effort unsatisfye 
overloaded sum function identical type involve 
action function initialization  traversal arithmetic essentially
general  code duplication undesirable 
programmer discover repair error function remember apply correspond correction function overloaded counterpart 
sum function share common shortcoming  tie way data_type 
convenient able specify common pattern let compiler fill type require 
case like able write function operator parameter type compatible 
sum  like create generic function work vector contain numeric type 
enable programmer write generic function template 
function template specify pattern code  programmer compiler supply exact type need 
template keyword function definition follow normal function definition pattern template compiler attempt produce correct function definition 
function template know generic function 
typename keyword identifier follow case placeholder type_name 
type parameter stand actual type determine
identifier name legal variable  function  class  programmer prefer descriptive name comparetype typeparam 
single capital letter popular type parameter name programmer 
just regular parameter function method represent value  template parameter represent type 
reserved class interchangeably keyword typename context  
list compiler generate function  accept integer  accept double precision float point value  accept string object 
programmer see source_code  compiler effect create follow literal function definition  
compiler instantiate function only need 
list contain std   stri ng object  process source_code compiler instantiate version accept std   stri ng object 
efficiency purpose  way write 
notice parameter pass reference  value 
mean caller pass only address object need copy function 
big difference represent large object 
parameter const reference  function change state caller actual parameter  function offer call value safety overhead copy parameter 
template definition specify type parameter identical 
literal literal 
compiler automatically instantiate function accept nt double mixed type 
solution require programmer explicitly instantiate function show here  std       force compiler instantiate call integer version 
compiler_will issue warning truncate 
statement std   double     double precision float point version compile cleanly warning widen double automatic 
rewrite template function avoid need explicit instantiation 
flexibility  express template function
flexible template function allow compare mixed numeric expression  general sense expect parameter type 
return summation function  express sum generically
angle bracket follow template keyword contain declaration template parameter 
compiler generate automatically secretly 
programmer see instantiate template function source_code 
preprocessor modify version source_code compiler see section review preprocessor role program build process  modern compiler generate machine language version instantiated function directly programmer source_code 
recall swap function list 
here type parameter name swap function work fine  need write function standard_library include std   swap template function swap function show
follow function_will print content type  
notice function mai function 
selecti rt function
explicit instantiation require compiler automatically instantiate function actual call function pass real parameter  pointer function function invocation 
point program call function only pass pointer
call type compiler actual parameter pointer function contain parameter
compiler need assistance explicit template instantiation 
call swap actually invoke std   swap function standard_library 
nclude uti li ty directive bring declaration std   swap  template function 
compiler instantiate actual function template function only type substitute
expression foutl  illegal exist compare std   ofstream object  compiler produce machine language represent 
programmer template incorrectly construct incorrect template function class  compiler detect report problem 
current compiler share weakness template processing  poor human readable error_message 
error_message compiler produce situation tend lengthy difficult decipher experienced programmer 
compiler base error_message processing instantiated code  original un instantiated code 
programmer see only un instantiated source  decipher compiler template error_message tend challenging usual 
type float point programmer define type non type template parameter 
standard_library contain function  see 
class_template specify pattern structure class object type independent way 
class_template mechanism key tool create generic type 
simple example  basic point class represent dimensional point object 
mathematical point object real value coordinate approximate precision float point value 
point graphical display  hand  integer dinate screen pixel discrete  whole number location 
separate class  write class_template let compiler instantiate 
list  comparer object specify list 
template  copy intli st code modify work st ri ng object integer 
call class st ngli st 
note code intli st stri ngli st class identical  only major difference type element list hold 
class_template feature ideal design generic container class 
linkedli nt list  
destroy node 
destroy node 
just instantiate function template multiple type program  class_template 
class_template li nkedli st list follow client code possible  int intlist  
std   vector 
write generic function_name accept std   vector contain comparable 
function return vector non decreasing ascend order  function return false 
write generic function_name accept argument type comparable second argument consist std   vector contain type first argument 
function return true first argument member second argument  function return false 
augment list add method name prepend add front generic link list 
augment list add method return true generic link list contain exactly exactly order  method return false 
line method utilize method 
mechanic generic_programming template 
standard_library leverage template rich collection standard generic container algorithm manipulate container process contain 
part standard_library commonly know standard template library  stl short 
name imply  stl contain number generic function class build template 
see std   vector class 
design container iterator stl generic algorithm possible 
algorithm stl powerful flexible  arcane difficult casual programmer 
explore feature stl  example illustrate bilitie 
familiar stl container  std   vector 
vector object manage primitive array 
array come variety  static dynamic see section 
vector manage dynamicallyallocate array 
vector object expand need storage space low level array 
stl equivalent static array std   array class 
programmer specify size std   ray object declare
follow code create std   ray hold integer_value  
note second template parameter non type parameter see section specify size array 
able modify array size method  std   array object work like std   vector 
array object keep track size  primitive array 
list develop generic link list class_name li nkedli st 
practice deal generic type  work invent wheel stl generic std   list class 
stl implement link list pointer connect node successor node predecessor node 
list forward backward pointer know doubly link list 
list third final variation list program 
list custom class implement singly link list integer 
priority queue data_structure allow client store object priority ranking 
client insert object order  priority queue will serve remove high priority object low priority object 
properly design priority queue support fast insertion removal operation 
library std   pri ori class 
note priority queue serve large value small value regardless insertion order 
equate larger value number high priority 
want change notion priority lower value number high priority large number  std   class flexibility
define special class struct public method name 
method return boolean result accept argument type element hold priority queue 
follow cmp type  
first output line false 
second line reveal true  last line see false 
expression op  look like call function_name op  just syntactic sugar  
see invoke method name operatorq behalf op object 
list complete code apriority queue hold integer
custom comparer class modify default priority queue ordering 
std   pri ori class serve wrapper exiting container type 
cmp type comparer object priority queue will order item 
armed ability precisely specify priority queue define priority  store type object priority queue 
default  std   pri ori class store type object compare operator 
include basic numeric type nt  double  unsigned  std   string object 
std   complex class see section model mathematical complex number 
relational operator    practical mathematical meaning context complex number  automatically support operator comparison std   complex object 
define ordering 
let bi di complex number 
will define bi high priority di distance bi complex plane distance di 
distance bi +  distance + 
follow custom comparer class implement notion complex number priority  
custom comparer object allow place item priority queue inherently numerical
suppose write part message system process text message 
addition text message  message integer priority range 
low numbered message priority message high number 
instance follow struct model simple message  
mean element
section demonstrate pointer access element array 
vector object manage primitive array  developer vector class design vector look feel possible array 
adopt square bracket operator access element 
devise way programmer pointer like object access element vector 
pointer like object call iterator 
iterator object allow client traverse access element data_structure implementation independent way 
define global function  std   begi std   end  produce iterator front back  data_structure like vector static array 
tainer define int stl begi end method serve purpose  example  std   vector  std   begi return iterator call
function standard_library accept iterator argument array vector work equally vector array 
accept iterator argument  standard function additionally able work sophisticated data_structure 
will examine standard function later
order behave like pointer  iterator object follow method  
syntax exactly like pointer dereferencing see section 
syntax exactly like pointer arithmetic see section 
type std   vectorci   iterator complicated expression terator type define std   nt type 
short way express statement take advantage compiler ability infer variable type context  
std   begin function_return iterator pointing first element data_structure  
attempt dereference iterator  expression ter case undefined 
normally iterator return std   end function test see past end data_structure 
list demonstrate 
method begi end std   begi std   end tion 
list modify version list
type std   begin std   end function overload participate 
follow code 
section manipulate pointer pointer arithmetic 
point first element array  point sixth element array 
expression + point next element array  move backwards position 
similar arithmetic iterator list potl illustrate 
subtraction option kind iterator 
specify range pair iterator  iterator point first element sequence  iterator point position just past end sequence 
global function std   begi std   end fit definition range 
suppose vec
iterator std   begi vec std   end vec span
section introduce technique traverse array pointer range 
pass array literally address first element size number element traversal function  range base approach pass array literally pointer first element pointer position just past end array 
notice pointer range base array technique correspond directly iterator object return std   begi std   end function 
iterator object behave like pointer  write truly generic code process array vector 
follow function iterator count number time value 
type element
first parameter selecti rt generic  code function treat parameter pointer 
ator object behave exactly like pointer extent exercise selecti  compiler instantiate template accept pointer iterator argument 
similarly  pri function work equally pointer range array iterator vector 
function demonstrate flexibility print function array pointer range iterator 
scene compiler_will automatically instantiate overloaded pri nt function overloaded selecti sort function 
client vector  array  sequence type overload begi end function 
client work sequence contain element type support tor 
client customize element ordering 
primary benefit function write function code once invoke place program invoke program 
ordinarily  order call function  know name 
example see invoke function name 
list section example invoke function name directly 
see function_name evaluate accept function parameter  
answer  course  evaluate invoke function pass
code evaluate function demand caller function first parameter 
mean write separate function name order call evaluate 
once create function name call program definition declaration 
want ensure function_will execute exactly time only invoke evaluate 
term lambda come lambda calculus see ki wiki lambda calculus  function base mathematical system develop alonzo church 
concept lambda calculus lead development modern computer 
lambda calculus basis modern functional language like haskell 
construct identifie lambda function  first argument pass evaluate function take integer parameter 
notice result pass lambda function here pass multi ply function fromlisting compute product parameter 
interesting aspect lambda function create closure 
closure unit code case function like object capture variable surround context 
capture variable original context 
order demonstrate closure  first explore function_object 
std   uncti object work like function pointer see section 
std   uncti
note type parameter int inside angle bracket 
first represent tion return_type 
nt inside parenthesis specify function parameter 
function object take place function pointer 
function pointer  function_object 
function object capability simple function pointer  include ability manage closure 
note mai create function lambda expression pass 
variable capture square bracket 
value code invoke lambda function 
case function see value local mai pass explicit parameter 
lambda function capture variable
invoke function caller  access variable_name
involved conditional expression capture mai
example closure transport capture variable function_call 
example closure transport capture local_variable function 
lambda capture mechanism capability example show here  example  expression square bracket capture variable reference  allow external context modify variable 
note closure capture variable reference  variable exist original context long closure viable 
mean attempt capture local non stati variable function reference closure return function 
local_variable disappear function_return  reference will refer garbage value 
unfamiliar calculus  need know derivative function function  formula show transform function derivative 
process compute derivative know differentiation 
notation answer precise value close zero 
let exactly zero result division zero  undefined 
trick small possible  keep mind computer float point value limitation 
base mathematical definition define function compute derivative function  show here  
function derivative return closure capture function_parameter
deri vati ve function allow compute derivative function give_value 
know numerical differentiation 
approach emphasize calculus course symbolic differentiation 
symbolic differentiation transform formula function formula 
detail symbolic differentiation scope text  will result function check compute numerical result 
flexible design stl container iterator possible stl generic algorithm 
algorithm stl powerful flexible  arcane difficult casual programmer 
stl algorithm view building block specific task require application 
order stl algorithm include follow preprocessor directive  ffinclude algorithm simple algorithm std   
function apply unary function element container 
like algorithm will see  iterator drive loop scene 
follow statement print element std   ti st object call seq hold integer  
std   iota function  delare numeric header  simple handy function fill container ascend number 
std   ota function allow replace follow code  
std   copy function copy element container
std   transform function work like std   copy expect function modify copy element 
function require begin end iterator source container begin iterator tion container 
list illustrate std  copy std   transform 
std   copy function superfluous vector perform
std   count serve role function list 
last argument std   function accept single value type container declare hold 
function_return true false 
function return boolean result know predicate 
stl algorithm  like std   expect predicate allow process only element satisfy predicate 
example  std   function copy only element container satisfy give predicate 
list std   std   copy relevant portion vector 
observe list assign lambda function variable pri 
write lambda expression twice  print seq test evenness
predicate lambda function global name function lambda function convenient 
std   generate function populate container base generating function 
first line output will last line will vary run next 
std   accumulate function apply binary operation element container produce single value 
list show std   accumulate function action 
expect output  + + + +  
theory  approach efficient avoid 
tion concatenation create   stri ng object exist   
especially long list  repeat creation process unnecessarily waste time space 
container contain string    accumulate function_will ate way produce final accumulate result 
numeric arithmetic create accumulate container hold number 
append character end exist object  avoid creation case simple familiar loop preferable sophisticated stl algorithm 
follow code illustrate efficient solution  
number string small  difference 
only collection string concatenate large will detect performance difference 
list test algorithm 
run show   accumulate fast  difference single digit millisecond 
std   remove std   function remove element
remove achieve result generally desire 
first line show content original vector 
second line show modified vector remove 
element definitely vector contain number element
close inspection reveal element follow original vector shift forward position 
removal leave hole vector follow element shift forward fill 
fine  last element   copy forward remain last element vector 
order actually remove element result container small  couple remove container erase method 
erase method accept iterator establish range element delete container 
list show remove section vector std   vector   erase method 
return_value call remove return iterator pointing second occurrence second line output 
third line output call return pointer second occurrence
note case iterator point first element remain value erase vector 
combination std   vector   erase std   remove know community 
stl contain number algorithm process generic container 
example include 
now create name function type program write 
blanket usi ng directive present problem time std namespace contain hundred type function_name  easy programmer accidentally reuse purpose name claim std namespace 
name conflict lead problem software development  development process generally challenge address  practice avoid blanket usi ng directive 
list define max function compute number time maximum 
mai function try function sample vector 
notice blanket usi ng namespace std directive function type_name std namespace program 
common practice frequently will encounter approach publish code 
program work correctly  print following  standard_library contain function_name  declare algori thm header 
standard perform task  standard function  strive generic possible  accept iterator container
preparation replace function standard function  add follow directive top code include  
inclusion algorithm  only compiler know define list 
function expect reference std   object 
std   class_contain constructor accept initializer list 
compiler  automatically create initializer list 
compiler automatically initializer list create object function processing 
inclusion algorithm header declaration std   accept  argument  initializer list 
compiler match function_call ing definition  seek match argument pass 
std   accept initializer list  match call mai function 
remember  purpose include algori thm header gain access  intention change implementation 
unfortunately  compiler  follow establish sensible algorithm  silently warning error substitute function change behavior program 
prime example blanket namespace std directive dangerous 
identifier variable_name  function_name  type_name meaningful  clearly nicate intent 
choose english word simple variation common word ideal 
mean likely library develop team developer contain function_name type_name library develop team programmer 
library separately problem  issue arise build software system multiple library  example  task build program model visualize spread infectious agent 
system follow library  
ideally  code mean widespread part namespace 
company develop 
easy put function type develop custom namespace 
suppose wish function list wide audience 
ing list package function namespace name vectuti
list function_declaration  list contain function definition 
just std namespace  avoid blanket usi ng directive custom namespace 
nest namespace name lengthy  support namespace alias 
namespace alias possible call compact statement std       nesting allow developer organize component library  example  company
data_structure represent linear quence element 
vector array convenient store collection datum  limitation 
locate element vector array base position index 
retrieve specific element supply index 
approach fine application  situation access index approach awkward inefficient 
contrast  associative container permit access base key  index 
index  key restrict integer expression 
standard_library support kind associative container  set  map  
here will examine type detail 
vector  array  list  mathematical set unordered contain duplicate element 
std   set container  like mathematical set  ignore attempt include duplicate element  std   set object order element internally way 
ordering permit fast access
order actually ascend order test list  coincidence 
observe set admit duplicate element 
implementation std   class major library red black tree see wiki internal data_structure 
dering impose internal data_structure enable fast access element 
red black tree permit binary search see section  
determine order element operator work primitive numeric type int  double  float  unsigned  
define std   stri ng class instance compare string object cally 
instance type wish store std   support 
list define type  myclass 
ensure possible compare myclass instance order put myclass object
achieve define global function compare myclass object 
allow create myclass object 
duplicate element will only once object 
mathematic  set finite 
support standard mathematical operation intersection  union  difference  metric difference 
function part algorithm library  design work wide array container possible 
downside flexibility arcane awkward list show 
catch element container order function work properly 
see std   object order automatically 
std   object impose order element  first sort vector wish standard intersection union function 
list implement operator operator work object vide convenient interface programmer 
operator represent intersection 
real value class come speed access element 
associative container  access element index array 
std   operator 
want place item retrieve later location internal data_structure 
recall std   find algorithm stl see section 
give iterator beginning container  iterator just past end container  item find  std   find return iterator point seek element container 
container contain seek element  std   find return iterator equal just past end iterator 
std   find function work std   object just container  std   class find method exploit structure datum object locate element quickly 
list illustrate std     find method  compare time locate element time locate element contain exact element contain
object list contain integer  
note contain element ascend order 
create contain random value range 
program_will search random value container 
program measure time take complete search 
output list reveal dramatic difference performance std   find function std     find method 
see run search require half minute complete  search take only quarter second 
exact number will vary run run high low depend host machine  disparity time will consistent 
data_structure contain exactly element  program exact search value 
std   search quick std     fi nd perform binary search internal data_structure  std   find linear search see section 
integer single object like instance class  just
need function return
put desire return_value return
caller extract component function return 
unfortunately  will work multiple element return type 
container type examine vector  array  list  set homogeneous  element
define struct class field type  create  large program need struct cover combination multiple value_return type need 
struct class introduce system  increase system complexity 
want able package multiple element simple purpose  need create
fortunately  std   tuple generic class
argument consist literal  variable  complex expression 
extract component know unpack 
list show std   ti function assign component individual variable statement 
std   ti function generic function work type storable
wish extract just element std   generic function 
generic std   function parameterize integer serve index
support way unpack tuples 
structured binding similar std   ti only declare variable represent component
structured binding rewrite follow code    jan   
note special syntax only declare variable bind component
copy component newly declare 
specify structured binding reference  following  auto    case binding alias component
previous code fragment reassign will similarly modify second component
structured binding especially convenient processing tuple loop 
list structured binding reference reassign element vector tuple 
standard_library support special case std   tuple call std   pair 
list show  std   tie  std   structure binding std   pai object  work exactly std   tuple 
pair object contain exactly element std   pai class public field fi rst second unpack pair simple syntax 
integer map object associate stri ng key 
expression std   map std   stri ng  nt first template argument here std   stri ng map  key type  second template argument type value_store map here nt 
list simple example map object 
key unique  value unordered map key 
duplicate value allow  key value  value key 
similar vector array  value store index  only value associate index 
big difference map vector vector size allow index range 
statement container    key square bracket   exist map statement execute  statement add key map pair right assignment_operator 
key exist map  statement replace previously associate key right assignment_operator 
access give key assign statement container      print associate key   
 currently key map  statement will add key   default type declare map 
integer  default 
example  default float point  default string empty string     default bool false 
map object need fast convenient access element collection base search key index 
problem implement simple telephone contact list 
people familiar name friend  family  business contact remember only handful telephone number 
contact list associate telephone 
inappropriate place name vector  example  locate associated phone index vector 
look method backwards want find give phone  want look base
phone contain digit  need want vector index large space data_structure unused 
situation person company unique identifi contact 
case key contact 
map ideal data_structure mapping key value 
allow fast 
list successfully translate spanish word english 
wish increase program vocabulary  modify program logic add block
list approach  map assist translation 
word will key value item map program run 
significant difference wish word program practical 
std   type example container 
std   object work like std   map object  underlying data_structure 
std   map implementation red black tree see wiki red biack tree store map element  unordered map hash table see 
difference unordered map fast general map access element key 
map object trade raw speed ability access ciently element order base key 
unordered map object truly unordered  efficient way client traverse key value pair order key 
order std   object program
like std   map class  std   class template class  declare instance supply type parameter angle bracket show following example  
ordering element unordered map random  special function know hash function determine position unordered map time insertion 
hash process unordered map slightly fast regular map object 
speed access critical access element order std   choice 
associative container useful count
experience variable count  recall list oj list 
program count time  just counter variable 
general  need separate variable count manage 
list function count number negative nonnegative number vector integer return std   pai result  
note create type alias intpai complicated type std   pai nt 
helpful simple program only type place  illustrate usi ng statement type aliase std   pai easily std   vector complicated look type_name 
simplify return_statement end function 
compiler know return_type function declare intpai pair integer  return pair object 
curly brace notation verbiage argument int  int class constructor create object return 
compiler automatically generate machine code call pair constructor argument curly brace 
suppose wish keep track quantity letter text file 
letter alphabet  need counter variable 
manage counter variable inconvenient  vector contain integer 
element index store number element index keep track number 
associative container useful solve problem 
list implementation 
case know need count letter  prepare counter element 
number letter english alphabet change  approach work
face situation count multiple kind know ahead time kind will count 
determine counter variable program attempt solve problem 
answer know counter variable will need  approach 
associative container item wish count key 
read file program print 
course  god  human  law  people  require  list  predict word will document  separate variable counter 
document word key map object 
key map associate integer_value keep track number time word file 
map list word count
map currently hold string word  sion simply add integer_value  string word counter map object  statement first insert string word associated value increment 
exact behavior need word count program 
example need map object compelling list  practice length english word limited 
vector set 
only rarely highly technical word exceed letter 
handle long  word special way  store last position vector word letter 
program special processing long word nonempty 
approach typical circumstance result number empty set high index english text contain word letter 
advantage map store only need 
list close transliteration list vector place map 
know program variable remember value execute 
programmer able predict number value program manage order write variable code 
associative container opportunity create arbitrary amount program execution 
will simple problem demonstrate value dynamic object 
fibonacci number sequence 
section function compute th fibonacci number  reproduce here  
fibonacci function correct  scale execution time grow significantly parameter   increase 
problem compute solution fibonacci number function repeat exactly work multiple time 
figure illustrate repetitive work perform call fibonacci 
see figure  function recursive execution call fibonacci time computation fibonacci 
verify result show figure augment fibonacci function global map count function_call 
tional emphasis  call recursively call     million time
tempt care program repeat work computer work 
unfortunately  puter  fast  require amount time perform task 
multiply number task program solve problem  time compute solution increase  case function  time increase dramatically 
improve performance function technique know memoization 
memoization algorithm design technique record result specific computation result need later time algorithm execution 
execute program  note store result  program need result identical putation future  simply read memo answer store early 
way program avoid repeat work 
memoization especially useful problem consist subproblem overlap require multiple computation identical input 
follow function unordered map object cache previously compute fibonacci number  
function unordered map cache store_value persist duration program execution 
local_variable stati run time environment create initialize key execute mai function 
caller invoke  answer compute result store result future
only help future call function speed recursive invocation perform work 
fibonacci number grow quickly  function list return unsigned long long value 
convenience introduce type alias integer unsigned long long simplify code 
visual  example  type support value range 
implementation function 
compile link code list 
list verifie function produce result function give argument 
test unsi gned value 
will observe argument large  program take long print result 
figure hierarchy recursive function_call result call 
original recursive version require second minute  memoize sive version take only millisecond 
run memoized version time fast 
function fast avoid redundant recursive call function compute 
list honest test  force compute th fibonacci number right away previous invocation 
once complete call  fibonacci number will present function cache precomputed value 
mean future invocation involve value range will fast 
program compute fibonacci number multiple time execution will cially benefit memoized version 
figure show recursion tree memoized fibonacci function compute fifth fibonacci number 
figure show only invocation  compare invocation nonmemoized function 
add function_call count instrumentation list  will find number report agree figure 
construction programming experience encounter kind run time error 
point  run time error result execute program termination 
ception handling framework allow programmer deal kind run time error 
terminate program execution  exception_handle infrastructure enable mer detect problem execute code correct issue manage way 
explore exception_handle mechanism 
straightforward write rithm solve problem general case  number special case address algorithm algorithm correct 
special case occur rarely extraordinary circumstance 
code implement algorithm robust  exceptional case handle properly  add detail algorithm render overly complex difficult construct correctly 
overly complex algorithm difficult read understand  hard debug extend 
ideally  developer express algorithm general form include common special case 
exceptional situation arise rarely  strategy handle annotation algorithm 
algorithm keep focus solve problem hand  measure deal exceptional case handle
exception_handle infrastructure allow programmer cleanly separate code ment focus algorithm code deal exceptional situation algorithm face 
approach modular encourage development code clean easy maintain debug 
exception exceptional event occur program execution 
exception possible  rare event 
rare  customary expect event  program handle part normal processing 
exception represent problem  sort run time error 
operator method perform bound check  execute program expression represent undefined behavior 
expression
method work just_like ope rato  check vector bound 
undefined behavior  ideal 
program crash 
real application crash user lose unsaved datum 
badly behave program terminate unexpectedly 
defend bound index keep program alive 
algorithm handle potential problem
example  programmer statement test see vector index proper bound  
form try catch block 
try catch keyword 
body structured statement whi le  statement try block statement catch block
variable catch block list reference exception object 
exception class part standard library base_class standard exception 
exception class method return string 
excepti  method string message contain exception 
standard specify exact message  least exception   method kind exception catch 
follow show program report visual user enter value  
list technically crash  behavior ent actual abnormal program termination 
list practical example 
improve version loop continuously request integer_value user supply throw exception 
list specially craft insight program exact tion path 
function print message beginning end see code function active 
function declare local tracker object identify name function 
execute function construct local object point declaration automatically destroy object function_return caller 
local object  lifetime mirror lifetime function manage
finally  list declare global racker object 
execute program create global object call man
list num  declare mai hold element 
function pass num process 
call process  function control process function attempt access element range num 
process function  attempt access element mai supply 
process pass find function 
find lem arise find call method 
find function_call method bound index  will throw exception 
observe list  method call std     try catch block 
mean find catch exception std   vectorci  ratmight throw 
following show sample run 
destroy tracker global 
find function create tracker object 
find function obtain user element seek 
here user enter present 
find function execute last statement 
figure graphical representation process 
case user enter range process function cause problem find  exception arise 
program execution produce exception  execute printing statement catch block 
see happen exception follow sample run list 
destroy tracker global user supply range 
program print find exit message know find function complete execution usual 
std   vector nt   method call find throw exception 
find return normally process  process print exit message
see  program properly destroy local tracker 
figure function_call chain interrupt exception 
std   vector nt  
figure illustrate program execution 
list demonstrate exception potential radically alter normal function_call return pathway 
sense exception work like super goto  ment 
program execution jump back previous point execution sequence  bypass function call chain
recall section discourage goto statement exit nest loop 
logic code indiscriminate goto structured branching loop construct swi tch  whi le  tend obscure difficult extend maintain 
exception mechanism super goto  important way  
goto statement jump code function
exception limitation 
programmer specify destination label goto statement 
case list  std   vector nt   method throw exception 
call function single program gram 
code method possibly know encounter exceptional situation 
exception simply redirect program execution recent try catch block call chain handle exception 
list follow 
standard library limited number standard exception 
create custom tion specialized error handle application require 
list define custom exception class  filenot find exception  derive standard std   exception class 
derive filenotfoundexception class std   exception  filenotfoundexcepti object std   excepti object see section 
enable function catch fi lenotfoundexcepti object catch body declare catch std   excepti object 
standard_library number exception class  derive std   excepti
bound exception object throw method instance standard std   range class 
std   out_of_range class derive standard class derive standard std   excepti class 
figure show relationship exception class 
figure relationship exception class involve list 
size datum set 
give option create populate 
create sufficient size front loop place individual element proper place 
create empty loop individual element 
option efficient option successive call std   vectorci   reallocate copy element multiple time 
safe number element specify start agree actual number datum element file 
specify number small  function_will attempt overrun bound
opt efficiency expense safety 
mean depend correctly create datum hie 
hie exist  will throw fi excepti custom exception  
hie exist contain 
program finish notice list compute function create object  simply throw object catch 
concept intermediate handler important function invocation complete knowledge local context local_variable 
mean intermediate function method call chain access unavailable function method call chain 
catch block compute function list involve only local_variable 
catch block mai function know subscript cause compute failure local compute 
general guideline  
handle exception close call chain possible code throw
low level function method responsible handling  high level function method able dispense handle altogether low level method robust unit reuse 
high level method just need know problem need know exactly problem
example  ing  compute function throw custom computeexcepti object filter throw std   out_of_range just pass call chain std   out_of_range object receive 
total recovery possible desirable low level call chain  throw
section code throw catch block near handler check order source_code 
first catch block match type throw execute 
list expect type exception  catch case unexpected exception arise 
catch  type first compare std   out_of_range 
match  std   out_of_range catch block execute 
type compare 
catch block execute case match 
type match  catch code execute 
inheritance involve  situation interesting 
comparison perform catch block test assignment compatibility 
reference pointer instance derived_class assign variable declare reference pointer base_class 
cast operation legal relationship derived_class base_class 
mean object type std   out_of_range assignment compatible std   out_of_range variable std   variable 
catch block check order source_code  follow code problem  
std   out_of_range catch block will execute std   out_of_range object excepti instance
reason illegal specific type follow general type sequence catch block 
code fragment will compile context 
sequence catch block  list specific exception first follow general exception 
standard class std   excepti direct indirect base_class 
require object derive excepti primitive type
exception reserve uncommon error 
example  follow code add element integer name vec  int   
loop fairly typical 
approach exception  
interrupt statement 
exception definitely uncommon occurrence 
exception dictate normal logical flow 
useful intend pose  exception mechanism add overhead program execution  especially exception throw 
overhead reasonable exception rare exception part program normal execution 
clear exception
function return position element
straightforward approach exception write  int std   nt  int elem int  
first approach  unwary programmer check blindly valid position 
exception code allow happen 
first approach useful determine element present
find return 
exception approach client programmer determine element present risk throw exception 
exception rare  second approach ideal 
first approach useful  client need remember properly check
second approach exception safety net  exception will throw search miss element 
approach ultimately
first version common programming idiom approach programming situation 
exception version poor choice uncommon attempt look element miss  exception reserve uncommon error situation 
appendix task software development visual studio  
begin create program  first launch visual studio window start screen relevant shortcut 
figure show application tile activate 
soon see splash screen similar show figure visual studio application  wait moment configure development environment
point will visual preferred development language 
select color scheme 
figure show here reflect blue color scheme 
figure show visual studio look like fully loaded ready
visual studio start  begin process develop program create
figure show  create follow menu sequence  
dialog result  show right figure choose type visual left pane  console application option center pane 
name field near bottom dialog  enter name will name simple 
change location folder like  drive usb pen drive 
example  choose change default location visual studio 
select ok creation dialog  application wizard show left figure
point  instruction dialog click finish window accept current  select finish  select next continue 
key step complete set correctly 
subsequent application setting dialog see right image figu  select empty 
choose finish ready continue 
add item dialog box  show left figure select enter
file here will name 
press add
show right figure solution explorer pane now show file si mple 
sou rce file th point select file menu press pressing 
line build successful 
console window output program 
right image figure show text window 
press key keyboard close window 
console window typographical error program  return editor  fix error  try run program
step write basic program visual studio 
step initially complex tedious  will natural write program 
program run  visual studio environment create console window run program 
first line output print program 
second line prompt user press key continue add visual run time environment console window stay visible long user see output 
run program standard windows command shell  find start menu accessory name command prompt  only program output will press key continue 
follow summarize step follow write program visual studio ide  
possible develop program visual studio integrate development ment 
visual studio come additional tool command line development 
appendix scribe edit code standalone text editor compile run program windows command prompt 
command line development linux macos cover programmer prefer freedom favorite editor  standalone compiler  script automate build process 
integrate development environment ide like visual studio combine tool developer need comprehensive application 
approach work programmer  veloper prefer centralized approach  command line tool manage development process 
command line tool focused fast  tool fairly simple compare fullfeature ide 
developer prefer editor ide 
developer build script command line tool automate building testing process 
command essential work command line environment 
center manipulate file folder 
discussion assume windows shell  will note difference macos linux need 
linux macos unix like operating_system 
run window  terminal application mac  bash terminal linux  operating_system present text base console window 
type command window receive text feedback 
command program launch type name 
follow list common command useful command line  
location know current working directory 
command dir print list file current working directory 
unix like machine command perform similar work 
command dir display wide listing hie detail  command equivalent unix like system 
subdirectory allow organize hie 
example include cd code change current working directory name code 
here name relative current directory 
error name correspond current directory 
change current working directory parent directory 
way  current working directory directory 
command parent directory current working directory 
name here know full path name 
name absolute location  relative current working directory 
unix like system drive letter  backslashe forward slash 
change current working directory effectively
command useful work 
dot context mean  current work  
command carefully 
unix like system rm command place 
move command unix like system mv command rename file 
preparation programming  create code current working command  mkdir code cd code edit source_code simple text editor notepad wordpad window  textedit mac  gedit linux system 
powerful programming editor http 
mac  linux edit source_code convenient 
visual studio command line tool 
visual studio number command line tool alternative integrated development environment 
command line tool  select visual studio command prompt start menu 
command console similar console ide execute program see section 
select menu item interact dialog box  type command console window build run program 
edit program editor ide  standalone editor notepad http  
vim color tax highlighting fold like build visual studio editor 
order command prompt version visual studio  convenient first create folder will place development file  example  create folder name code document folder 
suppose full path folder
first command issue console window
cd command mean  change  command set console working development folder previously create 
work folder  adjust path give cd command work area 
ready edit code 
environment set editor program system path  type 
editor type program file 
cl  cee elle   cee command  stand compile link  preprocesse  compile  link program 
switch level warning level 
level warning analysis source_code detect programming mistake 
omit switch  default compiler operate warn level 
warning level insufficient catch mistake begin experience programmer 
default ide compiler warning level  warning level change adjust project property 
command line  specify high warning level just easy specify 
compiler check potential programmer mistake 
ehsc require program write 
want reduce level detail output produce compiler linker  add additional switch nologo  
once program compile successfully  run program enter name executable produce 
example  issue command 
program run window  window produce 
program finish execute  press key continue  message print  simply command prompt ready enter next command 
modify source_code editor  remember recompile code run
ide  modify code  environment will suggest rebuild project run program 
program consist multiple source_file  list require file command line 
exe file will name first file list  example  command 
develop program gnu tool tool gnu compiler collection http  
gnu tool free major computing platform  
microsoft windows xp window window base gcc tool find mingw website http  
mac user compiler come 
linux base gcc tool readily major linux distribution 
simply install development package 
name gnu compiler 
command line tool  mean launch command shell window bash mac linux environment 
see gnu buld system work  will list editor create text file contain code list  file name 
window  instal set properly  command shell type 
command bring separate window editor 
type source_code list file 
create executable program gnu  back command line window issue command simple 
command run preprocessor  follow compiler  finally linker produce executable program 
preprocessor linker involve here  generally simply compile  
check program form warn code construct programmer questionable code nature contain error 
component interpret mean  warn possible problem  compile program directive enable compiler catch careless programmer mistake unnoticed 
directive desirable programmer novice expert 
standards committee responsible define language 
committee refine language specification time 
addition add feature language  committee address shortcoming exist language feature 
result committee work compiler check validity program 
modern compiler job catch common programming error 
directive optional developer work old source 
write originally relaxed language rule  worthwhile rewrite bring modern standard 
old prove reliable  compile stringent check 
take advantage check capability date compiler  compiler command line write 
standard omit part command  assume programmer write source rule old  iso standard  refer 
mac linux platform name executable file produce will just simple exe name extension 
source contain error  compiler_will produce executable file name simple 
window machine run compile program command line type command simple full name  unix ike system macos linux  type 
here file reside current working directory compiler process
finish executable file  delete follow mand  
fibonacci sequence  field  statment  foreach  fragmentation  memory  ri end  full path function_call  function_call operator  function_declaration  function definition  function invocation  function invocation operator  function_object  
rule rule rvalue_reference  scope enumeration  sequence  shift  bitwise  short circuit evaluation  slice  array  smart source_code formatting  specialization  class  stack overflow  standard namespace  
draft date  september  