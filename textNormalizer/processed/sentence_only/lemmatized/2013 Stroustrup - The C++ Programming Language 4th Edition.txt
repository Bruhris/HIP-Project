francisco york 
mexico city designation manufacturer seller distinguish product claim trademark 
designation book  publisher aware trademark claim  designation print initial capital letter capital 
author publisher take care preparation book  express imply warranty kind assume responsibility error omission 
liability assume incidental consequential damage connection arise program contain
publisher offer excellent discount book order quantity bulk purchase special sale  include electronic version custom cover content business  training goal  marketing focus  branding interest 
contact  united states corporate government sale sale united states  contact  international sale visit web  aw library congress catalog publication datum stroustrup  bjarne 
programming_language bjarne edition 
computer programming_language
copyright pearson education 
right reserve 
print united states america 
publication protect copyright  permission obtain publisher prior prohibit reproduction  storage retrieval system  transmission form mean  electronic  mechanical  photocopying  recording  likewise 
obtain permission material work  submit write request pearson education   permission department  lake street  upper saddle river  jersey  fax request 
book typeset time helvetica author 
  te xt print united states recycled paper edwards brother malloy ann arbor  michigan 
second printing  june content content iii preface preface fourth edition 
note reader 
tour  basic 
tour  abstraction mechanism 
tour  container algorithms 
tour  concurrency utility 
type declaration 
pointer  array  reference 
structure  union  enumeration 
select operation 
exception handle 
source file program 
construction  cleanup  copy  move 
special operator 
derive class 
run time type 
generic programming 
matrix design 
standard library summary 
stl container 
stl algorithms 
stl iterator 
memory resource 
regular expression 
thread task 
wheeler feel like
express idea clearly  simply  directly 
result program check compiler run fast 
book  aim completeness 
feature standard library component professional programmer likely need 
rationale  kind problem design help solve 
principle underlie design 
fundamental limitation 
speciﬁcation  deﬁnition 
level detail choose expert programmer  aspire lawyer follow reference iso standard 
example  combination feature 
key technique idiom 
implication maintainability performance 
change dramatically year
point view programmer  change improvement 
current iso standard iso iec  call simply tool write quality software previous version 
kind programming style technique modern support 
standard library feature support technique 
basic building block elegant  correct  maintainable  efﬁcient code 
key question answer book 
answer ﬁnd   vintage  progress happen 
general purpose programming emphasize design type rich  lightweight abstraction 
suit resource constrain application  find software infrastructure 
reward programmer who take time master vi preface technique write quality code 
who take task programming seriously 
civilization depend critically software  quality software 
billion line deploy 
put premium stability  code still work will continue work decade 
application  modern  stick old style  will write low quality worse perform code 
emphasis stability imply standard conform code write today will still work couple decade now 
code book conform iso standard 
book aim audience  
programmer who want know late iso standard offer  
programmer who wonder
people background application language  java   python  ruby  look close machine  ﬂexible  offer compile time checking  offer performance 
naturally  group disjoint professional software developer master just programming 
book assume reader programmer 
ask     book recommend programming  principle practice start programming 
karen blixen  note reader hurry slowly festina lente 
structure book introduction  basic facility  abstraction mechanism  standard_library  example reference 
design programming style  type checking  compatibility  language  library  system 
learn programming  suggestion programmer  suggestion programmer  suggestion java programmer 
history timeline  early year  standard  standard 
reference structure book pure tutorial sort topic concept introduce  read linearly start page
conversely  pure reference manual access start point  topic succinctly reference forward backward topic 
pure tutorial principle read prerequisite carefully
pure reference only familiar fundamental concept technique 
book combine aspect
know concept technique  access section basis 
start beginning  try bogge detail 
index cross reference 
book heavily cross reference iso standard 
experienced programmer read quick  tour  gain overview need book reference 
book consist part  part introduction  guide book bit background 
give quick introduction language standard_library 
part ii basic facility  build type basic facility construct program
part iii abstraction mechanism  abstraction mechanism object orient generic_programming 
part iv overview standard_library discussion compatibility issue 
encourage skim read interesting  return read part book 
feel oblige read carefully proceeding 
follow overview major concept feature programming_language standard_library  tour  basic model memory  computation  error handling 
tour  abstraction mechanism present language feature support datum abstraction  object orient programming  generic_programming 
tour  container algorithm introduce string  simple container  algorithm standard_library 
tour  concurrency utility outline standard library utility resource management  concurrency  mathematical computation  regular expression 
whirlwind tour facility aim give reader taste offer 
convince reader come long way ﬁrst  second  third edition book 
introduce notion type  object  scope  storage 
present fundamental computation  expression  statement  function 
modularity support namespace  source ﬁle  exception_handling discuss  type declaration  fundamental type  naming  scope  initialization  simple type deduction  object lifetime  type alias section basic facility pointer  array  reference structure  union  enumeration statement  declaration statement  selection statement switch  iteration statement  goto  comment expression  desk calculator example  survey operator  constant expression  implicit type_conversion 
select operation  logical_operator  conditional expression  increment decrement  free store delete   lambda expression  explicit function  function_declaration deﬁnition  inline function  constexpr function  argument pass  overloaded function  postcondition  pointer function  macros exception_handling  style error handling  exception guarantee  resource management  enforce invariant  throw catch  vector implementation namespace  namespace  modularization interface  composition namespace source_file program  separate compilation  linkage  header ﬁle  program start termination assume familiar programming concept part
example  explain facility express recursion iteration  technical detail spend time explain concept useful 
exception rule exception 
programmer lack experience exception experience language java resource management exception_handling integrate 
exception_handling present basic philosophy exception_handle resource management 
detail strategy focus resource_acquisition_is_initialization  technique raii 
fall rough category  class  class hierarchy  template 
ﬁrst concentrate class class  notion user deﬁne type  class  foundation abstraction mechanism 
construction  cleanup  copy  move show programmer deﬁne meaning creation initialization object class 
meaning copy  move  destruction speciﬁe 
operator overloading present rule give meaning operator user deﬁne type emphasis conventional arithmetic logical_operator    
special operator discuss user deﬁne operator non arithmetic purpose  subscripte  function_object  smart note reader class organize hierarchy  derived_class present basic language facility build hierarchy class fundamental way
complete separation interface abstract_class implementation derived_class  connection virtual_function 
model access control public  protect  private present 
class discuss way class hierarchy effectively 
present notion multiple inheritance  class direct base_class 
run time type present way navigate class hierarchy datum store object 
inquire object base_class deﬁne object derived_class typeid gain minimal object name class 
ﬂexible  efﬁcient  useful abstraction involve parameterization type class algorithm function type algorithms  template present basic principle template
class template  function template  template alias present 
generic_programming introduce basic technique design generic program 
technique lift abstract algorithm number concrete code example central  notion concept specify generic algorithm requirement argument 
specialization template generate class function  specialization  giv en set template argument 
instantiation focus rule name binding 
template explain template class hierarchy combination 
metaprogramme explore template generate program 
template ture complete mechanism generate code 
matrix design give longish example show language feature combination solve complex design problem  design ndimensional matrix near arbitrary element_type 
language feature support abstraction technique context technique 
presentation technique part iii differ part ii assume reader know technique
mean read order user level manual library component  standard library overview give overview standard_library  list standard library header  present language support diagnostic support  exception 
stl container present container iterator  container  algorithms framework call stl  include vector  map  
stl iterator present iterator utility stl  include   function 
memory resource present utility component memory resource management  array  bitset  pair  tuple    allocator  garbage collector interface 
utility present minor utility component  time utility  type trait  type_function 
string document string library  include character trait basis character set 
regular expression regular expression syntax way string matching  include match simple replacement  general traversal stream character 
streams document stream library 
format unformatted input output  error handling  buffering 
locale class locale facet support handling cultural difference character set  format numeric_value  format date time 
numeric facility numerical computation complex  valarray  random number  generalize numerical algorithm 
concurrency present basic memory model facility offer concurrent programming lock 
thread task present class thread locks style concurrent programming thread    support task base concurrency future async 
standard_library document standard_library include printf clock incorporate standard_library 
compatibility discuss relation standard call iso version precede
avoid clever hard understand algorithm 
trivial algorithm typically suited illustrate aspect language deﬁnition point program structure 
example  shell sort real code  quicksort
reimplementation suitable algorithm exercise 
real code  call library function typically code here illustrate language feature 
te xtbook example necessarily give warped view software development 
clarify simplify example  complexity arise scale disappear 
see substitute write realistically sized program order impression programming note reader programming_language like 
book concentrate language feature standard library facility 
basic technique program compose 
rule technique composition emphasize 
selection example reﬂect background compiler  foundation library  simulation 
emphasis reﬂect interest system programming 
example simpliﬁed version find real code 
simpliﬁcation keep programming_language design point lose detail 
ideal short clear example illustrate design principle  programming technique  language construct  library feature 
cute  example counterpart real code 
purely language technical example  variable_name type call function_call 
possible  language library feature present context dry manner manual 
language feature present detail roughly reﬂect view need effective 
purpose give idea feature combination feature 
understanding language technical detail language feature library component sufﬁcient write program 
obsession understand ev ery little detail prescription awful overelaborate overly clever code 
need understanding design programming technique appreciation application domain 
assume access online source 
ﬁnal arbiter language standard library rule iso standard 
reference part book form  section  subsection iso standard  
italic sparingly emphasis   string literal acceptable   ﬁrst occurrence important concept  polymorphism  comment code example 
sav tree simplify addition  hundred exercise book move web 
language library book pure  deﬁne standard 
example run date implementation 
major program fragment book try implementation 
example only recently adopt compile implementation 
see point mention implementation compile example 
soon date implementer work hard ensure implementation correctly accept feature 
see suggestion cope old compiler code write compiler 
freely ﬁnd
example  prefer initializer type alias 
place  usage startle  old  howev er  startle way start review material 
hand  just ideal elegant expression fundamental idea age 
obviously  pre compiler customer upgrade current standard  refrain novel 
assume old way  simple just old familiar 
programming_language perform task  vehicle programmer specify action execute machine  set concept programmer think
ﬁrst purpose ideally require language close machine  important aspect machine handle simply efﬁciently way reasonably obvious programmer 
language primarily design concept solution express directly concisely 
facility add create  function argument checking  const  class  constructor destructor  exception  template  primarily design mind 
base idea
initially achieve apply idea simula c
year  application simple ideal result general  efﬁcient  ﬂexible set facility 
result support synthesis programming style simultaneously efﬁcient elegant 
design focus programming technique deal fundamental notion memory  mutability  abstraction  resource management  expression algorithm  error handling  modularity 
important system programmer generally programmer resource constrain high performance system 
deﬁne library class  class hierarchy  template  write program high level present book 
example  widely ﬁnancial system  game development  scientiﬁc computation 
high level application programming effective convenient  need library 
just bare language program painful 
true general purpose language 
conversely  giv en suitable library just programming task pleasant 
standard introduction start  
general purpose programming_language bias system programming 
still true 
change year increase importance  power  ﬂexibility abstraction mechanism  
general purpose programming_language vide direct efﬁcient model hardware combine facility deﬁne lightweight abstraction 
language develop elegant efﬁcient abstraction 
general purpose programming_language mean language design support wide variety
incredible variety microcontroller huge distribute commercial application  key point deliberately specialize giv en application area 
language ideal application programmer  ideal support wide possible range application area
implementation software infrastructure  device driver  communication stack  virtual machine  operating_system  operation system  programming environment  foundation library system programming 
importance bias system programming  qualiﬁcation long stand characterization simpliﬁed compromise eject facility aim expert level hardware system resource hope suitable application area 
course  program way completely hide hardware  expensive abstraction  object free store operation virtual_function  inelegant style  overabstraction  essentially abstraction  gloriﬁed assembly code  
language distinguish characteristic 
design evolution book know outline idea design aim great detail  principle note  
leave room low level language assembly code rare case 
write efﬁcient code low level language language will likely system programming_language choice 
programmer hand write reasonable code simulate language feature fundamental abstraction slightly performance  will will imitate 
language feature fundamental abstraction design waste single byte single processor cycle compare equivalent alternative 
know zero overhead principle 
draconian principle  essential obviously contexts 
zero overhead principle repeatedly lead simple  elegant  powerful facility ﬁrst envision 
stl example      
principle essential effort raise level programming 
look individual language feature solution  building brick varied set combine express solution 
general ideal design programming express simply  
express idea directly code 
express independent idea independently code 
represent relationship idea directly code 
combine idea express code freely only combination sense 
express simple idea simply 
ideal share people  language design support differ dramatically 
fundamental reason language embody set engineering tradeoff reﬂecte differ need  taste  history individual community 
answer general design challenge shape origin system programming back bcpl  aim address issue program complexity abstraction back simula  history 
generic programming emphasis support effective combination
maintainable  readable  small  fast  solution nontrivial problem tend combine aspect style 
usual important term computing world  wide variety deﬁnition term popular part computing industry academia 
example  refer programming style   call programming technique   prefer programming technique  limited language speciﬁc 
feel uncomfortable word  paradigm  pretentious kuhn original deﬁnition imply claim exclusivity 
ideal language facility elegantly combination support continuum programming style wide variety programming technique 
procedural programming  program focus processing design suitable data_structure 
design support algol  fortran  language 
support come form build type  operator  statement  function  struct  union 
minor exception  subset 
compare support procedural programming form additional language construct stricter  ﬂexible  supportiv type system 
datum abstraction  program focus design interface  hide implementation detail general representation
support concrete abstract_class 
facility deﬁne class private implementation detail  constructor destructor  associated operation directly support
notion abstract_class direct support complete datum hiding 
object orient programming  program focus design  implementation  class 
addition allow deﬁnition lattice class  variety feature navigate class lattice simplify deﬁnition class exist
class run time polymorphism  encapsulation  
generic programming  program focus design  implementation  general algorithm 
here   general  mean algorithm design accept wide variety type long meet algorithm requirement argument 
template support generic_programming 
template compiletime parametric polymorphism 
just increase ﬂexibility efﬁciency class improve support style 
call class orient 
style design programming contribute synthesis 
focus exclusively style mistake  toy example  lead waste development effort suboptimal inﬂexible  verbose  poorly perform  unmaintainable  code 
miss style mention contribute signiﬁcant synthesis  deny validity synthesis 
style mention distinct alternative  contribute technique expressive effective style programming  direct language support combination 
inception  design aim synthesis programming design style 
early publish account present example style combination present language feature aim support combination  
class support mention style  rely user represent idea userdeﬁned type object user deﬁne type 
public private access control support data abstraction object orient programming clear distinction interface implementation 
member function  constructor  destructor  user deﬁne assignment clean functional interface object need datum abstraction object orient programming 
uniform notation need generic_programming 
general overloading wait uniform initialization 
function declaration speciﬁc statically check interface member_function freestande function  support mention style 
time  lack  function prototype  simula function_declaration member_function 
generic function parameterized type generate function class macro support generic_programming 
template wait 
base derived_class foundation object orient programming form datum abstraction 
virtual function wait 
inline facility affordable system programming build run time space efﬁcient library 
early feature general abstraction mechanism  support disjoint programming style 
today support design programming base lightweight abstraction  aim elegant efﬁcient code beginning 
development support synthesis programming style  paradigms  originally signiﬁcantly improve integration 
fundamental object identity  locate speciﬁc location memory distinguish object potentially value compare address 
expression denote object call lvalue 
early day ancestor object identity object address safely store later 
 notion rvalue develop notion value move cheaply   
object basis technique resemble find functional programming notion object identity view horror 
nicely complement technique language feature  lambda expression develop primarily
stroustrup  operator overloading 
ifip conference system implementation language  experience assessment 
stroustrup  extensible facility 
summer usenix conference 
stroustrup  multiple inheritance 
euug spring conference 
stroustrup
shopiro  set class routine style programming 
usenix conference 
santa fe  mexico 
stroustrup  parameterize type 
usenix conference  denver 
stroustrup  programming_language second edition 
stroustrup  history  
acm history programming_language conference 
acm sigplan notice 
stroustrup  design evolution 
stroustrup  programming_language  third edition 
hardcover  special  edition 
stroustrup   sibling   case compatibility   case study compatibility 
user journal 
stroustrup  evolve language real world  
stroustrup  programming principle practice 
stroustrup  faq 
stroustrup   remove concept  decision 
stroustrup
sutton  concept design stl 
stroustrup  software development infrastructure 
sutton
stroustrup  design concept library 
sle international conference software language engineering 
tanenbaum  modern operating_system  third edition 
upper saddle river  jersey 
research version  tenth edition 
bell laboratory  murray hill  jersey 
josuttis  template  complete guide 
veldhuizen  template ture complete 
indiana university computer science technical 
acm transaction mathematical software  vol 
man publications co
wilson paul lu editor parallel programming 
mit press 
woodward
bond  algol user guide 
majesty stationery ofﬁce 
basic hello   type  variable  arithmetic  constant  test loop  pointer  array  loop 
user deﬁne type structure  class  enumeration 
modularity separate compilation  namespace  error handling 
advice introduction aim next give idea detail 
informally present notation  model memory computation  basic mechanism organize code program 
language facility support style see call procedural programming 
follow present abstraction mechanism 
give example standard library facility 
assumption program
read textbook  programming  principle practice  continue here 
program language application
only nullptr share pointer type  nullptr  nullptr  pointer link int nullptr  error  nullptr pointer integer wise check pointer argument suppose point actually point number occurrence 
deﬁnition assume style string  pointer point zero terminate array char 
old code  null typically nullptr 
nullptr eliminate potential confusion integer null pointer nullptr 
set build type operation rich  deliberately low level 
directly efﬁciently reﬂect capability conventional computer hardware 
programmer high level facility conveniently write advanced application 
augment build type operation sophisticated set abstraction mechanism programmer build highlevel facility 
abstraction mechanism primarily design let programmer design implement type  suitable representation operation  programmer simply elegantly type 
type build build type abstraction mechanism call user deﬁne type 
refer class enumeration 
book devote design  implementation  user deﬁne type 
rest present simple fundamental facility
complete description abstraction mechanism programming style support 
present overview standard_library  standard_library mainly consist user deﬁne type  example build language facility programming technique present 
variable vector deﬁne like vector  pointer point
useful  give element point
example  construct vector like 
vector pass non const reference   way  modify vector pass
allocate_memory area call free store know dynamic_memory heap  
user vector know detail vector representation 
rest next gradually improve vector example language feature technique 
present standard library vector  contain nice improvement  present complete vector context standard library facility 
vector standard library component example 
reinvent standard library component  vector string 
tight connection representation operation need user deﬁne property expect real  want keep representation inaccessible user  ease guarantee consistent datum  allow later improve representation 
distinguish interface implementation access inaccessible data 
language mechanism call class 
class deﬁne set member  datum  function  member 
interface deﬁne public member class  private member accessible only interface 
example  section class class vector 
number element example vary vector object vector object  vector object number element time 
vector object size 
basic technique handle vary amount  ﬁxe size handle refer variable amount data   free store allocate 
here  representation vector member accessible only example simpliﬁes 
constructor  vector  replace 
ordinary function  constructor guarantee initialize object class 
deﬁne constructor eliminate problem uninitialized variable class 
state need integer
integer number element 
constructor initialize vector member member initializer list    ﬁrst initialize pointer element obtain free store 
initialize
access element subscript function  call 
return reference element 
size function supply give user number element 
obviously  error handling completely missing  will_return 
similarly  mechanism give back  array double acquire show destructor elegantly
note enumerator  red scope enum_class  repeatedly enum_class confusion 
example    red red  red 
enumeration represent small set integer_value 
code readable error prone symbolic mnemonic enumerator name
class enum speciﬁes enumeration strongly type enumerator scope 
separate type  enum_class help prevent accidental misuse constant 
mix value  red  error  red 
default  enum_class only assignment  initialization  comparison   deﬁne 
enumeration user deﬁne deﬁne operator section enumeration 
offer strongly type  plain  enum 
key manage clearly deﬁne interaction part 
ﬁrst important step distinguish interface part implementation 
language level  represent interface declaration 
declaration speciﬁes need function
example  sqrt  square root function take return
deﬁne vector function  sqrt part standard_library 
howev er  real difference  library simply code happen write language facility
deﬁnition type function separate source ﬁle compile separately 
organize program set semi independent code fragment 
separation minimize compilation time strictly enforce separation logically distinct part program minimize chance error 
library separately compile code fragment  function 
typically  place declaration specify interface module ﬁle name intend
code share vector interface present  ﬁle independent separately compile 
graphically  program fragment represent like vector interface deﬁne vector    strictly speak  separate compilation isn  language issue  issue take advantage language implementation 
great practical importance 
approach maximize modularity  represent modularity logically language feature  exploit modularity physically ﬁle effective separate compilation  
example  want experiment complex number type   
put code namespace  sure name conﬂict standard library name namespace std 
precaution wise  standard_library support complex arithmetic  
simple way access name namespace qualify namespace name  std   
 deﬁne global namespace  local deﬁned namespace  class  function 
gain access name standard library namespace  directive namespace std  namespace primarily organize large program component  library 
simplify composition program separately develop part 
feature help 
major tool type system
painstakingly build application build type  char  int  statement   build type application  string  map  regex algorithm  sort   
high level construct simplify programming  limit opportunity mistake  unlikely try apply tree traversal dialog box  section error handle increase compiler chance catch error 
majority construct dedicate design implementation elegant efﬁcient abstraction  user deﬁne type algorithm 
effect modularity abstraction library point run time error detect separate point handle 
program grow  especially library extensively  standard handle error important 
try access element out_of_range vector 
writer vector know user like hav case writer vector typically know program vector will run 
user vector consistently detect problem user range access happen ﬁrst place 
solution vector implementer detect attempt range access tell user
user take action 
example  detect attempt range access throw out_of_range exception  
catch clause handler out_of_range will enter 
out_of_range type deﬁne standard_library standard library container access function 
exception handle mechanism error handle simple  systematic  readable 
see discussion  detail  example 
formally speciﬁed vector subscript_operator  like  index range   test operator 
deﬁne function  precondition feasible test see  
operator operate object type vector sense member vector reasonable  value 
elem point array sz double  only comment 
statement assume true class call class invariant  simply invariant 
job constructor establish invariant class member_function rely member_function sure invariant hold exit 
unfortunately  vector constructor only partially job 
properly initialize vector member  check argument pass sense 
vector  likely cause chaos 
deﬁne class exception carry arbitrary point error detect point handle 
function way complete assign task exception throw 
 handle  exception simply mean minimal local cleanup rethrowe exception 
notion invariant underlie  notion resource management support constructor destructor  
error find compile time  preferable
type system facility specify interface user deﬁne type
howev er  perform simple check property know compile time report failure compiler error_message 
example    integer small   check integer will write integer small hold  int system least byte 
call statement expectation assertion 
mechanism express term constant expression  
general  print compiler error_message true 
important come assertion type parameter generic_programming  
runtime check assertion  see 
part underlie programming technique style support 
experienced programmer  note foundation closely correspond subset 
will clear time  
class concrete type  abstract type  virtual_function  class hierarchy 
copy move copying container  move container  resource management  suppress operation 
template parameterized type  function template  function_object  variadic_template  alias 
advice introduction aim give idea  support abstraction resource management detail 
informally present way deﬁne type user deﬁne type 
present basic property  implementation technique  language facility concrete_class  abstract_class  class hierarchy 
template introduce mechanism parameterizing type algorithm type algorithm 
computation user deﬁne build type represent function  generalize template function function_object 
language facility support programming style know object orient programming generic_programming 
next follow present example standard library facility
assumption program
read textbook  programming  principle practice  continue here 
program language application
huge hierarchy  hundred class  deep wide common 
semirealistic classic example  let shape screen  shape circle triangle smiley arrow represent inheritance relationship 
example  circle derive shape 
represent simple diagram code  ﬁrst specify deﬁne general property shape  section class shape 
template compile time mechanism  incur run time overhead compare handwritten code  
extensively parameterization type algorithm standard_library  
example  write function calculate sum element value container like tour  abstraction mechanism template typename container  typename value 
note type template argument deduce function argument 
fortunately  need explicitly specify type 
sum simpliﬁed version standard library accumulate 
example  template typename class const val  
similarly  systematic description standard_library start 
allow give example follow
 strongly encouraged distract discourage incomplete understanding detail 
purpose give taste come convey basic understanding useful library facility 
speciﬁcation standard_library third iso standard 
explore prefer home alternative 
design  still implementation  effort will maintenance extension 
standard library facility book part complete implementation 
addition standard library component  implementation offer  graphical user interface  system guis  web interface  database interface 
similarly  application development execution environment 
here  system library 
intent self contain description deﬁne standard keep example portable  speciﬁcally note 
naturally  programmer encourage explore extensive facility system 
run time language support  allocation run time type  see 
standard_library minor modiﬁcation minimize violation type system  see 
string stream support international character set localization  see   
stream extensible framework user add stream  buffer strategy  character set 
framework container vector map algorithm ﬁnd  sort  merge  see   
framework  conventionally call stl  extensible user add container algorithm 
support numerical computation standard mathematical function  complex number  vector arithmetic operation  random number generator  see 
support regular expression matching  see 
support concurrent programming  include thread lock  see 
concurrency support foundational user add support concurrency library 
utility support template metaprogramming  type trait     stl style generic_programming  pair    general programming  clock   
special purpose container  array  bitset  tuple 
essentially  standard_library common fundamental data_structure fundamental algorithm
example  stre standard string
example  stre standard string facility accessible 
book  standard_library exclusively know offer 
preﬁx standard_library name std   
header example 
here selection standard library header  supply declaration namespace std  algorithm array array chrono duration  cmath complex fstream fstream  ifstream  ofstream future future  promise iostream istream  ostream  cin  cout tour  container algorithms map map  multimap memory   allocator random  regex regex  smatch string string  set set  multiset sstream istrstream  ostrstream thread thread  utility move  swap  pair vector vector listing complete  see
string type variety useful string operation  concatenation 
here  initialize character sequence 
concatenate string  string literal  style string  character string 
standard string move_constructor return long string value efﬁcient 
application  common form concatenation add end string 
directly support + operation 
way add end string semantically equivalent  prefer explicit concise  possibly efﬁcient 
string mutable 
addition +  subscripte substre operation support 
standard library string 
useful feature  ability manipulate substring 
example  section string 
substr operation return string copy substring argument 
ﬁrst argument index string position  second length desire substre 
indexing start  value stroustrup 
replace operation replace substring value 
case  substre start length niel  replace nichola 
finally  replace initial character uppercase equivalent 
ﬁnal value nicholas stroustrup 
note replacement string need size substre replace 
naturally  string compare string literal 
string library 
common technique implement string present string example 
input operation type extensible handle user deﬁne type 
section brief introduction iostream  reasonably complete description iostream library facility 
form user interaction  graphical handle library part iso standard here 
easy deﬁne output user deﬁne type 
operator  put  output operator object tour  container algorithms type ostream  standard output_stream cerr standard stream report error 
default  value write convert sequence character 
example  output decimal number  write  
like ostreams  istreams deal character_string representation build type easily extend cope user deﬁne type 
operator  input operator  cin standard_input stream 
type right hand operand determine input accept target input operation 
read number   standard_input integer variable ﬂoatingpoint number   double precision ﬂoating point variable
want read sequence character 
convenient way read string 
type eric response   eric 
default  whitespace character  space  terminate read  enter eric bloodaxe pretend ill fate king york  response still   eric 
read whole line include terminate newline_character getline function 
program  input eric bloodaxe yield desire output   eric bloodaxe 
standard string nice property expand hold put hav precalculate maximum size 
enter couple megabyte semicolon  program_will echo page semicolon back
example  simple type entry represent entry telephone book  
user deﬁne output take output_stream reference ﬁrst argument return result 
see detail 
correspond input complicated check correct format deal error  
example  condition  mean  succeed reading
ifstream istream attach ﬁle  ofstream ostream attach ﬁle 
second argument delimit output value 
actually  program long need
read string sort write eliminate duplicate 
elegant solution tour  container algorithms store duplicate
keep string keep duplicate keep element order 
way  replace line replace simple copy 
here  forget  delete 
hand  ensure object properly destroy way exit throw exception  execute return  fall end  
ironically  solve problem simply pointer 
unfortunately  overuse pointer reference increase problem 
need semantic pointer  lightweight mechanism space time overhead compare correct build pointer 
include pass free store allocate object function  
handle individual object array way vector handle sequence object 
control lifetime object raii rely move semantic return simple efﬁcient 
similar copy move 
object share ownership object object destroy last destroy 
note spawn task hold copy fp way store copy outlive user 
form garbage collection destructor base resource management memory manage object 
cost free exorbitantly expensive  lifetime share object hard predict 
only actually need share ownership 
give  implement complete  naked  policy program 
smart pointer  still conceptually pointer only second choice resource management container type manage resource high conceptual level 
rule owner read write share object 
datum race form confusion address simply eliminate resource management issue 
smart pointer  resource_handle operation design speciﬁcally resource vector thread 
unsurprisingly  answer 
share object  need pointer reference refer share object  obvious choice obvious single owner 
refer polymorphic object  need pointer reference know exact type object refer size  obvious choice 
share polymorphic object typically require 
need pointer return collection object function  container resource_handle will simply efﬁciently 
modern programming_language support
support standard_library portable type safe variant year universally support modern hardware 
standard library support primarily aim support system level concurrency directly sophisticated high level concurrency model  supply library build standard library facility 
standard_library directly support concurrent execution multiple thread single address space 
allow suitable memory model set atomic operation 
user will see concurrency only term standard_library library build top
section brieﬂy give example standard library concurrency support facility  thread  mutexe  lock operation   future 
feature build directly operating_system offer incur performance penalty compare
thread system level representation task program 
task execute concurrently task launch construct find thread task argument 
task function function_object  
iso standard implementation  basic source character set 
type fundamental type  boolean  character type  integer type  float point type  preﬁxe sufﬁxe  void  size  alignment 
declaration structure declaration  declare multiple name  name  scope  initialization  
object value lvalue rvalue  lifetime object 
advice iso standard language standard_library deﬁne iso standard  iso iec 
book  reference standard form 
case text book imprecise  incomplete  possibly wrong  consult standard 
expect standard tutorial easily accessible non expert 
strictly adhere language library standard guarantee code portable code 
standard piece code bad  simply programmer rely implementation 
easy write perfectly awful standard conform program  real world program rely feature standard guarantee portable 
access system interface type declaration hardware feature express directly require reliance speciﬁc implementation detail 
important deem implementation deﬁne standard 
mean implementation speciﬁc  deﬁne behavior construct behavior document 
example  unsigned char  deﬁne  char least bit hold unsigned char  implementation deﬁne  truncation char only bit initialization deﬁne char least bit 
behavior initialization implementation deﬁne number bit char implementation deﬁne 
char only bit  value will truncate 
implementation deﬁne feature difference hardware run program 
behavior unspeciﬁed  range possible behavior acceptable  implementer oblige specify actually occur 
reason deem unspeciﬁed exact behavior unpredictable fundamental reason 
example  exact value_return unspeciﬁed 
value variable assign thread synchronization mechanism employ prevent data race 
write real world program  rely implementation deﬁne behavior 
behavior price pay ability operate effectively large range system 
example  simple character bit pointer bit 
bit bit character set uncommon  machine bit bit pointer wide
maximize portability  wise explicit implementation deﬁne feature rely isolate subtle example clearly mark section program 
typical example practice present dependency hardware size form constant type deﬁnition header ﬁle 
support technique  standard_library 
assumption implementation deﬁne feature check state static assertion 
example  small   undeﬁned behavior nastier 
construct deem undeﬁned standard reasonable behavior require implementation 
typically  obvious implementation technique will 
plausible outcome code fragment include overwrite unrelated datum trigger hardware error exception 
implementation require choose plausible outcome 
powerful optimizer actual effect undeﬁned behavior unpredictable 
set plausible easily implementable alternative exist  feature deem section iso standard unspeciﬁed implementation deﬁne undeﬁned 
worth spend considerable time effort ensure program deem unspeciﬁed undeﬁne standard 
case  tool exist help
hosted implementation include standard library facility standard book 
freestande implementation standard library facility  long follow freestande implementation header type cstddef implementation property cﬂoat limit climit integer type cstdint start termination cstdlib dynamic_memory management type identiﬁcation typeinfo exception_handle exception initializer list run time support cstdalign cstdarg cstdbool  type trait atomic atomic freestande implementation mean code run only minimal operating_system support 
implementation non standard option exception minimal  close hardware  program 
cause problem people who environment character set  
ascii contain punctuation character operator symbol   character set 
need notation character convenient character representation newline character value  
ascii contain character   write language english 
extended character set source_code  programming environment map extended character set basic source character set way  example  universal character name 
programmer specify entity name   exist type assignment  + addition  function_call  meaningful 
name identiﬁer program type associate
type determine operation apply name entity refer name
declare int  assign operand 
hand  declare function take int argument  call give interger 
present fundamental type declaration 
example just demonstrate language feature  intend useful 
extensive realistic example later
simply basic element program construct 
know element  plus terminology simple syntax order complete real project especially read code write
understanding detail mention requirement understand follow
prefer skim observe major concept  return later need understand detail arise 
integral call user deﬁne type deﬁne user previous declaration  way fundamental type
contrast  fundamental type  pointer  reference collectively refer build type 
standard_library user deﬁne type  
integral ﬂoating point type variety size give programmer choice amount storage consume  precision  range computation 
assumption computer byte hold character  word hold compute integer_value  entity suitable ﬂoating point computation  address refer entity 
fundamental type pointer array present machine level notion programmer reasonably implementation independent manner 
application  bool logical value  char character  int integer_value  double ﬂoating point value 
remain fundamental type variation optimization  special need  compatibility ignore need arise 
boolean express result logical operation 
common bool type result function test condition predicate 
example  bool  bool  int return  
prefer syntax prevent narrowing  still want convert int bool  explicit  type declaration 
prefer directly express notion  valid  short 
short form leave opportunity mistake 
variety character type reﬂect bewilder variety  
char implementation character set bit 
size implementation deﬁne large hold large character set support implementation locale 
distinct type sufﬁx denote alias  
implementation  char type will identical sign char unsigned section character type char  name still separate type 
char variable hold character implementation character set 
example  char  universally  char bit hold value 
typically  character set variant  example ascii  character keyboard 
problem arise set character only partially standardized 
variation occur character set support natural language character set support natural language way 
here  interested only difference affect rule 
large interesting issue program multilingual  multi character set environment scope book  allude place   
safe assume implementation character set include decimal digit  alphabetic character english  basic punctuation character 
safe assume 
character bit character set  set character 
alphabetic character english european language    
alphabetic character contiguous ebcdic leave gap 
character write  national character set      
char ﬁts byte 
embed processor byte access hardware char byte 
reasonably bit unicode encoding basic char 
possible  avoid assumption representation object 
general rule apply character 
character integer_value character set implementation 
example  value ascii character set 
here loop output integer_value character care input  
possibility convert char integer raise question  char sign unsigned 
value represent bit byte interpret value value 
expect  standard leave open possibility complement hardware eliminate value  nonportable 
unfortunately  choice sign unsigned plain char implementationdeﬁne 
type answer deﬁnite  sign char  hold least value  unsigned char  hold least value 
value range store plain char lead subtle portability problem 
see need type char store integer char variable 
note character type integral type arithmetic bitwise logical operation apply 
character literal   convert integer_value add 
result int convert char write
plain  int  leave char  output like    
open possibility nasty surprise implementation dependency 
example  char     hexadecimal int  will value 
unfortunately  answer undeﬁned 
implementation bit byte  answer depend meaning char bit pattern extend int 
machine char unsigned  answer 
machine char sign  answer 
case  compiler warn conversion literal char value 
howev er  offer general mechanism detect kind problem 
solution avoid plain char speciﬁc char type only 
unfortunately  standard library function  strcmp  take plain char only 
char behave identically sign char unsigned char 
howev er 
type character literal char 
character literal implicitly convert integer_value character set machine program run 
example  run machine ascii character set  value   
character literal decimal notation program portable 
character standard name backslash   escape character  name ascii name name newline horizontal tab ht vertical tab vt backspace bs carriage return cr form feed ff alert bel backslash question mark 
single quote   double quote 
example  set uninitialized storage type like 
see example  declaration simply associate type declaration deﬁnition 
deﬁnition declaration supply need program entity 
take memory represent memory set deﬁnition 
terminology deem declaration part interface deﬁnition part implementation 
take view  try compose interface declaration replicate separate ﬁle  deﬁnition set memory belong interface 
assume declaration global scope  char ch  set memory char initialize auto  set memory int initialize const  njal   set memory pointer char 
standard differ early version allow ﬁrst example int type speciﬁe 
implicit int  rule source subtle error confusion 
type name compose multiple keyword  long long volatile int 
type_name look like name  return_type call  
volatile speciﬁer 
aligna speciﬁer 
declaration simply contain list comma separate declarator 
example  declare integer like int int int section declare multiple name operator apply individual name only subsequent name declaration 
ﬁrst character letter 
underscore character   letter 
impose limit number character
part implementation control compiler writer linker  part  unfortunately  impose limit 
run time environment extend restrict set character accept identiﬁer 
extension  allow character yield nonportable program 
keyword  int  user deﬁne entity 
example name hello define foo bar horsesense class class example character sequence identiﬁer fool sys class nonlocal name start underscore reserve special facility implementation run time environment  name application program 
similarly  name start double underscore underscore follow uppercase letter  foo reserve 
read program  compiler look long string character name 
single name  name var follow number 
elseif single name  keyword follow keyword
uppercase lowercase letter distinct  count count name  unwise choose name differ only capitalization 
general  avoid name differ only subtle way 
example  font  uppercase  zero hard tell lowercase   uppercase   
 lo   ll  poor choice identiﬁer name 
font problem 
name large scope long reasonably obvious name  vector   
howev er  code clear name only small scope short  conventional name
function  class  namespace keep scope small 
useful keep frequently name short reserve long name infrequently entity 
example  ev en phone number happen store vector 
encode type name  pcname name icount count int language dynamic weak type system  
encode type name lower abstraction level program  prevent generic_programming rely name able refer entity type 
compiler keep track type
want change type name  hold name  will change name type encoding lie 
system type abbreviation come will overelaborate cryptic variety type increase 
choose name art 
try maintain consistent naming style 
example  capitalize name user deﬁne type start name non type entity lowercase letter example  shape 
capital macro macro  example  hack non macro non macro constant 
underscore separate word identiﬁer  readable numberofelement 
howev er  consistency hard achieve program typically compose fragment source reasonable style
consistent abbreviation acronym 
note language standard_library lowercase type  see hint part standard 
local  name declare function lambda call local name 
extend point declaration end block declaration occur 
block section code delimit pair 
function lambda parameter name local name outermost block function lambda 
class  name call member name class_member name deﬁne class function  class  enum_class  namespace 
extend opening class declaration end class declaration 
namespace  name call namespace member name deﬁne namespace function  lambda  class  enum_class  namespace 
extend point declaration end namespace 
namespace name accessible translation unit 
global  name call global name deﬁne function  class  enum_class  namespace 
global name extend point declaration end ﬁle declaration occur 
global name accessible translation unit 
technically  global namespace namespace  global name example namespace member name 
statement  name statement deﬁne part    switch statement 
extend point declaration end statement 
name statement local name 
function  label point declaration end function 
declaration name block hide declaration enclose block global name 
name redeﬁne refer entity block 
exit block  name resume previous meaning 
human reader easily notice name hide know shadow 
error rare  difﬁcult ﬁnd 
name hiding minimize 
name global_variable local_variable large function ask trouble 
hide global name refer resolution operator    
way hidden local name 
name class_member start point declaration  complete declarator initializer 
imply name specify initial value 
possible single name refer object block  operator 
example  int  
name introduce statement local statement statement 
allow conventional name loop variable repeatedly function 
contain name clash 
declaration allow only statement branch statement 
initializer syntactic style  
only ﬁrst context  strongly recommend
clear error prone alternative 
ﬁrst form  form ﬁnd old code 
form c
old habit die hard  inconsistently initialize simple variable simple value 
example  int  char   complicated 
initialization  initialization  allow narrowing 
integer convert integer hold value 
example  char int allow  int char 
ﬂoating point value convert ﬂoating point type hold value 
example  ﬂoat double allow  double ﬂoat 
ﬂoating point value convert integer type 
integer_value convert ﬂoating point type 
advantage initialization  trap  auto type determine initializer 
trap initializer  want type deduce 
possible deﬁne class object initialize value alternatively construct give couple argument simply value store 
classical example integer  int  element value int  
integral type  default_value suitable representation zero 
pointer  default_value nullptr 
user deﬁne type  default_value determine type constructor 
user deﬁne type  distinction direct initialization implicit conversion allow copy initialization  see 
initialization kind object discuss 
class  constructor  constructor  default  
user deﬁne container  miss initializer type  include type  possible leave initializer 
unfortunately common situation complicated 
like complication  just initialize consistently 
only case uninitialized variable large input buffer 
example  constexpr int  char buf  
avoid low level buffer leave buffer uninitialize know  measurement optimization compare initialized array signiﬁcant 
initializer speciﬁed  global  namespace  local static  static member collectively call static object initialize
member array class default initialize array structure
complicated object require value initializer 
primarily handle initializer 
style initialization array  see 
style structure  see 
user deﬁne type constructor  see 
initializer list constructor  see 
case redundant 
add emphasize set value initialize set member variable 
case  function style argument list  
deduction here simple  auto decltype simply report type expression know compiler 
let variable type initializer 
alias want insulate code detail underlie machine 
want represent bit integer 
write code term  plain   port code machine redeﬁne single occurrence code long integer  long  sufﬁx conventional alias  typedef  
  alias find stdint 
note name type representation purpose necessarily idea 
keyword introduce template alia 
example  template typename   
pointer  nullptr 
array array initializer  string literal 
pointer array navigate array  multidimensional array  pass array 
pointer const 
pointer ownership 
reference lvalue reference  rvalue_reference  reference reference  pointer reference 
advice introduction deal basic language mechanism refer memory 
obviously  refer object name  object   reside speciﬁc address memory  object access know address type 
language construct hold address pointer reference 
example  char    hold address address operator graphically     fundamental operation pointer dereference  refer object point unary
example  char    hold address address operator char    dereference operator object point value_store  value assign 
possible perform arithmetic operation pointer array_element 
implementation pointer intend map directly address mechanism machine program run 
machine address byte 
tend hardware extract byte word 
hand  machine directly address individual bit 
small object independently allocate point build pointer type char 
note bool occupy least space char 
store small value compactly  bitwise logical operation  structure  bitset 
 mean  pointer  sufﬁx type_name 
unfortunately  pointer array pointer function need complicated notation  pi  pointer int ppc  pointer pointer char  array pointer int_int  pointer function take char argument  return int  function take char argument  return pointer int see explanation declaration syntax complete grammar 
pointer function useful  discuss 
pointer class_member present 
read section pointer type object assign variable type  pointer function pointer member
addition  assign  compare equality inequality  explicitly convert type 
operation unsafe compiler know kind object point
operation result compile time error 
 explicitly convert pointer speciﬁc type 
general  safe pointer convert  cast  type differ type object point
example  machine assume double allocate byte boundary 
strange behavior arise point int allocate way 
form explicit type_conversion inherently unsafe ugly 
notation  design ugly easy ﬁnd code 
primary pass pointer function allow assumption type object return untyped object function 
object  explicit type_conversion 
function pointer typically exist low level system  real hardware resource manipulate 
example   allocate byte special heap occurrence high level system view great suspicion likely indicator design error 
optimization  hide type safe interface 
pointer function pointer member assign 
assign pointer type  build type  nullptr  nullptr  int nullptr  error  pointer just nullptr  pointer type  null pointer pointer type 
example   value nullptr object allocate address  zero bit pattern common representation nullptr 
zero int 
howev er  standard conversion allow constant pointer pointer member type 
popular deﬁne macro null represent null pointer 
example  null  macro null difference deﬁnition null implementation  example  null 
null typically  illegal null  error  assign void int nullptr code readable alternative avoid potential confusion function overload accept pointer integer 
example  ﬂoat  array ﬂoat     
access range array undeﬁned disastrous 
run time range checking guarantee common 
number element array  array bind  constant expression 
need variable bound   
array fundamental way represent sequence object memory 
want simple ﬁxed length sequence object give type memory  array ideal solution 
need  array problem 
array assignment  name array implicitly convert pointer ﬁrst element slight provocation 
avoid array interface  function argument   implicit conversion pointer root cause common error code style code 
allocate array free store  sure delete pointer once only only last 
easily reliably lifetime free store array control resource_handle  string     
allocate array statically stack  sure delete
obviously  programmer follow piece advice lack ability encapsulate array  advice bad context 
widely kind array zero terminate array char 
way store string  zero terminate array char call style string 
string literal follow convention  standard library function  strcpy strcmp  rely
const assume point zero terminate sequence character 
example      char        array declare speciﬁc size  initializer list  size calculate count element initializer list 
size explicitly speciﬁed  error give surplus element initializer list 
initialize array ev en exactly type  array assignment   error  array assignment similarly  pass array value 
need assignment collection object     array  valarray
array character conveniently initialize string literal 
example  type string literal array number const character    type const 
old code  assign string literal non const  
obviously unsafe accept assignment 
source subtle error  grumble old code compile reason 
string literal immutable only obvious allow implementation signiﬁcant optimization way string literal store access 
want string guarantee able modify  place character non const array  
identical string literal allocate array implementationdeﬁne 
empty string write pair adjacent double quote     type const 
character empty string terminate   
backslash convention represent nongraphic character string 
possible represent double quote  escape character backslash string 
common character newline_character    
example   beep end   escape character     ascii character bel know alert  cause sound emit 
possible real  newline nonraw string literal   string  abcdefghijklmnopqrstuvwxyz   compiler_will concatenate adjacent string  equivalently initialize single string  abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz   possible null character string  program_will suspect character
example  string   will treat jen  standardlibrary function strcpy strlen  see 
logical case simple 
need backslashe quote string literal  simple technique unmanageable 
regular expression backslash escape character introduce character pointer  array  reference represent character class 
convention share programming_language  just change
write regular expression standard regex library  backslash escape character notable source error 
write pattern represent word separate backslash string    hope right prevent frustration error cause clash convention  raw string literal 
raw string literal string literal backslash just backslash double quote just double quote example string   pretty sure right raw string literal  notation sequence character ccc 
initial distinguish raw string literal ordinary string literal 
parenthesis allow  unescape  double quote 
example  character sequence  raw string literal 
fortunately   rare problem   only default delimiter pair 
add delimiter  
example  character sequence identical sequence 
way cope arbitrarily complicate pattern 
work regular expression  raw string literal just curiosity learn  regular expression useful widely
real world example     ﬁve backslashe correct
example like  expert easily confused  raw string literal signiﬁcant service 
contrast nonraw string literal  raw string literal contain newline 
example  string count   equivalent string    large character set string preﬁx   string wide character 
type const 
similarly  string preﬁx lr    raw string wide character type const 
string terminate  character 
sound excessive  major encoding unicode    
alternative  raw ordinary  string support 
utf encoding support unicode character  depend system need ﬁt
essentially internet application  browser email rely encoding 
variable width encoding  common character ﬁt byte  frequently character estimate byte  rarer character byte 
ascii character ﬁt byte encoding integer_value ascii 
latin alphabet  greek  cyrillic  hebrew  arabic  ﬁt byte 
string terminate   string   string  
represent ordinary english character_string variety way 
ﬁle name backslash separator    implementation character set string  
obviously  real purpose unicode string able put unicode character
example  print string appropriately give ofﬁcial vowel danish  
hexadecimal number unicode code point 
code point independent encoding will representation bit byte encoding 
example   cyrillic lowercase letter  byte hexadecimal value  byte hexadecimal value  byte hexadecimal value 
hexadecimal value refer universal character name 
order rs case signiﬁcant  ru ur valid string preﬁxe 
name array pointer initial element 
example  pointer  array  reference 
important algorithm  
pointer point element array  reading writing 
result take address element initial element past last element undeﬁned avoid 
value pass standard library function strlen call 
snag impossible avoid implicit conversion 
word  way declare function array copy function call 
fortunately  implicit explicit conversion pointer array 
implicit conversion array argument pointer mean size array lose call_function 
call_function determine size perform relie zero end string  strlen return number character include terminate 
pretty low level 
standard library vector    array   string suffer problem 
library type give number element size count element time 
access achieve pointer array plus index pointer element 
inherent reason version fast
modern compiler  identical code generate example 
programmer choose version logical aesthetic ground 
subscripte build array deﬁne term pointer operation +
build array integer range hav surprise people ﬁnd 
cleverness place production code 
equivalence pretty low level hold standard library container  array vector 
result apply arithmetic_operator +    pointer depend type object point
arithmetic_operator apply pointer type  assume point element array object type point next element array  large integer_value
example  template typename 
show implementation  
subtraction pointer deﬁne only pointer point element array language fast way ensure case 
subtract pointer pointer  result number array_element sequence integer 
add integer pointer subtract integer pointer  case  result pointer value 
value point element array original pointer result value undeﬁned 
complicated pointer arithmetic unnecessary avoid 
addition pointer sense allow 
array self number element array guarantee store array 
imply traverse array contain terminator way style string supply number element 
advantage build array disadvantage obtain standard library container array  
implementation offer optional range check array 
checking expensive  only development include production code 
range check individual access  try maintain consistent policy access element only deﬁne range 
array manipulate interface high level container type  vector  hard confused range valid element 
single object memory matrix ma only element store 
dimension exist compiler source only 
write code  job remember supply dimension need 
example  print ma like 
fortunately  mistake catch compiler 
example  int  error  comma allow constant expression 
array pass pointer ﬁrst element 
example  void 
function equivalently write
function argument  ﬁrst dimension array simply treat pointer 
array bind speciﬁed simply ignore 
imply want pass sequence element lose size pass build array 
place array inside class member deﬁne class act handle 
insist array directly  will deal bug confusion noticeable advantage return 
deﬁne function manipulate dimensional matrix 
dimension know compile time  problem  
ﬁrst dimension array irrelevant ﬁnde location element  simply state element here  type here  present 
example  look layout ma note know only second dimension  locate
ﬁrst dimension pass argument  
fortunately  argument declaration illegal second dimension multidimensional array know order ﬁnd location element 
expression correctly interpret  unlikely programmer intend 
correct solution 
note last call  equivalent  type error 
kind subtle messy code hidden 
deal directly multidimensional array  encapsulate code rely
way  ease task next programmer touch code 
multidimensional array type proper subscripte operator user worry layout datum array  
standard vector suffer problem 
basically  constexpr role enable ensure compile time evaluation  const primary role specify immutability interface 
section primarily concerned second role  interface speciﬁcation 
object hav value change initialization  
symbolic constant lead maintainable code literal directly code 
pointer read write
function_parameter read write
express notion immutability initialization  add const deﬁnition object 
declare pointer object point constant  declarator operator plain
useful function argument 
declare pointer argument const  function prohibit modify object point
example  const char  ﬁnd ﬁrst occurrence char  ﬁnd ﬁrst occurrence ﬁrst version string element modiﬁed return pointer const allow modiﬁcation 
second version mutable string 
assign address non const variable pointer constant harm come
address constant assign unrestricted pointer allow object  value change 
example  pointer  array  reference 
memory acquire
case  obviously manage lifetime object create free store  general keep track need delete large program require simple consistent strategy 
idea place pointer represent ownership resource_handle class  vector  string  
way  assume pointer resource_handle owner delete 
discuss resource management great detail 
type pointer determine datum pointer 
pointer differ name object way  
syntax  example  obj 
pointer point object time 
careful pointer object directly  pointer nullptr point object expect 
difference annoying  example  programmer ﬁnd ugly compare 
bad  manage pointer variable vary value protect code possibility nullptr signiﬁcant burden 
finally  want overload operator   want write 
language mechanism address problem call reference 
like pointer  reference alias object  implement hold machine address object  impose performance overhead compare pointer  differ pointer 
access reference exactly syntax name object 
reference refer object initialize 
null reference   assume reference refer object 
reference alternative name object  alia 
reference specify
example  template class class vector 
ﬁrst call lvalue reference 
here  increment reference rr  apply rr refer 
value reference change initialization  refer object initialize denote 
pointer object denote reference rr  write rr 
pointer reference 
deﬁne array reference 
sense  reference object 
obvious implementation reference constant pointer dereference time
harm think reference way  long remember reference object manipulate way pointer section lvalue reference ii  ii  rr  case  compiler optimize away reference object represent reference run time 
initialization reference trivial initializer lvalue object address take  see 
initializer plain  lvalue type
initializer const need lvalue type
case  first  implicit type_conversion apply see 
reference variable reference constant distinguish introduce temporary variable highly error prone  assignment variable assignment soon disappear temporary 
problem exist reference constant  reference constant important function argument 
reference specify function argument function change value object pass
semantic argument pass deﬁne initialization  call  increment argument aa name
keep program readable  avoid function modify argument 
return value function explicitly  pointer  array  reference 
increment notation giv clue reader value modiﬁe  way next
 plain  reference argument only name function give strong hint reference argument modiﬁed 
deﬁne function left hand right hand side assignment 
map example 
example  template class class class map simple map class 
similarly  return value reference type expensive copy 
const reference want modify want literal temporary object argument 
return result non const reference user want modify find value 
example  section lvalue reference int count number occurrence word input 
finally  result table word input  number occurrence  print 
example  give input aa bb bb aa aa bb aa aa program_will produce aa  bb  loop work deﬁne begin end  just standard library map 
non const lvalue reference refer object  user reference write 
const lvalue reference refer constant  immutable point view user reference 
rvalue_reference refer temporary object  user reference typically will modify  assume object will
want know reference refer temporary  turn expensive copy operation cheap move operation   
object string list represent small descriptor pointing potentially huge amount simply cheaply move know source
classic example return_value compiler know local_variable return will 
rvalue_reference bind rvalue  lvalue 
rvalue_reference exactly opposite lvalue reference 
const lvalue reference rvalue_reference bind rvalue 
purpose will fundamentally 
rvalue_reference implement destructive read  optimization require copy 
const lvalue reference prevent modiﬁcation argument 
object refer rvalue_reference access exactly like object refer lvalue reference ordinary variable_name 
kind enumeration  enum_class  enumerator name  red local enum value implicitly convert type  plain_enum   enumerator name scope enum value implicitly convert integer general  prefer enum_class cause surprise 
enumeration represent integer enumerator integer call represent enumeration underlying 
underlie signed unsigned integer type  default int 
wasteful space  char  
human notice miss  compiler issue warning only value handle 
enumerator initialize constant expression integral 
example  enum_class acknowledg       value enumerator choose combine bitwise 
result conversion undeﬁned range enumeration  underlying 
last assignment show implicit conversion integer enumeration  integer_value representation enumeration 
extract value explicitly 
notion range value enumeration differ enumeration notion pascal family language 
bit manipulation example require value set enumerator deﬁne  example long history 
sizeof enum_class sizeof underlying 
underlying explicitly speciﬁed  size 
enumerator plain_enum export enum  scope  implicitly convert value integer 
example class  remove  
compiler accept  certainly bug 
injection name enclose scope enum  enum_class class  namespace pollution major problem large program 
specify underlying type plain enumeration  just enum_class 
declare enumeration deﬁne later 
example  enum  char    
specify underlying type  declare enum deﬁne underlying type determine complicated algorithm  enumerator nonnegative  range enumeration small power enumerator range 
negative enumerator  range 
deﬁne small capable hold enumerator value conventional complement representation 
sizeof enumeration sizeof underlie type 
underlying type explicitly speciﬁed  integral type hold range large sizeof  enumerator represent unsigned 
example  maybe machine 
example  enum    need set integer constant  type variable 
declaration statement 
selection statement statement  switch_statement  declaration condition 
iteration statement range statement  statement  statement  statement  loop exit 
comment indentation 
advice introduction offer conventional ﬂexible set statement 
basically interesting complicated find expression declaration 
note declaration statement expression statement add semicolon end 
expression  statement value 
statement specify order execution 
example  + expression statement statement  execute only  + execute expect 
compiler reorder code improve performance long result identical simple order execution 
name declare block scope end block 
declaration statement assignment statement procedure call statement  assignment function_call expression 
init statement declaration expression statement 
note end semicolon 
init declaration declaration single uninitialized variable 
statement handle exception  try block  
variable declare static  initializer execute thread control pass declaration see 
reason allow declaration statement place   enable programmer minimize error cause uninitialized variable allow locality code 
rarely reason introduce variable value hold 
ability place declaration executable code essential constant single assignment style programming value object change initialization 
user deﬁne type  postpone deﬁnition variable suitable initializer lead performance 
input variable reasonable example 
assume error return  code cause buffer overﬂow 
  solution example 
condition evaluate boolean  possible implicitly convert bool 
imply arithmetic pointer expression condition 
example  integer  
note  plain  enum implicitly convert integer bool  enum_class 
example  section statement 
operators will evaluate second argument
test only nullptr 
choose alternative produce value  conditional expression 
need introduce name branch  enclose block 
example  statement 
expression case label constant expression integral enumeration type 
value once case label switch statement 
switch statement easy read nontrivial example 
typically lead generation code reason repeatedly check individual value 
jump table
switch beware 
example  switch action 
break common way terminate case  return useful 
switch statement default 
single answer cover situation 
default handle common case 
common exact opposite  default  action simply way catch error  valid alternative cover case 
case default switch intend case enumerator enumeration 
leave default give compiler chance warn set case match set enumerator 
example  certainly error  
test impossible  value separately 
possible bypass initialization 
here   thread execution bypass initialization will compile 
unfortunately  int need initialize  declaration error 
howev er  error  read uninitialized variable 
unfortunately  compiler give just warning uninitialized variable reliably catch misuse 
usual  avoid uninitialized variable 
need variable switch statement  limit scope enclose declaration block 
example  see prim 
delay deﬁnition local_variable give initial value 
way  trouble variable initial value assign 
elegant application principle declare variable condition 
here  declare initialize value initialization test value condition 
scope extend point declaration end statement condition control 
example  branch statement  scope branch 
open scope literally initialization intended useful life  
declaration condition declare initialize single variable const 
note end semicolon 
statement statement call control statement loop body execute repeatedly condition false programmer break loop way break  return  throw  goto 
complicated loop express algorithm plus lambda expression 
scope variable_name element here  statement 
expression colon denote sequence range  yield value call obtain iterator compiler ﬁrst look member begin end try
begin end find range  member begin variable function  range error 
find find  begin take argument sequence  type  range error 
compiler build array 
iterator header build array standard library container 
sequence design  deﬁne begin end way standard library container 
control variable  example  refer current element equivalent equivalent statement  
example  touch element time effectively traverse range simultaneously 
need general statement 
loop variable  termination condition  expression update loop variable explicitly present  front  single_line 
initializer declaration  variable variable introduce scope end statement 
obvious right type control variable loop  auto come handy  auto begin   
initialization need  initialize statement empty 
expression suppose increment loop variable omit  update form loop variable typically body loop 
loop simple  introduce loop variable  test condition  update loop variable  variety  express statement 
elegant variant   here  reading testing termination combine cin  need explicit loop variable 
hand  allow limit scope current element    loop statement 
statement useful express loop explicit termination condition  
statement easily rewrite equivalent statement vice versa 
call like  easy horrible mistake 
example  empty string 
experience  statement source error confusion 
reason body execute once condition evaluate 
body work correctly  like condition hold time
guess  find condition hold expect program write test later code precede modiﬁe 
prefer condition  front see  recommend avoid statement 
break  break section loop exit near enclose switch statement iteration statement 
break need leave loop body   warp logic loop  require introduction extra varible  complete exit condition condition statement statement 
want exit loop completely  just want end loop body 
continue skip rest body iteration statement 
imply goto jump block 
only restriction jump past initializer exception handler 
sensible goto ordinary code break nested loop switch statement break break only innermost enclose loop switch statement 
example  dimensional matrix call mn 
introduce enter
least troublesome least confusing goto 
consistent style indentation
see fundamental reason prefer like programmer  preference  book reﬂect 
apply style comment 
comment misuse way seriously affect readability program 
compiler understand content comment  way ensure comment 
program contain comment incomprehensible  ambiguous  just plain wrong 
bad comment bad comment 
state language just mention comment 
remark aim comment variable  initialize function   take argument comment typically render unnecessary proper 
once state clearly language  mention second time comment 
example    increment counter comment bad simply redundant 
increase amount text reader look obscure structure program  wrong 
note  comment extensively teach purpose programming_language textbook
way program textbook differ real program 
comment state piece code suppose intent code  code only state term 
preferably  comment express suitably high level abstraction easy human understand delve minute detail 
comment source ﬁle state declaration common  reference manual  name programmer  general hint maintenance 
comment class  template  namespace 
comment nontrivial function state purpose  algorithm obvious  maybe assumption environment 
comment global namespace variable constant 
comment code nonobvious nonportable 
little example   implementation symbol table 
see ralston   ﬁrst course  pg 
bjar ne stroustr feb choose write set comment essential part program 
write comment difﬁcult write program
art worth cultivate 
example  remove expensive check  happen nesting give error unmatched ﬁnal
desk calculator parser  input  low level input  error handling  driver  header  command line argument  note style 
operator summary result  order evaluation  operator precedence  temporary object 
constant expression symbolic constant  const constant expression  literal type  reference argument  address constant expression 
implicit type_conversion promotion  conversion  usual arithmetic conversion 
advice introduction discuss expression detail 
 assignment expression  function_call expression  construction object expression  operation conventional arithmetic expression evaluation 
giv impression expression show context  ﬁrst present small complete program  simple  desk  next  complete set operator list meaning builtin type brieﬂy outline 
operator require extensive explanation discuss 
user deﬁne variable 
example  give input pi pi predeﬁne calculator program_will write result ﬁrst line input result second 
calculator consist part  parser  input function  symbol table  driver 
actually  miniature compiler parser syntactic analysis  input function handle input lexical analysis  symbol table hold permanent driver handle initialization  output  error 
add feature calculator useful  code long feature just add code additional insight 
basic unit expression number  name  operator   +  unary binary  assignment 
name need declare
style syntax analysis call recursive descent  popular straightforward topdown technique 
language  function_call cheap  efﬁcient 
production grammar  function call function 
terminal symbol example  end  number  +  recognize lexical analyzer nonterminal symbol recognize syntax analyzer function  expr  term  prim 
soon operand know  expression evaluate  real compiler  code generate point 
input  parser encapsulate reading character composition token 
 tokenize   turn stream character   tokens 
token kind token  value pair   turn ﬂoating point value 
part parser need only know  ts  token
read next token  call 
recently read token current token   call 
addition tokenizing  hide actual source character 
will see come directly user type cin  program command line  input stream 
deﬁnition token look like enum_class kind  char 
represent token integer_value character convenient efﬁcient help people debugger 
work long character input value enumerator current character set know printing character singledigit integer_value 
interface look like class public  
parser function take bool argument  call function expression expression return value 
function expr handle addition subtraction 
manner typical high level function large program  call function work 
value test match case label  default choose 
note expression + evaluate  speciﬁed grammar 
+ only short express intend operation directly 
assignment_operator separate lexical token  +  syntax_error space + 
assignment binary  + follow assignment possible  + modulo  remainder  operator    bitwise logical  exclusive shift right shift  summarize meaning 
binary operator apply operand build type  expression mean  evaluate once only 
test divide call error detect zero divisor 
division assignment only nonzero 
similarly  token name deﬁne  see see  value place 
note prim read token analyze primary expression 
case parser function simply want move ahead next token  return_value 
ﬁne result 
ignore return_value bother hav add read function just update current return value explicitly  throw away  result  
name  calculator ﬁrst look ahead see assign simply read 
case  symbol table consult 
example  user enter  calculator will reach case execute double table    
discuss org anize program set module 
exception  declaration calculator example order declare exactly once
loop call break
declaration double  deﬁnition prim will nicely 
communicate person  program cope person whim  convention  seemingly random error 
try force person behave manner suitable machine rightly offensive 
token unit input high level routine 
here  low level input 
write low level input routine need everyday task 
system standard function
first need see complete deﬁnition  class 
initialize input stream  character 
implement convention eventually delete   istream pass pointer  istream pass reference 
bit elaborate simple program  useful general technique class hold pointer resource require destruction 
hold value  pointer input stream  boolean  ownership input stream  current token ct 
gav ct default_value sloppy
people call current  deﬁne token 
choose initial value ct program misuse current will value input stream 
present stage 
first  deceptively simple version impose burden user 
next  modify slightly elegant  easy version 
idea read character  character decide token need compose  read character need  return token represent character read 
assignment operator  result assignment value variable assign
allow assign value return statement 
single statement useful maintenance 
assignment return separate code  programmer update forget update
care last member token worried performance 
case here  general deal complete object clear error prone manipulate data member individually 
case giv example strategy 
case separately complete function 
expression terminator      parenthesis  operator handle simply return value      end expression  print        +               return kind  need implicit conversion char kind  only character correspond kind value  certify 
number handle like                                  section input  put ﬁrst digit back input stream  read number  return  stack label horizontally vertically generally idea arrangement hard read 
line digit tedious 
operator deﬁne read ﬂoating point value double  code trivial 
first initial character digit dot put back cin 
ﬂoating point value read 
token end input  operator  punctuation character  number 
handle similarly number  default    error isalpha  
operator apply string read hit whitespace 
ideal  will_return problem 
here  ﬁnally  complete input function  
conversion token value trivial deﬁne integer_value 
tedious remember add semicolon expression order value print  terminate whitespace only real nuisance 
example  identiﬁer identiﬁer follow number 
want  add whitespace 
problem solve replace type orient default input operation code read individual character 
first  will newline equivalent semicolon mark end expression  
call read single character input stream succeed character read cin  return terminate calculator session 
test implement table lookup  isspace fast test individual whitespace character 
similar function test character digit isdigit  letter isalpha  digit letter isalnum 
whitespace skip  next character determine lexical token come 
problem cause read string whitespace encounter solve read character time character letter digit find  default    error isalpha 
construct program improvement implement local modiﬁcation only important design aim 
worry add character end string inefﬁcient 
long string  modern string implementation small string optimization  
mean handle string likely name calculator compiler inv olve inefﬁcient operation 
short string require free store 
maximum number character short string implementation dependent  guess 
program  simple handle strategy sufﬁce 
function simply count error  write message  
stream unbuffered output_stream report error 
reason return value error typically occur middle evaluation expression  abort evaluation entirely return value unlikely expression keep track line number  inform user approximately occur 
useful calculator noninteractively 
stylized general strategy separate detection recovery 
implement exception see   here suitable line calculator 
decide function  setup reporting calculate handle actual calculation  
conventionally  return zero program terminate normally nonzero 
return number error accomplish nicely 
happen  only initialization need insert predeﬁne name symbol table 
primary task loop calculate read expression write answer 
achieve line  expr    argument tell expr need call read token work 
test ensure loop correctly exit encounter input end 
break statement exit near enclose switch statement loop 
test    relieve expr responsibility handle empty expression 
continue statement equivalent end loop 
header include complete program  
discuss way organize calculator module namespace org anize source ﬁle 
common evaluate single expression 
expression present command line argument  keystroke avoid 
program start call  
give argument specify number argument  conventionally call  array argument  conventionally call argv 
argument style character_string   type argv 
program occur command line pass  least 
list argument zero terminate  
example  command dc argument value   argv  convention call share style array string
idea read command string way read input stream 
stream read string unsurprisingly call istringstream 
calculate expression present command line  simply read istringstream  expression 
easy modify accept command line argument  especially expression pass single argument  
character basic source character set   convenient type keyword 
programmer ﬁnd odd symbol   basic logical operation 
set alternative representation keyword  bitand bitor compl xor
aim produce result large  operand type 
example  binary operator ﬂoating point operand  computation ﬂoating point arithmetic result ﬂoating point value 
similarly  long operand  computation long integer arithmetic  result long 
operand small int bool char convert int operator apply 
meaning result type user deﬁne determine declaration 
logically feasible  result operator take lvalue operand lvalue denoting lvalue operand 
preserve lvalue way allow great ﬂexibility
useful write code need work uniformly efﬁciently build user deﬁne type  write template program generate code 
result sizeof unsigned integral type call deﬁne cstddef 
result pointer subtraction sign integral type call deﬁned cstddef 
implementation check arithmetic overﬂow
will eventually try increase past large integer 
happen undeﬁned  typically value  wrap neg ative number machine 
similarly  effect dividing zero undeﬁned  cause abrupt termination program 
underﬂow  overﬂow  division zero throw standard exception 
assume expression evaluate leave right 
example  int  undeﬁne call ﬁrst 
compiler warn ambiguity 
unfortunately  careful write expression read write object once  single expression operator deﬁne  +  explicitly express sequencing using  comma   
 comma  logical  logical guarantee left hand operand evaluate right hand operand 
example  assign 
example find 
build type  second operand evaluate only ﬁrst operand true  second operand evaluate only ﬁrst operand false  call short circuit evaluation 
note sequence operator  comma logically comma separate argument function_call 
call argument   order evaluation argument expression undeﬁned 
order dependence argument expression poor style undeﬁned behavior 
call only argument  comma expression   equivalent 
confusing  avoid 
parenthesis force group 
example  mean  parenthese  evaluate only user tell difference 
ﬂoating point computation signiﬁcantly compiler_will evaluate expression exactly write 
parenthese programmer doubt rule 
parenthesis common subexpression complicated  complicated subexpression source error 
start feel need parenthesis  break expression extra variable 
case operator precedence result obvious  interpretation 
fortunately  easy compiler warn mistake 
case  parenthesis important  
worth note following work way mathematician expect  section operator precedence 
legal  interpret  result ﬁrst comparison true false 
boolean value implicitly convert  compare  yield true 
test range  
common mistake novice assignment equal condition 
easy compiler warn mistake
recommend warp style compensate compiler weak warning 
style worthwhile  tr protect misuse  recommend temporary object compiler introduce object hold intermediate result expression 
example  + result put add 
build type  handle temporary object refer just temporary invisible user 
howev er  user deﬁne type hold resource know lifetime temporary important 
bind reference initialize name object  temporary object destroy end full expression create 
full expression expression subexpression expression 
standard library string member return style pointer zeroterminate array character  
operator + deﬁne mean string concatenation 
useful facility string 
combination cause obscure 
ﬁrst reaction  agree 
code write  worth know interpret 
temporary string object create hold 
next  pointer style string extract object 
end expression temporary object delete 
style string return allocate part temporary object hold  storage guarantee exist temporary destroy 
point deallocate storage 
output operation work expect  sheer luck 
compiler detect warn variant problem 
condition will work expect full expression temporary hold + create condition
temporary destroy control statement enter  guarantee work 
note case  problem temporary arise high level data_type low level way 
clean programming style yield understandable program fragment avoid problem temporary completely 
temporary destroy reference name object scope 
remember return reference local_variable error temporary object bind non const lvalue reference 
temporary object create explicitly expression invoke constructor 
basically  constexpr  role enable ensure compile time evaluation  const  section constant expression primary role specify immutability interface 
section primarily concerned ﬁrst role  compile time evaluation 
constant expression expression compiler evaluate 
value know compile time side effect 
ultimately  constant expression start integral value  ﬂoating point value  enumerator  combine operator constexpr function turn produce value 
addition  address form constant expression 
simplicity  discuss separately 
variety reason want name constant literal value_store variable  name constant code easy understand maintain 
datum read only memory immune system crash 
note reason    partly logical 
just constant expression obsession performance 
reason constant expression direct representation system requirement 
part deﬁnition datum item here  deliberately avoid word  variable   constexpr express need compile time evaluation 
initializer constexpr evaluate compile time  compiler_will give error 
example  int  
clever compiler deduce value initializer 
howev er  prefer rely degree cleverness compiler 
large program  determine value_variable compile time typically difﬁcult impossible 
integer  ﬂoating point  enumeration value 
operator modify state  +     
constexpr function literal type signiﬁcant level type safety expressive power 
unfair compare commonly macro 
conditional expression operator  mean selection constant expression 
example  compute integer square root compile time  
condition  evaluate select alternative evaluate 
alternative select evaluate constant expression 
similarly  operand evaluate need constant expression 
feature primarily useful constexpr function constant expression
function class 
possible eliminate form confusion overload resolution example  see   give parameter priority argument minimize confusion 
call  example
note rule apply argument only 
special rule type just happen call scope 
implement interface  choice  variadic allow handle arbitrary number arbitrary type type safe manner write small metaprogram interpret argument list determine meaning take action 
allow handle arbitrary number argument single type type safe manner 
context  homogeneous list common important case 
solution inherently type safe hard sophisticated user deﬁne type 
mechanism early day c
ﬁrst mechanism only third mechanism inferior 
example  int  
function rely compiler interpret argument list 
case printf  ﬁrst argument format string contain special character sequence allow printf handle argument correctly  mean  expect argument  mean  expect int  howev er  compiler general ensure expect argument call argument expect type 
valid code  compiler_will catch error 
will_produce strange look output try 
case  char short pass int ﬂoat pass double 
necessarily programmer expect 
design program need function argument type completely speciﬁed 
overloaded function  function default argument  function take argument  variadic_template take care type check case leave argument type unspeciﬁed 
only number argument type argument vary variadic solution deem undesirable ellipsis
common ellipsis specify interface library function deﬁne alternative  
standard set macro access unspeciﬁed argument function find cstdarg 
write error function take integer argument severity error follow arbitrary number string 
idea compose error_message pass word separate style string argument 
list string argument terminate null pointer  
pass conventionally  name program 
note integer terminator portable  implementation  integer null pointer representation 
illustrate subtlety extra work face programmer once type checking suppress ellipsis 
first  deﬁne initialize call 
macro take name name last formal argument argument 
macro assume actual argument type pass  typically way ensure
return function call 
reason modify stack way return successfully undo modiﬁcation 
alternatively  error deﬁne standard library  
hav mimic style  simplify code pass container single argument  void severity  const string err
allow later improvement error 
string error prone unspeciﬁed number argument 
function construct object option ﬂexibility 
class complex  class complex double 
action complex  constructor trivial  logically odd function here  constructor essentially task 
class  section default argument constructor work repetitiveness common 
deal repetitiveness constructor  real forward  double   construct complex scalar 
want add debugging  tracing  statistic gather code complex  now single place
abbreviate  double   construct complex scalar clear user supply argument need  default
intent single constructor plus shorthand notation now explicit 
default argument type check time function_declaration evaluate time call 
example  class 
name operation type call overload 
technique basic operation 
only name addition  +  add value integer ﬂoating point type combination type 
idea easily extend function deﬁne programmer 
example  void print  print void  print style string compiler only function name common name 
presumably  function sense similar  language constrain programmer 
overloaded function_name primarily notational convenience 
convenience function conventional name sqrt  print  open 
name semantically  convenience essential 
happen  example  operator    case constructor   generic_programming  
template systematic way deﬁne set overloaded function 
compare type actual argument type parameter function scope call fct 
idea invoke function match argument give compile time error function match 
resolution rule elaborate primarily take account elaborate rule build numeric type 
reason distinguish conversion promotion want prefer safe promotion  unsafe conversion 
overload resolution independent order declaration function
function template handle apply overload resolution rule result specialization base set argument 
separate rule overload initializer list take priority   rvalue_reference template argument 
overloading rely complicated set rule  occasionally programmer will surprised function call 
alternative overload 
need similar operation perform object type 
overload  deﬁne function name  function 
compare overloaded print  hav remember name remember correctly 
tedious  defeat attempt generic_programming  generally encourage programmer focus low level type issue 
overloading  standard conversion apply argument function 
lead error 
previous example  imply only call doubtful semantic catch compiler 
call rely error prone narrowing  
overload increase chance unsuitable argument will reject compiler 
reason keep resolution individual operator  function_call context independent 
return_type take account  long possible look call sqrt isolation determine function call 
default  mean function single scope  function_declare non namespace scope overload 
example  section overloading scope 
clearly  match  only scope 
case  local declaration add subtract desire behavior 
intentional hiding useful technique  unintentional hiding source surprise 
base_class derived_class scope overload base_class function derived_class function happen default 
overload across class scope namespace scope want  usingdeclaration using directive 
argument dependent lookup lead overload across namespace 
function match argument equal match argument call 
function exist  call reject ambiguous 
call ambiguous match ﬁrst argument  double match second argument  int 
problem solve add version resolve ambiguity 
example  add inline void  resolve ambiguity similar favor large type long int 
add explicit type_conversion resolve speciﬁc call 
example   simply ugly stopgap 
soon similar call will deal
novice irritated ambiguity error report compiler 
experienced programmer appreciate error_message useful indicator design error 
expectation express argument type  depend actual value pass relationship section postcondition argument value 
compiler linker ensure argument right type  programmer decide bad  argument value 
call logical criterion suppose hold function call precondition  logical criterion suppose hold function_return postcondition 
example  calculate area rectangle precondition  len wid positive postcondition  return_value positive postcondition  return_value area rectange side len wid return  here  statement postcondition long function_body 
excessive  useful implementer  user area  tester 
example  learn valid argument 
note pass couple huge value violate precondition  overﬂow postcondition meet 
yes  caller
error handle 
possible answer question 
easy caller mistake establish precondition 
difﬁcult implementer cheaply  efﬁciently  completely check precondition 
like rely caller precondition right  need way test correctness 
now  just note postcondition easy check  len positive positive 
semantic nature hard test directly 
example  test  return_value area rectangle side len wid  
semantic constraint know meaning area rectangle   just try multiply len wid precision preclude overﬂow costly 
write postcondition area uncover subtle problem simple function 
write postcondition great design tool documentation 
mechanism document enforcing condition discuss 
function depend only argument  precondition argument only 
howev er  hav careful function depend non local value  member_function depend state object 
essence  nonlocal value read implicit argument function 
similarly  postcondition function side effect simply state value correctly compute  function write nonlocal object  effect document 
postconditon unchecked precondition programming error 
pointer function just pointer object 
variety reason machine architecture system design pointer function allow code modiﬁed 
only function  call take address 
pointer obtain take address function call function 
example  void 
rule argument pass call directly function call function pointer 
convert pointer function pointer function type  cast result pointer back original type strange happen  
macros variadic 
example     ellipsis mean represent argument actually pass string  output error  conditional compilation macro impossible avoid 
directive ifdef identifier identifi deﬁne  directive cause input ignore endif directive see 
example  ifdef  int endif  macro call deﬁne  produce  int  example confuse tool assume sane behavior programmer 
name macro control ifdef choose carefully clash ordinary identiﬁer 
innocent look source text will cause confusion write  deﬁne unfortunately  common unavoidable header contain dangerous unnecessary macro 
value program  previous standard low value 
addition  macro conditionally deﬁne implementation  
example         addition  implementation allow user deﬁne arbitrary macro command form compile time environment 
example  ndebug deﬁne compilation implementation speciﬁc  debug mode  assert macro 
useful  imply sure meaning program just read source text 
obviously  standard specify facility standard syntax token preﬁxe preprocessor directive pragma 
example  pragma foo bar foobar possible  pragma avoid 
error handling exception  traditional error handling  muddle alternative view exception  exception  hierarchical error handling  exception efﬁciency 
resource management finally 
throw catch exception throw exception  catch exception  exception thread 
vector implementation simple vector  represent memory explicitly  assignment  change size 
advice error handle present error handle exception 
effective error handling  language mechanism base strategy 
present exceptionsafety guarantee central recovery run time error resource_acquisition_is_initialization raii technique resource management constructor destructor 
exception safety guarantee raii depend speciﬁcation invariant  mechanism enforcement assertion present 
language facility technique present here address problem handling error software  handling asynchronous event topic 
part program separately develop 
refer part program invoke perform task  library just ordinary code  context discussion error handle worth remember library designer know kind program library will part 
author library detect run time error general idea
user library know cope run time error easily detect handle user code leave library ﬁnd 
discussion exception focus problem need handle long run system  system stringent reliability requirement  library 
kind program requirement  amount care effort expend reﬂect
example  apply technique recommend here page program write just
technique present here simplify code 
function cope problem throw exception  hope direct indirect caller handle problem 
function want handle kind problem catch correspond exception 
call component kind failure willing handle specify exception catch clause try block 
call component complete assign task report failure throw exception throw expression 
simpliﬁed stylized example  
job return correct  prepare handle  kind exception throw 
example  call function subtask  throw assign subtask 
exception failure taskmaster job handle code invoke taskmaster 
call_function just return indication error happen 
program continue work just print error_message terminate  return_function leave program state leak resource 
exception handling mechanism integrate constructor destructor mechanism concurrency mechanism help ensure 
exception handling mechanism  
alternative traditional technique insufﬁcient  inelegant  errorprone 
complete  handle error detect ordinary code 
support regular style error handling  simplify cooperation separately write program fragment exception object throw represent occurrence error 
type copy  strongly recommend only user deﬁne type speciﬁcally deﬁne purpose 
way  minimize chance unrelated library value   represent error  throw recovery code chaos 
exception catch code express interest handle type exception catch clause 
simple way deﬁne exception deﬁne class speciﬁcally kind error throw
tedious  standard_library deﬁne small hierarchy exception class 
exception carry error represent 
type represent kind error  datum hold represent occurrence error 
example  standard library exception contain string value  transmit location throw 
conventional approach problem  general  exception_handle 
terminate program 
pretty drastic approach 
example   error 
example  situation least write decent error_message log error terminate 
library know purpose general strategy program embed simply exit abort 
library unconditionally terminate program afford crash 
return error value 
feasible acceptable  error  example  int  next integer input input function  int possible  integer_value represent input failure 
minimum  modify return pair value 
approach feasible  inconvenient call check error value 
easily double size program 
caller ignore possibility error simply forget test return_value 
approach rarely systematically detect error 
example  printf return negative value output encoding error occur  programmer essentially test
finally  operation simply return_value  constructor obvious example 
return legal value leave program error   problem call_function notice program put error state 
example  standard library function set nonlocal variable errno error  double  here  value meaningless errno set acceptable argument ﬂoating point square root function 
program typically set test errno similar nonlocal state consistently avoid consequential error cause value_return failed call 
nonlocal variable record error condition work presence concurrency 
call error handler function 
example   possibly continue here approach disguise problem error handle function  error handle function completely resolve problem  error handle function turn terminate program  return indication error occur  set error state  throw exception 
error handle function handle problem bother ultimate caller  error 
traditionally  unsystematic combination approach exist program 
traditional response muddle hope
exception_handling program brittle  sense care effort take program run acceptably 
preferable  wrong result later development process development process complete program hand innocent user 
termination unacceptable  catch exception 
exception terminate program only programmer allow terminate 
typically  preferable unconditional termination happen traditional incomplete recovery lead catastrophic error 
termination acceptable response  uncaught exception will achieve turn call terminate 
noexcept speciﬁer desire explicit 
people try alleviate unattractive aspect muddle write error_message  put dialog box ask user help 
approach primarily useful debug situation user programmer familiar structure program 
hand nondeveloper  library ask possibly absent user operator help unacceptable 
library blabber  way 
user inform  exception handler compose suitable message  finnish finnish user xml error log system 
exception way code detect problem recover pass problem part system able recover 
only part system idea context program run chance compose meaningful error_message 
recognize error handling will remain difﬁcult task exception handling mechanism formalized technique replace still unstructured compare language feature involve only local control ﬂow 
exception handling mechanism programmer way handle error naturally handle  give structure system 
exception complexity error handle visible 
exception cause complexity 
careful blame messenger bad news 
exception handling mechanism design support handling error handle locally  exceptional condition  
intend support error handling program compose independently develop component 
give exceptional part program unable perform give task  word  exception  bit misleading 
event happen time program run exceptional 
event plan handle error 
answer exception_handle asynchronous event mechanism design handle only synchronous exception  array range check error 
asynchronous event  keyboard interrupt power failure  necessarily exceptional handle directly mechanism 
asynchronous event require mechanism fundamentally exception deﬁne here handle cleanly efﬁciently 
system offer mechanism  signal  deal asynchrony  tend system dependent  here 
exception throw infrequent compare function_call structure system obscure 
expect large program throw catch least exception course normal successful run 
exception expect catch bad effect behavior program  error 
only programmer think error exception handle mechanism tool handle error 
alternatively  think exception handle mechanism simply control structure  alternative way return value caller 
binary tree search function  
actually charm  avoid likely cause confusion inefﬁciencie 
possible  stick exception_handling error handle  view 
code clearly separate category  ordinary code error handle code 
code comprehensible 
implementation exception mechanism optimize base assumption simple model underlie exception 
error handling inherently difﬁcult 
help preserve clear model error handle treasure 
reluctantly conclude program practical historical reason exception 
time critical component embed system operation guarantee complete speciﬁc maximum time 
absence tool accurately estimate maximum time exception propagate throw catch  alternative error handle method
large old program resource management ad hoc mess  free store unsystematically  manage  naked  pointer  news  delete  rely systematic scheme  resource_handle  string vector   
case  throw back traditional  pre exception technique 
program arise great variety historical context response variety constraint  give general recommendation handle
point popular technique  
mimic raii  give class constructor invalid operation return useful convention represent success 
constructor establish class invariant  ensure resource leak invalid return nonzero 
solve problem error condition constructor 
user systematically test invalid construction object engage suitable error handle case failure 
mimic function return value throw exception  function return pair value  
user systematically test function_call engage suitable error handle case failure 
variation scheme reasonably successful  clumsy compare exception systematic manner 
assumption part program write independently part program handle exception sensible error 
handler effectively program  need strategy 
part program agree exception error deal
exception handling mechanism inherently nonlocal  adherence strategy essential 
imply error handle strategy early phase design 
imply strategy simple relative complexity total program explicit 
complicated consistently adhere area inherently tricky error recovery 
successful fault tolerant system multilevel 
level cope error contort leave rest high level 
exception support view 
terminate support view escape exception handling mechanism corrupt incompletely leave exception uncaught 
similarly  noexcept simple escape error try recover infeasible 
function ﬁrewall 
function test precondition ensure error possibly meet postcondition 
reason will work vary program program programmer programmer 
large program  amount work need ensure notion reliability  great consistently 
separate program distinct subsystem complete successfully deﬁne way essential  feasible  economical 
major library  subsystem  key interface function design way 
system  feasible design function ensure complete successfully welldeﬁned manner 
hav luxury design code system scratch 
impose general error handle strategy part program  take account program fragment implement strategy
address variety way program fragment manage resource state leave system error 
aim program fragment follow general error handle strategy internally follow strategy 
occasionally  convert style error report
example  check possibly throw exception call library conversely  catch exception set return program library  section hierarchical error handle 
case  important systematic ensure conversion error report clear error handle strategy difﬁcult systematic
error handling possible hierarchical 
function detect run time error  ask caller help recovery resource acquisition 
request set cycle system dependency 
turn program hard understand introduce possibility inﬁnite loop error handling recovery code 
addition  throw exception expensive compare call function 
add signiﬁcant memory overhead maintain compatibility call sequence  debugger convention   possible  hard 
remember alternative exception free
unusual ﬁnd traditional system half code devote error handling 
simple function exception_handling  
throw exception  report error way 
comparable code ordinary code handle error exception plain code like  
local buffer simplify code eliminate call free  range check code
complexity tend move just disappear 
people handle error systematically  critical
careful systematic handling error housekeeping leave computer  exception handle mechanism 
noexcept speciﬁer helpful improve generate code 
void noexcept  void string noexcept  now  code generate possibly improve 
traditional function throw exception  function declare noexcept 
standard library implementer know only standard library function atexit qsort throw  take advantage generate code 
declare function  noexcept  take minute possibly throw exception 
example  convert operator  throw  call library throw exception 
discussion efﬁciency meaningless absence measurement 
only recovery meaningful 
call operation exceptionsafe operation leave program valid state operation terminate throw exception 
meaningful useful  precise mean valid  practical design exception  break overly general  exception safe  notion speciﬁc guarantee 
reason object  assume class class invariant  
assume invariant establish constructor maintain function access object  representation object destroy 
valid state mean constructor complete destructor enter 
datum easily view object  reason similarly 
piece nonlocal datum assume speciﬁc relationship  invariant recovery action preserve
example  namespace point 
only state comment  compiler read comment 
implicit invariant hard discover maintain 
throw  function place construct object valid state 
valid state suit caller 
example  string leave empty string container leave unsorted 
complete recovery  error handler produce value desirable application valid exist entry catch clause 
standard_library generally useful conceptual framework design exception safe program component 
library follow guarantee ev ery library operation  
basic guarantee operation  basic invariant object maintain  resource  memory  leak 
basic invariant build standard library type guarantee destroy object assign standard library operation 
strong guarantee key operation  addition basic guarantee  operation succeed  effect 
guarantee key operation   single element insert list  
nothrow guarantee operation  addition basic guarantee  operation guarantee throw exception 
guarantee simple operation  swap container 
violate standard library requirement  destructor exit throw exception  logically equivalent violate fundamental language rule  dereference null pointer 
practical effect equivalent disastrous 
basic guarantee strong guarantee require absence resource_leak 
system afford resource_leak 
operation throw exception only leave operand deﬁne state ensure resource acquire eventually release 
example  point exception throw  memory allocate deallocate object  turn ensure memory properly deallocate 
remember memory only kind resource leak 
acquire part system explicitly implicitly give back resource 
file  lock  network connection  thread example system resource 
function release hand resource handler throw exception 
language rule partial construction destruction ensure exception throw construct subobject member will handle correctly special attention standard library code 
rule essential underpinning technique deal exception 
general  assume function throw exception will throw
imply structure code lose rat  nest complicated control structure brittle data_structure 
analyze code potential error  simple  highly structured   stylize  code ideal  include realistic example code 
proper release  achieve function acquire release return caller 
example  section resource management 
exactly problem occur language support exception_handling 
example  standard library function longjmp cause problem 
ordinary return statement exit close 
ﬁrst attempt fault tolerant look like 
code ﬁle enclose try block catch exception  close ﬁle  rethrow exception 
problem solution verbose  tedious  potentially expensive 
worse still  code signiﬁcantly complex resource acquire release 
fortunately  elegant solution 
general form problem look like 
typically important resource release reverse order acquisition 
exception_handle strongly resemble behavior local object create constructor destroy destructor 
handle resource acquisition release problem object class constructor destructor 
example  deﬁne class act like  class 
case  will destroy end scope destructor will close ﬁle 
throw exception open ﬁle operation ﬁle handle test nullptr 
function now shrink minimum  
destructor will call independently function exit normally exit exception throw 
exception handle mechanism enable remove error handle code algorithm 
result code simple errorprone traditional counterpart 
technique manage resource local object refer resource_acquisition_is_initialization  raii  
general technique rely property constructor destructor interaction exception_handling 
problem approach need remember catch correct  problem resource acquire undisciplined way typically dozen hundred place large program  handler class need write only once 
object construct constructor complete 
only will stack unwind call destructor object 
object compose subobject construct extent subobject construct 
array construct extent element construct only fully construct element destroy unwinding 
constructor try ensure object completely correctly construct 
achieve  write constructor restore possible state system creation 
ideally  design constructor achieve alternative leave object half construct  state 
simply achieve apply raii technique member 
class constructor need acquire resource  ﬁle mutex 
acquisition throw exception 
class constructor complete acquire ﬁle mutex mutex ﬁle  
achieve impose burden complexity programmer 
object class  std    represent acquire resource 
acquisition resource represent initialization local object represent resource  class 
now  local object case  implementation take care bookkeeping 
user hav keep track
example  exception occur construct lck destructor lck will invoke 
imply simple model acquisition resource adhere author constructor need write explicit exception handle code 
common resource memory  string  vector  standard container raii implicitly manage acquisition release 
compare ad hoc memory management possibly delete  work avoid error 
pointer object  local object  need  standardlibrary type  avoid leak 
people inv ente  ﬁnally  language construct write arbitrary code clean exception 
technique generally inferior raii ad hoc  want ad hoc  raii supply
first  deﬁne class will execute arbitrary action destructor 
addition  memory allocate point appropriately delete 
generally idea place guard close deﬁnition guard 
way  glance see resource ad hoc end scope 
connection ﬁnally action resource manip scatter cleanup code block 
basically  ﬁnally block increment part statement forstatement speciﬁes ﬁnal action top block easy see logically belong speciﬁcation point view 
exit scope  programmer try write code potentially place thread control exit scope 
similarly  constructor establish class invariant   object usable 
case  typically throw exception 
program throw exception option  people view deal failure precondition similar condition 
just caller job meet precondition  caller let bad result occur eventually error will eliminate system improve design  debugging  testing 
terminate program  violate precondition design error  program proceed presence error 
hopefully  total system recover failure component program eventually failure eliminate system improve design  debugging  testing 
choose alternative 
ﬁrst approach need performance  systematically check precondition lead repeat test logically unnecessary condition example  caller correctly validate datum  million test thousand call_function logically redundant 
cost performance signiﬁcant 
worthwhile suffer repeat crash test gain performance 
obviously  assume eventually critical precondition violation system 
system  typically system completely control single organization  realistic aim 
second approach tend system complete timely recovery precondition failure infeasible 
sure recovery complete impose unacceptable complexity system design implementation 
hand  exception_handle termination program acceptable 
example  unreasonable program termination acceptable easy rerun program input parameter repeat failure unlikely 
distribute system like long program terminate only part complete system  small program write consumption 
realistically  system mix exception alternative approach 
share common view precondition deﬁne obey  differ enforcement recovery feasible 
program structure radically depend localize recovery aim 
system  exception throw real expectation recovery 
example  throw exception ensure error log produce decent error_message terminate initialize process  
variety technique express check desire condition invariant 
want neutral logical reason check  typically word assertion  abbreviate assert 
assertion simply logical expression assume true 
howev er  assertion comment  need way express happen false 
look variety system  see variety need come express assertion  
need choose compile time assert evaluate compiler run time assert evaluate run time 
run time assert need choice throw  terminate  ignore 
code generate logical condition true 
example  runtime assert evaluate logical condition true 
logical condition like debug ﬂag  level checking  mask select assert enforce 
assert verbose complicated write common 
system need support alternative 
standard offer simple mechanism  
cassert  standard_library macro  check assertion  run time only macro ndebug  debug  deﬁne 
assertion compiler write error_message contain assertion  source ﬁle name  source ﬁle line number terminate program 
language  message  unconditionally check assertion  compile time 
assertion compiler write message compilation
assert insufﬁcient  ordinary code checking 
evaluate condition expect true call
check precondition
like recognizable mechanism check assertion 
follow here possibly slightly overelaborate mechanism express variety assertion variety response failure 
first  deﬁne mechanism decide test decide assertion 
idea test assertion level  low equal
assertion choose alternative 
constant idea generate code assertion decision
imagine set build environment program  possibly compiler option 
choose name assert   mean  evaluate run time  contrast meaning  evaluate compile time   
implementation trickery minimize amount code generate 
alternatively  testing run time ﬂexibility need 
assert part standard present primarily illustration problem implementation technique 
suspect demand assertion mechanism vary single
assert   like 
file line macro expand point appearance source_code 
hide user view place inside implementation assert belong 
default exception  need mention explicitly 
similarly  willing default assertion level  need mention level explicitly  section enforcing invariant 
possible control testing response test build option  control conditional compilation option program code 
way  debug version system test extensively enter debugger production version testing 
personally favor leave least test ﬁnal shipping version program 
example  assert obvious convention assertion mark level zero will check 
nev er ﬁnd last bug large program continuous development maintenance 
ev en work perfectly  sanity check  leave deal hardware failure wise 
only builder ﬁnal complete system decide failure acceptable
writer library reusable component luxury terminate unconditionally 
interpret mean general library code  report error preferably throw exception essential 
usual  destructor throw  throw assert destructor 
temporary copy time catch  exception pass back call_function call_function suitable handler find 
type exception select handler catch clause try block 
datum exception object typically produce error_message help recovery 
process pass exception  stack  point throw handler call stack unwinding 
scope exit  destructor invoke fully construct object properly destroy 
throw  string construct destroy reverse order construction       excess      thread control reach  byron   unaffected 
exception contain word common 
semantic exception propagation initialization  object type move semantic  string expensive throw 
common exception carry name type sufﬁcient report error 
declare function noexcept 
example  double noexcept  throw exception exception_handle now exception will come compute 
declare function noexcept valuable programmer reason program compiler optimize program 
programmer need worry try clause deal failure noexcept function optimizer need worry control path exception_handling 
noexcept completely check compiler linker 
happen programmer  lie  noexcept function deliberately accidentally throw exception catch leave noexcept function 
constructor acquire memory double throw 
case  program terminate 
invoke destructor call_function 
implementation deﬁne destructor scope throw noexcept  compute invoke 
program just terminate  depend object anyway 
add noexcept speciﬁer  code write cope throw 
example  template typename void  mean throw predicate true throw false 
want write copy argument 
know copy pod throw  type  string
predicate noexcept speciﬁcation constant expression 
plain noexcept mean 
standard_library type predicate useful express condition function throw exception 
predicate want easily express type predicate only 
example  critical operation throw function_call 
noexcept operator take expression argument return true compiler  know  throw false
example  template typename 
operand noexcept evaluate  example run time error pass empty 
operator heroic length determine expr throw  simply look operation expr noexcept speciﬁcation evaluate true  return true 
look inside deﬁnition operation expr 
conditional noexcept speciﬁcation noexcept operator common important standard library operation apply container 
example template class siz void    exception speciﬁcation old code  ﬁnd exception speciﬁcation 
example  void  bad  only throw bad bad exception void throw  throw empty exception speciﬁcation throw deﬁne equivalent noexcept 
exception throw  program terminate 
meaning nonempty exception speciﬁcation   bad  function here throw exception mention list publicly derive exception mention unexpected handler call 
default effect unexpected exception terminate program 
nonempty throw speciﬁcation hard imply potentially expensive run time check determine right exception throw 
feature success deprecate 
want dynamically check exception throw  try block 
handler invoke  type unambiguous public base pointer type hold type refer reference hold type refer addition  add const type catch exception way exception_handle add function_parameter 
change set exception catch  only restrict modify exception catch 
principle  exception copy throw 
implementation apply wide variety strategy store transmit exception 
guarantee  sufﬁcient memory allow throw standard memory exception  
note possibility catch exception reference 
exception type deﬁne part class hierarchy reﬂect relationship kind error represent 
example  see 
technique organize exception class hierarchy common programmer prefer catch exception reference 
try part catch clause try block real scope 
name part try block name declare
catch clause   explain 
case  handler typically locally throw exception
error handle
case need handle error single place  recovery action distribute sev eral handler 
example  section rethrow 
rethrow throw operand 
rethrow occur catch clause function_call catch clause 
rethrow attempt exception rethrow  will call 
compiler detect warn case 
exception rethrown original exception catch just part accessible exception 
example  out_of_range throw  catch plain exception  throw  still rethrow out_of_range 
write throw err  simple throw   exception slice caller catch out_of_range 
catch standard library exception 
standard library exception just set exception type 
catch exception catch 
unwisely throw int exception application speciﬁc hierarchy  catch handler 
need deal kind exception 
example  suppose leave pointer state find write code handler exception_handle give acceptable value 
function  ellipsis   argument   
derive exception catch handler exception type  order handler write trystatement signiﬁcant 
handler try order 
here  exception
remove catch handler  derive exception 
match exception type catchclause fast run time operation general compile time overload resolution 
function  gain function try block bit notational convenience 
try block allow deal exception throw base member initializer constructor 
default  exception throw base member initializer  exception pass inv oke constructor member class 
constructor catch exception enclose complete function_body include member initializer list try block 
similarly  catch exception throw member destructor destructor destructor throw 
repair  object return normally exception happen  exception member constructor mean member valid state 
member object will construct destructor invoke part stack unwinding 
catch clause function try block constructor destructor throw exception 
default action rethrow original exception fall end  catch clause 
restriction try block ordinary function 
guide principle 
implementation catch will terminate program 
manage exception active time thread   system idea exception try handle  try handle 
note handle entry catch clause 
rethrowe throw catch clause original handle 
destructor stack unwinding long catch leave destructor 
suitable handler find thrown 
noexcept function try exit
destructor invoke stack unwinding try exit
code invoke propagate  copy_constructor try exit
try rethrow current handle 
destructor statically allocate thread local object try exit
initializer statically allocate thread local object try exit
function invoke atexit function try exit case  function call 
addition  user call terminate drastic approach infeasible 
try exit  mean throw catch run time system try propagate function caller 
default  terminate will call abort 
default correct choice user especially debug 
acceptable  user terminate handler function call  section termination  
example  terminate handler abort process maybe initialize system 
intent terminate drastic measure apply error recovery strategy implement mechanism time level fault tolerance strategy 
terminate handler enter  essentially assume program data_structure  assume corrupt 
write error_message cerr assume hazardous 
note dangerous write  
return will leave place mean
mess terminate  least raii 
terminate handler return caller 
try terminate will call abort 
note abort abnormal exit program 
function exit exit program return_value surround system exit normal abnormal 
implementation deﬁne destructor invoke program terminate uncaught 
system  essential destructor call program resume debugger 
system  architecturally close impossible invoke destructor search handler 
want ensure cleanup uncaught happen  add catch handler addition handler exception care
will catch throw construction destruction namespace thread local_variable 
way catch exception throw initialization destruction namespace thread local_variable 
reason avoid global_variable possible 
catch  exact point throw generally know 
represent loss compare debugger know state program 
development environment  program  people  preferable catch exception program design recover 
see assert example encode location thrown 
want error thread whole program  catch error like recover report part program interested result thread 
catch construct come handy
basic technique handle exception user code 
obviously  vector implementation rely language facility support implementation class 
comfortable class template  prefer delay study example read   
understanding exception require extensive example code fragment
tr block 
support resource_acquisition_is_initialization  technique 
general principle follow
nev er let piece replacement ready
leave object valid state throw rethrowe exception 
way  back error situation 
practical difﬁculty follow principle innocent look operation   sor throw exception 
know look application take experience 
write library  ideal aim strong exception safety guarantee basic guarantee 
write speciﬁc program  exception safety 
example  write simple data analysis program willing program terminate unlikely event memory exhaustion 
correctness basic exception safety closely
technique basic exception safety  deﬁne check invariant  similar technique useful program small correct 
follow overhead basic exception safety guarantee strong guarantee minimal insigniﬁcant 
default allocator delete acquire release memory 
here declaration vector simpliﬁed present only need discuss exception safety avoidance resource_leak  template class class allocator class vector private  elem  star allocation space  end element sequence  star space allocate possible expansion last  end allocate space alloc  allocator exception_handle public  unsigned int  
copy allocator 
imagine throw  standard speciﬁcally require 
anyway  hav write code matter
case throw  object create  destructor call 
allocate throw will exit resource acquire 
copy_constructor acquire memory free avoid memory leak 
worse still  copy_constructor throw exception correctly construct element construct
object resource leak 
note declaration try block  able access try part catch clause 
overhead here overhead try block 
implementation  overhead negligible compare cost allocate_memory initialize element 
implementation enter try block incur cost  worthwhile add test try explicitly handle common empty case 
part constructor repeat implementation template class  class 
curious construct take care iterator pointer 
case  need take address element obtain dereference pointer 
explicitly exception_handle invoke constructor  user deﬁne 
call constructor simply syntactic sugar placement 
similarly  call simply hide explicit destruction like 
code operate low lev el write truly general code difﬁcult 
fortunately  hav invent implement  standard_library 
essential initialization operation complete successfully  initialize element  leave construct element
conse  offer strong guarantee 
algorithm protect exception throw element destructor iterator operation 
prohibitively expensive impossible 
algorithm apply kind sequence 
take forward iterator guarantee destroy element reverse order construction 
 simplify constructor  
signiﬁcant improvement ﬁrst version constructor  next section demonstrate simplify
constructor rethrow catch exception 
intent transparent exception user determine exact cause problem 
standard library container layer software 
contrast major part system  module  generally need take responsibility exception throw 
implementer module able list exception module throw 
achieve involve grouping exception hierarchy 
unnecessarily difﬁcult alternative  section represent memory explicitly  resource_acquisition_is_initialization  technique reduce amount code write code stylize 
case  key resource require memory hold element 
auxiliary class represent notion memory simplify code decrease chance accidentally forget release template class  class allocator struct memor str ucture alloc  allocator  star allocation  element sequence  star allocate possible expansion 
long correct  destroy 
class deal memory type  object type 
user construct object explicitly allocate later destroy construct object destroy 
design exclusively part implementation
hard predict class_will sure copy move properly transfer ownership memory allocate element  template class  class 
object type destroy  deal memory leave object type
give  deﬁne like template class  class allocator 
destructor explicitly invoke destructor element 
imply element destructor throw exception  destruction
disaster happen stack unwinding cause exception terminate call 
case normal destruction  throw exception destructor typically lead resource_leak unpredictable behavior code rely reasonable behavior object 
way protect exception throw destructor  library guarantee element destructor throw 
algorithm cousin equivalent guarantee partially construct sequence 
move operation simple  
just include header cause slurry error_message  line  te xt  open deﬁne twice way compiler disambiguate 
try library give error_message 
technique deal name clash 
example  problem address place facility library inside class  supposedly uncommon name  te te xt  systematically preﬁx name library  
technique know workaround  hack  work case  general inconvenient
example  name tend long  name inhibit generic_programming 
member namespace scope refer special notation  access namespace require explicit notation 
avoid name clash separate set declaration  library interface namespace 
example  call graph library  
long manage pick distinct namespace name  te  now compile set declaration name clash 
namespace express logical structure  declaration namespace facility unite eye user reﬂect common set design decision 
see logical unit  example   graphic library  text manipulation library   similar way member class 
entity declare namespace refer member namespace 
namespace name scope 
access member deﬁne early namespace later declaration  special effort refer member namespace 
here  word line declaration te refer te te 
local name lookup affect global line 
conversely  glyph lookup affect te glyph line 
refer member namespace  fully qualiﬁed name 
example  want glyph deﬁnition te  write  te ln  int  way refer member namespace declaration  directive  argument dependent lookup 
member namespace introduce notation  namespace 
declare namespace namespace deﬁnition qualiﬁer syntax 
idea catch error misspelling type mismatch  reasonably easy ﬁnd name namespace declaration 
example  section explicit qualiﬁcation 
namespace scope 
usual scope rule hold namespace 
 namespace  fundamental simple concept 
large program useful namespace express logical separation part 
global scope namespace explicitly refer  
class namespace 
ideally  entity program belong recognizable logical unit  module  
declaration nontrivial program ideally namespace name logical role program 
exception  global order compiler recognize special  
depend decide access code namespace 
access name namespace exactly introduce namespace 
name namespace  choose explicit qualiﬁcation  declaration  directive 
test case namespace implementation namespace driver 
explicit qualiﬁcation  
parser   redundant namespace parser 
using directive  namespace lexer  
recommend intricate header ﬁle
example repeatedly violate rule include nonlocal scope syntactic construct span ﬁle boundary inline  see 
sadly  hav see bad 
case  achieve versione intrusive mean 
only example think completely impossible mean specialization template explicitly name  
important case  case 
solution base combination technique obviously completely right 
example nest namespace standard_library  see chrono 
aim preserve locality code present interface user 
unnamed namespace translation unit
desire  way name member unnamed namespace translation unit 
break program idea 
standard_library special case idea
language rule namespace design easy take program write namespace turn explicitly structure namespace 
calculator program example
way standard facility namespace place declaration header namespace std  
nonlocal using directive primarily transition tool 
essential foundation library  iso standard_library std 
code refer name namespace express clearly explicit qualiﬁcation using declaration 
relationship namespace linkage 
linkage file local name  header_file  deﬁnition rule  standard library header  linkage non code  linkage pointer function 
header_file single header organization  multiple header organization  include guard 
program initialization nonlocal variable  initialization concurrency  program termination 
advice separate compilation realistic program consist logically separate component  namespace  ﬁle ﬁle contain logical component 
task devise physical structure set ﬁle program represent logical component consistent  comprehensible  ﬂexible manner 
aim clean separation interface  function_declaration implementation  function deﬁnition 
ﬁle traditional unit storage ﬁle system traditional unit compilation 
system store  compile  present program programmer set ﬁle 
discussion here will concentrate system employ traditional ﬁle 
complete program ﬁle impossible 
code standard_library operating_system typically supply source form part source_file program user program 
realistically sized application  user code single ﬁle impractical inconvenient 
way program organize ﬁle help emphasize logical structure  help human reader understand program  help compiler enforce logical structure 
unit compilation ﬁle  ﬁle recompile change small depend 
moderately sized program  amount time spend recompile signiﬁcantly reduce partition program ﬁle suitable size 
user present source ﬁle compiler 
ﬁle preprocesse  macro processing directive bring header  
result preprocessing call translation unit 
unit compiler proper work language rule
book  differentiate source ﬁle translation unit only distinguish programmer see compiler
enable separate compilation  programmer supply declaration type need analyze translation unit isolation rest program 
declaration program consist separately compile part consistent exactly way declaration program consist single source ﬁle
system tool help ensure
linker detect kind inconsistency 
linker program bind separately compile part 
linker confusingly call loader 
linking completely program start run 
alternatively  add running program  dynamically link  later 
organization program source ﬁle commonly call physical structure program 
physical separation program separate ﬁle guide logical structure program 
dependency guide composition program namespace guide composition source ﬁle 
logical physical structure program need identical 
example  helpful source ﬁle store function single namespace  store collection namespace deﬁnition single ﬁle  scatter deﬁnition namespace sev eral ﬁle 
here  will ﬁrst technicality link discuss way break desk calculator  ﬁle 
programmer task ensure namespace  class  function   properly declare translation unit declaration refer entity consistent 
example  ﬁle   int  int section linkage 
keyword extern declaration just declaration deﬁnition 
initialize  extern simply ignore declaration initializer deﬁnition 
object deﬁne exactly once program 
declare time  type agree exactly 
replace line content ﬁle 
content source text compiler_will proceed read
standard library header  angle bracket   name quote 
modern implementation form implicit explicit precompiling header ﬁle minimize work need handle repeat compilation header 
rule thumb  header contain  name namespace namespace 
simply reasonable way mechanism express physical structure program 
conversely  header contain  ordinary function deﬁnition char return  data deﬁnition int  
header ﬁle conventionally sufﬁxe  ﬁle contain function data deﬁnition sufﬁxe 
refer ﬁle  ﬁle  
convention       hpp find 
manual compiler_will speciﬁc issue 
reason recommend deﬁnition simple constant  deﬁnition aggregate  place header ﬁle hard implementation avoid replication aggregate present translation unit 
simple case common important generate code 
wise clever 
place include code minimize unintended dependency 
avoid macro magic 
minimize name especially alias local header header 
least favorite activity track error cause name macro substitute completely macro deﬁne indirectly include header hav hear
practical point view  mean exactly deﬁnition class reside single ﬁle
unfortunately  language rule simple 
example  deﬁnition class compose macro expansion  definition class textually include source ﬁle directive 
rule standard unique deﬁnition class    phrase complicated subtle manner 
rule commonly refer deﬁnition rule  odr  
deﬁnition class   inline function accept example unique deﬁnition only translation unit  token token identical  meaning token translation unit 
odr example valid refer class source ﬁle 
unwise write deﬁnition twice like
maintain will naturally assume deﬁnition only deﬁnition feel free change
introduce hard detect error 
intent odr allow inclusion class deﬁnition translation unit common source ﬁle 
here deﬁnition token token identical  example error meaning name sneakily differ ﬁle 
check inconsistent class deﬁnition separate translation unit ability implementation 
declaration violate odr source subtle error 
unfortunately  technique place share deﬁnition header include protect last form odr violation 
local type alias macro change meaning include declaration   
defense kind hackery header self contain possible 
example  class point declare header  error detect 
template deﬁnition include sev eral translation unit long odr adhere
apply function template deﬁnition class_template contain member_function deﬁnition 
sufﬁx need standard library header  know header include syntax  
absence sufﬁx imply header store 
header map store text ﬁle call standard directory 
hand  standard header require store conventional manner 
implementation allow take advantage knowledge standard library deﬁnition optimize standard library implementation way standard header handle 
example  implementation knowledge standard math library build treat include cmath switch standard math function actually read ﬁle 
standard library header  correspond standard header cx 
example  include cstdio include
typical will look like ifdef cplusplus namespace std extern  endif 
macro cplusplus deﬁne compiler distinguish code code intend compiler 
similarly  common code fragment part program write mainly language  python matlab 
cooperation difﬁcult program fragment write language fragment write language compile compiler 
example  language implementation language differ machine register hold argument  layout argument put stack  layout build type string integer  form name pass compiler linker  amount type checking require linker 
help  specify linkage convention extern declaration 
example  declare standard library function strcpy speciﬁes link accord system speciﬁc linkage convention  section linkage non code extern   const  effect declaration differ effect plain  declaration extern  const  only linkage convention call strcpy 
extern  directive useful close relationship 
note extern  name linkage convention language 
extern  link fortran assembler routine happen conform convention implementation 
extern  directive speciﬁes linkage convention only affect semantic call function 
function_declare extern  still obey type checking argument conversion rule weak rule 
technique commonly produce header header 
alternatively  conditional compilation create common header  ifdef cplusplus extern  
declaration linkage block  
look odd ﬁrst glance 
simple consequence keep meaning unchanged add  extern declaration meaning ﬁle unchanged enclose linkage block 
name linkage declare namespace 
namespace will affect way name access program  way linker see
printf std typical example  
call  still old printf 
note allow library linkage namespace choice pollute global namespace 
unfortunately  ﬂexibility header deﬁne function linkage global namespace 
reason linkage entity take namespace account object ﬁle generate will reﬂect lack namespace 
implementation language share linkage convention function_call mechanism  passing pointer function trivial 
commonality general assume  care take ensure function call way expect call 
linkage speciﬁe declaration  speciﬁed linkage apply function type  function_name  variable_name introduce 
kind strange occasionally essential combination linkage possible 
example  section linkage pointer function 
implementation calling convention accept declaration mark error language extension 
compatible implementation  lambda form capture cross language barrier 
initial organization simple program elaborate turn need  reorganize later 
calculator program  ﬁve ﬁle   table   hold function datum deﬁnition 
header hold declaration name ﬁle  source_file program 
keyword extern variable declaration ensure multiple deﬁnition occur ﬁle 
correspond deﬁnition find ﬁle 
add standard library header need declaration  add declaration declaration need only convenience individual ﬁle 
leave actual code  will look like 
distinction user interface interface implementer clear namespace 
user interface header include giv compiler chance check consistency 
function implement parser store directive header parser function need  
large system  worthwhile separate driver minimize 
way call driver function place separate source ﬁle 
important code intend library 
rely code prepare driver call variety function 
factor way ﬁle handle system 
example  editor ide convenient look ﬁle simultaneously  header attractive 
partition declaration large program logically minimal size header put structure declaration ﬁle   easily unmanageable mess hundred ﬁle minor project 
ﬁnd excessive 
large project  multiple header unavoidable 
project  hundred ﬁle count standard header norm 
real confusion start begin count thousand 
scale  basic technique discuss here still apply  management herculean task 
tool  dependency analyser  great help  little compiler linker performance program unstructured mess 
remember realistically sized program  single header style option 
program_will multiple header 
choice style organization occur repeatedly part program 
single header style multiple header style alternative 
complementary technique signiﬁcant module design reconsider system evolve 
crucial remember interface serve equally
worthwhile distinguish implementer  interface user  interface 
addition  large system structure simple interface majority user extensive interface expert user idea 
expert user  interface  complete interface  tend feature average user want know
average user  interface identiﬁe eliminate feature require inclusion header deﬁne facility unknown average user 
term  average user  derogatory 
ﬁeld expert  strongly prefer average user 
way  minimize hassle 
view program whole  declaration need logical module complete redundant 
large program  redundancy lead error  header contain class deﬁnition inline function include twice compilation unit 
hav choice 
reorganize program remove redundancy  ﬁnd way allow repeat inclusion header 
ﬁrst approach lead ﬁnal version calculator tedious impractical realistically sized program 
need redundancy individual part program comprehensible isolation 
beneﬁts analysis redundant include result simpliﬁcation program signiﬁcant logical point view reduce compile time 
rarely complete  method allow redundant include apply 
preferably  apply systematically  way know analysis user will ﬁnd worthwhile 
example   ifndef 
ﬁrst time see compilation  content read give value 
compiler present compilation  content ignore 
piece macro hackery  work pervasive world 
standard header guard 
header ﬁle include essentially arbitrary context  namespace protection macro name clash 
choose long ugly name guard 
once people header guard  tend header directly indirectly 
implementation optimize processing header  undesirable 
cause unnecessarily long compile time  bring declaration macro scope 
affect meaning program unpredictable adverse way 
header include only
function  object  type   collection unique deﬁnition  
program contain exactly function_call 
computation perform program start invocation global function end return 
return_type int  follow version support implementation  int 
addition  implementation allow version 
argc  argv version transmit argument program environment  see 
int return pass system invoke result program 
nonzero return_value error 
simple story elaborate program contain global_variable throw uncaught exception 
nonlocal variable translation unit initialize deﬁnition order 
variable explicit initializer  default initialize default type 
default initializer value build type enumeration 
here  initialize call 
guarantee order initialization global_variable translation unit 
unwise create order dependency initializer global_variable compilation unit 
addition  possible catch exception throw initializer global_variable 
generally minimize global_variable limit global_variable require complicated initialization 
technique exist enforce order initialization global_variable translation unit 
portable efﬁcient 
dynamically link library coexist happily global_variable complicate dependency 
function_return reference alternative global_variable 
like static  technique thread safe 
initialization local static thread safe 
case  initialization constant expression  link time subject datum race 
lead data race 
initialization nonlocal statically allocate variable control mechanism implementation start program 
mechanism guarantee work properly only execute 
avoid nonlocal variable require run time initialization code intend execution fragment non program 
note variable_initialize constant expression depend value object translation unit require run time initialization 
variable safe case 
obvious answer 
initialization statically allocate object constant expression link time  
howev er  initializer constant expression sqrt constexpr  initialize run time 
order initialization statically allocate object single translation unit deﬁned  initialize deﬁnition order 
ﬂaw argument multiple thread   will run time initialization 
mutual exclusion implicitly prevent data race 
thread happen thread manage increment 
avoid problem  usual 
minimize statically allocate object keep initialization simple possible 
avoid dependency dynamically initialize object translation unit 
addition  avoid datum race initialization  try technique order  initialize constant expression note build type initializer initialize zero standard container string initialize empty linktime initialization 
program terminate standard library function exit  destructor construct static object call  
program terminate standard library function abort 
note imply exit terminate program
call exit destructor cause inﬁnite recursion 
type exit void  source_file program like return_value  exit argument return system  value program 
zero successful completion 
call exit mean local_variable call_function caller will destructor invoke 
throw exception catch ensure local object properly destroy 
call exit terminate program give caller function call exit chance deal problem 
leave context throw exception let handler decide next 
example  catch exception 
standard library function atexit offer possibility code execute
strongly resemble automatic invocation destructor global_variable program termination  
argument atexit take argument return result  implementation deﬁne limit number atexit function 
nonzero value_return atexit limit reach 
limitation atexit useful ﬁrst glance 
basically  atexit workaround lack destructor 
destructor construct statically allocate object create call will invoke invoke 
destructor object create call will invoke invoke 
function like exit invoke destructor 
register function invoke 
exit  abort   atexit  function declare cstdlib 
technique commonly call object orient programming generic_programming present 
class construction  cleanup  copy  move operator overload special operator derived_class class hierarchy run time type template generic_programming specialization instantiation template hierarchy metaprogramme matrix design abstraction mechanism part iii  
reformer enemy who proﬁt old  only lukew arm defender class abstract   real int ﬂoat 
class basic member_function  default copying  access control  class struct  constructor  explicit constructor  class  class deﬁnition  mutability  self reference  member access  static member  member type 
concrete class_member function  helper function  overloaded operator  signiﬁcance concrete_class 
advice introduction class tool create conveniently 
addition  derived_class  template  allow programmer express hierachical parametric relationship class take advantage relationship 
concrete representation concept idea  notion  
example  ﬂoat operation +     concrete approximation mathematical concept real number 
class user deﬁne 
design deﬁnition concept direct counterpart 
example  program deal telephony  explosion video game  list paragraph text process program 
program closely match concept application tend easy understand  easy reason easy modify program
choose set user deﬁne class program concise 
addition  sort code analysis feasible 
enable compiler detect illegal object find only exhaustive testing 
fundamental idea deﬁne separate incidental detail implementation  layout datum store object property essential correct  complete list function access datum 
separation express channel data_structure internal housekeeping routine speciﬁc interface 
focus simple  concrete  user deﬁne logically differ build class introduce basic facility deﬁne class member 
follow great detail present abstract_class class hierarchy  construction  cleanup  copy  move present variety way control initialization object class  copy move object  cleanup action  perform object destroy  scope 
operator overloading explain deﬁne unary binary operator   user deﬁne
special operator deﬁne operator    special  commonly way differ arithmetic logical_operator 
show deﬁne string class 
derived_class introduce basic language feature support object orient programming 
base derived_class  virtual_function  access control cover 
class focus base derived_class effectively organize code notion class hierarchy 
devoted discussion programming technique  technical aspect multiple inheritance class base_class cover 
run time type technique explicitly navigate class hierarchy 
conversion operation present  operation determine object give base_class typeid 
class user deﬁne 
class consist set member 
common kind member datum_member member_function 
member function deﬁne meaning initialization creation  copy  move  cleanup destruction 
member access
operator     deﬁne class 
class namespace contain member 
public member class interface private member implementation detail 
struct class member default public 
example  class private  representation implementation private 
style tutorial  gradual development idea  detail postpone later 
connection establish declare function member  class 
example   init invoke today  mm assign 
hand   init invoke thday  mm assign 
class_member function  know  object invoke 
see notion static member 
class object initialize copy object class 
example  thday  initialization copy thday  initialization copy section default copying default  copy class object copy member 
default behavior want class behavior  
similarly  class object default copy assignment 
default semantic memberwise copy 
right choice class user deﬁne assignment_operator  
restriction express class struct  class 
public label separate class body part 
name ﬁrst  private  part only member_function 
second  public  part constitute public interface object class 
struct simply class member public default  member_function deﬁne exactly
example  error cause take illegal value example  december  cause code member_function 
imply ﬁrst stage debugging localization complete program run 
special case general observation change behavior type effect change member 
change class  need only change member_function take advantage
user code directly depend only public interface need rewrite need recompile 
advantage potential user need examine only deﬁnition member_function order learn class 
subtle  signiﬁcant  advantage focus design interface simply lead code thought time devote debugging expend proper
protection private datum rely restriction class_member name 
circumvent address manipulation explicit type_conversion 
course  cheat 
protect accident deliberate circumvention fraud 
only hardware offer perfect protection malicious general purpose language  hard realistic system 
historical reason  class deﬁnition refer class declaration 
like declaration deﬁnition  class deﬁnition replicate source ﬁle include violate deﬁnition rule 
deﬁnition  struct class member default public  struct 
style depend circumstance taste 
tend struct class think just simple datum  think class proper type invariant   class 
constructor access function useful struct  shorthand guarantor invariant  
default  member class private  class 
requirement declare datum ﬁrst class 
sense place data member last emphasize function public user interface 
example  class 
access speciﬁer time single class declaration 
example  class public  dd  int mm  int yy  
private section 
allow access speciﬁer class useful machine generate code 
state object initialize  programmer forget twice equally disastrous result 
approach allow programmer declare function explicit purpose initialize object 
function construct value give type  call constructor 
constructor recognize name class
example  class class 
case notation   rare 
constructor  variety way initialize object type 
design class  programmer tempt add feature just want
take thought carefully decide feature need include only
extra thought typically lead small comprehensible program 
way section constructor reduce number function default argument 
addition alternatively  association explicit enclose class helper function namespace 
chrono namespace naturally contain class  time stopwatch  helper function 
namespace hold single class overelaboration lead inconvenience 
naturally  helper function deﬁne 
jan dec range  possible sloppy cast  check 
troublesome ﬁnally 
operator deﬁne chrono avoid overload problem beneﬁt argument dependent lookup 
operator see mere convenience 
type complex number  vector  function like object  conventional operator ﬁrmly entrench people mind deﬁnition mandatory 
operator overloading discuss 
follow common idiom 
note assignment copy initialization default  
concrete class just_like build type 
concrete type call value type value orient programming 
model philosophy  design call object orient programming  
intent concrete single  simple efﬁciently 
aim user facility modify behavior concrete 
concrete type intend display run time polymorphic behavior see  
like detail concrete  build desire behavior 
want reuse  concrete  implementation exactly int 
example  class private  
alternatively  derived_class mechanism discuss deﬁne type concrete_class desire difference 
deﬁnition vec vector example
derivation concrete_class care only rarely lack virtual_function run time  
reasonably compiler  concrete_class incur hidden overhead time space 
indirection pointer access object concrete_class  housekeeping  datum store object concrete_class 
size concrete know compile time object allocate run time stack free store operation 
layout object know compile time inline operation trivially achieve 
similarly  layout compatibility language  fortran  come special effort 
set type foundation application 
interface speciﬁc error prone 
example  month  likely misunderstood misuse int  lack concrete type lead obscure program time waste programmer write code directly manipulate  simple frequently data_structure represent section signiﬁcance concrete_class simple aggregate build type 
alternatively  lack suitable  small efﬁcient type  application lead gross run time space inefﬁciencie overly general expensive class
applicable  prefer concrete complicated class plain data_structure  
constructor destructor constructor invariant  destructor resource  base member destructor  call constructor destructor  virtual destructor 
class initialization initialization constructor  initialization constructor  default constructor  initializer list constructor 
member base initialization member initialization  base  delegate constructor  class  static member initialization 
copy move copy  move 
generate default operation explicit default  default operation  default operation  delete function 
advice introduction focus technical aspect object  life cycle   create object  copy move clean away 
proper deﬁnition copy  move  
example  construction  cleanup  copy  move string arg 
next  construct value  prachett  copy 
finally  exit destroy variable 
difference move copy copy object value  move source move require original value 
move source object will
useful implement notion move resource  
function here  
move_constructor move value string arg ident temporary 
move assignment move value string temporary variable hold
destructor release resource   temporary variable hold optimizer eliminate work 
example  simple example temporary variable typically eliminate 
principle  operation execute 
constructor  copy move assignment operation  destructor directly support view lifetime resource management 
object object type constructor complete  remain object type destructor start execute 
interaction object lifetime error explore 
discuss issue half construct half destroy object 
construction object play key role design 
wide variety reﬂecte range ﬂexibility language feature support initialization 
constructor  destructor  copy move operation type logically separate 
deﬁne match set suffer logical performance problem 
class destructor perform nontrivial task  free store deallocation lock release  class likely need full complement function  section introduction 
ﬁve situation object copy move  
source assignment 
object initializer 
function argument 
exception case  copy move_constructor will apply optimize away 
addition initialization name object object free store  constructor initialize temporary object implement explicit type_conversion 
ordinary constructor   special member_function generate compiler  see 
full rule technicality 
full understanding  people just learn general rule example 
complement constructor  deﬁne destructor ensure  cleanup  point destruction object  scope 
effective technique resource management rely constructor destructor pair 
technique rely pair action  undo  start
initialization establish class invariant  hold member_function call class 
class vector public   
example  section constructor invariant 
constructor try establish invariant throw exception 
constructor establish invariant  object create constructor ensure resource leak  
resource need acquire eventually explicitly implicitly give back release once ﬁnishe
example resource memory  lock  ﬁle handle  thread handle 
deﬁne invariant 
simplify documentation class average  effort deﬁne invariant end work 
word  create environment member_function operate 
create environment involve acquire resource ﬁle  lock  memory release  
class need function guarantee invoke object destroy manner similar way constructor guarantee invoke object create 
inevitably  function call destructor 
name destructor follow class_name  example 
meaning complement   destructor class complement constructor 
destructor take argument  class only destructor 
destructor call implicitly automatic variable scope  object free store delete 
only rare circumstance user need call destructor explicitly 
destructor typically clean release resource 
example  class vector 
case   destructor invoke free deallocate memory allocate constructor 
constructor acquire memory 
example  + large amount memory measure byte 
case  exception throw exception handle mech free 
style constructor destructor base resource management call resource_acquisition_is_initialization simply raii  
match constructor destructor pair usual mechanism implement notion variably sized object 
standard library container   variant technique storage element 
type destructor declare  build type  destructor
programmer who declare destructor class decide object class copy move 
constructor build class object  bottom  ﬁrst  constructor invoke base_class constructor  invoke member constructor  ﬁnally  execute body 
destructor  tear object reverse order  ﬁrst  destructor execute body  invoke member destructor  ﬁnally  inv oke base_class destructor 
virtual base construct base destroy basis 
ordering ensure base member initialize destroy 
programmer defeat simple section base member destructor essential rule  only deliberate circumvention involve pass pointer uninitialized variable argument 
violate language rule result disastrous 
constructor execute member base constructor declaration order order initializer constructor order  destructor overhead guarantee destroy reverse order construction 
class default constructor need  class constructor  compiler_will try generate default constructor 
default constructor common 
example  construction  cleanup  copy  move class vector 
default argument constructor take argument default constructor 
example  class string public  
build type default constructor invoke uninitialized non static variable default_value build type integer  ﬂoating point type  nullptr pointer 
reference const initialize  
class_contain member default construct programmer supply class_member initializer deﬁne default constructor initialize 
case  default constructor obviously require class element_type array 
idea clever invent default_value 
example  problem container element default_value solve allocate element proper value  
constructor construct object initializer construction  cleanup  copy  move value 
standard library container  hav constructor  assignment 
element template argument type   implicitly convertible
select constructor  default initializer list take precedence 
default constructor constructor invoke  prefer default constructor 
constructor ordinary constructor  invoke  prefer constructor 
deﬁne constructor empty differ default constructor design error hand 
second rule   prefer constructor   avoid resolution base number element 
case  constructor
want invoke constructor take integer argument  notation    element value 
unfortunately  subscripte 
pass value 
require overload resolution rule impose overhead object just small handle typically word array ts 
loop equivalently write  
element immutable 
think try modify value 
damage fundamental concept 
element immutable  apply move_constructor 
container implement constructor like template class class vector public  
container  imply distinction apply container element  section direct copy initialization 
container constructor explicit
constructor element_type initializer explicit
double  see direct initialization 
example carefully craft give example confusing case 
note apparent ambiguity eye human reader compiler emerge long list 
example  double  ok  element value double  ok  element value construction  cleanup  copy  move 
generally  initialize class_member base_class 
member initializer list start colon  individual member initializer separate comma 
constructor call order member declare class order member initializer list 
avoid confusion  specify initializer member declaration order 
hope compiler warning order right 
member destructor call reverse order construction body class destructor execute 
member constructor need argument  member need mention member initializer list 
constructor equivalent previous version 
case  initialize element 
idea explicit initialize member 
note implicitly initialize  member build type leave uninitialized 
constructor initialize member basis class  member basis member basis 
reference member const member initialize   
type programmer choice initializer assignment 
case  prefer member initializer syntax explicit initialization
efﬁciency advantage initializer syntax compare assignment 
example  construction  cleanup  copy  move 
here name initialize copy
hand  ﬁrst initialize empty string copy assign 
base require initializer  base initializer constructor 
want explicitly specify default construction 
member  order initialization declaration order  recommend specify base initializer order 
basis initialize member destroy member 
solution  common old version offer 
example  section delegate constructor class 
member style initializer class name constructor name call constructor part construction 
constructor call delegate constructor occasionally forwarding constructor 
delegate explicitly initialize member 
example  class 
simply create object temporary
hope compiler warning 
object construct constructor complete 
delegate constructor  object construct delegate constructor complete just complete constructor sufﬁcient 
destructor will construction  cleanup  copy  move call object original constructor complete 
need set member default_value depend constructor argument  member initializer simple 
example  class 
default  constructor will class initializer  example equivalent  class 
class initializer bit typing  real beneﬁts come complicated class multiple constructor 
constructor initializer member 
example  class 
common value explicit  factor unique initializer datum_member  class 
class_member initializer name scope point
value global_variable obtain point constructor object run  example change 
next  initialize call global 
bad idea hide subtle dependency global datum member initializer 
generally  static member declaration act declaration deﬁnition class 
simple special case  possible initialize static member class declaration 
static member const integral enumeration type  constexpr literal type  initializer constant expression 
example  class curious 
example  template class int class fix 
copy conventional meaning effect value equal value assignment 
move leave value move state 
obvious alternative copy complete state object call deep copy 
alternative deep copy shallow copy  move operation  minimize copy add complexity  
shallow copy leave object here  share state  huge potential confusion error 
object entangle requirement independence violate 
possible reason entangled object isolation 
example  obvious source_code assignment
represent entangled object graphically   share state state  state  note entanglement arise variety way 
obvious entanglement happen probem arise 
example  type like incautiously member behave class 
original author aware entanglement prepare cope naively assume copy mean copy complete value surprised  who ﬁnd deeply nest class surprised 
address problem lifetime share subobject introduce form garbage collection 
shallow copy entangled object source demand garbage collection 
entangled object lead code hard manage form garbage collection  
still pointer  object contain isolation 
who update point object 
run multithreaded system  synchronization need access share datum 
entangled object here  result shallow copy source complexity error partially solve garbage collection form 
note immutable share state problem 
compare address  tell equal value happen represent copy 
useful observation copy modiﬁed 
example  object pass value rarely write
observation lead notion copy write 
idea copy actually need independence share state write delay copying share state just ﬁrst write
class image 
depend image  sense implement copy_constructor shallow copy  
protect argument copy_constructor copy representation write  section meaning copy 
apply copy operation  simple rule  lead trap unwary 
variable contain copy part copy 
member copy 
phenomenon call slice 
exactly intend  see copy_constructor pass select base_class  typically subtle bug 
want slicing  major tool prevent construction  cleanup  copy  move prohibit copying base_class  delete copy operation 
initialization error  call naive initialization error 
integer computer memory  just only sense  hardware single instruction 
general logical point view
obvious implementation swap exchange value object  template class 
assignment copy value 
assignment hav copy value original value 
sound like work 
example  void  string  vector string  vector string  
thousand character 
thousand element thousand character 
matrix double 
cost copy data_structure signiﬁcant 
standard library swap carefully design avoid overhead string vector 
effort avoid copy take advantage string vector object just handle element 
similar work avoid performance problem swap matrix 
only operation copy  similar work huge number function data_structure part standard 
fundamental problem want copying just want exchange pair value 
look issue copy completely point view  copy physical absolutely
want borrow phone  pass phone copy 
lend car  giv key section move drive away car  freshly copy car 
once giv en object  long
talk give away    hand   transfer ownership  move  physical object 
object computer resemble physical object copy need only considerable cost integer_value typically copy easy cheap alternative 
example lock  socket  ﬁle handle  thread  long string  large vector 
allow user avoid logical performance problem copying  directly support notion move notion copying 
deﬁne move_constructor move assignment move copy argument 
simple dimensional matrix  template class class 
idea move assignment handle lvalue separately rvalue  copy assignment copy_constructor take lvalue move assignment move_constructor take rvalue 
deﬁne move_constructor simply take representation source replace empty cheap destroy 
example  template class 
move assignment  simply swap 
idea swap implement move assignment source just destroy  just let destructor source cleanup work construction  cleanup  copy  move template class 
move constructor move assignment take non const rvalue reference argument  write argument 
argument move operation leave state destructor cope preferably deal cheaply easily 
resource_handle  move operation tend signiﬁcantly simple efﬁcient copy operation 
move operation typically throw exception  acquire resource complicated operation  need
differ copy operation 
compiler know move operation copy operation 
case  return_value  language rule next action deﬁne destroy element 
general tell give rvalue_reference argument 
example  template class 
move call rval  name move operation year 
standard library container move operation  standardlibrary type  pair   
operation insert standard library container  insert  version take rvalue_reference 
net result standard container algorithm deliver performance able copy 
try swap object type move_constructor 
copy pay price 
general  programmer responsible avoid excessive copying 
compiler job decide excessive
copy move optimization data_structure  move operation explicitly implicitly  see 
build type  int  move operation simply copy 
usual  careful data_structure contain pointer 
assume move pointer set nullptr 
object create delete 
need garbage collector 
pool matrix general
need count representation 
redesign interface addition 
caller remember delete result 
happen newly allocate_memory computation throw exception 
alternative elegant general 
default  class 
programmer take control deﬁne operation  generation operation suppress  
programmer declare constructor class  default constructor generate class 
programmer declare copy operation  move operation  destructor class  copy operation  move operation  destructor generate class 
unfortunately  second rule only incompletely enforce  backward compatibility  copy_constructor copy assignment generate destructor deﬁne 
generation deprecate iso standard  expect modern compiler warn
explicit function generate 
people prefer see complete list operation program text complete list need 
example  write  
assume write write  section explicit default 
only verbose  hard read deﬁnition open opportunity mistake 
example  forget copy member default initialize copy 
user function  compiler long know semantic function optimization inhibited 
default operation  optimization signiﬁcant 
memberwise copy  memberwise default construction 
copy construction copy 
return move  leave empty string unchanged 
note value move object build type unchanged 
simple fast compiler
want member class  write move operation class 
default move state default destructor default copy assignment work correctly 
guarantee require arbitrary operation move object will work correctly 
need strong guarantee  write operation 
link  error obvious think catch compiler 
here  set empty string 
default initialization  build member leave member uninitialize 
hope compiler warning 
want copy move operation maintain destructor free resource involve 
unfortunately  compiler case know programmer invariant 
fetched example  struct invariant  ite index favor ite element elem 
programmer state invariant comment  compiler read comment 
programmer leave hint invariant establish maintain 
constructor assignment declare 
invariant section maintain invariant implicit 
result copy move default operation   
root problem badly design critical hidden  comment completely missing 
rule generation default operation heuristic intend catch common mistake encourage systematic approach construction  copy  move  destruction 
possible establish invariant constructor include possibly resource acquisition 
simple handle  class class handle 
declare destructor  suppress generation copy move operation 
nasty problem 
construction  cleanup  copy  move 
default copy_constructor  copy pointer delete
caveat  generation copy operation only deprecate  ban  ignore warning  example past compiler 
general  class pointer member  default copy move operation suspicious 
pointer member represent ownership  memberwise copy wrong 
pointer member represent ownership memberwise copy default comment likely idea 
want copy construction  deﬁne like  class 
troublesome example rely invariant only partially express constructor destructor rare unheard
magic number  implement copy assignment access argument arg check argument actually element 
explicitly implement copy assignment  copy_constructor 
destructor default need ensure member pos destroy  anyway copy assignment deﬁne 
point  notice user deﬁne copy assignment essentially default  default
add copy_constructor completeness class 
copy default  eliminate nasty dependence magic constant 
operation mention hardwire magic number   safely add move operation simplest way remove default  see perfectly ordinary type  class public  
class  ask  default constructor need default adequate suppress constructor 
just operation isolation 
example  common want prevent copying class basis copying easily lead slice 
enable disable copy move typically conveniently want default  want delete 
delete function declare 
example  eliminate specialization set possible specialization function  class 
note difference delete function simply declare 
case  compiler note programmer try delete function give error 
case  compiler look alternative  invoke destructor global 
operator function binary unary operator  predeﬁne meaning operator  operator userdeﬁned type  pass object  operator namespace 
complex number type member nonmember operator  mix mode arithmetic  conversion  literal  accessor function  helper function 
type conversion conversion operator  explicit conversion operator  ambiguity 
advice introduction technical ﬁeld nontechnical ﬁeld develop conventional shorthand notation convenient presentation discussion involve frequently concept 
example  long acquaintance  clear multiply add result hard overestimate importance concise notation common operation 
like language  support set operator build type 
concept operator conventionally build type  operator overload represent user deﬁne type 
example  need complex arithmetic  matrix algebra  logic signal  character_string  class represent notion 
deﬁne operator class allow programmer conventional convenient notation manipulate object achieve only basic functional notation 
class complex 
deﬁne simple implementation concept complex number 
complex represent pair double precision ﬂoating point number manipulate operator +
programmer deﬁne meaning 
example  type complex  + mean 
usefulness user deﬁne operator restrict numeric type 
example  design general abstract interface lead operator   
allow overload lead subtlety 
name  overload report fundamental operand  sizeof alignof typeid finally  ternary conditional expression overload fundamental reason  addition  user deﬁne literal deﬁne  notation 
kind syntactic subterfuge call   
similarly  deﬁne conversion type 
possible deﬁne token  function_call notation set operator adequate 
example  pow 
restriction draconian  ﬂexible rule easily lead ambiguity 
example  deﬁne mean exponentiation obvious easy task  think
bind left fortran right algol 
expression interpret 
solution technical question 
uncertain apply subtle technical rule will lead readable maintainable code 
doubt  name function 
name function keyword follow example  
function declare call like function 
only shorthand explicit call function 
example  operator overload 
give previous deﬁnition complex  initializer synonymous 
binary  interpret determine interpretation
preﬁx unary  interpret 
deﬁne  overload resolution determine interpretation
postﬁx unary  interpret  int 
deﬁne  overload resolution determine interpretation
declare only syntax deﬁne grammar 
example  user deﬁne unary ternary + 
operator    non static member_function 
special rule hold user deﬁne version   comma  treat exactly like binary 
example  int  mean +  turn mean 
relation hold user deﬁne user deﬁne
example  compiler_will generate deﬁnition  + deﬁnition  +  
predeﬁne meaning eliminate  delete   
rule ensure user change meaning expression expression contain object user deﬁne type 
possible deﬁne function operate exclusively pointer 
ensure extensible mutable exception    class object 
function intend accept build type ﬁrst operand member_function 
example  add complex variable aa integer  suitably declare member_function  interpret  class int deﬁne + mean 
member_function need cope 
compiler know meaning user deﬁne +  assume commutative interpret 
example trivially handle nonmember function  
enumeration user deﬁne type deﬁne
expression check ambiguity 
user deﬁne possible interpretation  expression check accord overload resolution rule 
hav limited choice pass argument function return value 
example  require pointer argument expect programmer address return pointer expect user dereference acceptable 
argument  choice 
pass reference small object  word  call value typically viable alternative give performance 
performance argument pass depend machine architecture  compiler interface convention application binary interface  abis  number time argument access fast access argument pass value pass reference 
example  assume represent pair int  void   + delta  pass value section pass object large object  pass reference 
example  matrix simple matrix double  likely large word  pass reference  matrix + const matrix  const matrix  pass const reference const reference pass large object mean modiﬁed call_function 
typically  return result 
return pointer reference newly create object bad idea  pointer give notational problem  refer object free store pointer reference result memory management problem 
return object value 
large object   deﬁne move operation transfer value efﬁcient  
function simply pass object function  rvalue_reference argument   
simpliﬁed version stre standard_library  
word  behavior pollute global namespace way introduce unnecessary dependency 
namespace std  std look suitable deﬁnition 
way  compiler ﬁnd binary
type type resolve like 
class  look member member base 
declaration find overload resolution rule ﬁnd match 
lookup mechanism apply only least section operator namespace operand user deﬁne type 
user deﬁne conversion  will
note type alias just synonym separate user deﬁne type 
unary resolve analogously 
note lookup preference give member nonmember 
differ lookup name function 
lack hiding ensure build operator inaccessible user supply modify exist class declaration 
standard iostream library deﬁne member_function output build type  user deﬁne output user deﬁne type modify class ostream 
example  expect work  
addition  expect additional operator  comparison output  suitable set mathematical function  sqrt 
class concrete type  design follow guideline 
addition  user arithmetic rely heavily operator deﬁnition bring play basic rule overload 
type develop section double scalar roughly equivalent standard library double 
achieve deﬁne only operator inherently modify ﬁrst argument  +  class
operator simply produce base value argument  +  deﬁne class essential operator implementation  operator overload class 
possible efﬁciency difference  computation equivalent 
composite assignment_operator + tend simple deﬁne simple  counterpart +
surprise people ﬁrst  follow object involve + operation operand result  only object involve + operation 
case  run time efﬁciency improve eliminate need temporary variable 
require temporary variable hold result addition simple compiler inline perfectly 
optimizer will generate close optimal code plain +
optimizer  type simple  discuss way deﬁne operator direct access representation class 
fortran terminology  need mixed mode arithmetic 
achieve simply add version operator  section mixed mode arithmetic class 
add integer addition completeness 
example  class double   
constructor prescription create give type 
constructor type expect create constructor supply initializer assign 
constructor require single argument need call explicitly 
example   mean  user deﬁne conversion implicitly apply only unique 
want constructor implicitly  declare explicit 
naturally  still need constructor take double  default constructor initialize useful  
default argument  abbreviate  section conversion class 
tedious  tedious easily error prone 
alternative type argument function 
need version single argument function  version argument function  version threeargument function 
variant similar 
variant involve simple conversion argument common type follow standard algorithm 
alternative version function combination argument rely conversion 
example  class constructor convert double
simply declare only version equality bool   
example  case conversion impose overhead  case  simple algorithm speciﬁc argument type 
issue signiﬁcant  rely conversion only general variant function plus possibly critical variant contain operator overload combinatorial explosion variant arise mixed mode arithmetic 
name literal  follow
basic implementation idea parse literal  compiler check sufﬁx 
user deﬁne literal mechanism simply allow user specify section user deﬁne literal sufﬁx deﬁne literal
possible redeﬁne meaning build literal sufﬁx augment syntax literal 
kind literal sufﬁxe user deﬁne literal 
integer literal accept literal take unsigned long long const argument literal  example  
ﬂoating point literal accept literal take long double const argument literal  example  
string literal accept literal take const  pair argument  example   stre  
character literal accept literal operator take character argument type char     example   
example  deﬁne literal operator collect digit integer_value represent build integer type  
note put digit double quote 
request style string operator  compiler deliver digit
style string program source text literal operator  request string number character 
example  string operator   const   stre   
raw string    represent character   
rationale require number character want kind string   want know number character anyway 
literal operator take just const argument size apply integer ﬂoating point literal 
example  string operator    warning  will wor expect string   error  applicable literal operator string  ok 
literal operator convert numerical value string confusing 
example  constexpr int operator    base   ternar give 
string simpliﬁed version standard library string  
string value semantic  check unchecked access character  stream support range loop  equality operation  concatenation operator 
add string literal 
allow simple interoperability style string include string literal  represent string zero terminate array character 
realism  implement short string optimization 
string only character store character class object free store 
optimize string usage small string 
experience show huge number application string short 
optimization important multi threaded system share pointer reference infeasible free store allocation deallocation expensive 
allow string efﬁciently  grow  add character end  implement scheme keep extra space growth similar vector 
suitable target form input 
write string class facility exercise 
throw away exercise 
value semantic 
assignment  string fully distinct  subsequent change effect
alternative give pointer semantic 
let change affect value 
sense  prefer value semantic  example complex  vector  matrix  string 
howev er  value semantic affordable  need pass string reference need copy implement move semantic  optimize return 
slightly nontrivial representation present 
note require user deﬁne version copy move operation 
unfortunately  property simultaneously 
here  follow standard_library operation  class 
idea ordinary
example  section access character 
personally prefer check least development 
string manipulation task  range check character access impose noticeable overhead 
const non const version access function allow const object 
easy convert style string  string literal allow easy access character style string 
minimize free store 
add character end efﬁcient result clearly messy simple pointer  representation  realistic  class simple string implement short str ing optimization number element  character hold object free store
support know short string optimization string representation  
member name space number character 
case  number element keep look determine implementation scheme give string 
case  ptr point element 
essential performance  access function need test representation simply ptr 
only constructor  assignment  move  destructor care alternative 
array ch only integer space only 
waste allocate space ch space object 
avoid waste  union 
form union call anonymous union  speciﬁcally design allow class manage alternative representation object 
member anonymous union allocate memory  start address 
only member time  access exactly separate member scope surround anonymous union 
programmer  job sure misuse 
example  member_function space sure space set ch 
word  shape discriminate union discriminant 
tw need access representation member 
private member represent operation generally useful safe
interesting class  implementation just representation plus public function 
ancillary function lead duplication code  design  improve maintainability 
ﬁrst function move character newly allocate_memory  
cleanup target task caller  unconditionally overwrite target 
standard library memcpy copy byte source target 
low level pretty nasty function 
only object constructor destructor copy memory memcpy know type 
copy operation 
correspond function move operation 
example  object orient  user interface deﬁne set request object represent screen prepare respond 
addition  request present directly indirectly program 
simple variant idea  class 
exact meaning operation deﬁne object invoke 
layer software person program issue request object receive
ideally  intermediate layer software know individual operation 
intermediate layer update time operation change 
intermediate layer simply transmit datum represent operation invoke source request recipient 
example  invoke string   
howev er  create string decode determine operation correspond
indirect tedious 
simply integer represent operation 
example  mean 
howev er  integer convenient machine deal pretty obscure people 
still write code determine mean invoke 
pointer member indirectly refer member class 
want invoke object mention directly  need pointer member refer  
need pointer reference object want
trivial example  
variable type  pointer member class declare declarator form
alias compensate lack readability declarator syntax typical 
note declarator match traditional declarator exactly 
pointer member combination object 
operator allow programmer express combination 
example  bind object point bind object obj 
result accordance type 
possible store result operation later
naturally  know member want call  invoke directly mess pointer member 
just like ordinary pointer function  pointer member_function need refer function know name 
pointer member pointer piece memory way pointer variable pointer function
like offset structure index array  course implementation take account difference datum_member  virtual_function  nonvirtual function 
pointer member combine pointer object right type  yield identiﬁes member object 
call represent graphically like   vtbl   section pointer function_member pointer virtual member example kind offset  depend object  location memory 
pointer virtual member pass address space long object layout
like pointer ordinary function  pointer non virtual member_function exchange address space 
note function invoke pointer function virtual 
example  call pointer function  right object pointer function apply 
essential aspect pointer function 
write interpreter  pointer member invoke function present
type pointer function check just_like type 
imply safely assign pointer member base_class pointer member derived_class  way
property call contravariance 
example  class text  public 
contravariance rule opposite rule assign pointer derived_class pointer base_class 
rule exist preserve fundamental guarantee pointer point object least property pointer promise 
case    apply object presumably type te xt 
member te try initialize 
refuse initialization  compiler run time error 
design hierarchy implementation inheritance  interface inheritance  alternative implementation  localize object creation 
multiple inheritance multiple interface  multiple implementation class  ambiguity resolution  repeat base  base_class  replicate vs
advice introduction primary focus design technique  language feature 
example take user interface design  avoid topic event drive programming commonly graphical user interface gui system 
discussion exactly action screen transform call member_function add little issue class hierarchy design huge potential distraction  interesting important topic right 
understanding gui  look gui library 
bewildering number way 
insulate program variety  chance explore possible design choice  let start deﬁne program model simple input operation 
program ask value ask prompt user
addition  program ask user change value program last look value user application  way implement basic idea  assume will kind  slider  plain box user type number  dial  voice interaction 
general approach build virtual user interface system  application
system service exist user interface system 
implement wide variety system ensure portability application code 
naturally  way insulate application user interface system 
choose approach general  allow demonstrate variety technique design tradeoff  technique build  real  user interface system  important technique applicable problem narrow domain interface system 
addition ignore topic map user action event library call  ignore need lock multi threaded gui system 
addition  declare datum need implement basic notion  class 
realistic class example  range checking 
programmer ival class  like 
application code write term pointer plain way interact
way  application hav know potentially large number variant concept 
knowledge specialized class isolate function create object 
isolate user change implementation derived_class 
code oblivious kind 
 avoid forget delete 
simplify discussion  address issue program wait input 
maybe program wait user  future   maybe program associate event prepare respond callback  maybe program spawn thread later inquire state thread 
decision crucial design user interface system 
discuss here realistic detail simply distract presentation programming technique language facility 
design technique here language facility support speciﬁc user interface 
apply great range problem 
kind deﬁne class derive
example  class  public private  
protect member accessible class member member derived_class  general user see 
addition deﬁne variant concept 
include  let select turn knob   ﬂashe ask prompt   respond prompt prominent place  hard user ignore 
graphic stuff 
user interface system class deﬁne basic property entity screen 
system big buck     class kind bbwidget 
simply achieve rewrite derive bbwidget 
way  class inherit property bbwidget 
example  place screen  obey graphical style rule  resize  drag  accord standard set bbwidget system 
class hierarchy look like class  public bbwidget 
awkward detail lead look alternative design 
retroﬁtte bbwidget base
right style common real world system 
bbwidget part basic notion implementation detail 
derive bbwidget elevate implementation detail ﬁrst level design decision 
example  environment deﬁne big buck  key decision base organization conduct business 
want implementation system imperial section critique banana    liberated software   compiler whizz  
maintain distinct version program  
version result version control nightmare 
reality  unlikely ﬁnd simple  coherent  letter preﬁx scheme 
likely  library purveyor namespace terminology similar concept   
affect class hierarchy design discussion  simplify ignore name namespace issue 
problem derived_class share basic datum declare
data course  implementation detail creep interface 
practical point view  wrong datum case 
example  need store speciﬁcally 
easily calculate position slider execute 
general  keep set datum ask trouble 
soon later will sync 
experience show novice programmer tend mess protect datum way unnecessary cause maintenance problem 
datum member keep private writer derived_class mess
still  datum derived_class  deﬁne match requirement exactly complicate life unrelated derived_class 
case  protect interface contain only function  type  constant 
derive bbwidget give beneﬁt facility bbwidget user 
unfortunately  mean change bbwidget force user recompile rewrite code recover change 
way implementation work imply change size base require recompilation derived_class 
finally  program run mixed environment window user interface system coexist 
happen system share screen program need communicate user system 
user interface system  wire only base only interface just ﬂexible handle situation 
here  present map cleanly language 
first  specify pure interface  
clean original declaration 
datum simplistic implementation member_function 
constructor  datum initialize 
add virtual destructor ensure proper cleanup datum will deﬁne derived_class 
deﬁnition look like  public  protect bbwidget 
inherit bbwidget mean
interface derive  derive public 
bbwidget only implementation derive protect 
imply programmer directly facility deﬁne bbwidget 
interface inherit  plus explicitly declare 
protect derivation restrictive safe private derivation bbwidget class derive 
explicit override widget hierarchy  exactly kind large  complicated hierachy explicit help minimize confusion 
derive directly call multiple inheritance 
note override function bbwidget 
derive directly indirectly
show  derive indirectly bbwidget bbwidget base possible  undesirable side section interface inheritance effect 
similarly  implementation  bbwidget member solution override virtual_function member 
represent window member lead completely design separate set tradeoff 
people  word  multiple inheritance  complicated scary 
base implementation detail interface abstract common language support inheritance compile time check interface 
abstract identical interface java 
interestingly  declaration allow application code write exactly
restructure implementation detail logical way 
class require form cleanup object away 
abstract know derived require cleanup  assume require
ensure proper cleanup deﬁne virtual destructor base override suitably derived_class 
delete_operator explicitly destroy object point
hav way know exactly object point belong  thank virtual destructor  proper cleanup optionally deﬁne destructor will
hierarchy now deﬁne like 
general user access protect basis correctly part implementation 
still solve version control problem  
way bbwidget coexist cwwidget  ev en user interface system coexist 
obvious solution deﬁne class separate name  class 
example  big buck  system slider class  derive directly bbslider  class  public  protect bbslider 
case  programming reduce mapping similar concept 
derivation general base_class  bbwidget  only rarely 
complete hierarchy will consist original application orient conceptual hierarchy interface express derived_class  class 
obvious abbreviation  hierarchy represent graphically like class iﬂash ipopup cwsl cwsl cwsl cwislider bbislider cwipop cwiﬂ bbipop bbiﬂ bbslider bbslider original class hierarchy unchanged surround implementation class 
design  windows class root tree 
original application class hierarchy unchanged root class supply implementation 
application point view  design equivalent strong sense code work unchanged way case 
case  look family class bother window implementation detail time 
example  need rewrite interact switch class hierarchy
case  implementation class rewrite public interface user interface system change 
abstract_class design  user code protect change implementation hierarchy require recompilation change 
especially important supplier implementation hierarchy issue  compatible  release 
addition  user abstract_class hierarchy danger lock proprietary implementation user classical hierarchy 
user abstract_class application hierarchy accidentally facility implementation only facility explicitly speciﬁe hierarchy accessible  implicitly inherit implementation speciﬁc base_class 
logical conclusion line thought system represent user hierarchy abstract_class implement classical hierarchy 
abstract_class support interface inheritance  
base_class implementation virtual_function support implementation inheritance  
derive interface evolve facility plain  application write    interface 
creation object implementation speciﬁc name 
like minimize number place speciﬁc name occur  object creation hard localize systematically 
usual  solution introduce indirection 
simple introduce abstract_class represent set creation operation  class 
interface family class user know class function object 
class call factory  function misleadingly call virtual constructor 
now represent user interface system class derive  class  public 
give  user now create object know exactly userinterface system
example  class 
pass argument virtual constructor  bit tricky 
override base_class function represent interface argument derived_class 
imply fair bit foresight require design factory class interface 
share interface  lead replication code class code uniform 
call run time polymorphism interface inheritance 
share implementation  lead code uniform implementation code 
call implementation inheritance 
class combine aspect style 
here  explore general multiple base_class examine technical issue combine access feature multiple base_class 
abstract_class mutable state  little difference single multiple base_class class hierarchy 
resolution potential ambiguity discuss   
class mutable state interface multiple inheritance lattice signiﬁcant complication overhead 
key observation class mutable state replicate share desire 
multiple abstract_class interface universal object orient design language notion interface 
satellite object contain orbital  size  shape  albedo  density parameter   operation orbital calculation  modifying attribute 
example section multiple implementation class satellite rock  debris old space vehicle  communication satellite  international space station 
kind satellite object class derive satellite 
derived_class add data member function override satellite virtual_function adjust meaning suitably 
now assume want display result simulation graphically graphic system uncommon strategy deriving object display common base_class hold graphical
graphic class operation placement screen  scaling 
generality  simplicity  hide detail actual graphic system  will refer class graphical alternatively nongraphical output display 
now deﬁne class simulate communication satellite  class  class  public satellite  public display public  
virtual function work usual 
example  class class satellite 
ensure display  will call treat display 
just keep satellite display part completely separate 
deﬁne satellite member displayed member 
alternatively  deﬁne member member let constructor set proper connection 
design problem  just
system inspire example build idea satellite class virtual_function separately design display class virtual_function 
satellite display object derivation 
override satellite virtual member_function display virtual member_function specify behavior object 
situation multiple inheritance base_class state implementation hard avoid 
workaround painful hard maintain 
multiple inheritance glue  unrelated class part implementation third class crude  effective  important  interesting 
basically  sav es programmer write forwarding function compensate only override function deﬁne basis 
technique affect design program signiﬁcantly occasionally clash wish keep implementation detail hide 
technique hav clever useful 
generally prefer single implementation hierarchy need abstract_class interface 
typically ﬂexible lead system easy ev olve 
especially need exist class want modify  part library 
note single inheritance only  programmer choice implement class display  satellite  limit 
satellite display  satellite derive display vice versa 
alternative involve loss ﬂexibility 
contrary people conjecture  satellite example real 
maybe still program construct line multiple implementation inheritance here 
study design communication system involve satellite  ground station 
satellite derive early notion concurrent task 
give simulation  answer question communication trafﬁc ﬂow  determine proper response ground station block rainstorm  tradeoff satellite connection earth bind connection 
example  class satellite 
declare derived_class override function name type base_class 
typically  exactly right generally bad idea name operation semantic single class 
ideal virtual class call effect independently interface ﬁnd 
implementation overriding  explicitly qualify name right version base_class 
qualiﬁed name  telstar    refer declare telstar base_class 
example  class telstar  public 
exactly match find  name will
  find ambiguous 
telstar   plain  result inﬁnite  recursive call telstar  
display   now code subtly break add   generally refer direct base_class indirect base_class 
satellite   result error displayed branch class hierarchy 
example basically assume least part satellite display design
exact match name  return_type  argument type  semantic accident extremely unlikely 
likely similar functionality way take effort merge
originally present class simobj widget modify  exactly need  need  incompatible interface 
case  design satellite display interface class  mapping layer  high level class section ambiguity resolution class satellite  public simobj map simobj facility easy satellite simulation 
function radically meaning semantic identical name type  need override class separate function 
direct language solution exotic problem  add intermediate class_will struct wwindow  window  
graphically  window cowboy wwindow ccowboy designer window bit careful speciﬁed draw const  whole problem evaporate 
ﬁnd fairly typical 
class multiple base_class  class multiple time result hierarchy 
class facility store state ﬁle  breakpointe  debug persistence restore later  
useful class_will naturally place class hierarchy 
example  section repeat base_class class transmitter  public storable 
give imagine case  radio object subobject class storable transmitter receiver 
default  example write  subobject 
state copy time mention class base 
graphically  represent like storable storable transmitter receiver radio virtual_function replicated base_class overridden single function derived_class 
typically  override function_call base_class version work speciﬁc derived_class  
cast replicated base_class derived_class discuss 
technique override function separate function derived_class  see 
reason simply storable abstract_class pure interface 
storable object hold datum
simple case offer separation interface implementation
class difﬁculty determine storable subobject radio 
hold datum important replicate 
example  deﬁne hold name ﬁle store object  class public  
give apparently minor change change design radio 
part object share single copy
part derive multiple time ﬁle 
avoid replication declare base virtual  virtual base derived_class represent shared object 
example  class transmitter  public virtual 
inheritance graph  base_class give name speciﬁe virtual will represent single object class 
hand  base_class speciﬁe virtual will subobject represent
want virtual base contain datum 
think obvious way class class hierarchy share datum  datum nonlocal class global namespace variable 
option  nonlocal datum  poor choice control code access datum
break notion encapsulation locality 
option  put datum base_class  simple 
single inheritance solution useful datum function  bubble common base_class  bubble  way root inheritance tree 
mean member class hierarchy access 
logically similar nonlocal datum suffer problem 
need common base root tree virtual base 
option  share object access pointer  sense 
need set memory share object  initialize pointer share object object need access 
roughly constructor implement virtual base 
need sharing  virtual basis  code typically simple
need sharing general class hierarchy  basically choice virtual base laboriously construct variant idea 
represent object class virtual base like receiver transmitter radio class pointer  share object represent virtual base   will offset  optimize away place ﬁxed position relative receiver transmitter subobject 
expect storage overhead word virtual base 
naturally  prefer keep lattice simple  complicated language ensure constructor call derived_class 
cause chaos object initialize 
avoid chaos  constructor virtual base invoke implicitly explicitly constructor complete object constructor derived_class 
ensure virtual base construct exactly once ev en mention place class hierarchy 
note initializer
explicitly mention base irrelevant 
knowledge virtual base obligation initialize bubble derived_class 
virtual base direct base derive section construct virtual basis class 
initialize irrelevant compiler idea initializer prefer 
only initializer derived_class
constructor virtual base call constructor derived_class 
practice  localize prefer 
derive class  dd  dd work initialize virtual basis 
simply inherit constructor  nuisance 
encourage overuse virtual base_class 
logical problem constructor exist destructor 
simply invoke reverse order construction 
destructor virtual base invoke exactly once 
problem implement service require base_class function call exactly once call derive function 
need  programmer simulate scheme constructor call virtual base_class function only derived_class 
example  assume basic window class know draw content  class window 
compose plausible clock class  class class clock  public  public clock stuff protect  
independently kind window 
directly call explicitly name function  avoid nasty inﬁnite recursion 
cast virtual base_class derived_class discuss 
virtual basis multiple inheritance implementation abstract_class represent pure interface affect way program design 
class example  section replicate vs
virtual basis class  public  interface protect bbslider 
base public abstract_class interface  protect concrete_class implementation
multiple inheritance close essential here derived_class need override virtual_function interface implementation 
example  class 
end  class abstract reﬂect role pure interface 
allow place implementation detail speciﬁc implementation class 
sharing implementation detail classical hierarchy window system implementation 
abstract_class share data interface  choice  
replicate interface class object mention class hierarchy 
interface class virtual share simple object class hierarchy mention
virtual base give class  public virtual  protect bbslider 
alternative replicate object  class  public  protect bbslider 
logical difference 
replicated design  implicitly convert ambiguous 
hand  possible construct plausible scenario sharing imply virtual base design cause ambiguity cast base_class 
ambiguity easily deal
choose virtual base_class replicated base_class interface 
course  choice conform exist design 
choice  take account surprisingly replicated base solution tend lead slightly small object need data_structure support sharing interface object virtual constructor  factory function  
explicit conversion need implementation here  direct interface here  
class override virtual_function virtual base 
way  sev eral derived_class contribute implementation interface present virtual base_class 
example  window class function prompt 
case  override part control color scheme  override part control user interaction  section override virtual base function 
example  override improve 
class override base_class function  override class hierarchy error 
reason single function give consistent meaning call independently class interface 
implementation terminology  virtual_function table construct call function complete object ambiguous 
example  radio declare write  declaration write receiver transmitter cause error deﬁne radio 
radio  conﬂict resolve add override function derived_class 
class implementation virtual base_class call mixin 
class navigation dynamic cast  multiple inheritance   recover interface 
double dispatch visitor double dispatch  visitor 
construction destruction 
type identiﬁcation extend type
misuse rtii 
advice introduction general  class construct lattice base_class 
class lattice call class hierarchy 
try design class user need unduly concerned way class compose class 
virtual call mechanism ensure call function object  function call class hierarchy declaration call class deﬁne
explain gain total object give only interface base_class 
will refer combination gui library operating_system facility control screen system 
object pass back forth system application commonly refer widget control 
user interface work 
language point view  important system know 
system interface speciﬁe term system class object application class 
howev er  unpleasant effect lose type object pass system later return
recover lost  type object require ask object reveal type 
operation object require pointer reference suitable type object 
obvious useful operation inspect type object run time type_conversion operation return valid pointer object expected type null pointer
operator exactly
example  assume system  inv oke pointer bbwindow  activity occur 
invoke application code 
way explain here translate implementation orient language user interface system language application 
important note mention example  actual type object 
object will kind   implement kind bbwindow  bbslider 
desirable actual type object explicit interaction system  application 
interface exist represent essential interaction 
design interface hide inessential detail 
graphically  action represent like bbwindow bbslider pw section class navigation arrow pw represent pointer object pass  rest arrow represent inheritance relationship part object pass 
type run time conventionally refer run time type  abbreviate rtti 
cast base_class derived_class call downcast convention draw inheritance tree grow root
similarly  cast derived_class base call upcast 
cast base sible class  like cast bbwindow  call crosscast 
ﬁrst pointer case  
reassuring know allow accidental violation protection private protect base_class 
upcast exactly like simple assignment  imply overhead sensitive lexical context 
purpose deal case correctness conversion determine compiler 
case  look object point 
object class unique base_class type return pointer type object  nullptr return 
value nullptr  return nullptr 
note requirement conversion uniquely identiﬁed object 
possible construct example conversion nullptr return object point subobject represent basis type 
require pointer reference polymorphic type order downcast crosscast 
example  run time type 
require pointer type polymorphic simpliﬁes implementation easy ﬁnd place hold object type 
typical implementation will attach type object  object place pointer type virtual_function table object class 
clear efﬁciently implement 
involve comparison object represent base_class  expensive lookup string comparison need 
restrict polymorphic type sense logical point view 
object virtual_function  safely manipulate knowledge exact type 
care take object context type know 
type know  need
target type need polymorphic 
allow wrap concrete type polymorphic type  transmission object system  unwrap  concrete type later 
object represent base_class   derived_class object necessarily ﬁrst subobject object derived_class 
necessarily hold address 
cast only useful interaction low level function only function deal 
way know ﬁnd vptr  
pointer type  nullptr failure 
feasible desirable reference 
give pointer result  possibility result nullptr  pointer point object 
result pointer explicitly test 
pointer see question  object point type  example  
hand  legitimately assume reference refer object 
reference question assertion   object refer type  result reference implicitly test implementation
operand reference expected type  exception throw 
example  run time type 
call fp ﬁrst call fr will_return normally assume fp cope  second call fr will cause exception will catch 
explicit test nullptr easily accidentally omit 
worry write conversion function throw exception return nullptr case failure 
simple constrain 
multiple inheritance single root 
complicate matter
class once hierarchy  bit careful refer object object represent class 
naturally  try keep hierarchy simple application allow simple 
once nontrivial hierarchy construct  need navigate ﬁnd speciﬁc class
need occur variant  
want explicitly name base_class interface  example  resolve ambiguity call speciﬁc function rely virtual_function mechanism explicitly qualiﬁed call  
want obtain pointer subobject hierarchy giv en pointer example  pointer complete derived_class object pointer base downcast  pointer base_class object pointer base crosscast  
here  navigate class hierarchy type_conversion cast gain pointer desire type 
illustrate mechanism rule guide lattice contain replicated base virtual base  section multiple inheritance class component  public virtual storable 
radio will ambiguous return 
simply way know programmer want  
code write knowledge sublattice 
example  programmer know only transmitter part radio write  void 
ambiguity pointer radio object general detectable compile time 
kind run time ambiguity detection need only virtual basis 
ordinary basis  unique subobject give cast downcaste run time type derived_class  
equivalent ambiguity virtual basis occur upcaste base  ambiguity catch compile time 
examine object cast 
object type layout constraint determine language fortran virtual base_class 
object type  only static type will
need run time type identiﬁcation include need implement
want class hierarchy navigation 
run time cost associate 
signiﬁcantly  million line code write
code rely alternative way sure cast valid  checking see redundant 
code typically write style cast  obscure error remain 
possible  safe 
compiler assume memory point
imply look object determine type cast
possible cast private base_class  cast aw ay const  volatile require 
result safe only object originally declare const volatile 
example  simple object system 
user want read object stream  determine expect type 
function user deal shape exclusively abstract_class shape kind shape 
essential object system deal kind object  user accidentally open ﬁle contain perfectly object class user hear
 forget delete object allocate 
object system assume object read write class derive class polymorphic type allow user recover true type  return object 
example  class 
assume datum represent object input stream preﬁxe string identify object class 
job read string call function capable read create object right class 
example   pointer function_return 
example class ﬁtte hierarchy abstract_class foresight require build node class ﬁrst place 
istream constructor initialize object datum istream argument 
function put class know object system 
note access private protect datum 
idea transmission format type need construct constructor 
stream necessarily sequence member value 
template example way ﬁt concrete type class hierarchy handle node hierarchy 
derive template parameter allow cast
simple object system want  ﬁts single page key mechanism
blueprint receiver end  system transmit arbitrary object across communication channel type safe manner 
generally  technique invoke function base string supply user manipulate object unknown type interface discover run time type identiﬁcation 
general  sender part object system will rtti 
class face  public 
correctly write point outline  need ﬁgure kind
job typeid 
general  keep table pointer  unique identiﬁer pair able transmit link data_structure avoid duplicate object point pointer reference 
run time lookup call dynamic dispatch type time 
resemble simula smalltalk recent language  java 
able select function base dynamic type limitation 
imply add virtual_function class hierarchy modify base interface derived_class affect 
section basic workaround problem  double dispatch show select virtual_function base type 
realistic example technique occur deal data_structure  vector graph pointer object polymorphic type 
case  actual type object  vector element graph node only know dynamically implicitly explicitly inspect interface base_class 
like work class class hierarchy root circle triangle 
basic strategy virtual_function call select right function second call select right function 
simplify  will leave calculation shape actually intersect just write code skeleton select right function 
first deﬁne function intersection  class  
next need deﬁne override virtual_function  run time type class  public 
interesting function here  intersect  intersect 
need handle argument argument refer derived_class 
trick technique simply virtual call argument reverse order 
function actually intersection calculation 
test pair value call intersect 
elegant  need raise standard  task
class hierarchy grow  need virtual_function grow exponentially 
acceptable case 
expand argument trivial  tedious 
bad operation class require modiﬁcation class hierarchy  double dispatch technique highly intrusive 
ideally  prefer simple intercept  function overrider speciﬁe desire combination section double dispatch shape 
awkwardness double dispatch problem try address important 
unusual want action    depend type operand 
example  ﬁnde intersection rectangle simple efﬁcient 
application  people find sufﬁcient deﬁne bounding box  shape calculate intersection bound box 
example  class public  
variation idea widely
variant precompute value_store object speed type identiﬁcation 
apply operation class class hierarchy 
basically  will double dispatch hierarchy node hierarchy operation select correct operation correct node 
operation call visitor  here deﬁne run time type class class 
node hierarchy class virtual_function accept take
example  hierarchy node language construct  common tool base abstract syntax tree ast class  
here  general operation update node  visit 
now node accept perform double dispatch trick pass node accept 
only mildly intrusive accept function  variation basic idea
operation class hierarchy hard express visitor 
example  operation need access multiple node type graph trivially implement visitor 
visitor pattern inelegant workaround 
alternative exist  example   plain 
alternative visitor base idea explicit iteration homogeneous data_structure  graph node contain pointer polymorphic type 
element node  call virtual_function perform desire operation  optimization base store datum apply  see 
class object build raw memory  constructor  revert raw memory  destructor execute 
construction bottom destruction top class object object extent construct destroy 
order ensure object access initialize 
unwise try access base member object early order clever  pointer manipulation 
order construction destruction reﬂecte rule rtti  exception_handling  virtual_function 
unwise rely detail order construction destruction  observe order call virtual_function   typeid point object complete 
point constructor  dynamic type object reﬂect only construct
example  constructor component hierarchy call virtual_function  will invoke version deﬁne storable component  receiver  transmitter  radio 
point construction  object radio 
similarly  call virtual_function destructor will reﬂect only still destroy 
avoid call virtual_function construction destruction 
importantly  ensure code write work correctly class explicitly mention programmer 
preserve ﬂexibility extensibility manner similar virtual_function 
occasionally essential know exact type object 
example  like know name object class layout 
typeid operator serve purpose yield object represent type operand 
typeid function  declaration look like class   pseudo declaration typeid return reference standard library type call deﬁne typeinfo  
giv en name type operand  return reference represent type_name  type_name completely deﬁne type 
giv en expression operand  return reference represent type object denote expr  expr refer completely deﬁne type 
value expr nullptr  throw 
typeid ﬁnd type object refer reference pointer  
operand typeid nonpolymorphic type lvalue  result determine compile time evaluate operand expression 
object denote dereferenced pointer reference polymorphic type  return derived_class object  type object deﬁne 
deﬁnition look like class 
function allow key hash table 
guarantee only object type system 
dynamically link library hard implementation avoid duplicate object 
object test equality  pointer object 
want know exact type object perform service whole object just basis 
ideally  service present virtual_function exact type need know 
case  common interface assume object manipulate  detour exact type 
simple obtain class diagnostic output  run time type 
character representation class implementation deﬁne 
style string reside memory system  programmer attempt delete
ﬁnde exact type object just ﬁrst step acquire detailed type 
implementation tool type user run time 
suppose tool generate description object layout class
put descriptor allow user code ﬁnd layout 
hardwire comparison criterion container container general impose need element_type 
example  default  map comparison  key hav want
hardwire ordering criterion key type general way order element base key 
example  common key type string string order base variety criterion  case sensitive case insensitive 
sort criterion build container type element_type 
principle  notion sort criterion map represent type argument map determine type comparison object ﬁrst glance  ﬁrst solution pass comparison object speciﬁc type simple 
example  typename key  typename  key  const key 
designer will decide compare unknown key type pointer function function_object speciﬁc type 
argument type comparison operator depend key type  hard default comparison criterion 
second alternative pass type comparison type parameter common standard_library 
example  typename key  class  typename key class 
common case  compare  default 
want section operation argument comparison criterion  supply function_object 
simple class_member function deﬁne class trivial inline  inline call pointer function require exceptional attention compiler 
function_object data member pass run time cost 
sev eral operation pass single object additional run time cost 
comparison criterion just example 
technique pass general widely parameterize class function  example include action algorithm   allocator container   deleter 
hav design alternative need specify argument function  sort  standard_library choose alternative case  see 
only comparison criterion program  sense lambda express function_object version bit tersely  string  int  const string  const string const return  error unfortunately  work conversion lambda function_object type 
name lambda name  auto const string  const string const return stre  int  decltype  ﬁnd name operation useful design maintenance point view 
name declare nonlocally ﬁnd
example  specialization typename  typename class 
example  specify parameter class take single type argument 
able specialization
point parameter want instantiate variety argument type previous example 
want express member declaration term want parameter speciﬁe user 
only class_template argument 
common case need only container handle pass container type 
example  typename  typename 
here  value type obtain simple type_function obtain type element container  example  
technique standard library container adaptor  queue 
specify key default type argument  only uncommon comparison criterion explicitly speciﬁed  section default template argument typename key  class  typename class 
note default constructor create default comparison object  
common case 
want elaborate construction  explicitly 
example  string  int   semantic checking default argument parameter only default argument actually
long refrain default argument key  compare value type compile 
point crucial design standard container  std   rely argument specify default_value 
just default function argument  default argument speciﬁe supply trail argument only  
allow empty  argument mean  default  deliberate tradeoff ﬂexibility opportunity obscure error 
curiously  comparison 
standard library string rely 
similarly  standard algorithm rely standard library container rely allocator 
trait present 
example  template typename string  typename string 
implementation bit heavyweight combination simple type   improved implementation supply specialization 
note will work char int share string representation 
conversion scalar numeric type  tend prefer 
sense write template 
want  template argument pointer  implementation  implementation   give error template argument pointer derive class  design address alternative deﬁnition template compiler choose base section specialization template argument
alternative deﬁnition template call user deﬁne specialization  simply user specialization 
likely vector  template typename class vector general type 
code  vector will vector pointer type 
reason primary reason preserve run time polymorphic behavior  pointer  
who practice object orient programming type safe container standard library container will end container pointer 
default behavior implementation replicate code template function 
run time performance  care take  lead code bloat critical case example 
fortunately  obvious solution 
container pointer share single implementation 
express specialization 
first  deﬁne version specialization pointer void  template 
specialization common implementation vector pointer 
implement base single share implementation class store
template preﬁx specialization speciﬁe template parameter 
template argument specialization speciﬁe bracket name 
deﬁnition implementation
template parameter specify deduce specialization  vector declare like vpv  deﬁne specialization pointer only vector pointer  write  template typename class  private 
specialization pattern name specialization pointer type  deﬁnition template argument express
example  vps  shape shape vppi  int int specialization pattern contain template parameter call partial specialization contrast complete specialization deﬁnition vector  pattern  simply speciﬁc type 
note partial specialization template parameter deduce specialization pattern  template parameter simply actual template argument 
give partial specialization hav share implementation vector pointer 
class simply interface implement exclusively derivation inline expansion 
important reﬁnement implementation achieve affect interface present user 
specialization way specify alternative implementation common interface 
naturally  giv en general pointer name 
try people who know forgot pointer class find code large expect 
case  hide crucial implementation detail common interface 
technique prove successful curb code bloat real
people who find replicated code cost megabyte code space moderately sized program 
eliminate time need compile additional version operation  technique cut compile link time dramatically 
single specialization section specialization implement list pointer example general technique minimize code bloat maximize amount share code 
compiler smart perform optimization help programmer  technique generally applicable useful 
variant technique single run time representation value number type rely static type system ensure only accord declare type call type erasure 
context  ﬁrst document original template paper 
example  standard_library complex specialization adjust set constructor argument type important operation important specializa look like template typename class 
addition  conversion ﬂoat long double template class double 
note specialize constructor constexpr  double literal type 
deﬁnition take advantage knowledge conversion ﬂoat double safe narrow  implicit constructor ﬂoat 
howev er  constructor long double explicit narrow likely 
case  specialization representation differ general template 
example  template typename  int class matrix  
primary template deﬁne interface specialization 
primary template determine valid take part overload resolution 
only primary template choose specialization
primary template declare specialization 
example  template typename class 
deﬁne constraint check template  primary template belong concept user care understand template 
example  template typename 
technical reason language recognize constraint check  constraint check need replicate specialization 
declaration primary template sufﬁcient allow deﬁnition specialization  template typename class  
primary template instantiate  need deﬁne 
deﬁne template only ﬁxed set alternative argument accept 
user specialize template  specialization scope template type specialize 
example  template typename class 
here  specialize
essential template give set template argument implement specialization 
type system break  identical template place yield result object create part program compatible 
clearly disastrous  programmer take care explicit specialization consistent program 
principle  implementation capable detect inconsistent specialization  standard require
specialization template declare namespace primary template 
specialization explicitly declare oppose generate general template explicitly deﬁne 
word  explicitly specialize template imply deﬁnition generate specialization 
example  template typename class vector  general  primar template template typename class  specialize pointer template class vector  specialize void type template argument general vector  only pointer only vector 
specialized version will prefer declaration object  pointer 
specialization pattern speciﬁe term type compose construct allow template parameter deduction 
overload function  see specialization 
support only complete specialization function  overload try partial specialization 
version compare element swap element detailed code 
deﬁnition template typename 
now hav swap name entity improved version 
name refer customization point 
write  sort will sort correctly will compare 
will compare address ﬁrst char string 
like compare character point
simple specialization const will take care
class  template preﬁx specialization speciﬁe template parameter 
const template function_name mean specialization case template argument const
template argument deduce function argument list  need specify explicitly 
simplify deﬁnition specialization  template 
give template preﬁx  second empty redundant  typically simply write  specialization template 
now specialize  version semantically correct  swap 
standard library swap correct potentially expensive copy operation  improve performance large number argument type 
specialization come handy irregularity argument type cause general 
look like 
generic_programming  just deﬁne generic type algorithm 
position useless basically deﬁne generic_programming template metaprogramming synonym 
think useful distinction
distinction help decide alternative approach problem focus important give problem 
write generic type algorithm  feel write compiletime program 
programming skill compile time part program 
focus deﬁne requirement argument 
generic programming primarily design philosophy programming paradigm  
contrast  metaprogramme program 
emphasis computation  involve selection form iteration 
metaprogramming primarily set implementation technique 
think level implementation complexity  simple computation type value compile time test iteration  computation explicit compile time test  example  compile time 
metaprogramme combination meta  programming  metaprogram compile time computation yield type function run time 
note template metaprogramming  computation constexpr function 
note rely people metaprogramme actually metaprogramme call constexpr function hide metaprogram extract type template type_function metaprogramme  just metaprogram 
generic programming fall ﬁrst   computation  category  possible support generic_programming metaprogramme technique 
careful interface speciﬁcation precisely deﬁne correctly implement 
once part interface  possibility programming error creep
programming  meaning directly deﬁne language rule 
generic programming focus interface speciﬁcation  metaprogramme program  type value 
overenthusiastic metaprogramming lead debug problem excessive compile time render unrealistic 
hav apply common sense 
simple metaprogramme lead code type safety  low memory footprint  low run time exceptional compile time overhead 
standard library component  function  thread   tuple  example simple application metaprogramme technique 
explore basic metaprogramming technique present basic building block metaprogram 
offer extensive example 
example  build type_function give type argument return size object measure char  
type function don  hav look like conventional function 
example  standard_library take argument template argument return result member call value   big   
function take argument return result value 
example  metaprogramme template typename int 
type function compile time function 
only take argument type value know compile time produce result type value compile time 
function take least argument  useful don  
example  here function return integer number byte  template int 
course possible write template take value only produce value only 
don  function 
constexpr function way express compile time computation value 
compute square root compile time template  want express algorithm cleanly constexpr function   
function template 
perform general computation type value 
backbone metaprogramming 
example  want allocate object stack small free store constexpr int  max size object want stack template typename struct typename  
ﬁrst argument evaluate true  result present member second argument  result third argument 
case   deﬁne scope object small 
example hypothetical 
example  standard contain follow comment deﬁnition function hold function like entity   implementation encourage avoid dynamically allocate_memory small callable object  example  target object hold only pointer reference object member_function pointer  
hard follow advice like 
scope implement 
implementation trivial involve metaprogramming  here template typename 
consequence way language speciﬁe way template metaprogramme code write last year  way standard 
remind bad old day occurrence user deﬁne preﬁxe struct keyword 
introduce template alia  hide  implementation detail function look like function_return like 
example  template typename 
explain implementation standard speciﬁcally offer  alias systematically 
standard function call like  property predicate  composite category predicate   deﬁne correspond alias template typename typename  typename typename    note alias unfortunately part standard 
only alternative suppose valid  alia 
ﬁrst simple analogy  section alias 
important enter block nullptr 
test see valid 
similarly  want test see valid 
example      here  test integral predicate unsigned variant function 
succeed  unsigned  will deal indicator 
write mean typename   try nonintegral   try nonexistent  
result compile time error 
rare case alias consistently hide    fall back explicit  implementation orient   style 
alternatively  introduce function delay evaluation function    error implementation perfect function nontrivial  will template template class  typename 
args  template template argument variadic_template 
independently solution choose avoid undesired instantiation  kind expert territory enter only trepidation 
want write function take argument type  obvious will like ask question argument  type 
example  sign type 
type polymorphic  least virtual_function 
type derive type 
answer question know compiler expose programmer set standard library type predicate 
example  metaprogramming template typename 
copy object potentially copy_constructor 
determine template argument type pod standard library type predicate 
result present member value 
standard library convention similar way type_function present result member type 
std   predicate standard_library 
rule pod tricky  likely compiler intrinsic implement library code 
like  type convention  value   value cause verbosity departure conventional notation let implementation detail shine function_return bool call 
fortunately  standard support standard library type predicate 
unfortunately  language technical reason  resolution context template argument 
example  template typename 
interpret type function take argument return 
solution add function conventional notation context  template typename 
addition  keep separate namespace estd 
deﬁne type predicate 
example  template typename 
deﬁne predicate  powerful technique
example  deﬁne type_function determine class member give name type 
naturally  type predicate argument useful 
represent relation type    tible 
constexpr function support usual call syntax function 
mean condition constant expression 
note parenthesis  syntax_error compiler interpret end template argument list 
reason  prefer great 
parenthese condition readability 
trait associate property type 
example  property iterator deﬁne template typename iterator 
see trait type_function result bundle type_function 
standard_library    confusingly simple type_function 
give talk pointer hav member  template typename iter 
useful powerful technique  
bundle weakly type_function 
expose implementation detail user 
people throw type alias  just case   lead unneccesary complexity 
prefer simple type_function  template typename typename    template typename typename    section trait template typename typename    example clean nicely  
auto decltype  old code write way 
need trait equivalent  decltype associate type type 
trait equivalent indispensable non intrusively add type_name need generic_programming metaprogramming 
trait simply name perfectly name   utility clear potential confusion control structure general computation compile time  need selection recursion 
want choose value   sufﬁcient  metaprogramme select select type 
simply compile time equivalent switch ev en choose function_object  
template part standard_library  hav implement illustrate important technique  template bool typename typename 
condition true  specialization false choose deﬁne
example  typename     obviously  syntax leave bit desire  underlie logic beautiful 
specialization separate general case specialized 
example  primary template take care exactly half functionality  fraction vary nonerroneous case handle specialization  single terminate case 
form selection completely compile time cost byte cycle run time 
improve syntax  introduce alia  template bool typename typename typename     give write   signiﬁcant improvement 
run time look like  
implementation    compiler optimize away empty base_class 
call empty base optimization guarantee language 
example  template typename  typename  typename  typename 
unsurprisingly  output metaprogramme 
like access element efﬁciently possibility type system violation  cast 
imagine variety scheme  name element  number element  access element recurse element reach desire element 
last alternative will implement common access strategy  index element 
want implement way subscript 
unfortunately  unable implement  function template 
idea index element  start  way element selection compile time preserve type
function construct object type  
job return reference nth element  assume type
give helper  
basically  special purpose loop  implement recurse time 
member_function static want object class 
class only place hold ret way allow compiler
bit scaffold index  least result code type safe efﬁcient 
efﬁcient   mean give reasonably compiler common  run time overhead access member 
write just 
unfortunately  work  
inside  argument know constant expression 
forget  only lambda deduce result type return statement  handle add 
need language lawyering now  hav 
example    char    
problem take argument non const reference 
const  acceptable argument 
naturally  want able const tuple 
example  metaprogramme 
now  handle const non const argument 
imply type implicit code function construct section typename  typename  typename  typename 
example  errorreporte function take zero argument  matrix dimension  tuple zero element 
note ﬁrst last example  element necessarily type 
case  prefer deal case separately 
ideally  single piece code handle case element  element  element 
pull number hat  ideally  ﬁxed upper limit number element 
year  solution find 
example  default argument allow single function accept variable number argument  function overloading function number argument 
pass single list element alternative variable number argument long element type 
elegantly handle case unknown number argument unknown possibly differ type  additional language support need 
language feature call variadic 
archetypical example function need unknown number argument variety type  printf 
standard_library  printf ﬂexible perform nicely 
extensible user deﬁne type type safe  popular target hacker 
ﬁrst argument printf style string interpret  format  additional argument require format string 
format speciﬁer  ﬂoatingpoint zero terminate array character  control interpretation additional argument 
example  value  metaprogramme string  target   
ﬁrst call printf work intend  second call problem  format speciﬁcation refer style string  printf will interpret argument correctly 
format general direct way print value user deﬁne type  point 
third call printf  int argument forget  argument
general  compiler able compare number type argument require format string number type argument programmer 
output last call pretty 
variadic_template  implement extensible type safe variant printf 
common compile time programming  implementation part  handle case just argument format string 
simple case only argument  format string  
print format string 
format speciﬁer find  printf throw exception argument format 
format speciﬁer deﬁne follow printf  notation start type speciﬁer 
note overﬂow last character string 
case  refer terminate zero 
handle printf argument 
here variadic  come play  
ordinary character  formal speciﬁer simply print 
overloading replace possibly erroneous  hint  format speciﬁer 
argument type deﬁne  argument print  call type check program_will run 
format character
imagine type safe character  purpose example design perfect printf explain variadic_template 
parameter pack sequence type value pair peel argument start ﬁrst 
printf call argument void  value  
call parameter pack args expand ﬁrst element args select value args element short previous call 
carry args empty  call  void  
standard_library  hav craft
here minimal technical example help 
first  declare simple variadic_template function  template 
type void 
type args function argument correspond type template argument 
ellipsis separate lexical token  place whitespace
ellipsis place grammar  mean  zero occurrence 
think parameter pack sequence value compiler remember type 
example  graphically represent parameter pack    
argument type call  call accept function  pointer function  function_object  lambda 
hav speciﬁc specialization function pass call deduce type argument 
section present deﬁnition standard library  explain technique implement
key difference std   simple tuple variadic_template remove limitation number element 
here key deﬁnition  head  
tail class head   private here recursion derive tail rest type value pair 
note type encode type  store datum typedef inherit  
guarantee std   implement hint here 
popular implementation derive helper class variadic class  element layout memory struct member type 
add reference  type_function add reference type isn  reference
avoid copy 
curiously  std   head function  private 
member_function access element 
want access element directly indirectly call function split value 
tedious mention type 
deduce argument type  section standard library example  standard library 
member std   useful useful add understanding variadic_template  detail 
constructor assignment type copy move  type copy move  pair copy move 
operation take std   argument 
constructor assignment take allocator swap 
unfortunately  standard_library offer
bad  write std   amazingly complicated simple general way iterate element standard library 
first need helper  struct print function 
print recurse list printing element  recursion element print  print element follow element struct 
pattern recursive function terminate overload like printf 
now write 
input computation tricky  include datum program text 
prefer simple example opinion stand chance come maintenance 
here  will show example reasonable tradeoff implementation complexity utility 
compilation overhead minimal overhead 
example small library computation unit  meter  kilogram  second 
mks unit subset international standard si unit universally science 
example choose show simple metaprogramming technique combination language feature technique 
want attach unit value  avoid meaningless computation 
unit type system physical value 
show  auto hide type want  user deﬁne literal introduce typed value  type want explicit unit 
meter length 
kilogram mass 
second note unit value encode type 
conventional notation common unit  
negative unit value division quantity unit 
value representation unit ﬂexible 
represent proper unit computation involve  mass 
doubt will ﬁnd  distance multiply  divide masse multiply  multiply measurement multiply nice know system general 
multiply quantity  unit add 
addition unit useful  template typename  typename struct 
now start think computation 
physical measurement 
review whole physics textbook  certainly need addition  subtraction  multiplication  division 
only add subtract value unit  template typename 
similarly  division quantitys subtraction unit 
example  template typename  typename 
give arithmetic operation  express computation 
ﬁnd realworld computation contain fair number scale operation  multiplication division dimensionless value 
tedious   auto  
need explicit double ensure double correct result division 
code generate example identical  still notationally 
introduce user deﬁne literal udls  type  constexpr operator   return  
conventional unit
obviously  control overuse nonstandard sufﬁxe  suspect widely look bit like greek 
magnitude type  think simple keep type simple focus primary task
deﬁne square trivial  
basically show write arbitrary computational function 
construct right return_value deﬁnition  exist function easy 
alternatively  easily deﬁne function 
deﬁne value unit only  template typename 
code will  give reasonable compiler  generate exactly code generate double directly 
howev er  check  compile accord rule physical unit 
example add whole application speciﬁc type checking rule program 
introduction basic matrix matrix requirement 
matrix template construction assignment  subscripte slicing 
matrix arithmetic operation scalar operation  addition  multiplication 
matrix implementation slice  matrix slice   matrix list initialization  matrix access  zero dimensional matrix 
solve linear equation classical gaussian elimination  pivot  testing  advice introduction language feature isolation boring useless 
demonstrate feature combination address challenging design task  general dimensional matrix 
hav see perfect matrix class 
give wide variety matrix  doubtful exist 
here  present programming design technique need write simple dimensional dense matrix 
easy just compact fast  programmer write vector builtin array directly 
vector  specify size specify element value  
number row match speciﬁed number dimension number element
dimension number element extent deduce initializer list speciﬁed constructor argument notation 
total number element refer
give print  
dimension  parameter vary specialized code dimension 
dimensional storage useful general  element_type store like vector element 
mathematical operation apply type reasonably number  include
fortran style subscripte index dimension  example  yield element 
style subscripting  example   yield row row 
subscripte potentially fast potentially range check 
move assignment move_constructor ensure efﬁcient pass result eliminate expensive temporary 
mathematical matrix operation 
way read  write  pass reference submatrice   read writing element 
absence resource_leak form basic guarantee 
fuse critical operation  example  single function_call 
introduction standard library facility  design constraint  description style 
language support support  range support 
error handling exception  assertion  
advice introduction standard_library set component speciﬁe iso standard ship identical behavior modulo performance implementation 
portability longterm maintainability  strongly recommend standard_library feasible 
maybe design implement alternative application  
easy will future maintainer learn alternative design 
likely alternative unknown platform year now 
likely alternative useful future application 
likely alternative will interoperable code write standard_library 
likely spend effort optimize test alternative standard_library 
course  alternative  organization will responsible maintenance evolution alternative   general  try reinvent wheel 
iso standard_library  part standard_library page 
compare  language speciﬁcation page 
here  summarize  rely heavily table  give example 
detail find include online copy standard  complete online documentation implementation  like read code open source implementation 
rely reference standard complete detail 
standard library intend read order presentation 
typically major subsection read isolation 
rely cross reference index encounter unknown 
ideal programmer able ﬁnd ev ery interesting  signiﬁcant  reasonably general class  function  template   library 
question here  standard    reasonable ﬁrst approximation answer question
standard_library implementer supply programmer rely
support language feature  memory management  range statement 
implementation deﬁne aspect language  large ﬁnite 
primitive operation easily efﬁciently implement language 
function programmer easily implement optimally portably 
minimal support optional reclamation unused memory garbage collection 
nonprimitive foundational facility programmer rely portability 
framework extend facility convention support facility allow user user deﬁne type style build facility standard_library simply conventional useful
example standard mathematical function  sqrt  random number generator  complex arithmetic  regular expression 
standard_library aim common foundation library 
combination facility allow standard_library play support role  section standard library facility 
foundation portability 
set compact efﬁcient component foundation performance sensitive library application 
set component enable intra library communication design library primarily determine role 
role closely
example  portability commonly important design criterion specialized library  common container type list map essential convenient communication separately develop library 
last role especially important design perspective help limit scope standard_library place constraint facility 
example  string list facility standard_library 
separately develop library communicate only build type 
advanced linear algebra graphic facility
facility obviously widely useful  rarely directly involve communication separately develop library 
facility need support role  leave library standard 
bad  leave standard_library open opportunity library offer compete realization idea 
once library prove widely useful variety compute environment application domain  candidate standard_library 
regular expression library example
reduce standard_library freestande implementation  implementation run minimal operating_system support 
facility offer standard_library design 
valuable affordable essentially student professional programmer  include builder library 
directly indirectly programmer library scope 
efﬁcient genuine alternative hand code function  class  template implementation library 
policy free option supply policy argument 
primitive mathematical sense 
component serve weakly role will certainly suffer overhead compare individual component design perform only single role 
convenient  efﬁcient  reasonably safe common
standard_library leave major function library  take task  functionality individual user implementer need replace basic job
easy build type operation 
type safe default  principle checkable run time 
supportive commonly accept programming style 
extensible deal user deﬁne type way similar way build type standard library type handle 
standard library qsort take comparison function argument rely ﬁxe  operator 
hand  overhead impose function_call comparison compromise qsort building block library building 
data_type  easy comparison impose overhead function_call 
function_call overhead dominate execution time algorithm cause user seek alternative 
technique supply comparison criterion template argument solve problem sort standard library algorithm 
sort example illustrate tension efﬁciency generality 
example tension resolve 
standard_library merely require perform task 
perform efﬁciently user tempt supply alternative standard offer 
implementer advanced feature force bypass standard_library order remain competitive 
add burden library developer seriously complicate life user want stay platform independent separately develop library 
requirement primitiveness  convenience common conﬂict 
requirement preclude exclusively optimize standard_library common case 
howev er  component serve common  nonprimitive  need include standard_library addition primitive facility  replacement 
cult orthogonality prevent life convenient novice casual user 
cause leave default behavior component obscure dangerous 
extremely abbreviate style presentation 
set operation typically present table  operation op range return foo return result 
try mnemonic choose identiﬁer  will iterator specify range  pointer iterator  value  depend context 
notation  only commentary distinguish result boolean result  confuse try hard
operation return boolean  explanation end question mark 
algorithm follow usual pattern return end input sequence failure    find  
abbreviate description accompany reference iso standard  explanation  example 
header identify major part library 
list give overview library 
rest subsection list header group function  accompany brief explanation annotate reference discuss 
grouping choose match organization standard 
standard header name start letter equivalent header standard_library 
header deﬁne part standard_library global namespace namespace std  header cx deﬁne name 
ideally  name cx header pollute global namespace  unfortunately due complexity maintain multilanguage  multi operating system environment
container vector dimensional resizable array deque double end queue singly link list list doubly link list map associative array set set hashed associative array hashed set queue queue stack stack array dimensional ﬁxed size array bitset array bool associative container multimap multiset find map set 
declare queue 
general utilities utility operator pair  tuple tuples type trait typeindex key hash code functional function_object memory resource management pointer scope allocator ratio compile time rational arithmetic chrono time utility ctime style date time iterator iterator iterator support iterator mechanism standard algorithm generic  
standard_library function bsearch qsort apply build array element type user deﬁne copy_constructor destructor only 
diagnostic exception exception class stdexcept standard exception cassert assert macro cerrno style error handle system error support assertion exception 
string character stre string cctype character classiﬁcation cwctype wide character classiﬁcation cstre style string function cwchar style wide character_string function cstdlib style allocation function cuchar style multibyte character regex regular expression match cstre header declare strlen  strcpy   family function 
input output iosfwd forward declaration facility iostream standard iostream object operation io iostream basis streambuf stream buffer istream input stream template ostream output_stream template iomanip manipulator sstream stream string cctype character classiﬁcation function fstream stream ﬁle cstdio printf family cwchar wide character manipulator object manipulate state stream 
language support limit numeric limit climits style numeric scalar limit macro cﬂoat style numeric ﬂoating point limit macro cstdint standard integer type_name dynamic_memory management typeinfo run time type identiﬁcation support exception exception handle support initializ cstddef library language support cstdarg variable length function argument list csetjmp style stack unwinding cstdlib program termination ctime system clock csignal style signal handle cstddef header deﬁne type value_return sizeof   type result pointer subtraction array subscript   infamous null macro 
style stack unwinding setjmp longjmp csetjmp incompatible destructor exception_handling  avoid 
style stack unwinding signal discuss book 
numeric complex complex number operation valarray numeric vector operation numeric generalize numeric operation cmath standard mathematical function cstdlib style random number random random number generator historical reason  ab div find cstdlib cmath rest mathematical function 
standard_library access facility  compatibility cinttype alias common integer type cstdbool bool ccomplex complex cfenv float point environment cstdalign alignment ctgmath type generic math   complex cmath cstdbool header will deﬁne macros bool  true  false 
cstdalign header will deﬁne macro aligna 
equivalent cstdbool  ccomplex  calign  ctgmath approximate facility c
av oid
cfenv header type  ﬂoating point status ﬂag  control mode implementation ﬂoating point environment 
user library implementer allow add subtract declaration standard header 
acceptable try change content header deﬁne macro change meaning declaration header 
program implementation play game conform standard  program rely trick portable 
work today  next release part implementation break
av oid trickery 
standard library facility header include 
write relevant declaration standard conform alternative 
reason implementation optimize compilation base standard header inclusion  optimize implementation standard library facility trigger header 
general  implementer standard header way programmer predict hav know
programmer specialize utility template  swap  non standard library  user deﬁne type 
 ﬁnd  template typename class 
naturally  range
example  standard library overview 
standard library container  vector string support iteration range container adaptor stack
container header  vector  include initializ  user rarely directly 
style approach error handling consistent  
style library consist function  set errno error happen  see 
algorithm operate sequence element return past thelast element find  failure   see 
streams library rely state stream reﬂect error user request throw exception error  see 
standard library component  vector  string  bitset  throw exception error 
standard_library design facility obey  basic guarantee   ev en exception throw  resource memory leak invariant standard library class break 
example  will throw exception function require execute throw 
know facility way throw exception  idea catch root class standard library exception hierarchy exception exception  example  
throw object type speciﬁcally deﬁne exception 
hierarchy standard exception class classiﬁcation exception  exception out_of_range hierarchy attempt framework exception deﬁne standard_library 
logic error error principle catch program start execute test argument function constructor 
run time error error 
exception part standard library exception hierarchy 
howev er  exception throw standard_library exception hierarchy 
know facility way throw exception  idea catch exception 
throw exception point exception noexcept point exception  just exception exception hierarchy 
think smart pointer like keep exception alive long point
way  pass exception function catch throw
implement throw exception thread exception catch 
promise future rely
thread introduce data race 
default constructor  hold  noexcept  copy_constructor  hold store exception copy assignment  hold store exception destructor  virtual 
exception propagate noexcept function 
exception  standard_library facility deal unexpected exception  section 
terminate program  noreturn  noexcept exception throw current thread catch 
call terminate terminate program call terminate handler set call 
correct default terminate program 
fundamental operating_system reason  implementation deﬁne destructor local object invoke terminate call 
terminate invoke result noexcept violation  system allow important optimization imply stack partially unwound 
claim useful write destructor behave differently depend function exit normally exception 
howev er  true stack unwinding initial exception catch 
subtle practical
assert macro find cassert 
error_message produce assert implementation deﬁne contain source ﬁle name file  source line number line contain assert 
assert frequently production code small illustrative textbook example 
mistake assume assert evaluate
example  give usual compiler setup  will catch error debugging  ﬁnal ship product 
way manage assertion  see 
example  write function check ﬁle name open ﬁle like 
assume system  know exception  choice deal error code only question    standard_library facility classify error code  mapping systemspeciﬁc error code portable mapping error code exception  system error type hold value identify error category error  base_class type identify source encode hold value identify error category error  errc enum_class enumerator error code cerrno  basically posix error code section error code error code error  bubble low level error code  handle error represent turn exception 
ﬁrst classify system error code problem  system simply kind error 
type represent simple idea error code  member 
basically simple map integer pointer standard library overview class public  representation   categor type int  const  interface object class derive
reason deﬁne term equivalence  take error error account 
operation system speciﬁc 
case  map mechanism 
typically contain  idea keep only extract need 
manipulate change errno  
standard_library leave error state library unchanged 
speciﬁc error represent class derive class class public  
access pointer reference 
name standard library category  eneric   reference
example  mean  operation permit  eperm posix  generic code state error iostream error  mean  future retrieve  future error 
pass optionally error message string  class  public public  
naturally  code part standard_library 
system speciﬁc pass  potentially portable 
general idea system set speciﬁc  native  code map potentially portable convenience programmer program library need work multiple platform 
example  enum_class     meaning value completely 
integer_value enumerator implementation deﬁne 
future error part standard  ﬁnd standard_library 
detail likely differ
next  need deﬁne suitable error code  class  
example  argument intend 
work repeat 
example  noexcept  template struct  public  interesting design  separate enum implement mapping
system support posix like facility  valid generic  category  
posix macro integer errc enumerator type errc 
container overview container representation  element requirement 
operation overview member type  constructor  destructor  assignment  size capacity  iterator  element access  stack operation  list operation  operation 
container vector  list  associative container 
container adaptor stack  queue  
advice introduction stl consist iterator  container  algorithm  function_object part standard_library 
rest stl present 
section summarize type container brieﬂy outline property 
operation container summarize 
sequence container access half open sequence element 
associative container associative lookup base key 
addition  standard_library type object hold element offer facility sequence container associative container  
container adaptor specialized access underlie container 
container sequence element facility container 
stl container sequence associative container resource_handle copy move operation 
operation container basic guarantee ensure interact properly exception base error handling 
sequence container vector contiguously allocate sequence ts  default choice container list doubly link list need insert delete element move exist element singly link list ideal empty short sequence deque double end queue cross vector list  slow template argument container acquire release memory  
example  template typename typename 
container deﬁne vector  list  deque 
sequence container contiguously allocate  vector link list  notation 
solid reason vector 
note vector operation insert erase remove  allow vector grow shrink need 
sequence small  vector excellent representation data_structure require list operation 
insert erase vector  move 
contrast  list associative container move insert erase 
empty take only word 
surprisingly list empty rest short 
default order criterion key  
sequence container  template argument container acquire release memory  
template argument default const map set 
hash function type  equality test  type unordered map unordered map duplicate key allow unordered set unordered set duplicate key allow container implement hash table link overﬂow 
default hash function type  type 
default equality function type  type  equality function decide object hash code equal 
associative container link structure tree node notation pair const map set 
sequence set  map  multimap order key value 
unordered container need ordering relation  hash function 
sequence unordered container guarantee order 
container adaptor container specialized interface container  container adaptor container type cmp priority queue ts  cmp priority function type queue stack default priority function  cmp  
default container type  queue stack 
data_type require standard container 
refer  interesting stl container ﬁxe size build array  contiguous type siz member_function array ﬁxe size array contiguous type like build array  problem solve tr  contiguously allocate sequence character type text manipulation operation   concatenation + +  typically optimize require free store stre char wstre valarray numerical vector vector operation  restriction encourage high performance implementation  only vector arithmetic bitset set bit set operation  vector bool specialization vector compactly store bit  tr character trait 
prefer container  vector  string  array  array choice 
implicit array pointer conversion need remember size build array major source error  see 
prefer standard string string style string 
pointer semantic cstyle string imply awkward notation extra work programmer  major source error memory leak 
standard speciﬁes container interface complexity requirement 
implementer will choose cleverly optimize implementation meet general requirement common
addition need manipulate element  handle  will hold allocator 
vector  element data_structure likely array  rep element free space vector  vector will hold pointer array element  number element  capacity number allocate  currently unused slot equivalent 
like vector  string grow free space  allocate avoid repeat reallocation  rep string  character free space like build array  array simply sequence element  handle  element_array  imply local array free store allocate array member class imply free store operation 
container copy element copy_constructor copy assignment  result copy equivalent object 
roughly mean test equality devise value object deem copy equal original 
word  copy element work like ordinary copy int 
similarly  move_constructor move assignment conventional deﬁnition move semantic 
addition  possible swap element usual semantic 
type copy move  standard library swap will work 
detail element requirement scatter standard hard read    basically container hold element type will work long requirement container element meet algorithm speciﬁc requirement element order  
violation rule standard container detect compiler  cause unexpected behavior 
example  assignment operation throw exception leave partially copy element
bad design violate rule standard basic guarantee 
element invalid state cause trouble later 
copying object reasonable  alternative put pointer object container object
obvious example polymorphic type  
example  vector shape vector vector shape preserve polymorphic behavior 
operation apply container  sort merge 
default  operator deﬁne order 
suitable  programmer alternative  
ordering criterion deﬁne strict weak ordering 
informally  mean equality deﬁne transitive 
ordering criterion cmp think require  irreﬂexivity  cmp  false 
transitivity equivalence  deﬁne  
last rule allow deﬁne equality  
example  decide sort fruit comparison case sensitive 
deﬁne function_object  comparison invoke pair string  class nocase 
associative container will work people expect style string key 
work properly  operation compare base lexicographical order
default right  programmer supply comparison criterion 
mechanism pass equality test 
programmer supply comparison cmp  equality test comparison 
example  user supply comparison  user supply comparison cmp user equality operation type value type associative container algorithm comparison 
look expensive  library check equality case only single call cmp need  compiler optimize away double check 
equivalence relationship deﬁne equality practical
example  associative container compare key equivalence test  
imply equivalent key equal 
example  multimap case insensitive comparison comparison criterion will string last  last  last  last  last equivalent  string deem
allow ignore difference insigniﬁcant sort 
standard_library deﬁne namespace present utility 
question mark simpliﬁcation  include operation only container 
stl container 
associative container set 
insert  erase  emplace  operation 
  rbegin  rend  crbegin   size 
associative container    
operation replicate simply reduce number arrow 
bucket interface 
meaningful  access operation exist version  const nonconst object 
standard library operation complexity guarantee  standard container operation complexity list front back iterator vector const run list const const const bi const const deque const const const run stack const queue const const 
bi multimap bi set bi multiset bi string const run array const run build array const run valarray const run bitset const  front  operation refer insertion deletion ﬁrst element 
similarly   back  operation refer insertion deletion last element  list  operation refer insertion deletion necessarily end container 
iterator column   run  mean  random access iterator    mean  forward iterator   bi  mean  bidirectional iterator  
const entry mean operation take amount time depend number element container  conventional notation constant time 
mean operation take time proportional number element involve 
sufﬁx occasionally signiﬁcant extra cost incur 
example  insert element list ﬁxed cost list const  operation vector involve move element follow insertion point list 
occasionally  element vector relocate add 
big notation conventional 
add beneﬁt programmer who care predictability addition average performance 
conventional term amortize linear time 
naturally  constant large  dwarf small cost proportional number ele mean  fairly  moderately large value  log binary logarithm  close constant time 
example  logarithm example people who care cost take close look 
understand element count
howev er  message clear  mess quadratic algorithm large value
measure complexity cost upper bound 
measure exist give user guidance expect implementation 
naturally  implementer will try important case 
note big complexity measure asymptotic  require element complexity difference matter 
factor  cost individual operation element  dominate 
example  traverse vector list complexity 
howev er  giv en modern machine architecture  next element link list expensive next element vector element contiguous 
similarly  linear algorithm take signiﬁcantly signiﬁcantly time long time element detail memory processor architecture 
just trust intuition cost complexity measure  measure 
fortunately  container interface similar comparison easy code 
size operation constant time operation 
note size  want know number element  count cost 
optimize space store size pointer last element 
string estimate long string 
short string optimization  operation short string  character constant time 
entry stack queue reﬂect cost default implementation deque underlying container  
type meaningful 
example  array vector 
container call  vector double map string  int hav container  default  default allocator  default constructor  empty container 
  initialize copy allocator associative container section constructor  destructor  assignment container  default  default allocator elem  
initialize element  allocator destructor  destroy element release resource copy assignment  copy element 
assign elem additional constructor associative container 
note assignment copy move allocator 
target container retain old container  allocate space 
remember constructor element copy throw exception perform task 
potential ambiguity initializer discuss 
size initializer kind iterator 
container large  pass reference 
resource_handle  return implicitly move efﬁciently 
similarly  move argument want aliase 
example  stl container 
erase change size capacity  move location 
imply iterator pointer reference invalid  point old element location 
example  see 
iterator element associative container  map only invalidated element point remove container  
contrast  iterator element sequence container  inv alidate relocate  resize  reserve  element point move container  erase insert element low index 
tempting assume reserve improve performance  standard growth strategy effective performance rarely reason reserve 
see reserve way increase predictability performance avoid invalidation iterator 
associative container  order base container comparison criterion default iterator point ﬁrst element 
simple way range implicitly begin end 
example     need know position element container need refer
issue important  examine implementation 
associative container map take argument key type  position 
run memory copy_constructor throw exception 
effect container  strong guarantee offer 
note return value 
copy_constructor throw exception seriously complicate implementation 
addition  list deque equivalent operation start front sequence 
perennial favorite grow container preallocation chance overﬂow  similarly 
add element ﬁrst  last 
erase ﬁrst  last erase element insert function  result   point last insert 
erase function  point follow last erase 
container contiguous allocation  deque  insert erase cause element move 
iterator pointing move invalid 
move position insertion deletion point element move exceed previous capacity 
operation  insert  operate identiﬁed iterator 
operation implement general way stl container ﬁnde previous give only iterator 
operation   operate identiﬁed iterator 
similarly  unordered container hint plain  emplace 
compare container operator   element compare equivalent operator generate  
swap operation exchange element allocator 
suggest alternative build array  think twice 
giv en importance section take second look emphasis operation
template argument member type deﬁne like template typename typename allocator class 
standard specify capacity increase exceed  add half common 
careful reser ve read
surprised ﬁnd essentially call reser ve measurably affect performance 
default growth strategy work just estimate  try improve performance reser ve 
increase predictability reallocation delay prevent invalidation pointer iterator 
notion capacity allow iterator valid reallocation actually happen 
read letter buffer keep track word boundary  char chars  input  buffer  character constexpr int  
reserve here  pointer word invalidate cause relocation 
invalidated   mean pointer undeﬁned behavior 
point certainly element point relocation 
ability grow operation imply low level cstyle malloc realloc unnecessary tedious error prone 
element compactly store  element memory overhead 
amount memory consume vec type roughly 
byte  insigniﬁcant large vector 
traversal fast 
next element  code indirect modern machine optimize consecutive access structure 
linear scan element  ﬁnd copy  close optimal 
algorithm vector  sort  efﬁcient 
easy underestimate beneﬁts 
example  doubly link list  list  incur word element memory overhead link plus free store allocation header  traverse easily order magnitude expensive traverse contain equivalent datum 
effect spectacular surprising suggest test 
represent dimensional matrix 
obvious alternative  
vector  double access style double subscripting  
speciﬁc matrix type   store element contiguously memory layout double look like memory layout look like construct double  need constructor call free store allocation operation 
access element  need double indirection 
construct  need constructor call free store allocation 
access element  need single indirection 
once reach element row  need indirection access successor  access double twice costly access 
algorithm require high performance  allocation  deallocation  access cost imply link structure double problem 
double solution imply possiblity row size 
case advantage  simply opportunity error burden testing 
problem overhead bad need high dimension  compare number add indirection allocation double 
summary  note importance compactness data_structure underestimate compromise 
advantage logical performance
combine tendency overuse pointer widespread problem 
example  development complexity  run time cost  memory cost  opportunity error implementation dimensional structure row implement independent object free store  
allow resize enable efﬁcient move semantic 
occasionally put disadvantage compare data_structure build array rely store element separately handle 
keep sequence element stack object give performance advantage  just disadvantage 
deal properly initialize object 
allow simply rely proper destruction element 
occasionally put disadvantage compare data_structure build array allow uninitialized element 
example  need initialize element read 
general mechanism store_value 
assumption relationship value_store
char  string hello  world 
sort precede space sense 
contrast  string intend hold character sequence 
relationship character assume important 
example  rarely sort character string destroy mean 
string operation reﬂect    ﬁnd  know  cstyle string zero terminate 
implementation string reﬂect assumption way string 
example  short string optimization pure pessimization short string  minimize free store worthwhile 
suspect require massive empirical study sure 
insert list delete element list  location element list affect 
iterator refer element affect 
advance similar operation navigate list 
list traverse iterator  list bidirectional iterator forward iterator name type list 
default  list element individually allocate memory include predecessor successor pointer 
compare vector  list memory element least word element  traversal iteration signiﬁcantly slow involve indirection pointer simple consecutive access 
singly link list 
think data_structure optimize empty short list typically traverse start beginning 
compactness  size  empty take just word memory 
need know number element  just count
element count expensive  maybe container 
exception subscripte  capacity management  size  stl list member type operation offer vector 
addition  list speciﬁc list member_function  add lst copy move ﬁrst element 
sort lst order reverse order element lst  noexcept oppose general remove unique algorithm  member algorithm
merge algorithm stable  equivalent element keep relative order 
insert element element remove 
splice remove splice remove operation stable  preserve relative order element equivalent value 
come variant  
order associative container lookup base ordering criterion  default 
implement balance binary tree  red black tree 
unordered associative container lookup base hash function 
implement hash table link overﬂow 
finally  map set  order unordered  come variant  
internally  map
see graphical representation 
map comparison criterion typically key search balanced tree operation  apply hash function key ﬁnd slot hash table operation hash function 
find subscript operation   default_value insert 
example  string  string dictionary  body water   inser assign cout   read value seal dictionary  print  empty string enter value seal return result lookup 
notation verbose 
emplace    depend quality optimizer  efﬁcient 
try insert unchanged 
want single 
print element  apple  string  int like string  int mm           
imply extra traversal
  sorted sequence 
tend think set separate 
try modify succeed  underlying mechanism ﬁnde element break 
simple difference order container associative container share operation 
guarantee element print order insertion 
default  hash hashing compare key 
general primary template hash hav deﬁnition 
user type deﬁne hash need 
common type  string  standard hash specialization user need type hash supply standard_library string wstre style string bool character integer ﬂoating point type pointer bitset hash function  specialization hash type function callable argument type return 
call hash function give result  ideally result uniformly distribute value minimize chance 
potentially bewilder combination template argument type  constructor  default unordered container 
fortunately  pattern  hf  eql   construct bucket  hash function hf  equality function eql  
here  element count empty 
number element will number element   
number element will number element initializer list 
finally  copy move_constructor  equivalent constructor supply allocator   copy move_constructor  construct  default construct give allocator explicit  construct give allocator
try like  string  int um  ok equality function naturally  user deﬁne hash function 
technique serve need 
here  present version  start explicit end simple 
simple record type  
decltype avoid explicitly repeat type hf eq 
hav initializer list handy  give initial record   eq  bit easy focus equality operation 
want avoid separate deﬁnition hf eq point try lambda  record  
point name unnamed lambda function deﬁne locally next
here  incur overhead prefer avoid heavily
version messy prefer lambda  auto const record return   auto const record const record return 
default hash obtain exclusive pretty
rush homemade function experimentation 
key value bucket  see 
programmer examine set table know number bucket  
example  capacity element  
note set  call rehash  call reserve expensive operation bad case realistic scenario typically cause 
bucket interface allow experimentation function  poor will lead large key value 
will lead key map value 
container adaptor intend only specialized interface 
stl container adaptor offer direct access underlie container 
offer iterator subscripte 
technique create container adaptor container generally useful nonintrusively adapt interface class need user 
partial implementation  template typename typename deque class stack 
interface container type pass template argument 
eliminate operation container interface  conventional name  top  push  pop 
addition  usual comparison   nonmember swap 
element add underlying container 
overﬂow  long memory machine container acquire 
hand  underﬂow  
default  relie allocator underlie container 
handful constructor supply
declaration like declaration addition deal comparison object couple constructor initialize sequence  template typename typename  typename typename  class 
order element equal come head deﬁne 
tw element equal high 
keep element order free  need expensive
useful way implement tree structure keep track relative position element 
give cost push pop 
certainly implement heap 
algorithm sequence  policy argument  complexity 
nonmodifye sequence algorithm 
modify sequence algorithm copy  unique  remove replace  rotate   partition  permuta 
sort search 
min max 
advice introduction present stl algorithms 
stl consist iterator  container  algorithm  function_object part standard_library 
rest stl present 
operate sequence deﬁne pair iterator input single iterator output 
copy  comparing   sequence  ﬁrst represent pair iterator   second just single stl algorithms iterator   start sequence hold sufﬁcient element algorithm  example  element ﬁrst sequence   
algorithm  sort  require random access iterator  ﬁnd  only read element order forward iterator 
algorithm follow usual convention return end sequence represent  find  
mention algorithm 
algorithm  standard library algorithm user  important  
name speciﬁc operation  document interface  speciﬁes semantic 
widely know programmer 
correctness  maintainability  performance  immense advantage compare random code  speciﬁed function dependency 
ﬁnd write piece code loop  local_variable complicated control structure  code simpliﬁed part function algorithm descriptive name  deﬁne purpose  deﬁne interface  welldeﬁne dependency 
numerical algorithm style stl algorithm present 
iterator base interface perfect  approximation ideal 
example  iterator base interface directly represent notion sequence  lead possibility confusion difﬁcultie detect range error  
container version general version iterator directly 
container sort sort half container  container copy write output_stream 
complementary approach deﬁne range  sequence  abstraction allow iterator 
class hold datum exactly class container class stl 
container sort  container copy  example  call template argument cont container   will accept sequence begin end meet rest requirement algorithm 
standard library container return iterator 
return container result rare example  pair 
reason stl design  direct support move semantic 
obvious efﬁcient way return datum algorithm 
programmer explicit indirection  pointer  reference  iterator clever trickery 
today  template typename cont  typename pred 
choice standard library restrictive insufﬁcient  extension stl viable superior alternative just write  random code  work problem 
note stl algorithm return  argument container 
argument stl iterator  algorithm knowledge datum stl algorithms structure iterator point
iterator exist primarily isolate data_structure operate  vice versa 
plain  version perform action conventional operation  
version take key operation argument example  template class iter 
greatly increase ﬂexibility standard_library range
usual algorithm implement overloaded function template single function template default argument 
example  template typename run  typename default template argument 
difference function default argument observe take pointer function 
think variant standard simply  version default predicate  roughly halve number template function need remember 
case  argument interpret predicate value 
example  bool int  auto    general  compiler disambiguate example  programmer confuse ev en case compiler disambiguate 
simplify task programmer  sufﬁx algorithm take predicate 
reason distinguish name minimize ambiguity confusion 
 section policy argument 
state  assume policy argument pass algorithm modify element 
try modify element predicate  
sneaky  modify sequence  insert remove element name container iterate  iteration obscure way 
avoid accident  pass argument predicate const reference 
similarly  predicate carry state change meaning operation implementation algorithm copy predicate  rarely want repeat predicate value give result 
function_object pass random number generator  carry mutable state 
sure algorithm copy  keep function_object argument mutable state object access pointer reference 
sort search container style string 
linear   length input sequence 
rest asymptotic complexity  know measure idea implication 
example   quadratic algorithm choice 
example  traverse list slow stl algorithms traverse complexity case linear 
complexity measure substitute common sense actual time measurement  tool ensure quality code 
typically  user supply operation algorithm change value element tend predicate modify argument 
example  stl algorithms 
end speciﬁe second sequence  
assume least element second sequence 
technique standard_library  pair sequence operation pair element 
implement mismatch like 
second sequence find  iterator matching element sequence return 
usual  end sequence represent   example  
search useful algorithm ﬁnde substring generalize sequence 
ﬁnd look just single element 
produce output transformation input base user supply operation 
copy family algorithm copy element sequence
follow section list version copy combine algorithm  
move element  
read sequence  need iterator begin end 
write  need only iterator write
take care write end target 
way ensure inserter grow target need 
example  section 
copy sequence overlap end output sequence input sequence 
like standard algorithm  unique operate iterator 
know container iterator point modify container 
only modify value element 
imply unique eliminate duplicate input sequence way naively expect 
eliminate duplicate 
algorithm remove element generally come form  plain  version reorder element way similar unique copy version produce way similar 
eliminate duplicate container  explicitly shrink template class 
remove algorithm  remove  element end remove element value  remove element  
copy rev erse order replace algorithm assign select element  section replace element replace element copy  replace element copy  replace element algorithm change size input  remove leave size input unchanged 
like unique  remove  move element left 
shufﬂe  element random order  random  deﬁne distribution produce random number generator 
default  shufﬂes uniform distribution random number generator 
choose permutation element stl algorithms permutation chance choose 
want distribution random number generator  supply
call   generator
previous permutation  comparison permutation  compare equal 
permutation  compare equal  element comparison 
permutation generate combination element
example  permutation abc acb  bac  bca  cab  cba 
next permutation find assume set permutation lexicographically sorted 
permutation exist  return true  transform small permutation  ascendingly sort abc example  return 
ﬁll family algorithm way assign initialize element 
example  random number generator randint urand  
generate ﬁll function assign initialize 
need manipulate raw stl algorithms storage  turn region memory object deﬁne type state  uninitialized version present memory 
uninitialized sequence only occur low level programming  inside 
swap algorithm exchange object  
pointer point least element 
swap algorithm possibly simple arguably crucial algorithm standard_library 
part implementaton widely algorithm 
implementation example standard library version present 
comparison default  equivalence value determine require 
sort  sort criterion addition plain sort  variant  section sort search sort maintain order equal element 
sort order  
sort algorithm require random access iterator 
name  return iterator  bool 
standard list random access iterator  list sort speciﬁc list operation copy element  sort copy element back list  template typename list 
basic sort efﬁcient average 
stable sort require  algorithm improve tow ard system sufﬁcient extra memory 
function extra memory 
relative order element compare equal preserve sort 
only ﬁrst element sorted sequence need 
case  sense sort sequence only need ﬁrst part order  partial sort 
stl algorithms plain  algorithm put element range order 
algorithm produce element  low number element output sequence number element input sequence 
need specify start end result sequence determine element need sort 
example  void book sales ﬁnd top book 
target random access iterator  sort directly
number element desire sort small compare total number element  algorithm signiﬁcatly fast complete sort 
complexity approach compare sort 
algorithm sort only nth element proper place element compare nth element place sequence 
example  int  
replace example seed random number generator sequence   algorithm useful people economist  sociologist  teacher who need look median  percentile 
sort style string require explicit sort criterion 
reason style string simply pointer set convention pointer compare machine address character sequence 
example  section sort search 
sort style string string value address need proper sort predicate 
example  sort  const  const return   standard library function strcmp 
note supply sort style string 
simplify user interface  standard_library compare element 
once sequence sorted  binary search determine value sequence 
example  stl algorithms 
return bool value present 
ﬁnd  want know element value sequence 
element give_value sequence  need ﬁnd ﬁrst element 
algorithm ﬁnde range equal element   algorithm ﬁnde range 
 last  ﬁnd return iterator ﬁrst key great last great exist 
way reporting failure 
mean algorithm determine insert sorted sequence sequence remain sorted  just insert second returned pair 
curiously binary search algorithm require random access iterator  forward iterator sufﬁce 
merge algorithm combine order sorted sequence  comparison sorted sequence  comparison merge algorithm take kind sequence element type 
example  section 
output         set algorithm algorithm treat sequence set element basic set operation 
input sequence suppose sort output sequence sorted 
element   comparison 
little test produce   ceqrtvwxz heap heap compact data_structure keep high value ﬁrst 
think heap representation binary tree 
heap algorithm allow programmer treat random access sequence heap  ready heap 
large extract read 
way understand change user read only write only index current heap 
heap remove swap 
point heap fast addition element fast access high value 
heap implement priority queue 
lexicographical compare rule order word dictionary 
string compare sequence character 
example  stl algorithms 
value comparison useful context   small 
example  int  int  section min max 
acsii character set machine  little test produce  advice stl algorithm operate sequence  
iterator model iterator category  iterator trait  iterator operation 
iterator adaptor reverse iterator  insert iterator  move iterator 
range access function 
function adaptor bind   function 
advice introduction present stl iterator utility  notably standard library function_object stl consist iterator  container  algorithm  function_object part standard_library 
iterator glue tie standard library algorithm datum 
conversely  iterator mechanism minimize algorithm  dependence data_structure operate  stl iterator 
iterator vector map list 
sequence deﬁne pair iterator deﬁne half open range end element  end iterator  point sequence  end point last sequence 
read write 
note empty sequence end  empty sequence iterator 
read sequence  algorithm take pair iterator  iterate end reach  
algorithm search sequence return end sequence find   example  auto  
case  programmer responsibility write end sequence 
example  template typename iter 
standard library implementation range check throw exception last call forward rely portable code  implementation check 
simple safe alternative insert iterator 
input iterator  iterate forward read repeatedly
compare input iterator
kind iterator istream offer  see 
output iterator  iterate forward write once only
kind iterator ostream offer  see 
forward iterator  iterate forward repeatedly read write element const element repeatedly
forward iterator point class object  refer member 
compare forward iterator
kind iterator offer 
bidirectional iterator  iterate forward backward read write element const element repeatedly
bidirectional iterator point class object  refer member 
compare bidirectional iterator
kind iterator list  map  set offer 
random access iterator  iterate forward + backward read write element const element repeatedly 
random access iterator point class object  refer member 
subscript random access iterator  add integer +  subtract integer
ﬁnd distance random access iterator sequence subtract
compare random access iterator      
kind iterator offer 
logically  iterator organize hierarchy stl iterator iterator  input iterator   single read  output iterator single write forward iterator repeat read write bidirectional iterator random access iterator  +  +       iterator category concept class  hierarchy class hierarchy implement derivation 
need advance iterator category  directly indirectly 
category random access iterator  derive  deque  array  build array  string section iterator trait iterator tag type select algorithm base type iterator 
example  random access iterator directly element  template typename iter 
typically  advance will inline ensure run time overhead introduce tag dispatch technique 
variant technique pervasive stl 
key property iterator alias template typename iter 
error wait happen 
call read argument error 
compiler catch error_message voluminous obscure 
write  template typename iter 
idea ﬁnd property iterator  look  iterator
avoid directly refer just implementation detail  deﬁne alia 
example  template typename typename std      template typename typename std      want know type difference iterator point sequence  choice  
iterator template simply bundle key property iterator struct convenience iterator implementer default  section iterator trait template typename cat  typename typename  typename  typename 
complicated iterator  likely efﬁcient 
follow operation work iterator implement  work efﬁciently random access iterator see stl iterator + least input iterator 
case  random access iterator  algorithm will take step 
iterator iostream 
sequence allow bidirectional access  traverse sequence reverse order 
iterator call 
iterate end sequence deﬁne underlie iterator beginning sequence 
half open sequence  past end start sequence  
fundamental relation reverse iterator correspond iterator 
vector  point last element  
sequence view like  section reverse iterator deﬁnition look like template typename iter class  public iterator iter  iter  iter  pointer iter  iter 
iter random access  iter  +  
example  stl iterator 
next move iterator like + wouldn  work bidirectional iterator  
reverse iterator allow algorithm way view sequence reverse order 
example  ﬁnd last occurrence element sequence  apply ﬁnd reverse sequence  auto  last occurrence 
iterator pointing element reverse iterator  hav return 
howev er  container support iterator  prev
rev erse iterator perfectly ordinary iterator  write loop explicitly  
early deﬁnition  version require least bidirectional iterator 
imply possibility overﬂow consequent memory corruption 
vi element  trouble 
iterator  standard_library solution form inserter  write inserter insert sequence overwrite existing 
container grow time value write insert iterator 
inserter simple efﬁcient useful 
insert iterator  
inserter construct call helper function  
iterator pass inserter iterator container 
sequence container  imply bidirectional iterator insert 
example  inserter iterator insert 
associative container  iterator only hint insert  forward iterator  acceptable 
inserter output iterator   inserter container point  point  copy_constructor  copy copy assignment  copy move assignment  point point stl iterator point next  value value point next  value old value insert insert increment differ constructor don  require iterator 
example  string  read inserter 
move iterator iterator helper function  move iterator construction function pointing input iterator move iterator operation iterator
example  simply return rvalue_reference point 
iterator  standard_library nonmember begin end function container  function simple  section range access function template typename auto  template typename auto  
common comparison criterion  predicate function_return bool  arithmetic operation 
functional  standard_library supply common function_object   mean type 
note evaluate argument 
give function set argument  bind produce function_object call remain  argument  function 
example  double double  auto  
deal standard_library pair adaptor  noexcept 
ref need pass_reference argument thread thread constructor variadic_template 
result bind assign variable declare auto 
bother specify return_type call bind 
useful return_type bind vary type function call argument value_store 
return_function object large hold value bind parameter 
want speciﬁc type argument require type result return 
specify function 
bind resemble lambda 
want assign result bind variable speciﬁc type  standard library type 
speciﬁe speciﬁc return_type speciﬁc argument type 
 point contain object   noexcept empty 
function rare case want examine simply call intend 
standard library type hold object invoke call operator    
object type object 
example  int return  
obviously  function useful callback  pass operation argument 
bit shift  logical cyclic shift
imply bit  fall end  position default_value 
note unsigned type  possible shift negative number 
imply shift large positive value  leave bit value 
compiler warn
support common operation    tr  default tr  unsigned long corresponding
bit value 
bit value 
avoid nonobvious conversion  name operation prefer conversion operator 
value signiﬁcant bit represent unsigned long  throw  argument ﬁt 
fortunately  template argument return default 
print bit represent leave right  signiﬁcant bit leftmost  argument give output example  simple directly output operator  
 element bool high index high address  bool  position  exactly opposite layout
direct support convert integer string bool 
bool  expect operation single bit efﬁcient equivalent operation 
impossible completely faithfully mimic behavior build reference proxy  try subtle rvalue lvalue distinction bool 
pair hold value 
tuple hold zero value 
pair useful know statically exactly value 
tuple  deal possible number value 
similarly  copy move operation exist correspond operation element
element member directly read write 
pointer who object 
look just pointer  hav idea who suppose delete object point
memory  ﬁnd  smart pointer  express ownership  
object hold pointer 
obligation destroy object point contain pointer 
copy copy_constructor copy assignment 
store pointer delete object point associated deleter destroy thread control leave scope  
pass ownership dynamically allocate_memory function 
return dynamically allocate_memory function 
store pointer container think represent simple pointer  contain pointer  deleter pointer    object object deleter destroy  deleter call destroy object 
deleter represent mean destroy object 
deleter memory pool return object memory pool destroy depend pool deﬁne 
default  deleter  version delete 
doesn  store default deleter 
specialization rely empty base optimization 
way support general resource management 
contain directly accessible user 
exchange value  noexcept 
note  offer copy_constructor copy assignment 
meaning ownership  hard deﬁne
feel need copy  
possible build array 
style illustrate explicit ownership typically motivate ownership issue 
see discussion non const reference 
balance  notation modiﬁes error prone notation
unlikely signiﬁcant program  choice style reason code quality 
here simple example deleter guarantee release datum obtain program fragment malloc 
piece code need access datum exclusive ownership sense responsible destroy object 
kind count object point delete count zero 
think share structure pointer  object count    count deleter object deleter delete share object count zero 
default deleter usual delete invoke destructor  deallocate free store 
example  node general graph algorithm add remove node connection node edge 
obviously  avoid resource_leak  node delete only node refer
try  section 
give answer question node point  hard require add  housekeeping  code 
plug garbage collector  neg ative performance implication graph only small part large application datum space 
bad  container contain non memory resource  thread handle  ﬁle handle  lock   garbage collector leak resource 
here  node destructor implicitly generate destructor will ﬁne delete edge 
destructor edge invoke  node point delete edge last pointer
just pass pointer owner cheaply 
count pointer return_value factory function like  upgrade
thoughtlessly replace pointer attempt prevent memory leak  panacea cost  
circular link structure cause resource_leak 
need logical complication break circle  example  
object share ownership tend stay  live  long scope object cause high average resource usage 
share pointer multi threaded environment expensive need prevent data race count 
destructor share object execute predictable time  algorithms logic update share object easy wrong object share 
example  lock set time destructor execution 
ﬁle open 
general  object live  state unpredictable point execution 
single last node keep large data_structure alive  cascade destructor call trigger deletion cause signiﬁcant  garbage collection  detrimental real time response 
represent share ownership useful  essential  share ownership ideal  carry cost independently represent sharing 
simple object deﬁnite owner deﬁnite  predictable life span 
choice  memory resource 
prefer ordinary scope object object heap
fairly conventional set operation  contain pointer  count sp default constructor  nullptr   noexcept sp 
like deleter like deleter allocator  noexcept  noexcept  noexcept pp exchange value  noexcept addition  standard_library helper function  object type construct argument arg  allocate  args object type construct argument arg  allocate allocator section  nullptr  nullptr 
deleter type deleter  nullptr  noexcept os write ostream os example  
note   deleter member_function 
access object  convert member_function lock 
allow access object 
need access only exist 
delete time 
weak pointer break loop data_structure manage 
think structure pointer  potentially share object count structure object  memory resource   wp  count deleter weak count object weak count  need keep count structure alive last object object destroy 
destructor  effect  pp copy  decrease wuc set pp   pp noexcept 
standard way alternative prefer 
quality implementation issue programming environment issue 
simpliﬁes programming eliminate kind error 
rare case  write memory allocator  implement container  deal directly hardware  direct uninitialized memory  know raw memory  essential 
addition standard allocator  memory header family function deal uninitialized memory 
share dangerous occasionally essential property type_name refer space sufﬁcient hold object type properly construct object type
function intend primarily implementer container algorithm 
example  reserve resize easily implement function 
temporary space allocate operation initialize location actually need 
library function allocate deallocate uninitialized space  template typename  allocate  initialize template typename void  deallocate  destroy operation try allocate space object type
succeed allocate memory  return pointer ﬁrst uninitialized space number object type will ﬁt space  value zero 
idea system keep space ready fast allocation request space object give size yield space
yield way optimistically ask happen
buffer obtain free call 
just allocate construct  free destroy 
low level likely optimize manage temporary buffer  alternative obtain long term storage 
algorithm assignment copy construction writing 
uninitialized memory target algorithm 
unfortunate assignment signiﬁcantly expensive initialization  initialize overwrite waste 
solution memory initialize assign  memory resource template typename typename class  public  void  void  void  void 
contrived example see wrong allocate default initialized storage string assign test string 
note operator don  try write range 
example  will work 
don  mess uninitialized memory absolutely
time duration   clock  time trait 
compile time rational arithmetic 
type function type trait  type generator 
minor utility move forward  swap  relational operator  compare hash 
advice introduction standard_library utility component  widely useful easily classiﬁe part major standard library component 
chrono facility  explicitly qualify chrono   add directive  namespace  want time depend timing 
example  standardlibrary mutexe lock option thread wait period time duration wait give point time 
time facility originate stringent need high energy physic 
turn time  complicated deal think 
example  leap second  clock accurate adjust possibly cause time report clock backward  clock differ precision 
language facility deal short time span  nanosecond take signiﬁcant time 
chrono facility simple  facility simple 
style time utility find 
copy constructor  value  convertible rep narrowing  constexpr value  representable rep number clock tick constexpr deﬁne speciﬁc value 
example  section 
allow like allow addition unknown si unit length meter 
comparison  constexpr comparison  constexpr comparison  constexpr 
convert type implicit conversion representation  constexpr standard_library convenience alias si unit section 
precision implementation dependent 
chrono  standard_library basic interface clock 
class represent  wall time  obtain system real time  class 
datum function_member static 
don  explicitly deal object 
type  type steady 
determine basic property clock like 
run system  produce    steady system clock give result 
conversion rule depend representation ﬂoate point rounding acceptable template typename rep struct  rep  standard value 
imply   hold value truncation error 
howev er  ﬂoating point duration round error 
standard_library compile time representation time time point template 
basic idea encode numerator denominator rational number value template argument 
denominator nonzero 
chrono  ﬁnd conventional notation  + rational arithmetic time 
similarly  help express unit value  standard_library common si magnitude name  yocto  conditionally support zepto  conditionally support atto  
function primarily compile time support simple  simple  metaprogramming 
name self explanatory 
primary predicate test fundamental property void 
type trait return value boolean 
access value  sufﬁx   value 
example  template typename 
ideally  library function standard_library type trait 
type_function inquire combination fundamental property  reference lvalue rvalue_reference 
composite type predicate simply offer notational convenience 
example  true lvalue reference rvalue_reference 
example  template typename class cont 
optimization unnecessary  likely optimize way 
type property predicate access check depend
consistently give result expect member friend 
example  class public  
will write report destructible copy assignable 
want eliminate operation  delete rely private 
like sizeof  property query return numeric type argument  rank array  number dimension  array  number element nth dimension  extent example  template typename 
type relation predicate type  type
example  template typename 
access type  sufﬁx   type 
example  template typename typename 
ideally  support library alias systematically standard library type transformer 
type_function add remove reference important writing template work argument reference
example  utility template typename 
pointer type pointing arbitrary type  ﬁnd point type  pointer type  point type  example  section type generator template typename 
useful ﬁnd operation result addition value type 
function ﬁnd common type 
common obviously utility template typename struct  
curiously apply nonmember function 
return rvalue typename    return_value function unusual standard_library actually function user need wrap 
return value
intent variable need 
example  template typename  siz 
see deﬁnition
ﬁt large grouping 
utility  ﬁnd useful small function  forward rvalue  lvalue  noexcept 
move tell compiler object will anymore context  value move empty object leave
simple example implementation swap 
forward produce rvalue rvalue only  
assert programmer who clever call second version explicit template argument lvalue 
standard library example 
move intent steal representation  object move operation  forward forwarding 
forward safe  move mark destruction move care 
only safe move destruction target assignment 
obviously guarantee  ideally class inv ariant leave intact 
rely know 
utility  standard_library general swap specialization build array  
expose perfectly general template find argument dependent lookup apply type inappropriate 
safe approach place directive local scope 
create  speciﬁcally allow comparison hashing 
character classiﬁcation classiﬁcation function  character trait 
string string vs
style string  constructor  fundamental operation  stre numeric conversion  stl like operation  ﬁnd family  substring 
advice introduction standard_library offer character classiﬁcation operation cctype  string associated operation string  regular expression match regex  support style string cstre 
handling character set  encoding  convention locale discuss 
simpliﬁed string implementation present 
addition  standard_library useful function remove case difference  
character classiﬁcation function sensitive locale  
equivalent function locale locale 
reason character classiﬁcation function useful character classiﬁcation tricky
example  novice write   character verbose likely slow islower low ercase character guarantee character contiguous code space 
standard character classiﬁcation easy convert locale  islower  danish low ercase character danish note danish lowercase character english  initial explicit test ﬂat wrong 
efﬁciency improve implementation simpliﬁed type hav user deﬁne copy operation 
standard string require type character type pod 
help string simple efﬁcient 
property character type deﬁne
specialization typename struct  deﬁne std  standard present string 
general property  only specialization character type
char  struct char operation throw exception 
copy + +  + + overlap  copy + +  + + overlap  string length   point ﬁrst occurrence + nullptr eof value represent end compare eq simply 
example  case insensitive deﬁne eq  return true 
copy protect overlap range  fast move 
compare function lt eq compare character 
return int  represent exact match  negative number mean ﬁrst argument come lexicographically second  positive number mean ﬁrst argument come second 
function implementation low level 
element character store contiguously  low level input operation safely sequence character source target 
offer strong guarantee operation throw  leave unchanged 
string host operation 
like container  mean base_class offer move semantic efﬁciently return value 
style string assume familiarity example book  start example contrast style string popular programmer primarily familiar style 
email address concatenate user identiﬁer domain name  
least gav output expect 
like experienced programmer  version correct hope ﬁrst time  detail right 
experience  error log show case 
simple programming task give relative novice who still don  know technique need right 
implementation style address contain tricky manipulation  require caller remember free return memory 
code prefer maintain 
claim style string efﬁcient string 
allocation deallocation style equivalent optimization move semantic   
strlen operation   size simple read 
example  imply style code traverse input twice  version only traversal input 
efﬁciency level misguide  version fundamental edge 
fundamental difference style string proper type conventional semantic  style set convention support useful function 
assignment comparison  
style sort function qsort present 
sort fast typically fast qsort  performance reason choose low level  verbose  maintainable programming style 
operation noexcept find index ﬁrst character find 
operation noexcept 
explicit constant denote position length brittle error prone 
regular expression regular expression notation 
regular expression function 
regular expression iterator  
advice regular expression regex  standard_library regular expression  
function read ﬁle look united states postal code  dc 
smatch type container regex result 
here  whole pattern optional digit subpattern 
raw suitable regular expression tend contain backslashe 
conventional  pattern deﬁnition regex pat    united states postal code pattern regular expression syntax semantic design regular expression compile state machine efﬁcient execution 
regex type perform compilation run time 
here  ﬁrst present default notation variant ecma standard ecmascript commonly know javascript 
syntax regular expression base character special meaning  regular expression special character 
pattern optional repeat default exactly once add sufﬁx  repetition exactly time time least time zero  +  
optional zero  example  example match  aaabbc aaabbb example match  aabbc aaabc bs aaabbbbbccc
type value  byte sequence  streams istream convert stream character bytes type object  istream stream buffer 
operation attempt stream state effect  op 
iostream condition 
case  condition true succeeds state iostream 
basis idiom read stream value  read input buffer type 
example  cin throw state set bad 
mean bad exception 
description here base conventional english small character set ascii 
way character set natural language handle 
primarily intend base_class speciﬁc input class  istream template typename typename class  virtual public 
common code standard library user deﬁne input operation 
code need execute ﬁrst preﬁx code  ﬂushe tied stream sentry  constructor 
example  template typename typename 
user deﬁne   mean cin  
iostream input sensitive  inherently  extensible 
designer operation direct access implementation iostream 
pointer function target  function_will invoke istream argument 
example  yield 
basis input manipulator  skipws 
output stream manipulator common input stream manipulator  technique explain 
state  istream operation return reference istream  chain  operation 
example  template typename  typename 
example     will take sequence whitespace separate positive integer print line 
skip whitespace suppress noskipws 
input operation virtual 
user base class hierarchy automatically resolve operation derived_class 
simple technique deliver behavior  see 
possible extend scheme able read object essentially arbitrary type input stream  see 
unformatted input implementation formatted input  read character return integer_value  
exchange value choice  format input low level input function 
simple useful need compose value character 
function getline read sequence character ﬁxed size area 
read reach maximum number character ﬁnd terminator character default   
place end character write getline remove terminator input  find 
example  streams 
function  obvious terminate read  
find terminator 
read maximum number character 
hit end 
non format input error 
last alternative handle look ﬁle state 
typically  action case 
 write array character read 
obviously  formatted input operator simple error prone unformatted
place pointer position place pointer offset direction dir output operation output operation ostream  find ostream write string  find string  template typename typename class  virtual public 
ostream offer format output  unformatted output output character  simple operation streambuf write accord  arithmetic  pointer   bitset  complex  valarray  write character
place put pointer position place put pointer offset direction dir state  ostream operation return reference ostream  chain  operation 
example   value     
print  value  value  streams version user deﬁne type trivial write  template typename 
will work deﬁne 
full generality  deﬁne 
output operation programmer add member  virtual
reason achieve close optimal performance simple operation put character buffer 
place runtime efﬁciency crucial inline
virtual function achieve ﬂexibility operation deal buffer overﬂow underﬂow only 
programmer want output object only base_class know 
exact know  correct output achieve simply deﬁne
virtual output function abstract base  class 
technique generally useful operation act like virtual_function  run time selection base second argument 
similar technique double dispatch select operation base dynamic type 
similar technique input operation virtual 
example  pf mean pf 
function call manipulator 
manipulator take argument useful 
example  angle  print ﬂoate point variable angle digit 
return object initialize call invoke 
manipulator function_object invoke 
exact function_object implementation deﬁne  deﬁne like 
now write  angle  programmer deﬁne style smanip need 
require modiﬁcation deﬁnition standard library template class 
standard library 
class manage state stream  
complicated class standard_library 
hold depend template argument  class 
implementation deﬁne type bitmask type  support bitwise logical operation  
example int bitset 
control iostream connection lack thereof stdio  default constructor  protect 
call ﬁrst iostream operation execution program section stream state guarantee iostream stdio operation share buffer 
call ﬁrst stream operation prevent buffer sharing improve performance signiﬁcantly implementation 
note copy move operation 
usual meaning character map byte 
example  template typename 
image sound video stream example 
operation summarize  io  construct io give stream buffer point
set locale previous locale char value obtain convert  default_value  section stream state widen value obtain convert char type  
copy move operation  protect exchange state  protect  noexcept conversion include istreams ostream bool essential usual idiom
people want add state stream 
example  want stream know  complex output polar cartesian coordinate 
class function xalloc allocate space simple state
value_return xalloc identiﬁes pair location access pword 
implementer user need notiﬁed change stream state 
function  register  function call event  occur 
call imbue  copyfmt  will call function  register    
state change  registered function call argument supply 
event type deﬁne streams enum event    void   int index  format format stream control combination object type  stream state  format state  locale  explicit operation  manipulator  
equivalent  manipulator defaultﬂoat hexﬂoat  manipulate directly  
iostream format state read write set operation section format state io format ﬂag 
general format defaultﬂoat let implementation choose format present value style preserve value space
precision speciﬁes maximum number digit 
scientiﬁc format scientiﬁc present value digit decimal_point exponent 
precision speciﬁes maximum number digit decimal_point 
ﬁxed format ﬁxed present value integer part follow decimal_point fractional part 
precision speciﬁes maximum number digit decimal_point 
example  see 
float point value round just truncate  precision affect integer output 
produce  width function speciﬁes minimum number character next standardlibrary output operation numeric_value  bool  style string  character  pointer  string  bitset 
default ﬁll character space character  default ﬁeld size  mean  character  ﬁeld size reset default_value like streams call width set minimum number character
explicit control format option separate operation tedious  combine user deﬁne manipulator 
allow programmer set iostream locale set io locale old value locale io locale standard manipulator standard_library manipulator correspond format state state change 
standard manipulator deﬁne io  istream  ostream  iomanip manipulator take argument output preﬁx octal number hexadecimal number show decimal_point show + positive number uppercase numeric output   lowercase numeric output   flush output operation ﬂush output operation section standard manipulator pad mark format pattern pad value pad value integer base integer base integer base float point format scientiﬁc format base mantissa exponent  start exponent   default ﬂoating point format skip whitespace operation return reference ﬁrst stream operand 
explicitly set output format ﬂoating point number  constexpr double  
idea form hold need format datum item 
default choose reasonable member_function reset individual aspect format 
bind value format output
form plus value output give stream suitable function  
note declaration combination ternary  collect ostream  format  value single function real computation 
later  character write  ﬂushe suppose
buffer call streambuf 
deﬁnition find streambuf 
type streambuf implement buffering strategy 
typically  streambuf store character array overﬂow force write character real destination 
ostream represent graphically like ostream  begin current end streambuf  real destination character buffer locale  set template argument ostream streambuf determine type character character buffer 
istream similar  character ﬂow way 
unbuffere simply streambuf transfer character  hold character gather efﬁcient transfer 
key class buffering mechanism  template typename  typename class public   type character typename    integer type character convert typename    type position buffer typename    type offset position buffer 
public operation simply call protect virtual_function ensure function derived_class implement operation appropriately kind buffer  section buffer destructor  release resource  virtual 
put area output operation write  area input operation read 
area beginning pointer  current pointer  past end pointer  
positioning  see 
put interface separate public protect 
addition  virtual_function overridden derived_class 
showmanyc  show character  function odd function intend allow user learn state machine input system 
return estimate character read  soon   empty operating_system buffer wait disk read 
call showmanyc return promise character read encounter end 
necessarily low level highly implementation dependent 
showmanyc careful reading system documentation conduct experiment 
addition  ostream operation deal directly template typename typename class  virtual public 
function override equivalent base 
ostream construct argument  determine character write handle eventually
example  ostringstream ofstream create initialize ostream suitable 
sufﬁx position put character stream 
function effect stream attach positioning meaningful  ﬁle 
represent character position ﬁle  represent offset point 
stream position start  think ﬁle array character 
example  int refer ﬁle 
attempt seek beginning end ﬁle typically put stream bad state 
operating_system operating mode behavior differ  positioning resize ﬁle 
ﬂush operation allow user empty buffer wait overﬂow 
possible write streambuf directly ostream 
primarily handy implementer mechanism 
addition  istream operation deal directly streambuf  template typename typename class  virtual public 
positioning function work like ostream counterpart 
sufﬁx position character stream 
sufﬁxe need create iostream derive istream ostream  stream need keep track position put position 
putback function allow program put character  back  istream next character read 
unget function put recently read character back 
unfortunately  back input stream possible 
example  try back past ﬁrst character read will set 
guarantee back character successful read 
peek function read next character leave character streambuf read
peek logically equivalent  
set failbit trigger exception 
flush istream sync 
kind stream  reread character real source possible desirable  stream attach network 
sync return succeed 
set return 
set badbit trigger exception 
sync buffer attach ostream ﬂushe buffer output 
operation directly read streambuf primarily useful implementer facility 
readsome function low level operation allow user peek stream see character read 
useful undesirable wait input  keyboard 
iterator widely locale facet 
input  effect like input iterator  stream character read input   end stream  noexcept  constexpr  
measure  operation odd  net effect output  effect like output iterator  stream character write output  os   noexcept psb  istreambuf  noexcept section sputc streambuf reach eof 
handle cultural difference 
class locale name locale  compare string 
class facet access facet locale  simple user deﬁne facet  locale facet 
standard facet string comparison  numeric formatting  money formatting  date time formatting  character classiﬁcation  character code conversion  message 
convenience interface character classiﬁcation  character conversion  string conversion  buffer conversion 
advice handle cultural difference locale object represent set cultural preference  string compare  way number human readable output  way character represent external storage 
notion locale extensible programmer add locale represent locale speciﬁc entity directly support standard_library  postal code zip code phone number 
primary locale standard_library control appearance write ostream format datum read istream 
locale  locale construct locale affect stream 
notion locale primarily notion 
operating_system application environment notion locale 
notion principle share program locale system  independently programming_language write
standard library notion locale see standard portable way program access representation system 
locale interface system represent incompatible way system 
write program need country 
write program style allow call internationalization emphasize program country localization emphasize adaptation program local condition 
entity program manipulate will conventionally display differently country 
handle write routine take account 
style code job 
howev er  code ugly hard maintain 
style consistently ensure output properly adjust local convention 
want add write date  modify application code 
bad write date only example cultural difference 
standard_library extensible handle cultural convention 
iostream library rely framework handle build user deﬁne type 
example  simple loop copying date  double pair represent series measurement set transaction  
program read ﬁle conform french convention comma character represent decimal_point ﬂoating point number  example  section handle cultural difference mean twelve half write accord american convention 
deﬁne locale operation cpy convert convention  
give stream  apr  apr  apr  
july  july  july  
rest devoted mechanism possible explain
programmer will little reason deal detail locale will explicitly manipulate locale 
will simply retrieve standard locale imbue stream 
concept localization internationalization simple 
practical constraint design implementation locale intricate  locale encapsulate cultural convention  appearance date 
convention vary subtle unsystematic way 
convention programming_language  programming_language standardize
mechanism compose locale trivial constitute little programming_language
locale compose facet control individual aspect  character punctuation output ﬂoating point value decimal_point  format read monetary value moneypunct  
facet object class derive class 
think locale container facet  
set global previous global classic classic  section class give facet refer exist  operation name throw 
naming locale bit curious 
plus facet result implementation deﬁne 
implementation deﬁne include supply facet 
think interface map id   allow  ﬁnd corresponding object class derive  facet 
real implementation efﬁcient variant idea 
layout will like  
facet derive  facet 
mean copy freely cheaply 
certainly implement handle specialized map id  constitute part implementation 
facet quickly accessible
specialized map id  will optimize array like fast access 
facet access facet notation  see 
standard_library rich set facet 
help programmer manipulate facet logical group  standard facet group category  numeric collate collate  collate  ctype  ctype  numeric   numpunct  monetary  moneypunct  time    message message  collate ctype monetary numeric time message facility programmer specify string newly create 
name string deﬁne program  execution environment create combination name constructor 
way programmer deﬁne
notion  apply standardlibrary facet only  extensible 
facet need belong user deﬁne facet
string  undeﬁned  affect global 
imply program reliably portably set retrieve execution environment 
standard way program set global call function 
mixed program  global differ global error prone 
dominant locale implicitly  stream
istream ostream
stream default global time stream  creation 
stream set imbue operation  extract copy stream  getloc 
set global affect exist stream  still locale imbue global reset 
simple way copy exist
function implement need know system keep locale 
example  linux system keep locale directory share locale 
string argument refer deﬁned locale  constructor throw exception 
similarly  copy modiﬁed 
result locale represent like classic 
  argument here  nullptr  result simply copy argument 
construction   argument identify speciﬁc facet type 
plain sufﬁcient 
speciﬁcally  implementation facet identify type   ﬁnd facet 
constructor class facet const  only mechanism offer language programmer supply facet
supply implementer name 
name retrieve program execution 
programmer who understand implementation speciﬁc mechanism able add
set constructor design type facet know type deduction facet parameter come know type 
specify category argument speciﬁes type facet indirectly  know type facet category 
imply class keep track type facet manipulate minimal overhead 
way modify
operation way exist
immutable create essential run time efﬁciency 
allow call virtual_function facet cache value_return 
example  istream know character represent decimal_point true represent call decimal_point time read number truename time read bool 
only call imbue stream cause call return value 
operation directly user hav build comparison function collate facet 
string comparison function
facet represent speciﬁc cultural aspect  number represent output  date read input  character store ﬁle codecvt 
standard library list 
user deﬁne facet determine name season print 
represent program object class derive std     
like facility  find  section class class   
class design base_class public function 
constructor protect prevent creation plain  object  destructor virtual ensure proper destruction derive class object 
intend manage pointer store
argument constructor mean delete last reference away 
conversely  nonzero constructor argument ensure delete
nonzero argument mean rare case lifetime control directly programmer indirectly
kind interface separate  class   
intend user deﬁne static member type class supply interface example  see 
mechanism id identify  
obvious implementation index pointer implement efﬁcient 
datum deﬁne derive deﬁne derived_class 
imply programmer deﬁne full control datum arbitrary amount datum implement concept represent
intend immutable  member_function user deﬁne deﬁne const 
alternatively  think kind explicit type_conversion cast speciﬁc feasible only give type 
example  locale 
standard guarantee  need standard 
way look  mechanism optimize implementation form compile time polymorphism 
similar result produce 
specialized implement efﬁciently general 
identiﬁes behavior class 
class exactly implement semantic locale  identiﬁe
example  collate char char interchangeable locale  identiﬁe collate char   
deﬁne deﬁne correspond identify see 
examine mechanism isolation complexity widely type efﬁciency accompany let ﬁrst present trivial user deﬁne type  enum season spring  summer  fall  winter  simple user deﬁne type style outline here little variation simple user deﬁne type 
class general abstract 
deﬁne representation season locale  derive class  deﬁne appropriately 
output season easy 
stream  convert
maximum efﬁciency ﬂexibility  standard tend operate directly stream buffer  
simple user deﬁne type  season  need drop streambuf level abstraction 
typical  input bit complicated output  
error handling simple follow error handle style build type 
input string represent season choose locale  stream put state 
exception enable  imply exception throw 
here trivial test program  
give input summer program respond  summer derive class  deﬁne string representation class  public 
note simply implementation  deﬁne
want  give
operation locale   rely facet implement concept identiﬁe 
only interesting implementation question ask output invalid season 
naturally  happen 
uncommon ﬁnd invalid value simple user deﬁne type  realistic take possibility account 
throw exception  deal simple output intend human read  helpful produce range  representation range value 
note input  errorhandle policy leave  output  function implement error handle policy 
illustrate design alternative 
production design   facet function implement error handling input output just report error handle 
design rely derived_class supply locale speciﬁc string 
alternative design retrieve string locale speciﬁc repository see 
possibility single class season string pass constructor argument leave exercise 
locale mechanism general extensible mechanism represent culture sensitive
message facet example facet stream 
extension iostream library facility base stream take advantage locale 
user locale convenient way organize arbitrary culturesensitive
generality locale facet mechanism  possibility user deﬁne facet unlimited 
plausible candidate representation facet date  time zone  phone number  social security number personal identiﬁcation number  product code  temperature  general unit  value pair  postal code zip code  clothing size  isbn number 
powerful mechanism  facet care 
represent facet mean represent way 
key issue select representation cultural dependency decision affect difﬁculty write code  ease read result code  maintainability result program  efﬁciency time space result operation 
instantiate facet table  character type 
facet guarantee deﬁne char 
addition  ctype guarantee support 
user who need standard deal character type rely implementation speciﬁc facet specialization suitable version facet
example  codecvt char  need control conversion char 
international true false  true mean character plus zero terminator  international  representation currency symbol  usd brl 
shift state parameter  ss  represent shift state multibyte character representation 
cwchar  deﬁne represent conversion state occur implementation deﬁne set support multibyte character encoding rule 
equivalent arbitrary character type 
input iterator output iterator   
put facet template argument allow programmer facet access nonstandard buffer 
buffer associate iostream stream buffer  iterator  
function error handling 
standard facet byname version 
facet derive facet
identical interface add constructor take string argument name locale  see 
semantic deﬁne 
example  section standard facet 
character string return grouping read sequence small integer_value 
number speciﬁes number digit group 
character speciﬁes rightmost group 
standard facet  char  typically implicitly standard stream function 
programmer need know
facet standard library function interesting show stream work facet
standard_library example interesting programming technique 
implementer ostream write  template class  class tr 
ostream  locale call member_function getloc 
function real work 
construct ostream  ostream implicitly convert base_class  ﬁrst argument put easily supply 
call put return output iterator argument 
output iterator obtain 
test failure allow set stream state appropriately 
 standard facet guarantee present locale 
guarantee violate  throw 
put function_call virtual 
user deﬁne code execute  prepare handle exception throw overriding 
exist character type  throw 
behavior build type  double  deﬁne standard 
question standard prescribe 
badbit set ostream  exception state  exception simply throw 
exception handle set stream state continue 
case  badbit set stream state template class  class tr 
try block need setstate throw  
howev er  badbit set exception state  throw exception cause call simply throw 
build type  double  implement write directly stream buffer 
write user deﬁne type  avoid result complexity express output user deﬁne type term output exist type 
iostate variable set reﬂect state stream 
value desire type read  failbit set end input reach  eofbit set
input will determine set state stream 
error encounter  value read assign leave unchanged 
sentry ensure stream  preﬁx sufﬁx operation perform 
example  implementer istream write  template class  class tr 
unfortunately  guarantee input operation 
exception enable istream will throw setstate case error 
deﬁne  read nonstandard punctuation 
want read unusual numeric format  override 
example  deﬁne read roman numeral  xxi mm 
presentation monetary amount sensitive cultural difference 
example  negative amount loss  debit   context present positive number parenthesis  
similarly  color context ease recognition negative amount 
standard  money  money facet mean explicitly numeric_value programmer know represent monetary amount 
example  struct money simple type hold monetary 
task monetary facet reasonably easy write output money print accord local convention see 
output vary depend locale 
possible output section money format dkk cad money  accuracy small currency unit essential 
adopt common convention integer represent number cent pence  øre  ﬁls  cent  number dollar pound  kroner  dinar  euro  
convention support moneypunct  function 
similarly  appearance decimal_point  deﬁne decimal_point 
facet function perform base format deﬁne facet 
simple money type control format hold monetary value 
error prone consistently hold monetary amount money type  way  forget cast money write input error try read monetary value localeinsensitive way 
infeasible introduce money type system design
byname version  template class bool false 
  member return string represent currency symbol example    inr  dkk  plus sign  minus sign 
template argument true  member will true  international  representation currency symbol will
international  representation character style string 
algorithm inverse deal notion incremental change 
give sequence   produce   
temperature reading 
transform temperature 
turn     back     
people who think temperature difference boring detail meteorology science lab experiment  note analyze change stock price sea level involve exactly operation 
operation useful analyze series change 
name iota latin spelling greek letter  function apl 
confuse iota non standard  uncommon  itoa int alpha  
example  want choose tcp ip address router simulation  decide monster attack scratch head  generate set value test square root function 
random  standard_library deﬁne facility generate number 
random number sequence value produce accord mathematical formula  unguessable  truly random  number obtain physical process  radioactive decay solar radiation 
implementation truly random device  will represent 
kind entity 
uniform random number generator function_object return unsigned integer_value range possible result ideally equal probability return 
random number engine engine uniform random number generator create default state state determine seed 
random number engine adaptor adaptor random number engine take value produce random number engine apply algorithm value order deliver sequence value randomness property 
random number distribution distribution function_object return value distribute accord associated mathematical probability density function accord associated discrete probability function 
detail see 
simple term  user  term  random number generator engine plus distribution 
engine produce uniformly distribute sequence value  distribution bend desire shape distribution 
take number random number generator draw reasonably smooth graph distribution 
example  bind give random number generator produce normal distribution  auto  int    standard library function bind function_object will invoke argument give second argument 
ascii graphic  numeric time  programmer just need simple uniform distribution integer ﬂoatingpoint number give range 
just variation  technique  class 
algorithm need choose sample size large population 
here algorithm simple algorithm famous old paper  template typename iter  typename size  typename typename gen 
seed sequence  object  call ﬁll newly generate seed 
  modulus  value
example  write index repetition number  int  int unsigned     lucky  parameter bad duplicate value 
try unsigned see difference 
real need know
number engine adaptor take number engine argument produce number engine randomness property 
alias deﬁne useful engine                section engine          
entropy deﬁne  
entropy estimate randomness  degree unpredictability  generate number 
contrast thermodynamic  high entropy number mean hard guess subsequent number 
formula reﬂect result repeatedly throw perfect sided dice 
intend useful cryptograpic application  rule kind application trust implementation ﬁrst study closely 
mean integer require int default 
distribution precondition default result 
simple famous  bell curve  numerics distribute value symmetrically peak mean distance element mean control standard deviation parameter  distribution precondition default result  exp  exp ln 
representation easily generate easily find web 
sampling distribution map integer speciﬁc range accord probability density function distribution precondition default result  
low order bit random number suspect  portable way generate random number 
give acceptable result 
application  generator base will give reliable result 
call start random number giv en argument 
debugging  important random number give repeatable 
want start real run
game unpredictable  useful pick environment program 
program  bit real time clock
mathematical aspect numerical problem  take expert advice  experiment  
memory model memory location  instruction reordering  memory order  datum race 
atomics atomic type  flag fence 
advice introduction concurrency execution task simultaneously widely improve throughput processor single computation improve responsiveness allow part program progress wait response 
standard support concurrency introduce tutorial manner 
next detailed systematic view 
call activity potentially execute concurrently activity task 
thread system level representation computer facility execute task 
standard library thread execute task 
thread share address space thread 
thread single address space access memory location 
central challenge programmer concurrent system sure thread access memory sensible manner 
standard_library support concurrency include  concurrency 
memory model  set guarantee concurrent access memory basically ensure simple ordinary access work naively expect 
support programming lock  ﬁne grain low level mechanism avoid 
thread library  set component support traditional thread locks style system 
task support library  facility support task level concurrent programming  future  topic order fundamental low level high level 
memory model common programming 
programmer productivity error minimization  work high feasible level 
example  prefer future mutex exchange mutex atomic simple counter like 
leave complexity standard library implementer feasible 
context standard_library  lock mutex mutual exclusion variable abstraction build mutex mutually exclusive access resource synchronize progress concurrent task 
topic process  thread execution address space communicating inter process communication mechanism  address book 
suspect read problem technique manage share datum  sympathetic view explicitly share datum avoid 
naturally  communication imply form sharing  share need directly manage application programmer 
note long pass pointer local datum thread  local datum free problem mention here 
reason avoid global datum 
comprehensive guide concurrent programming complete explanation standard library facility concurrent programming 
basic description problem face programmer who deal concurrency system level 
fairly detailed overview concurrency facility standard 
introduction basic standard library concurrency feature threadsand lock level 
detail relaxed memory model lock free programming 
teach advanced concurrent programming design technique concurrent parallel programming popular topic research widely year  extensive specialized literature example  base concurrency see 
just presentation posix thread source example easily improve standard library facility here 
contrast style posix facility old thread support library  standard library thread support type safe 
long reason mess macro pass thread 
similarly  deﬁne task function_object  lambda pass thread cast worry type violation 
reason invent elaborate convention report error section introduction thread future  transmit exception 
give concurrent software complex code run thread separately develop  type safety standard preferably exception base error handle strategy important single thread software 
standard library thread support greatly simpliﬁes notation 
component rely set language guarantee know memory model 
memory model result discussion machine architect compiler writer represent computer hardware 
memory model  speciﬁed iso standard  represent contract implementer programmer ensure programmer think detail modern computer hardware 
understand problem involve  keep simple mind  operation object memory directly perform object memory 
object load processor register  modiﬁe write back 
worse still  object typically ﬁrst load memory cache memory register 
example  incremente simple integer add load cache element cx load cx register  store back cx store cx back memory share thread  cache memory depend machine architecture share thread run processing unit  call like processor  core  hyper thread  area rapid evolution system facility terminology 
open host opportunity simple operation add corrupt 
will obvious machine architecture expert simplify 
who notice mention store buffer  recommend appendix 
concurrency machine load store small word  word  deﬁned reasonable memory model  thread read word contain change  write word back memory 
time  thread
thread manage read word ﬁrst thread manage write result back memory last determine result 
memory model chaos  
reason happen initialization compiler linker thread start 
memory model guarantee thread execution update access separate memory location interfere
exactly naively expect 
compiler job protect strange subtle behavior modern hardware 
compiler hardware combination achieve compiler 
program machine  combination hardware low level compiler generate software 
give access part word 
thread simultaneously access ﬁeld word  bet
ﬁeld word  hardware way avoid problem race condition example form potentially expensive locking 
lock unlock operation cost implicitly impose  commonly critical device driver 
language deﬁne memory location unit memory sensible behavior guarantee exclude individual 
memory location object arithmetic type  pointer  maximal sequence adjacent nonzero width 
here  exactly separate memory location 
try update separate thread explicit synchronization 
explanation conclude type  guarantee result copy
true only hav data race memory location 
multiword struct single memory location  data race  behavior undeﬁned  sure proper synchronization place share datum  
piece code stated reason assign assign
optimizer hardware instruction scheduler decide speed program execute true ﬁrst 
mean initialize initializer
hardware  compiler  optimizer know
add thread program  
thread set wrong order   still problem 
thread  assignment optimizer decide lift evaluation loop  thread sleep sleep
maybe instruction execute reach register  instruction execute reach intend location 
ﬁgure guess depend machine architecture vary time  last decade steadily increase 
rush load store computation optimize throughput  time take high 
away location  thousand instruction cycle 
give modern hardware amazing performance  open huge concurrency opportunity confusion thread look time place memory hierarchy 
example  simpliﬁed description mention only single cache  popular architecture level cache 
illustrate  here diagram possible level cache architecture core cache  pair core share cache  core share memory  memory cache cache cache cache core core cache cache core core memory ordering term programmer assume thread see look memory 
simple memory order call sequentially consistent 
sequentially consistent memory model  thread see effect operation order 
order instruction sequentially single thread 
thread still reorder operation  point thread observe variable  set operation perform memory location observe deﬁned thread 
operation observe  force consistent view memory location call atomic operation see 
simple read write impose order 
possible sequentially consistent order give set thread 
only result 
obviously  predictable result  need form synchronization access share variable 
sequential consistent order just programmer effectively reason machine architecture impose signiﬁcant synchronization cost eliminate relax rule 
example  thread run separate core decide initiate read write least write complete 
give nonsequentially consistent result 
relaxed memory model allow
first  avoid datum race 
thread data race access memory location deﬁne simultaneously least access write 
note deﬁne  simultaneously  precisely trivial 
thread data race  language guarantee hold  behavior undeﬁned 
sound drastic  effect data race show drastic 
optimizer hardware instruction scheduler reorder code base assumption value execute section code affect apparently unrelated datum base assumption 
way avoid datum race  
only single thread 
eliminate beneﬁts concurrency process routine 
put lock datum item conceivably subject data race 
eliminate beneﬁts concurrency effectively single threading easily situation thread wait 
worse still  heavy lock increase chance deadlock  thread wait locking problem 
try look carefully code avoid datum race selectively add lock 
currently popular approach  error prone 
hav program detect datum race report programmer ﬁx automatically insert lock 
program program commercial size complexity common 
program guarantee absence deadlock still research project 
design code thread communicate only simple put style interface require thread directly manipulate single memory location  
high level library tool data sharing concurrency implicit sufﬁciently stylize share manageable 
example include parallel implementation algorithm library  directive base tool  openmp  transactional memory abbreviate tm 
way look rest bottom approach arrive support variant last style programming 
process  encounter tool need support just way avoid datum race 
programmer suffer complexity 
alternative only simple  sequentially consistent model minimal opportunity datum race 
offer reason  way world
complexity machine architecture real  system programming_language   tool programmer live
maybe someday machine architect will deliver simple alternative  now deal bewildering variety low level facility machine architect deliver performance customer demand 
like memory model improved version java
howev er  idea effectively veto provider operating_system virtual machine  insist need roughly implementation now standard 
alternative operating_system virtual machine slow factor  guess programming_language fanatic welcome opportunity simplify expense language  practical professional 
fortunately  programmer hav work directly low level hardware 
programmer need understand memory model think reorder problem amusing curiosity  write data race free code mess memory order  memory model guarantee code execute naively expect 
sequential consistency 
ﬁnd machine architecture fascinating topic  see  sensible productive programmer  stay away low level software
leave expert enjoy high level expert
programmer rely primitive operation directly support hardware avoid data race small object typically single word double word 
primitive operation suffer datum race  call atomic operation  implementation high level concurrency mechanism  lock  thread  lockfree data_structure 
notable exception simple atomic counter  lock free programming specialist 
addition understanding language mechanism  detailed understanding speciﬁc machine architecture knowledge specialized implementation technique need 
try lock free programming only here 
primary logical advantage lock free technique lock base technique classical locking problem  deadlock starvation  happen 
atomic operation  guarantee thread will eventually typically soon progress thread compete access atomic object 
addition  lock free technique signiﬁcantly fast lock base alternative 
standard atomic type operation portable alternative traditional way express lock free code 
typically rely assembly code system speciﬁc primitive 
sense  standard support atomic step long tradition increase portable comprehensible support system programming 
synchronization operation determine thread see effect thread  determine happen
synchronization operation compiler processor free reorder code long semantic rule language maintain 
principle  look affect performance 
synchronization operation memory location section atomic consume operation  acquire operation  release operation  acquire release operation 
acquire operation  processor will see effect subsequent operation effect 
release operation  processor will see precede operation effect effect operation
consume operation weak form acquire operation 
consume operation  processor will see effect subsequent operation effect  effect depend consume operation value happen consume operation 
atomic operation ensure state memory require speciﬁed memory order 
default  memory order sequentially consistent  
standard memory order enum       enumeration represent  
example  atomic load store express relaxed memory order  
entirely architecture speciﬁc give memory order sense 
clearly  relaxed memory model directly application programming 
utilize relaxed memory model specialized task general lock free programming 
see small subset operating_system kernel  device driver  virtual machine implementer 
useful machine generate code goto 
thread directly share datum  machine architecture deliver signiﬁcant performance improvement relaxed memory model cost complexity implementation message pass primitive  future promise  
allow signiﬁcant optimization architecture relaxed memory model  standard attribute transmit memory order dependency across function_call 
put function argument  function propagation dependency 
designer memory model  lawrence crowl  summarize   dependency ordering complex concurrency feature 
give will output hello  world 
hello  will corrupt mix output character 
operation work usefully resource 
example  work generator compose work request task place work queue  
server examine wq  composer simply work wait 
wait lock release 
simple form deadlock require only lock
variant output operation  template typename  
now  call   will deadlock try recursive call tail 
recursive mutually recursive call common standard solution 
just_like plain  single acquire repeatedly 
example   change avoid deadlock 
now recursive call write correctly handle 
operation throw 
possible error reﬂect condition underlie system  deadlock occur native handle allow perform operation native handle lock constructor native handle argument bad example  thread task 
output device resource busy generic  look like argument 
want block   acquire mtx  want wait try
offer support  default constructor  constexpr  noexcept 
release implementation deﬁne system type system handle interface identical interface just interface identical interface 
generally 
example  update output buffer  video game visualization extern imtx  extern image buf  section 
assumption here update reasonably fast here  millisecond  user prefer version
assume miss sequence update image will rarely notice  complicated solution need 
operation match operation 
usual opportunity mistake exist  example  
range range check  thread execution mtx lock
standard_library raii class   handle problem 
plain  simple  small  fast guard 
exchange add functionality  carry small cost  signiﬁcant give application give machine 
usual  only hold lock minimal amount time  excuse hold lock end large scope only need lock small section scope 
obviously  checking require locking  acquire lock  
complication worthwhile 
look  hide  tell  deﬁnitely just unwillingness locking need 
minimize size critical section general useful
force think exactly lock need
resource_handle  guard  object lock acquire ownership unlock release 
obvious lockable object standard library mutex type  user deﬁne
simple class interesting operation 
raii mutex 
object raii operation contained mutex   lockable object lck  default constructor  lck hold mutex  
example  thread task 
unfortunately  acquire lock imply opportunity deadlock 
example  mutex  protect resource 
need pass reference variadic_template thread constructor  
mutex copy move  pass reference pointer 
change name order separate deﬁnition source text will long obvious chance program_will eventually deadlock   try acquire second mutex
try acquire member lock  lock acquire order  lock acquire   
acquire member lock  deadlock 
type function offer low level  efﬁcient  simple tool
double underscore preﬁx emphasize version represent compilergenerate code 
see system handle cv rely system resource  constructor lack resource 
like mutex  copy move  think resource handle 
destroy  wait thread notiﬁed  tell wake wait
status return deﬁne enum_class  timeout  wait function prevent wake lose due contention list wait thread 
plain  wait low level operation extra care implementation high level abstraction 
wake  system decide resume wait thread ev en thread notiﬁe
plain  wait loop 
example   additional reason loop thread snuck invalidate condition here  thread call unconditional wait run 
loop basically implementation wait condition  prefer unconditional wait 
release mutex sleep reacquire thread unblocked 
finally  lck implicitly release mutex end scope 
simple control ﬂow message producer consumer  template typename class 
producer put acquire queue mutex  add value end queue  call section condition variable wake possibly block consumer  implicitly release mutex 
rvalue version put transmit object type move  copy  operation   
only add element want keep put simple 
possibility multiple consumer possibility consumer fall producer reconsider 
bit complicated only block thread mutex preclude access queue empty  template typename 
caller will remain block nonempty 
plain optimize simplicity offer operation need unlock relock mutex 
enable lambda access object 
return value reference argument  return_value  sure element_type copy_constructor throw will cause trouble 
conventional technique  stl stack adaptor pop container front 
write general directly return value possible  surprisingly tricky 
example  see 
simply mutex control access consumer repeatedly wake look work queue  decide find queue empty 
copy value hold queue element 
copy element_type throw exception  will remain unchanged put simply
share data_structure  don  separate mutex only need protect datum race 
application  simple fatal ﬂaw  consumer wait producer add value 
consumer wait long time 
answer  common technique add timeout  specify maximum time wait  
actually  don  care timeout  only predicate express lambda true return 
choose report failure timeout throw exception 
think timing common nonexceptional  event  return bool
put  alternative return bool encourage producer explicitly handle case attractive 
howev er  avoid discussion handle overﬂow  choose signal failure throw exception 
choose queue full 
maybe  consumer need nudge continue 
choice depend behavior application obvious 
notify just thread serialize access queue minimize throughput potential consumer 
hand  notify wait thread wake sev eral thread  cause contention mutex possibly thread repeatedly wake just ﬁnd queue empty empty thread 
fall back old rule  don  trust intuition  measure 
functionally equivalent lockable object operation  lck lockable object operation require 
concurrent task  ﬁnd focus mechanism distract real task specify concurrent task 
section focus specify simple kind task  task give argument produce result 
keep mind fundamental simplicity task model 
complicated detail support rare hiding messy thread lock level 
standard library task support just example support task base concurrency 
like small task let  system  worry map execution hardware resource keep problem datum race  spurious wake excessive wait 
importance facility simplicity programmer 
sequential program  write like   perfor task give argument result concurrent version 
default  simple technique reserve complex solution know worthwhile 
task put result promise  task need result retrieve result corresponding  promise value task  task  value  diagram technically know share state 
addition section future promise return_value exception  contain need thread safely exchange
minimum  share state able hold  
value type exception 
future  return void  value
ready bit value exception ready extract future 
task execute call future task launch async launch policy defer 
count  share state destroy only last potential user relinquishe access 
store_value class destructor  destructor call count zero 
mutual exclusion datum enable unblocking thread wait  
implementation take action share state  
construct  possibly user supply allocator 
ready  set ready bit  unblock wait thread 
release  decrease count destroy share state last user 
abandon  impossible value exception put share state promise  promise destroy  exception error condition store share state share state ready 
task deposit result retrieve future 
set result task void future result task exception point thread task result task value  
set function throw value exception set 
only possible transmit single result value
restrictive  remember value move share state  copy  cheaply pass collection object 
example  string  int  string  int 
task execute return cause 
offer fairly conventional set operation  section 
exchange value  noexcept 
copy task  copy task assume yield result original 
important task move stack
abandon share state destructor move mean ready 
value exception store  pointer store 
advantage result destructor variable execute 
operation match 
completely handle
simple example need thread 
first deﬁne simple task  
now package function call thread task 
see exception trigger 
attach  attach  px  
later  try retrieve result 
operation hold future package will deposit result task 
point version work exactly like version ordinary function_call call task here call thread 
concentrate specify task  think thread lock 
move future 
eventually  invoke task deposit result future know execute will receive result 
simple general 
process series request 
gui  access piece specialized hardware  server serialize access resource queue 
implement service queue message  pass task execute  result type server  argument type server  section 
server take server queue execute suitable order 
typically  task carry datum call context 
task write essentially like ordinary function  function_object  lambda 
server call task essentially like ordinary callback function 
actually easy server ordinary function handling exception take care
task retrieve result deposit 
move assignment  share state  long share state  release old share state  thread task move value  long share state 
block value arrive tp  tell value ready  timeout occur  execution defer hold unique value offer copy operation 
value  move
only call once 
potentially need read result time  task  
undeﬁned happen try twice 
undeﬁned happen try operation ﬁrst  valid  destructor valid 
standard  encourage  implementation throw error condition case 
value type  void reference  special rule apply 
reference object  library transmit  convert back 
status observe call enum_class ready value timeout operation time defer possible error operation future error  promise abandon state supply value second operation try access promise share state addition  operation value  possibly throw  unusual move operation 
look table  ﬁnd miss useful function  
ideally  thread block unblocked once 
implementation task long run  extra wait will signiﬁcant 
hand  task short  will likely ﬁnishe ﬁrst wait 
implementation tricky 
first need way checking ready 
example   status obvious  will tell resume  test ready suspending 
common  unfortunately guarantee  return try suspend zero time 
give  write  template typename 
decide deferred task error
note check valid 
try invalid  will cause hard error 
hope surprising exception throw 
simple implementation only approximate
large useless wake unlikely imply possibility unnecessarily long wait 
function useful building block concurrent algorithm 
want read value repeatedly potentially read multiple reader  copy read copy 
usable directly indirectly initialize move value result type 
copy move_constructor  move_constructor noexcept destructor  release share state  copy assignment move assignment  noexcept 
block value arrive tp  tell value ready  timeout occur  execution defer obviously  similar
key difference move value location repeatedly read share 
 special rule apply  value type  void reference  
reference object  library transmit  convert back 
return object reference  const  safely access thread synchronization 
return object non const reference  need form mutual exclusion avoid datum race refer object 
give just give task run 
still need thread task run current
decision delegate launcher  function decide create recycle old  simply run task current 
example  easily imagine programmer want give launcher hint long task likely run 
only policy currently standard  launch policy  launch execute task create defer execute task point task  note
launcher wide discretionary power come launch
example  default policy defer  fanciful imagine decide defer  execution reduce call 
imagine optimizer reduce whole code fragment double  expect implementation optimize trivial example 
implementer effort spend realistic example task perform signiﬁcant amount computation launch  recycle  reasonably
depend implementation system thread  drastically lower cost execute task
recycle  launcher take care task see leftover state previous task execute task store pointer stack datum nonlocal storage 
datum conceivably security violation 
simple realistic spawn task collect user  
task require datum caller 
lambda obvious pass argument allow access local_variable 
lambda specify task  beware capture local_variable reference 
lead datum race unfortunate cache access pattern thread access stack frame 
beware capture member object imply member object access indirectly  copy  object subject datum race
doubt  copy pass capture 
important select scheduling policy  late  change need 
example  initial debugging 
eliminate error concurrency eliminate sequential error 
back determine error concurrency 
time  launch policy maybe system offer launch policy
case  able improve performance code local change launch policy  rework subtle detail program logic 
effect fundamental simplicity task base model 
default launch policy practical problem 
basically  default lack design decision 
implementation decide concurrency  idea 
experiment concurrency show result surprisingly similar execution  try explicit launch policy 
imagine million item easily sort ﬁnd right algorithm ﬁnde
slow  search once start beginning end  start hundredth datum 
first  represent datum record  extern record datum search section parallel ﬁnd example individual sequential task simply standard library 
need specify number record search sequentially 
hard choose know hardware  library implementation  data  algorithm 
experimentation essential 
tool framework pick size help choose useful 
simple illustration basic standardlibrary facility basic technique sufﬁcient 
pﬁnd  parallel ﬁnd  function simply number call require number record 
result  template typename pred 
like  report ﬁrst element match predicate  ﬁnd element low index match 
end wait task ﬁnd maybe only last task ﬁnd 
throw away useful maybe thousand item match criterion 
ﬁrst problem bad sound 
assume recklessly launch cost processing unit task  still result roughly time take process task 
potentially result time take examine record million 
processing unit  result will deliver batch result record 
find last segment time will roughly unit 
wait task order  try look result order task complete 
sure keep look task report back 
pﬁnd depend key observation potentially gain advantage concurrency  slightly algorithm 
like  pﬁnd return ﬁrst match  return match ﬁrst find 
parallel algorithm problem variant idea sequential solution  simple repetition sequential solution 
case  obvious question only need  giv en concurrency  sense ﬁnd match 
need let task return match  just simple match  section parallel ﬁnd example 
basic idea develop framework detail concurrent execution completely hide  commonly refer map reduce 
example run like 
add simple sequential version test  
case  cost thread creation immature implementation async dominate effect concurrency 
need significant parallel speedup right now  implement variant async base pre create set thread work queue  line 
note signiﬁcant optimization change task base optimize version implementation detail 
prinf family 
date time 
advice introduction standard_library language minor modiﬁcation incorporate standard_library 
standard_library function prove useful year wide variety contexts especially low level programming 
standard library function present here  see textbook  kernighan ritchie  iso standard  need know
ﬁle refer ﬁle standard_input output_stream  stdin  stdout  stderr 
standard stream default  ﬁle need open  standard_library file open close open ﬁle stream ﬁle name mode open ﬁle successful nullptr close ﬁle stream  return successful ﬁle open fopen close fclose ﬁle will remain open operating_system close
problem leak  fstream 
mode style string contain character specify ﬁle open opening file mode binary  mode option speciﬁc system 
example  mean  ﬁle exist open  option combine  example   try open ﬁle call foo binary reading 
mode stdio iostream 
prefer iostream library type safe extensible 
format output function  printf  widely program widely imitate programming_language  print format string fmt stdout  insert argument arg print format string fmt ﬁle  insert argument arg print format string fmt style string insert argument arg
return_value printf essentially ignore 
declaration printf int format  word  take style string typically string literal follow arbitrary number argument arbitrary type 
meaning extra argument  control section printf family conversion speciﬁcation  print character print decimal integer 
ﬁrst apply ﬁrst  extra argument  here  apply  second second  extra argument  here  applie 
output call printf value  value pedersen  follow newline 
general  correspondence conversion directive type apply check 
example  value value   oop set conversion speciﬁcation large grow year great degree ﬂexibility 
system support option offer standard 
see set option strftime format 
follow  optional minus sign speciﬁes leave adjustment converted value ﬁeld  + optional plus sign speciﬁes value sign type will begin sign  optional zero speciﬁes lead zero padding numeric_value 
precision speciﬁe ignore  optional speciﬁes ﬂoating point value will print decimal_point ev en nonzero digit follow  trail zero will print  octal value will print initial  hexadecimal value will print initial  optional digit string specify ﬁeld width  converted value character ﬁeld width  will blank padded left right  left adjustment indicator give ﬁeld width  ﬁeld width begin zero  zeropadde will blank padding  
case integer argument supply ﬁeld width precision  optional character specify follow  correspond sign unsigned short integer argument  hh optional pair character hh  specify follow  argument treat sign unsigned char argument  optional character ell  specify follow  correspond sign unsigned long integer argument  standard_library ll optional pair character ll ell ell  specify follow  correspond sign unsigned long long integer argument  optional character specify follow  correspond long double argument  specify follow  correspond argument  specify follow  correspond argument  
conversion character meaning integer argument convert decimal notation  integer argument convert decimal notation  
integer argument convert octal notation  
integer argument convert hexadecimal notation  integer argument convert hexadecimal notation  ﬂoat double argument convert decimal notation style 
number decimal_point equal precision argument 
number round 
precision miss  digit give  precision explicitly speciﬁed  decimal_point print  like capital letter inf  infinity  nan 
number round 
precision miss  digit give  precision explicitly speciﬁed  digit decimal_point print  uppercase identify exponent  ﬂoat double argument print style style style give great precision minimum space  uppercase identify exponent  double argument print hexadecimal format  like character argument print 
null character ignore  argument take string character pointer  character string print null character number character precision speciﬁcation reach  precision miss  character null print  argument take pointer 
representation print implementationdependent  unsigned integer argument convert decimal notation  number character write call printf  fprintf  sprintf write int point pointer int argument 
here elaborate example  
user deﬁne type sense provision deﬁne output format user deﬁne type  complex  vector  string 
format strftime example contortion try design set format speciﬁer 
standard output  stdout  correspond cout 
standard_input  stdin  correspond cin 
standard error output  stderr  correspond cerr 
correspondence standard stream close style stream share buffer 
example  mix cout stdout operation produce single output_stream uncommon mixed code 
ﬂexibility carry cost 
performance  mix stdio iostream operation single stream 
ensure call ﬁrst operation 
here  scanf try read integer sequence non whitespace character
non format character speciﬁes input contain character 
example  will read string follow
call scanf succeed  result value call will number argument pointer assign hopefully example  eof 
way specify input error prone  happen forget space string input 
argument scanf pointer 
standard_library strongly recommend scanf 
input oblige stdio 
popular answer
end encounter error occur  set nullptr  set
nev er rough equivalent 
year  favorite virus writer  input overﬂow input buffer example  program corrupt computer potentially take attacker 
sprintf function suffer similar buffer overﬂow problem 
version standard_library offer whole alternate set stdio input function take extra argument defend overﬂow  
iostream unformatted input  leave user problem decide exactly termination condition encounter   character  terminator character  end 
stdio library simple useful character read write function  stdio character function 
example  typical style input loop  int  
style thread support ctgmath ctime  ctype facet 