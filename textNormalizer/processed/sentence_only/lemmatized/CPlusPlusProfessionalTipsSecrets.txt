complete tip secret professional complete tip secret professional + page professional hint trick free programming book disclaimer free book create educational purpose 
trademark registered trademark property respective owner content 
covariant result version base example  static type checking 
covariant smart pointer result automate cleanup 
 arithmitic metaprogramme 
image copyright respective owner speciﬁed book creation aﬃliate stack overﬂow  term trademark belong respective company owner present book guarantee correct accurate  risk feedback correction complete tip secret professional  start version standard release date iso iec iso iec iso iec iso iec tbd tbd section  hello 
analysis let examine part code detail  iostream preprocessor directive include content standard header ﬁle iostream 
deﬁnition include std namespace  explain
standard_input output stream way program input output external system terminal 
convention  call execution program 
only program  return number int type 
here  int call return_type 
value_return exit code 
convention  program exit code interpret success system execute program 
return code associate error 
return_statement present  program return default 
example  need explicitly write return  
function  return void type  explicitly return value accord return_type  return
here   show want std namespace 
refer scope resolution operator microsoft documentation 
standard_library deﬁne operator perform data insertion data_type output_stream 
allow stream insertion chain  std    foo   bar   print  foobar  console 
insert manipulator stream change state stream 
stream manipulator ﬁrst insert end line character ﬂushe stream buﬀer force text show console 
ensure datum insert stream actually console 
semicolon notiﬁes compiler statement end 
statement class deﬁnition require end terminate semicolon 
section  comment comment way put arbitrary text inside source_code compiler interpret functional meaning 
comment give insight design method program 
type comment  single line comment double forward slash sequence will mark text newline comment  
style block comment sequence declare start comment block sequence declare end comment 
text start end sequence interpret comment  text valid syntax 
call  style  comment  comment syntax inherit predecessor language  
block comment start end single_line 
example  void argument int argument int  importance comment programming_language  comment beneﬁts  explicit documentation code easy read maintain explanation purpose functionality code detail history reason code placement copyright license  project note  special thank  contributor credit 
comment downside  maintain reﬂect change code excessive comment tend code readable need comment reduce write clear  self document code 
simple example explanatory name variable  function  type 
factor logically task discrete function hand hand
comment marker disable code complete tip secret professional development  comment quickly disable portion code delete
useful testing debug purpose  style temporary edit 
refer comment 
similarly  keep old version piece code comment reference purpose frown clutter ﬁle oﬀere little value compare explore code history versione system 
section  standard compilation process executable program code produce compiler 
compiler translate code call compilation 
inherit form compilation process parent  language  c
list show major step compilation  
preprocessor copy content include header ﬁle source_code ﬁle  generate macro code  replace symbolic constant deﬁne deﬁne value 
expand source_code ﬁle produce preprocessor compile assembly language platform 
assembler code generate compiler assemble object code platform 
object code ﬁle generate assembler link object code ﬁle library function produce executable ﬁle 
note  compile code link create ﬁnal program 
link  code package format program 
bundle package  usable code  programmer refer library 
compiler merge un merge part compilation process ease additional analysis 
programmer will diﬀerent tool  tool will generally follow generalized process involve production program 
link extend discussion nice graphic help 
function accept argument value return single value 
function  function_call argument value function_call replace return_value 
function type signature type argument type return_type 
function inspire concept procedure mathematical function 
note  function essentially procedure follow exact deﬁnition rule mathematical function 
function mean perform speciﬁc task 
function declare deﬁne call program 
note  popular function deﬁnition hide include ﬁle convenience reuse across ﬁle 
common header ﬁle 
complete tip secret professional function_declaration function_declaration declare existence function name type signature compiler 
syntax following  example int function_declare following compiler  return_type int 
name function 
number argument function  ﬁrst argument type_int 
ﬁrst argument will refer function content name
argument name optional  declaration function follow  int  omit function argument  name permit 
deﬁnition rule  function type signature only declare deﬁne once
function_return return_type write void 
take parameter  parameter list empty 
function call function call declare 
example  follow program_call value
here  syntax function_call 
function deﬁnition function deﬁnition similar declaration  contain code execute function call body 
complete tip secret professional 
function call name  actual function call depend directly amount type parameter call 
case  compiler compute function call 
case  type explicitly state 
default parameter default_value function_parameter only speciﬁe function_declaration 
default argument place argument function 
common example operator 
special character sequence will reduce function_call compiler   +    
special character normally associate non programming usage aesthetic 
handle character sequence special syntax  essence  occurrence operator reduce function_call 
example  follow expression  + complete tip secret professional 
operator function_name start operator 
predecessor  operator function_name assign diﬀerent meaning additional deﬁnition diﬀerent type signature   valid 
section  visibility function prototype declaration  code declare deﬁne usage 
example  follow produce compile time error  
prototype specify return_type void  name function foo  argument list variable_type int  name argument require 
common way integrate organization source ﬁle header ﬁle contain prototype declaration  
tricky resolve compiler_will report error ﬁnal link stage  know jump code show error 
section  preprocessor preprocessor important part compiler 
edit source_code  cut bit change add
source ﬁle  preprocessor directive 
directive tell preprocessor perform speciﬁc action 
directive start
example  define zero ﬁrst preprocessor directive will meet 
language  preprocessor  header ﬁle language  header ﬁle 
next important directive define directive 
tell preprocessor ﬁle  replace occurrence 
similar function  count advanced 
need  deﬁne preprocessor directive  occurrence will vanish 
actually useful  ifdef directive 
format follow  true code 
 template list declaration export list declaration declaration declaration extern declaration
piece code free parameter will concrete_class  function  variable parameter speciﬁed 
parameter type  value  template 
know  concrete container type element_type speciﬁed   int 
section  basic class_template basic idea class parameter substitute type compile time 
result class reuse multiple type 
user speciﬁes type will variable class declare 
example show iostream  
section  function template template apply function traditional structure eﬀect 
case argument replace type parameter  result work just_like normal function parameter match type compiler apply standard conversion 
additional property function class compiler infer parameter base parameter pass function 
case parameter type 
compiler unable deduce type contradiction 
result compile time error 
feature allow simplify code combine structure function 
common pattern standard_library allow structure helper function 
create object explicitly define type create object type paramter 
code type 
note  design shorten code 
design code robust 
allow type change change code single place multiple location 
section  variadic data_structure useful deﬁne class structure variable number type data member deﬁne compile time 
canonical example  deﬁne custom structure 
here example deﬁne structure compound inheritance 
start general empty deﬁnition  serve base case recrusion termination later specialisation  typename 
struct datastructure  allow deﬁne empty structure  datum  useful
next come recursive case specialisation  typename typename 
rest struct rest 
first  note specialisation requirement least variadic parameter namely exist  care speciﬁc makeup pack rest 
know exist allow deﬁnition data member  first 
rest datum recursively package rest 
constructor initiate member  include recursive constructor call rest member 
understand work example  suppose declaration int  float data 
declaration ﬁrst match specialisation  yield structure int first float rest data member 
rest deﬁnition match specialisation  create float first rest member 
finally last rest match base case deﬁntion  produce empty structure 
method only need specialisation base case structure datum typename typename 
rest struct rest 
see member_function template time index member need usage like  similar 
actual work static function helper class  
reason deﬁne require functionality directly will shortly see need specialise possible specialise template member_function specialise contain class_template 
note style auto here life signiﬁcantly simple need complicated expression return_type 
helper class 
time will need empty forward declaration specialisation 
first declaration  template  typename struct  now base case 
case just return first member  
ﬁrst case  type deduce reference  type lvalue reference second case type deduce type rvalue_reference 
note  worth notice ﬁrst case  second 
order perfectly function  lvalue rvalue_reference  std    template typename 
partial template specialization only template class struct  common case  
show partial template specialization introduce completely diﬀerent set datum function_member 
partially specialized template instantiate  suitable specialization select 
example  let deﬁne template partial specialization  template typename  typename typename 
section  template specialization deﬁne implementation speciﬁc instantiation template class method 
example template typename generic implementation 
section  alias 
alias template specialize 
functionality obtain indirectly refer nest type struct  typename struct typedef type   
section  explicit instantiation explicit instantiation deﬁnition create declare concrete_class  function  variable  just
explicit instantiation reference translation unit 
avoid deﬁne header ﬁle  will only instantiate ﬁnite set argument 
char explicitly instantiate  linker will able ﬁnd deﬁne header 
explicit instantiation declaration present  linker error likely occur 
see template only implement header ﬁle 
explicit instantiation deﬁnition precede extern keyword  explicit instantiation declaration
presence explicit instantiation declaration give specialization prevent implicit instantiation give specialization current translation unit 
reference specialization cause implicit instantiation refer explicit instantiation deﬁnition tu 
section  non type parameter type parameter allow declare value constant expression meet follow criterion  integral enumeration type  object function  lvalue reference object lvalue reference function  member  
like parameter  non type parameter explicitly speciﬁed  defaulted  derive implicitly template argument deduction 
example non type parameter usage  complete tip secret professional 
section  declare argument auto prior  write parameter  specify ﬁrst 
common pattern write like  class  
solution simplify idiom simply allow auto  
nice motivating example come try combine empty base optimization custom deleter 
diﬀerent api deleter diﬀerent return_type  don  care just want work function  auto deletefn struct functiondeleter class 
parameter create
simple parameter example  class struct  class 
section  default parameter just_like function argument  parameter default_value 
parameter default declare end parameter list 
basic idea parameter default omit instantiation 
simple example default parameter usage  class  struct 
 metaprogramme metaprogramming refer macro template generate code compile time 
general  macro frown role template prefer  generic 
template metaprogramming compile time computation  template constexpr function  achieve goal generate code  compile time computation metaprogramme se 
section  calculate factorial factorial compute compile time metaprogramme technique 
code  evaluate metafunction instantiate parameter want pass   result evaluation 
complete tip secret professional metafunction rely recursively instantiate metafunction small value 
specialization represent terminate condition 
template metaprogramming restriction functional programming_language  recursion primary  loop  construct 
metafunction execute compile time  result contexts require compiletime value 
example    automatic array compile time deﬁne size 
result metafunction compile time constant  here 
limitation  compiler_will allow recursion depth limit 
example  compiler default limit recursion depeth level 
case  programmer set recursion depth depthx option 
 std   template kind template computation  iostream 
 restriction constexpr function drop now write conveniently  
section  iterate parameter pack need perform operation element variadic_template parameter pack 
way solution easy read write 
suppose simply want print element pack 
simple solution recurse  
 powerful arsenal solve problem 
ﬁrst fold expression  
 standard class_template template class  
int class  template 
come standard  implement 
section  tag dispatch simple way select function compile time dispatch function overloaded pair function take tag last argument 
example  implement  dispatch iterator category  namespace detail 
argument overloaded function unused function_parameter 
actual implementation matter actually completely empty 
only purpose allow compiler select overload base tag class call
example  advance   metafunction return class  depend actual type iter 
default construct object let compiler select diﬀerent overload 
note  constexpr simplify implementation advance suitable open implementation tag dispatching 
complete tip secret professional section  detect expression valid possible detect operator function call type 
test overload
detect operator  operator deﬁne  syntax  void struct   
section  manual distinction type give type implement sfinae  useful access helper template determine give type match set criterion 
help standard type analog true false 
follow example show detect type pointer mimic behavior standard helper  typename struct   typename 
ﬁrst declaration default case  inherit 
default case inherit analogous false condition  
second declaration specialize pointer care
version inherit 
third declaration real simply remove unnecessary case remove const volatile qualiﬁer fall back previous declaration 
access value need  value  
complete tip secret professional habit helper helper template  let directly access value  typename constexpr bool   value  
high calculation compile time easy 
example calculate give number compile time will follow  typename 
keyword constexpr responsible calculate function compilation time  only requirement will meet see constexpr keyword reference example argument know compile time 
note  constexpr function compose only return_statement 
advantage  compare standard way compile time calculation  method useful runtime calculation 
mean  argument function know compilation time 
version possible write generic function example min accept numerical type arbitrary argument count meta programming 
function_declare min argument recursively
 iterator section  overview iterator position iterator mean navigate operate sequence element generalize extension pointer 
conceptually important remember iterator position  element 
example  take following sequence  sequence contain element position + + element sequence 
position place meaningful operation happen sequence 
example  insert position  element element 
deletion element ﬁrst ﬁnde position  delete
iterator value convert position  iterator dereference  auto  position auto 
sequence container find standard_library  begin will_return iterator ﬁrst position  end will_return iterator past last position last 
name iterator algorithm oftentime label first last  + + 
situation view useful insert operation will insert element position iterator  erase operation will_return iterator correspond position pass iterator correspond reverse iterator locate element invalid iterator iterator invalidated course operation position long part sequence 
invalidated iterator dereference reassign valid position 
algorithm diﬀerent way treat invalidate iterator 
navigate iterator know  iterator navigate sequence 
order iterator migrate position sequence 
iterator advance forward sequence advance backwards  
note  second argument reachable ﬁrst  word equal second 
perform arithmetic_operator iterator  operation deﬁne type iterator 
recommend special function case sure iterator type example  template function accept iterator 
iterator concept standard diﬀerent iterator concept 
group accord behave sequence refer
know concept iterator model behave like  assure behavior iterator regardless sequence belong 
order least restrictive next iterator concept step predecessor input iterator  dereference only once position 
only advance  only position time 
forward iterator  input iterator dereference number time 
bidirectional iterator  forward iterator advance backwards position time 
random access iterator  bidirectional iterator advance forwards backwards number position time 
contiguous iterator  random access iterator guarantie underlie datum contiguous memory 
algorithm vary depend concept model iterator give 
example  implement forward iterator  eﬃcient variant require random access iterator
iterator trait iterator trait uniform interface property iterator 
allow retrieve value  diﬀerence  pointer  reference type category iterator  complete tip secret professional 
section  vector iterator begin return iterator ﬁrst element sequence container 
object const  begin end return 
want return const  cbegin cend 
complete tip secret professional 
output  section  reverse iterator want iterate backwards list 
reverse iterator bidirectional  random access iterator keep member access base 
iterate backwards rbegin rend iterator end collection  start collection
instance  iterate backwards 
visualization iterator mark position element  relationship simple  + + 
section  stream iterator stream iterator useful need read sequence print format datum container  data stream 
number whitespace character will ok 
example program_will print standard output 
code output number  line like complete tip secret professional 
ﬁrst pointer give value pointer  address ﬁrst element
sizeof operator return size byte 
divide size element give number element
ﬁnd address block
initialize address ﬁrst element
here dereference operator return value address
section  write generator back iterator common pattern language function produce  stream  object  able loop code loop
model template class 
store generate element early easily detect end 
end generator iterator create range generator iterator only copy std   once 
default construct generator iterator compare equal end generator iterator 
 return value situation useful return value  example  want input item return price number stock  functionality useful 
way  involve stl 
wish avoid stl reason  still way include struct class array 
section  std   type std   bundle number value  potentially include value diﬀerent type  single 
retrieve value return cumbersome  require std   template  auto auto auto auto auto 
want return lvalue reference value  place
section  structure binding introduce structured binding  easy deal multiple return_type  need rely manual unpack  
help reduce number extraneous variable create scope return_value 
complete tip secret professional section  output parameter parameter return value  parameter require pointer reference 
consumer will call multiple relevant value  
adapt return continuation pass style class tuple 
number know
useful member_function like safe member access function bind checking  size allow return size calculation 
section  output iterator value return pass output iterator function 
common generic function like algorithm standard_library 
example  typename  typename outputiterator void outputiterator output 
standard string class simple  safe versatile alternative explicit array char deal text sequence character 
string class part std namespace standardize 
section  tokenize list least expensive expensive run time  
std   stream  extraction operator iteratively 
input white space delimit able expand option eliminate diﬃcultie  allow inline tokenization support generation const string  add support multiple delimit white space character  
live example 
iteratively tokenize 
ﬂexible delimiter deﬁnition 
example  non delimited comma white space  
see example detail 
section  conversion const char order const char access datum string  member_function 
keep mind pointer only valid long object scope remain unchanged  mean only const method call object 
data member_function obtain modiﬁable char  manipulate object  datum 
modiﬁable char obtain take address ﬁrst character  
 guarantee yield form  null terminate string 
note form empty  undeﬁne empty 
const char const char 
introduce  simply non range const char  implementable
note modify underlying 
oﬀer useful subset functionality std   function behave 
 sequence character represent specialize class native complete tip secret professional character type 
major collection deﬁne standard_library std    std   build element type build element type 
note imply encoding  give indication byte 
instance  commonly implement bytes type typically contain encode window version prior window bytes type encode linux 
contrast type  introduce guarantee large hold  character  precisely  code point
section  lexicographical comparison compare lexicographically       complete tip secret professional 
function underlie method perform comparison  return convenience boolean value 
operation function interpret follow  regardless actual implementation   character pair match  return true  return false 
character pair match  return true  return false 
note  term character pair mean correspond character string position 
understanding  example string  length character pair string mean pair      
corresponding character exist  great equal low value 
here example  
step follow  
compare ﬁrst character  move
compare second character  move
compare third character  move
range now exhausted  range still character 
complete tip secret professional section  trim character start end example require header algorithm  locale  utility 
trim sequence mean remove lead trail element character match predicate 
ﬁrst trim trail element  involve move element  trim lead element 
note generalization work type 
section  string replacement replace position replace portion std   method replace std   
replace occurrence replace only ﬁrst occurrence replace std      const std   replace  const std   
section  splitting split string 
section  check preﬁx
version still range half version  need ﬁrst check ﬁrst
section  conversion point type std   contain number integer type  ﬂoating point type  conversion function 
note function parse input soon encounter non numeric character   will 
function discourage return parse
bad valid result  example input   impossible determine conversion actually
family function convert integer ﬂoating point type  throw exception parse input 
function possible  complete tip secret professional 
function handle octal hex string family 
second parameter pointer ﬁrst unconverted character input illustrate here  third parameter base
section  convert character encoding convert encoding easy compiler able deal cross platform manner codecvt locale header 
complete tip secret professional 
find find find find occurrence character absence character last occurrence character last absence character function allow search character end  ﬁnd negative case 
note  aware function search substring  character contain search 
case  last occurrence find character find 
section  namespace 
namespace collection entity function  class  variable  name preﬁxe name namespace 
write code namespace  name entity belong namespace need preﬁxe namespace name  entity fully qualiﬁed name 
fully qualiﬁed name format 
example  namespace example 
namespace useful group deﬁnition
take analogy shopping mall 
generally shopping mall split store  store sell item speciﬁc category 
store sell electronic  store sell shoe 
logical separation store type help shopper ﬁnd item look
namespace help programmer  shopper  ﬁnd function  class  variable look organize logical manner 
example  complete tip secret professional 
section  argument dependent lookup call function explicit namespace qualiﬁer  compiler choose call function namespace parameter_type function namespace 
call  argument dependent lookup   adl  namespace test 
adl occur adl occur normal unqualiﬁed lookup ﬁnd class_member  function declare block 
section  extend namespace 
section  directive keyword  ﬂavor 
combine keyword  namespace  write using_directive   want write foo   front stuﬀ namespace foo  namespace foo  import single foo 
word caution  namespace header ﬁle see bad style case 
namespace import ﬁle include header 
way un namespace  lead namespace pollution unexpected symbol global namespace bad  conﬂict 
see example illustration problem  namespace foo class 
section  namespace create namespace easy  namespace foo namespace foo 
section  namespace alias namespace give alias  name namespace namespace syntax 
member aliase namespace access qualify name alia 
follow example  nest namespace inconvenient type  function qux locally declare alia 
member namespace access simply  
inline namespace include content inline namespace enclosing namespace  namespace outer 
section  aliase long namespace rename shortening long namespace reference refer component library 
 file ﬁle stream 
key abstraction read text 
format input operator 
format output operator 
stream   detail formatting translation external encoding internal encoding 
stream  iostream library section  write ﬁle way write ﬁle 
easy way output ﬁle stream ofstream
check ﬁle open successfully writing 
failure ﬁle exist  ﬁle right access right  ﬁle disk error occur  drive disconnect 
checking follow  try read file   
want open ﬁle non ascii character path window currently non standard wide character path argument  open file   window 
know format  stream extraction operator 
let assume ﬁle name contain following  john jane 
stream extraction operator extract character ﬁnd character store special character  string type  operator whitespace newline 
number  operator non number character 
mean follow version ﬁle will successfully read previous code  john jane stream extraction operator return stream give
multiple operator chain order read consecutively 
stream boolean expression show loop previous code 
stream class conversion operator type bool 
bool operator will_return true long stream error 
stream error state example  extract  bool operator will_return false 
loop previous code will exit input ﬁle read end 
wish read entire ﬁle string  follow code  open   
section  opening mode create ﬁle stream  specify opening mode 
opening mode basically setting control stream open ﬁle 
opening mode second parameter constructor ﬁle stream open member_function  
note set want set ﬂag implicitly set iostream member correct default_value 
specify opening mode  follow default mode ifstream ofstream fstream complete tip secret professional ﬁle opening mode specify design mode meaning description append output append end ﬁle 
example window end line sequence crlf   
section  read ascii ﬁle 
rdbuf method return pointer streambuf push
possibility popularize eﬀective stl scott meyers   
note  extra parenthese ﬁrst argument string constructor essential prevent vexing parse problem 
last least    
section  write ﬁle non standard locale setting need write ﬁle diﬀerent locale setting default  speciﬁc ﬁle stream  guidance apply local stream open ﬁle 
once stream imbue change locale 
reason restriction  imbue ﬁle stream locale undeﬁne behavior current locale state independent point beginning ﬁle 
stream state independent 
ﬁle stream locale try read bom marker ﬁle open  just open ﬁle read character ﬁle will beginning 
explicitly switch classic  locale useful program diﬀerent default locale want ensure ﬁxed standard reading write ﬁle 
preferred locale  example write complete tip secret professional 
section  check end ﬁle inside loop condition  bad practice 
next read will end
reference   discard lead whitespace input stream  return true error occur associated stream section  flush stream file stream buﬀere default  type stream 
mean write stream cause underlie ﬁle change
oder force buﬀere write take place ﬂush stream 
directly invoke flush method stream manipulator     
contrary  infrequently  application ﬂushe frequently order avoid stick stream object 
section  read ﬁle container example operator read item ﬁle 
example simply iterate ﬁle read item  time operator 
aﬀect achieve std   input iterator read item  time stream 
container construct iterator simplify code   
extend read object type like simply specify object want read template like unfortunately build type read line here build simple helper class
will convert back string string context 
ﬁlesystem library originally develop ﬁnally merge iso 
section  close ﬁle explicitly close ﬁle rarely  ﬁle stream will automatically close associated ﬁle destructor 
try limit lifetime ﬁle stream object  keep ﬁle handle open long
example  put ﬁle operation scope 
call close explicitly only want reuse fstream object later  want keep ﬁle open 
section  class basic class user deﬁne type 
class introduce class  struct union keyword 
colloquial usage  term  class  refer only non union class 
class collection class_member  member variable call  ﬁeld   member_function call  method   member type typedef 
example  follow code snippet identical  struct vector 
section  access speciﬁer keyword act access speciﬁer 
limit access class_member follow speciﬁer  speciﬁer change access level keyword description access protect only class derived_class friend access private only class friend access public deﬁne class keyword  default access speciﬁer private  deﬁne 
note friend keyword add access exception function type access protect private member 
public  protect  private keyword grant limit access base_class subobject 
see inheritance example 
section  inheritance class struct inheritance relation 
class struct inherit class struct mean parent
derived_class struct base_class struct 
form inheritance class struct  public private protect note default inheritance default visibility member  public struct keyword  private class keyword 
possible class derive struct vice versa 
case  default inheritance control child  struct derive class_will default public inheritance  class derive struct will private inheritance default 
complete tip secret professional 
note protect inheritance allow  actual rare 
instance protect inheritance application partial base_class specialization refer control polymorphism  
oop inheritance frequently model relationship 
inheritance correct only instance derived_class instance base_class 
later reﬁne liskov substitution principle  inheritance only instance derived_class substitute instance base_class possible circumstance complete tip secret professional 
example  stack class inherit privately vector class 
private inheritance bear great similarity aggregation inheritance 
protect inheritance general agreement sort relationship embody 
section  friendship friend keyword give class function access private protect member class  deﬁne scope 
un comment will error now initialize indirect virtual base
note create variable object  derived_class responsible constructor value   create object type 
useful solve diamond  virtual inheritance normal inheritance inherit inherit instance
result ambiguity access compiler way know class want access inherit  inherit 
virtual inheritance solve problem  virtual base reside only derive object  will only instance
section  private inheritance  restrict base_class interface private inheritance useful require restrict interface class  
access variable function object class 
try access dereference
example result compiler error first  pointer
second  integer dereference 
uncommonly solution problem explicitly control precedence  
short hand ﬁrst dereference pointer access
 scope  manner access namespace 
static class class  scope  instance class 
section  member type alias class struct deﬁne type alias  type alias contain treat
normal type alias  type alias allow refer type deﬁne aliase deﬁnition 
likewise  typedef class deﬁnition refer accessible typedef class deﬁnition  come class deﬁnition 
manner  minimise amount code need modiﬁed underlie implementation change  type_name only need change location 
combine decltype  desire 
situation  change implementation will automatically change typedef due decltype 
minimise number modiﬁcation want change helper  minimise risk human error 
typename only once twice internally zero time externally  example  need alias
hundred thousand time project  long name  useful typedef absolute term 
balance forwards compatibility convenience amount unnecessary noise create 
template class  access template parameter class 
commonly container  will element_type  helper type  member type alias 
container standard_library  example  follow helper type  special type need 
commonly name type type alia 
section  nest class structure class struct contain class struct deﬁnition inside call  nest class   situation  contain class refer enclosing class  
nest class deﬁnition member enclosing class  separate 
prior  nest class only access type_name  static member  enumerator enclosing class  member deﬁne enclose class 
 nest class  member thereof  treat friend enclosing class  access member  accord usual access rule  member nest class require ability evaluate non static member enclosing class  pass instance  class outer 
friend nest class automatically friend enclosing class  need friend enclosing class declare separately 
conversely  enclosing class automatically friend nested class  will friend enclose class friend nest class 
lamdba see special unnamed struct 
class allow static member  variable function 
complete tip secret professional class  scope  treat normal member  static storage duration exist start program end  tie instance class  only copy exist
deﬁne member variable  keyword static omit 
 static member_function deﬁne inside class deﬁnition  normal member_function 
 static member variable literaltype type type construct compile time  accord constexpr rule declare constexpr  initialise class deﬁnition 
only single copy static member variable exist variable declare later  case copy thread 
static member variable linkage class  class external internal linkage 
local class unnamed class allow static 
section  multiple inheritance 
note  lead ambiguity name multiple inherit classs struct 
ambiguity multiple inheritance multiple inheritance helpful case odd sort problem encounter multiple inheritance 
example  base_class function name overridden derived_class write code access function object derived_class  compiler show error determine function call 
here code type ambiguity multiple inheritance 
cv qualiﬁed ref qualiﬁed  aﬀecte see instance call function_will see instance speciﬁed cv 
version call will base instance cv qualiﬁer 
version cv qualiﬁer instance  cv qualiﬁed version will call
std   class_template manage lifetime dynamically store object 
std    dynamic object only instance std   time  create dynamic int value unique pointer  only variable hold pointer dynamically allocate int 
unique pointer object scope  object delete  
std   std   array type  array specialization  create int value 
easy add manually code  template  
dumb smart pointer  instantiate vector allocation 
early example scalar allocation 
example dynamically allocate integer complete tip secret professional 
template specialize version call constructor destructor appropriately 
vectore version vector personal choice 
version prior 
allow copy  source will lose ownership contain pointer target receive
class_template std   deﬁne share pointer able share ownership object share pointer 
contrast std   represent exclusive ownership 
sharing behavior implement technique know reference counting  number share pointer point object store
count reach zero  destruction reassignment last std    object automatically destroy 
smart pointer work just_like raw pointer 
mean  dereference
regular arrow_operator operator work finally  last aliase scope  destructor call 
warning  construct throw exception extra datum share ownership semantic need allocate 
constructor pass regular pointer assume object point call deleter exception throw 
mean args will leak object allocation
advisable args  args  enable implementation optimize memory allocation 
allocate array
possible create array std   
example  allocate array integer  write code  std    specify std   mandatory here sure allocate_memory correctly clean delete 
know size compile time  way  template class arr struct  
 gain special support type 
long specify 
object type  point member
mean scope reassign  underlie object will still alive  ensure dangle 
important  only know create alias constructor 
know pointer  include create reference  
mean weak pointer alter object reference prevent object deletion object share pointer reassign destroy 
following example instance std   destruction tree object inhibit  
child node add root node child  std   member parent set root node 
member parent declare weak pointer oppose share pointer root node reference incremente 
root node reset end  root destroy 
only remain std   reference child node contain root collection child  child node subsequently destroy
due control block implementation detail  allocate_memory release reference counter reference counter reach zero 
need deﬁne deleter 
example here structure
deleter callable pointer argument  
only safe  zero overhead automatic memory management  exception safety 
note deleter part type implementation empty base optimization avoid change size empty custom deleter 
 surfacedeleter  solve problem similar way  type still only size pointer type hold pointer  function pointer 
free function custom deleter  preferable wrap function empty type 
case reference counting important 
store deleter  erase type deleter  useful apis 
disadvantage high memory cost store deleter performance cost maintain reference 
here  purpose auto handle free function  return void 
version note  deprecate will remove 
only force early willing careful 
recommend move complete tip secret professional combination replace std   behavior 
std    move semantic  std   
smart pointer  std   automatically clean resource see raii 
transfer ownership happen copy  constructor 
example implementation template typename class 
section  cast std   pointer possible directly   std   retrieve pointer sharing ownership pointer pass argument 
function std    std    std  
note  only propose adopt library fundamental february 
implement follow  template typename typename section  write smart pointer  smart pointer behave like value 
copy  copy content 
create  create content 
smart pointer useful pimpl case  want value semantic want expose content pimpl implementation ﬁle 
non default  handle virtual base_class know produce instance derive turn value type 
section  refer enable valid instance
derive class class_template  inherit method return instance
object  local automatic object global object  behavior undeﬁned 
constructor equivalent object  object possess constructor return 
 function overloading see separate topic overload resolution section  function overload 
function overloading multiple function_declare scope exact name exist place know scope diﬀere only signature  mean argument accept 
suppose write series function generalized printing capability  begin std    
section  return_type function overloading 
complete tip secret professional section  member_function cv qualiﬁer overloading function class overload access cv qualiﬁed reference class  commonly overload const  overload volatile const volatile 
non static member_function take hidden parameter  cv qualiﬁer apply
commonly overload const  volatile const volatile 
member_function only call least cv qualiﬁed instance call
non const instance call const non const member  const instance only call const member 
allow function diﬀerent behaviour depend call instance cv qualiﬁer  allow programmer disallow function undesired cv version 
allow code specify modiﬁes state take unmodiﬁed parameter modiﬁed parameter cv qualiﬁer  code safe readable 
member need modify  lock  declare mutable  class 
 vector dynamic array automatically handle storage 
element vector access just eﬃciently array advantage vector dynamically change size 
term storage vector datum place dynamically allocate_memory require minor overhead  conversely array automatic storage relative declare location overhead 
section  access element primary way access element index base access complete tip secret professional iterator index base access  subscript_operator  member_function 
return reference element respective position std   bool  read modiﬁed 
access element size undeﬁned behavior  throw exception 
note  example style initialization clarity  operator version mark 
method perform bound check throw exception  slow 
prefer code semantic operation guarantee bound 
case  access element vector constant time 
mean access ﬁrst element cost time access second element  third element
example  loop 
here know variable bound  waste cpu cycle check bound call operator 
member_function allow easy reference access ﬁrst last element
position frequently special accessor readable alternative  
example create sequence number 
pop element empty empty  prevent undeﬁned behavior 
number calculate display user 
data method return pointer raw memory std   internally store element 
will implement pre 
assume empty 
iterator  iterator explain detail example  iterate std    article iterator 
short  act similarly pointer element 
check iterator reach end complete tip secret professional 
consistent standard iterator actually  standard_library
improve error_message  catch non portable code  instrument iterator debug check non release build 
release build  class wrap underlying pointer optimize away 
persist reference pointer element indirect access 
reference pointer element remain stable access remain deﬁned add remove element element cause capacity change 
rule invalidate iterator 
see vector size capacity 
erase method  remove range element  part erase remove idiom 
ﬁrst move element end erase chop oﬀ
ineﬃcient operation index last element erase segment relocate
speed critical application require eﬃcient removal arbitrary element container  see std   
delete element value  
note point precede loop  iterator pointing element 
put altogether  line take reverse iterator  erase element point regular iterator  take result iterator  construct reverse iterator assign reverse iterator 
delete element free memory capacity remain unchanged 
reclaim space   
iterate std   way 
follow section  deﬁne follow   
template class 
enforce const element cbegin cend method allow obtain constant iterator non const 
constant iterator allow read modify content useful enforce const correctness  
note eﬃciency class std   basically class manage dynamically allocate contiguous array  principle explain here apply vector 
access content index eﬃcient follow row major order principle 
course  access put management content cache debate time notably here here  diﬀerence performance iterate std   compare raw array negligible 
principle eﬃciency raw array apply std   
section  bool  exception rule standard section speciﬁes specialization bool optimize space pack bool value  take only bit 
bit addressable  mean requirement place bool  datum store require contiguous  bool pass api expect bool array 
return proxy object imperfectly simulate reference bool overload assignment_operator 
example  follow code valid  dereference iterator return reference  
implementation dependent compiler architecture 
specialisation implement pack boolean low addressable section memory 
here  size bit low addressable memory 
modern system byte bit 
mean byte store boolean value 
improvement traditional implementation boolean store byte memory 
note  example show possible bitwise value individual byte traditional vs
will hold true architecture 
way visualise optimization 
example byte represent 
traditional store boolean value  
signiﬁcant improvement memory usage 
need pass bool style api  need copy value array  ﬁnd way api  memory performance risk 
section  insert element 
append element end construct element place  
note std   member_function due performance reason 
add element beginning cause exist element move 
want frequently insert element beginning container  want
insert element position 
section  std   array way std   array example  compatibility library 
possible element store contiguously 
contrast solution base previous standard see  member_function apply empty vector  cause undeﬁned behavior case 
 take address ﬁrst element equivalent pointer  empty  method interchangeable  
note  empty  undeﬁned
store base address datum  note operation  resize 
section  find element std   function  deﬁne algorithm header  ﬁnd element std   
return iterator ﬁrst element range compare equal
element question find  return const 
need perform search large  want sort ﬁrst  algorithm 
ﬁnd ﬁrst element satisﬁes condition 
addition parameter give  accept third argument function_object function pointer predicate function 
predicate accept element container argument return value convertible bool  modify container  version 
complete tip secret professional 
general solution  example  array 
solution allow append
order element receiving matter  number element avoid unnecessary copy operation  
section  matrix vector vector deﬁne vector 
row column cell initialise deﬁne   
vector convenient way represent eﬃcient  individual vector scatter memory data_structure cache friendly 
proper  length row case vector 
additional ﬂexibility source error 
complete tip secret professional section  sorted vector fast element lookup algorithm header number useful function work sorted vector 
important prerequisite work sorted vector store_value comparable 
unsorted sort function  add code here fill element   sorted vector allow eﬃcient lookup function 
 perform eﬃcient binary search
downside only give valid result sorted input range  search first value 
case  increase cost sorting pay oﬀ reduce cost insert end middle 
contain multiple value  std  will try return iterator ﬁrst search value 
need insert last searched value  function std  will cause shift     need upper bind lower bind iterator  function
reduce copy content
will minimum need store original 
reduction original signiﬁcant  reduction likely signiﬁcant 
swap original retain minimized   
note  member_function request guarantee reduce 
section  vector vector simply number 
current query member_function 
convenience function_return true  
add increase 
remove decrease 
vector implementation speciﬁc upper limit likely run ram reach  
simply currently allocate reserve memory
useful  frequent large size expensive 
current query member_function 
capacity great equal 
vector partly manage automatically  add decide grow 
implementer like grow factor golden ratio ideal value impractical due rational 
hand automatically shrink 
example  int  possibly guarantee  starter value  likely 
iterator pointer point std   invalid  only perform operation 
invalid iterator pointer will result undeﬁned behavior 
complete tip secret professional operation invalidate iterator pointer include  insertion operation change will invalidate iterator pointer  
section  find max min element respective index vector ﬁnd large small store method 
method deﬁne algorithm header 
output      minimum maximum retrieve time method 
section  function_return large vector  compiler require implicitly move local_variable return 
compiler perform copy elision case elide move altogether 
result return large object move cheaply long require special handling  complete tip secret professional 
 copy elision allow implement compiler 
due absence move semantic  legacy code code compile old compiler version implement optimization  ﬁnd vector pass output argument prevent unneeded copy  
 possible deﬁne operator arrow_operator user deﬁne type 
example  string header deﬁne concatenate string 
deﬁne function complete tip secret professional 
section  arithmetic_operator overload basic arithmetic_operator  + + overload operator
scroll explanation overloading class struct  
note  + return non const  return reference sense return object return const generally return const 
ﬁrst argument pass
modify original object foo + bar  modify foo 
const  will able modify object pass const option  will temporary copy pass object 
complete tip secret professional pass compiler
ﬁrst argument reference want modify  const  able modify 
argument modiﬁe  performance reason pass const pass const reference fast 
section  array subscript overload array subscript 
time implement version  const const version  object const  able modify object return 
argument pass const pass reference fast const change index accidentally 
operator return reference  design modify object return   
conversion deﬁne class struct  const return note  const allow const object convert 
section  complex number revisit code implement simple complex number type underlying ﬁeld automatically promote  follow language type promotion rule  application basic operator +    member diﬀerent ﬁeld scalar type 
complete tip secret professional 
complete tip secret professional 
complete tip secret professional 
overload lhs   rhs type want right leave 
library overload  return temporary object 
overload rh call lhs   rhs 
simply create proper token adl friendly proper signature  hook work 
example  suppose want element wise multiplication element  void  
element wise code extend work tuple pair style array  variable length container decide length match 
element wise type lhs  rhs 
write dot cross product operator obvious
extend support delimiter  like + 
delimeter precidence determine precidence name  important translate physics equation minimal extra 
slight change library support operator extend prior standard update  write monadic 
stateful name 
section  unary operator overload unary operator  overloading type 
scroll explanation 
note  preﬁx operator return reference continue operation
ﬁrst argument reference  preﬁx operator change object  reason const able modify 
postﬁx operator return value temporary previous value  reference  reference temporary  garbage value end function  temporary variable scope 
const  able modify directly 
ﬁrst argument non const reference call  object  const  able modify  reference  change original value 
copying need postﬁx operator overload habit preﬁx postﬁx loop 
loop perspective  functionally equivalent  slight performance advantage preﬁx  especially fat  class member copy 
example preﬁx loop   
section  comparison operator overload comparison  complete tip secret professional 
scroll explanation 
obviously return bool  true false corresponding operation 
take argument const  only compare  modify object 
pass reference fast value  sure modify  const reference 
note inside deﬁne const  reason function const  compare const object possible  compiler know modify
section  assignment assignment important allow change status variable 
overload assigment  automatically generate compiler  automatically generate assignment perform memberwise assignment   invoke assignment member  object copy member time 
assignment overload simple memberwise assignment suitable  example need perform deep copy object 
overload assignment easy  follow simple step 
test self assignment 
check important reason  self assignment needless copy  sense perform  next step will work case self assignment 
complete tip secret professional 
clean old datum 
old datum replace
now  understand second reason previous step  content object destroy  self assignment will perform copy 
copy member 
overload assigment struct  automatically generate compiler  will need take charge copy member object 
return reference  allow chain 
note  pass const  object assign change  pass reference fast value  sure modify accidentally  const 
assignment only overload  left value
deﬁne free function guarantee  disallow
declare  left value implicitly problem
section  function_call overload function_call 
overload bitwise fairly simple 
scroll explanation complete tip secret professional 
note  return return modiﬁed  reference reference temporary object  garbage soon 
const call code able modify 
inside class struct temporary object  modify  modify original object  case 
section  bit shift commonly write   read   way similar want overload normally  class struct  specify argument type  return_type stream want overload example  pass reference  allow chain chain  
example  return_type type want allow overload 
example  const 
parameter detail speciﬁes non listed variable capture 
omit  non listed variable inaccessible lambda body 
defaultcapture precede capture list 
speciﬁes local_variable accessible lambda body 
variable preﬁx capture
variable preﬁxe capture reference 
class capture list method  member accessible reference 
non listed variable inaccessible  list precede default capture 
speciﬁes argument lambda function 
specify mutable nonmutable const 
change variable retain call 
example  throw speciﬁcation noexcept 
example  lambda body throw attribute exception noreturn
require return_type arrow_operator return type determine compiler 
code block contain implementation lambda function 
lambda expression concise way create simple function_object 
lambda expression prvalue object call closure object  behave like function_object 
name  lambda expression  originate lambda calculus  mathematical formalism invent alonzo church investigate question logic computability 
lambda calculus form basis lisp  functional programming_language 
compare lambda calculus lisp  lambda expression share property unnamed  capture variable surround context  lack ability operate return_function 
lambda expression argument function take callable object 
simple create name function  only pass argument 
case  lambda expression generally prefer allow deﬁne function_object inline 
lambda consist typically part  capture list  optional parameter list body  empty  empty lambda  return
capture list capture list 
default  variable enclose scope access lambda 
capture variable accessible inside lambda  copy reference 
capture variable part 
lambda take argument 
lambda equivalent  
parameter list placeholder type auto actual type 
argument behave like template parameter function template 
follow lambda equivalent want sort 
call lambda lambda expression object closure  call function 
example illustrate usefulness lambda  version generic functor comparison 
section  specify return_type lambda single return_statement  multiple return_statement expression type  compiler deduce return_type  return bool   comparison yield boolean result 
section  capture specify variable name capture list  lambda will capture
mean generate closure type lambda store variable 
require variable type  
closure type put lambda body declaration operator const 
const apply access member variable closure type  capture variable member
lambda recursive  way invoke
lambda name body lambda refer capture assume lambda create body member  error 
solve problem 
std   lambda capture construct std    
work  sparingly 
slow type erasure now direct call  fragile copy return will break lambda refer original object  will work generic lambda 
smart pointer  
add indirection overhead  copy return  copy share state 
let return lambda  fragile solution 
combinator help short utility struct  solve problem  complete tip secret professional 
concept lambda calculus let recursion able name deﬁne 
exactly problem lambda
create lambda take  recurse  ﬁrst argument 
want recurse  pass argument recurse 
return object call argument  suitable  recurse  object namely ﬁrst argument 
forward rest argument call lambda
short  auto auto recurse  argument 
section  default capture default  local_variable explicitly speciﬁe capture list  access
lambda expression evaluate class  member implicitly friend class  class foo private  int  
lambda only friend class  access class declare
lambda capture pointer represent object instance outer call
add capture list  class foo private  
implicit apply member 
aware capture type 
capture pointer 
lambda live lifetime object create  lambda invalid 
mean lambda modify declare mutable 
pointer const  object point
outer member const 
aware default capture clause   will capture implicitly 
capture pointer 
error specify capture list default give 
lambda capture object  create time lambda create 
add capture list  class foo private  
section  capture precede local_variable name  variable will capture
conceptually  mean lambda closure type will variable  initialize correspond variable lambda scope 
variable lambda body will refer original variable  declare variable 
course  capture mean lambda escape scope variable capture 
complete tip secret professional call_function take  call will store lambda scope reference 
return lambda 
section  generic 
here  deduce base ﬁrst argument  will int 
generic take argument reference usual rule auto 
generic parameter take auto  forwarding reference pass argument rvalue_reference  auto auto 
here create visitor  polymorphic auto reason auto loop 
section  inline parameter pack unpack parameter pack unpack traditionally require write helper function time want
toy example  
want create unpack parameter pack index 
order call helper function 
time want unpack parameter pack create  end create custom helper function
unpack parameter pack invocation lambda  like template   template 
back toy example top  rewrite 
live example play
section  generalize capture 
generalized capture auto type deduction variable  type 
will declare capture value default  reference 
course  only useful intend access variable lambda complete work 
section  conversion function pointer lambda  capture list empty  lambda implicit conversion function pointer take
call function pointer behave exactly like invoke operator lambda 
function pointer way reliant source lambda closure  existence 
outlive lambda closure 
feature mainly useful lambda apis deal function pointer  function_object 
complete tip secret professional 
section  port lambda function functor lambda function syntactic sugar concise syntax writing functor 
equivalent functionality obtain verbose convert function functor  
section  range base loop iterate element iterator base range  numeric
value_store range expensive copy  want const auto 
require auto  typename  long implicitly convertible range value type 
need access iterator  range base help eﬀort  least 
type non member function find argument dependent lookup  base type 
useful create range type modify type namespace mine 
loop initialization statement execute exactly once 
cycle  iteration execution part execute 
loop deﬁne follow  
enter multiple variable type  int   
variable only valid scope loop 
variable deﬁne loop name hide execution loop 
enter multiple statement iteration execution part   +  + 
rough equivalent loop  rewrite loop body loop  continue  will skip increment part 
readability reason  practice only perform operation directly relevant loop 
declare initialization statement visible only inside scope loop release termination loop 
forget declare initialization statement modiﬁed loop  check condition 
example loop count  
explanation code fragment  boolean condition check equal 
true  loop execute 
false  loop end 
leave statement empty  create inﬁnite loop  
next common example iterate element stl collection  algorithm header 
section  loop loop execute statement repeatedly give condition evaluate false 
control statement know  advance  time block code execute 
example  print number  follow code complete tip secret professional 
note  ﬁrst statement combine 
rest create inﬁnite loop  follow construct 
variant loop  namely construct 
see loop example
section  loop loop similar loop  condition check end cycle  start 
loop guarantee execute least once 
follow code will print  condition will evaluate false end ﬁrst iteration  int  
note  forget semicolon end   need construct 
contrast loop  following will print condition evaluate false beginning ﬁrst iteration  int  
trivial loop occasionally write macro require scope case trail semicolon omit macro deﬁnition require user 
section  loop control statement  break continue loop control statement change ﬂow execution normal sequence 
execution leave scope  automatic object create scope destroy 
break continue loop control statement 
break_statement terminate loop consideration 
straightforward implementation easy read understand 
example  complete tip secret professional 
permit loop  declare variable loop  optionally enclose variable loop local scope want variable
section  range sub range range base loop  loop sub part give container range generate proxy object qualiﬁes range base loop 
complete tip secret professional 
 std   section  access element std   take key  value pair input 
complete tip secret professional 
std    element access directly give key index  std   rank    note operator will actually insert queried key
mean const std    key store
prevent insertion  check element exist example find
note will throw exception container contain request element 
container std   std    element access iterator  
insertion successful  iterator point newly insert element  bool true 
element key  insertion
happen  iterator point element cause conﬂict  bool false 
element miss  
complete tip secret professional 
behave way emplace std    int run  auto bond    iterator insert next will barry bond   insert   babe ruth    section  search std   std   way search key std   std   
iterator ﬁrst occurrence key  find function
return end key
way ﬁnd std   std   function  
std    return_value great value associate
only care  find strictly document intent multimap  once ﬁrst matching find 
case std    element key 
range  function return std   iterator low bind inclusive upper 
section  initialize std   std   std   std   initialize pair separate comma 
pair key  explicitly create  
std   allow duplicate key comma operator perform right leave  right
example  key type 
key act index
key unique  order 
type specify ordering  want override default ordering  
strless comparator return false key  actual content diﬀer 
multi map multimap allow multiple pair key store
interface creation similar regular 
section  delete element remove element  complete tip secret professional 
complete tip secret professional section  create std   user deﬁne type key order able class key require key copiable assignable 
ordering deﬁne third argument template argument constructor  
default keytype  default operator  requirement default 
just write comparison operator preferably functional object 
strict weak ordering mathematical term deﬁne relationship object 
deﬁnition object equivalent   false 
note object irreﬂexivity invariant equivalent
term mean object give type  return follow value compare operator 
parameter func args detail take ownership thread anymore function call seperate thread argument func complete tip secret professional section  create  thread create class 
thread separate ﬂow execution  analogous helper perform task simultaneously perform
code thread execute  terminate 
create thread  need pass execute
pass thread  free function_member function functor object lambda expression free function example execute function separate thread live example 
compare powerful easy just want run function asynchronously 
future destroy wait thread complete  code eﬀectively single thread 
easily overlook need return_value   square   complete point  return future destroy work launch policy    compile 
system decide want create thread
idea system choose thread run thread run eﬃciently 
unfortunately implementation commonly just choose create thread situation  need override behavior force system create thread 
beware race condition 
async future promise complete tip secret professional section  basic synchronization thread synchronization accomplish mutexe  synchronization primitive 
mutex type standard_library  simple 
lock mutex  construct lock
simple lock type  void worker 
section  create simple thread pool threading primitive still low level 
write high level construct  like thread pool  
create thread run start thread 
void merely type erase equivalent store move only type 
write custom fast void 
section  ensure thread join destructor invoke  call join detach
thread join detach  default will call 
raii  generally simple accomplish  class 
complete tip secret professional exception safety  create thread normally work perform calculation throw exception  join call thread process terminate 
section  operation current thread namespace function interesting current thread function call
function description return thread sleep speciﬁed amount time sleep speciﬁc time yield reschedule run thread  give thread priority 
section  condition variable condition variable primitive conjunction mutex orchestrate communication thread 
exclusive eﬃcient way accomplish simple familiar pattern 
allow code safely examine share state decide proceed acquisition 
producer consumer sketch    interesting 
section  thread operation start thread  will execute ﬁnishe 
point  need possibly thread wait thread ﬁnish  want result example 
section  thread local storage thread local storage create keyword 
variable declare speciﬁer thread storage duration 
thread program copy thread local_variable 
thread local_variable function local scope will initialize ﬁrst time control pass deﬁnition 
variable implicitly static  declare extern 
thread local_variable namespace class non local scope will initialize part thread startup 
thread local_variable destroy thread termination 
member class only thread local static 
will copy variable thread  copy thread  instance pair 
section  reassign thread object create empty thread object assign work later 
assign thread object active  joinable thread  will automatically call thread replace 
value category expression aﬀect function overload resolution 
value category determine important separate property expression 
property expression identity 
expression identity refer object variable_name 
variable_name involve expression  object still
property legal implicitly move expression value 
speciﬁcally  expression  function_parameter  will bind value parameter_type
deﬁne value category represent useful combination property  lvalue expression identity movable  xvalue expression identity moveable  prvalue expression identity moveable 
expression identity move
deﬁne value category  base solely property  glvalue expression identity rvalue expression move 
act useful grouping prior category 
graph serve illustration  section  rvalue rvalue expression expression implicitly move regardless identity 
precisely  rvalue expression argument function take parameter type type expr 
only rvalue expression give argument function_parameter  non rvalue expression overload resolution will pick function rvalue_reference parameter 
exist  error 
category rvalue expression include xvalue prvalue expression  only expression 
standard_library function exist explicitly transform non rvalue expression rvalue 
speciﬁcally  turn expression xvalue  identity prvalue expression pass parameter  gain identity function parameter name xvalue 
following  complete tip secret professional 
category expression rvalue speciﬁcally lvalue  call constructor overload 
call const overload  copy_constructor 
line change
return  base type parameter pass
function_call who return rvalue_reference rvalue expression speciﬁcally xvalue  call move_constructor 
line  move who content now undeﬁned 
line pass temporary assignment_operator 
overload take 
expression  rvalue expression speciﬁcally prvalue  call overload 
temporary move replace undeﬁned content speciﬁc content 
line create name rvalue_reference call refer
category confusing 
see  rvalue_reference  category expression rvalue 
lvalue expression 
call move_constructor expression 
line copy 
move employ
section  xvalue xvalue expire expression expression identity represent object implicitly move
general idea xvalue expression object represent destroy soon expire  part  implicitly move ﬁne 
limit expression represent temporary object   
function_call expression return reference complete tip secret professional literal string literal lvalue   true   lambda expression build addressof operator apply expression 
section  lvalue lvalue expression expression identity  implicitly move
expression consist variable_name  function_name  expression build dereference operator expression refer lvalue reference 
typical lvalue simply name  lvalue come ﬂavor 
section  glvalue glvalue generalized lvalue  expression expression identity  regardless move
category include lvalue expression identity move xvalue expression identity  move  exclude prvalue expression identity 
expression name  glvalue  
 preprocessor preprocessor simple text parser replacer run actual compilation code 
extend ease later language 
include ﬁle
deﬁne text replacement macro define c
conditional compilation ifdef complete tip secret professional section  include guard header ﬁle include header ﬁle 
source ﬁle compilation unit include multiple header indirectly  include header once 
header ﬁle include once contain deﬁnition  compiler preprocesse detect violation deﬁnition rule 
multiple inclusion prevent include guard   know header guard macro guard 
implement preprocessor define  ifndef  endif directive 
include guard cause problem developer  ensure macro unique header project 
speciﬁcally  header include guard  ﬁrst header include compilation unit will eﬀectively prevent include 
challenge introduce project number third party library header ﬁle happen include guard common 
ensure macro include guard conﬂict macro deﬁne header ﬁle 
implementation support pragma once directive ensure ﬁle only include once single compilation 
de facto standard directive  part iso standard 
example  pragma once 
project pragma once diﬃcult port compiler support
number code guideline assurance standard speciﬁcally discourage preprocessor include header ﬁle purpose place include guard header 
section  conditional logic cross platform handling nutshell  conditional pre processing logic code logic unavailable compilation macro deﬁnition 
complete tip secret professional prominent case diﬀerent app proﬁles 
basic  premium version software slightly diﬀerent feature 
example cross platform approach remove ﬁle illustrative ifdef window system file 
example command gcc process way define define add top 
ensure macro deﬁne  macro deﬁne value compare check  preprocessor silently assume value 
way work
approach assume default setting represent  change 
approach deﬁnition default explicit 
achieve combination ifndef error directive  include 
macro consist part  list  execution list 
example  define list
source  wiki see macro deﬁne seamingly irrelevant list liking  pass macro name
macro categorize group  object like macro function like macro 
macro treat complete tip secret professional token substitution early compilation process 
mean large repeat section code abstract preprocessor macro 
macro name write cap  easy diﬀerentiate normal code 
requirement  merely style programmer 
object like macro encounter  expand simple copy paste operation  macro name replace deﬁnition 
function like macro encounter  name parameter expand 
due function like macro parameter enclose parenthesis  area
prevent bug occur macro expansion  speciﬁcally bug cause single macro parameter 
note due simple expansion  care take parameter pass macro  prevent unexpected side eﬀect 
parameter modiﬁed evaluation  will modiﬁed time expand macro  want 
true macro enclose parameter parenthesis prevent expansion break
programmer normally terminate line semicolon  macro intend standalone line design swallow  semicolon  prevent unintended bug cause extra semicolon 
example  inadvertent double semicolon break block  prevent compiler match
prevent semicolon omit macro deﬁnition  will cause swallow  semicolon follow usage
normally  macro deﬁnition end end line 
macro need cover multiple line  backslash end line
backslash last character line  preprocessor follow line concatenate current line  treat single_line 
multiple time row 
case complex function like macro  useful give scope prevent possible complete tip secret professional name collision cause object destroy end macro  similar actual function 
common idiom  macro enclose block 
block generally
case zero argument variadic parameter  diﬀerent compiler_will handle trail comma diﬀerently 
compiler  visual studio  will silently swallow comma special syntax 
compiler  gcc  require place 
due wise conditionally deﬁne variadic macro portability
macro deﬁned undeﬁne user 
follow macro predeﬁne standard  line contain line number line macro change line directive 
value standard version compiler fully conformant 
deﬁne implementation host  freestande 
contain literal  alignment call alignment unaware operator 
additionally  follow macro allow predeﬁne implementation  present  stdc implementation dependent meaning  deﬁne only compile ﬁle implementation dependent meaning  value version  similarly cplusplus version 
contain name function static character array implementation deﬁne format 
top standard predeﬁne macro  compiler set predeﬁne macro 
refer compiler documentation learn
 gcc microsoft visual clang intel compiler macro just query support feature  ifdef cplusplus compile compiler extern  code decorate library header declaration here endif 
only macro argument 
compiler concatenate string ﬁnal printf argument will string literal newline_character end 
preprocessor will ignore space macro argument 
print statement will give result 
will convert string preprocessor  
part iso standard 
example  pragma once 
project pragma once modiﬁed standard compliant 
compiler employ precompile header pragma once result considerable speedup compilation process 
similarly  preprocessor achieve speedup compilation tracking header employ include guard 
net beneﬁt  pragma once include guard employ  depend implementation increase decrease compilation time 
common ﬁnd combine window applicant 
section  preprocessor error_message compile error generate preprocessor 
useful number reason include  notify user unsupported platform unsupported compiler 
return error gcc version early 
return error compile apple computer 
ill form code result substitute type value instantiate template class_template hard compile error  only treat deduction failure 
deduction failure instantiate template class_template specialization remove candidate complete tip secret professional set consideration candidate exist begin
only substitution failure context deduction failure  hard error 
section  map number type void 
primary purpose
example  let check member foo take argument   void struct   struct    work 
try instantiate   value  will cause compiler try look specialization  void 
option  primary  secondary involve instantiate underlie expression  member foo  return convert void  complete tip secret professional specialization prefer primary base partial ordering rule 
  value will true member require argument  substitution specialization only primary fallback
  value false 
simple case   void struct   struct  std     
notice common pattern void argument 
factor struct detail  void  struct    struct     
previous example now rewrite  
post proposal std trait similar
utility discover walter brown 
give wonderful presentation cppcon 
section  std   convenient utility boolean condition trigger sfinae 
deﬁne complete tip secret professional 
here  call due ambiguity 
second overload intend
due sfinae  hard error  candidate simply remove overload set 
result  only single viable candidate call 
worth keep mind std   helper top sfinae  sfinae work ﬁrst place 
let alternative implement functionality similar  
assume write appropriately  declaration exactly equivalent sfinae 
easy write  easy review understand glance 
now let want implement arithmetic helper avoid sign integer overﬂow favour complete tip secret professional wrap modular behaviour 
possible alternative  handle sign type typename arrow_operator  handle unsigned type just + amount 
strength std   play refactoring api design 
mean reﬂect valid just expression concise  depend place
contrast reﬂect intention clearly implementation leak declaration 
section  generalize creation  base sfinae experimental trait   
parameter typename default  op typename 
args   alia depend validity op  alias op nonesuch depend validity op 
ordering overload select inheritance  
test need form  test negation version condition  test just need  preferably decltype trail return 
leave option form  diﬀerentiate tag   similar iterator trait tag al 
work direct match base  base base 
tag dispatch extend number choice  bit clear intent 
section  trail decltype function template 
call argument invoke  viable function 
ﬁrst prefer conversion implicit conversion sequence conversion 
call argument invoke  ﬁrst function instantiation lead substitution failure 
result  candidate remove overload set 
second function unconstraine  select  
undeﬁned  hard compile error stack line val 
section  motivational example variadic pack parameter list  like follow code snippet  typename void func 
oﬀer solve problem 
example   sfinae constraint parameter
base case 
alternatively  implement hand behavior straight forward way 
follow example will demonstrate implementation combine produce alia   exactly suppose semantically 
scalable solution 
implementation first let emulate customize helper prior 
bs struct   implementation straight forward  
eventually helper  
bs typename  usage usage straight forward  sfinae constraint parameter
type follow rule user resource need write ﬁve special member_function simply default
person class introduce rule example  create resource manage object cstring  class cstre private  
term rule zero introduce
martinho fernande complete tip secret professional section  rule introduce member_function  move_constructor move assignment 
reason want follow rule  want follow rule  class require ﬁve member_function  move semantic desire  likely require
note  follow rule error  missed optimisation opportunity  long rule still follow 
move_constructor move assignment compiler normally will copy semantic possible  result eﬃcient operation due unnecessary copy operation 
move semantic desire class  need declare move_constructor assignment 
example rule class 
extend rule rule important performance reason  strictly case 
add copy_constructor assignment ensure move type will leak memory move constructing will simply fall back copy case  will perform copy caller anticipate 
section  rule rule state type need user deﬁne copy_constructor  copy assignment  destructor 
reason rule class need manage resource ﬁle handle  dynamically allocate_memory   need manage resource consistently 
copy function deal resource copy object  destructor destroy resource  accord raii principle 
type manage string resource  class 
first  will construct 
will copy 
generate copy_constructor will copy component type
mean point string 
end  destructor will call 
first destructor will call  will delete string 
destructor will call 
string delete 
call delete memory delete yield undeﬁned behavior 
avoid suitable copy_constructor 
approach implement reference count system  diﬀerent instance share string datum 
time copy perform  share reference count incremente 
destructor decrement reference count  only release memory count zero 
implement value semantic deep copying behavior  
swap content copy give ownership copy original 
destruction copy  function_return  release previously
typically happen circuitous route code system  location assignment simply pointer reference idea object 
copy assignment write able take account 
typical way wrap assignment logic condition like  
note  important think self assignment ensure code behave correctly happen 
self assignment rare occurrence optimize prevent actually pessimize normal case 
normal case common  pessimize self assignment reduce code eﬃciency careful 
example  normal technique implement assignment copy swap idiom 
normal implementation technique bother test self assignment self assignment expensive copy 
reason pessimization normal case show costly happen 
move assignment_operator protect self assignment 
logic operator base  handle swap memory just ﬁne 
move assignment logic series swap operation  need self assignment protection 
case  take similar measure
 raii  resource_acquisition_is_initialization section  lock 
wrong way implement locking unlocking mutex 
ensure correct release mutex unlock require programer sure ﬂow result exiting function result call unlock 
show brittle process require maintainer continue follow pattern manually 
appropriately craft class implement raii  problem trivial  complete tip secret professional 
scope  mutex guarantee unlocked 
doesn  matter reason scope exception early return case handle  regardless control ﬂow  guarantee will unlock correctly 
thank int  implement action execute only success throw exception scope 
previously bool just allow detect stack unwinding run 
success thank int std   implement action execute only failure throw exception scope 
previously bool std  just allow detect stack unwinding run 
failure section  case don  want write special class handle resource  write generic class  template typename function class final 
 exception section  catch exception try catch block catch exception 
code try section code throw exception  code catch handle exception 
rethrow manage  standard_library function
create object heap require catch pointer manage memory
cause memory leak 
reason catch reference practice eliminate need reconstruct object pass catch block propagate catch block 
catch reference allow exception handle polymorphically avoid object slicing 
rethrowe like throw  see example  still object slice throw statement copy type declare  
sure change like add modify message  catch const reference allow compiler optimization improve performance 
still cause object splicing see example 
warning  beware throw unintended exception catch block  especially allocate extra memory resource 
example  construct  subclass throw due memory run copy string  stream throw log respective mask set 
complete tip secret professional section  custom throw raw value exception  standard class
class inherit  way
here custom class directly inherit   
underlie memory possession object 
caller attempt free memory 
only just throw dumb error_message  value represent error exactly error handling eﬃcient meaningful 
class let handle error_message nicely    inherit class stdexcept 
override agenda 
section    introduce int   replace limited bool  
note constructor destructor  behavior diﬀerent catch throw exception anyway catch throw catch body 
function allow function try like function  function try will catch exception occur construction non local static variable destruction static variable 
section  nest exception exception_handle common case catch generic exception low level function ﬁlesystem error data transfer error throw speciﬁc high level exception high level operation perform unable publish photo web 
allow exception_handle react speciﬁc problem high level operation allow  only error programmer ﬁnd place application exception occur 
downside solution exception callstack truncate original exception lose 
force developer manually text original exception newly create
nest exception aim solve problem attach low level exception  cause  high complete tip secret professional 
section  function try block constructor only way catch initializer list  
complete tip secret professional 
 implementation deﬁne behavior section  size integral type follow type deﬁne integral type  char sign integer type unsigned integer type bool char char  split   entirely implementationdeﬁne minimum size  minimum size requirement type give section standard  detail
size char version standard specify   sizeof yield unsigned char  sign char  char implementation deﬁne char type sign unsigned 
char large represent diﬀerent value  suitable store code unit 
size sign unsigned integer type standard speciﬁes   list standard sign integer type  consist sign char  short int  int  long int  long long int  type will least storage precede list 
speciﬁed  type correspond standard unsigned integer type  unsigned char  unsigned short int  unsigned int  unsigned long int  unsigned long long int  size alignment corresponding sign type 
additionally  speciﬁed  char size alignment requirement sign char unsigned char 
version prior  long long unsigned long long oﬃcially part standard 
introduction  compiler support long long extended sign integer type  unsigned long long extended unsigned integer type  rule type 
standard guarantee 
type minimum range value support  speciﬁed  inherit standard  
minimum size type roughly infer range  determine minimum number bit require  note give platform  type actual supported range large minimum 
note sign type  range correspond complement  commonly complement  allow wide range platform comply standard 
type minimum range minimum bit require unsigned sign short unsigned short sign int unsigned int sign unsigned sign 
minimum range sign unsigned minimum bit require type allow great minimum size requirement  type diﬀer size implementation 
notable example bit data model  system bit window bit int long  system bit linux bit int bit long 
due integer type assume ﬁxed width across platform 
integer type ﬁxed width require  type cstdint header  note standard optional implementation support exact width type         
size size implementation deﬁne  speciﬁed  stipulation give  large represent code unit  size  signedness  alignment  require least bit size 
size bool size bool implementation deﬁne  
size  speciﬁed  distinct type  range value represent distinct code unit large extended character set support locale 
size  signedness  alignment complete tip secret professional integral type  know underlying type 
type size implementation deﬁne  speciﬁed  example  least   bit  system support unicode  example  require least bit exception rule window  bit compatibility purpose 
inherit standard  iso  only minor rewording 
depend implementation  size   bit 
common example unix unix like system  bit  
window  bit  
system only bit support  bit 
unicode support desire  recommend    
datum model mention width integer type diﬀer platform 
common model follow  size speciﬁe bit  int pointer model model  bit window 
note  model speciﬁcally mention standard
section  char unsigned sign standard specify char sign unsigned 
diﬀerent compiler implement diﬀerently  allow change command line switch 
section  range numeric type range integer type implementation deﬁne 
header limit template minimum maximum value fundamental type 
value satisfy guarantee standard climits cinttypes header 
complete tip secret professional equal  great equal 
long equal  equal 
ﬂoating point type max maximum ﬁnite value min minimum positive normalize value 
additional member ﬂoating point type  implementation deﬁne satisfy guarantee standard cfloat header 
member give number decimal digit precision 
member minimum negative power normal 
member maximum power ﬁnite 
member true  type conform iec ieee  range determine standard 
section  value representation ﬂoate point type standard require long double least precision double  least precision float  long double represent value double represent  double represent value float represent 
detail representation implementation deﬁne 
ﬂoating point type speciﬁes radix representation
true  representation match format deﬁne iec ieee 
section  overﬂow convert integer sign integer sign unsigned integer convert sign integer type  value representable destination type  value produce implementation deﬁne 
example  suppose implementation  range sign char range unsigned char complete tip secret professional 
underlying type explicitly speciﬁe unscoped enumeration type  determine implementation deﬁne manner 
code  int  unsigned int  short  long long  give example 
note enum size return sizeof underlying type 
section  numeric_value pointer result cast pointer integer implementation deﬁne  
refer deﬁnition standard  unsigned integer type property valid pointer void convert type  convert back pointer void  result will compare equal original pointer 
majority modern platform  assume ﬂat address space arithmetic equivalent arithmetic char  entirely possible implementation perform transformation cast void long transformation reverse cast back void 
technicality complete tip secret professional xsi conformant open system interface system  type require  optional 
meaning standard  function object  guarantee standard hold function pointer 
anyway posix conformance require function pointer type representation type pointer void 
conversion function pointer void alter representation 
void value result conversion convert back original function pointer type  explicit cast  loss
 typedef name diﬀere only absence presence initial deﬁne  denote correspond sign unsigned type  implementation correspond type
section  number bit byte  byte space occupy char object 
number bit byte give  deﬁne climit require least 
modern system bit byte  posix require exactly  system great single byte comprise   bit 
 special member_function section  default constructor default constructor type constructor require parameter call 
name type construct member_function constructor 
circumstance  developer constructor disqualifying condition  compiler implicitly empty default constructor  class note  member need default constructible  
prevent implicit default constructor creation  common technique declare private deﬁnition 
intention cause compile error try constructor result access private error linker error  depend compiler 
sure default constructor functionally similar implicit deﬁne  developer write empty explicitly 
 developer delete keyword prevent compiler default constructor 
determine type default constructor primitive type
circumstance  user destructor  disqualifying condition  complete tip secret professional 
approach problem 
strong exception guarantee  clear resource recover 
duplicate logic copy construction copy assignment 
remember self assignment check  just add overhead copy operation  still critical 
satisfy strong exception guarantee avoid code duplication double subsequent move assignment  copy swap idiom  class person  
operation  remain untouched 
next  swap member rh  rhs scope 
self assignment work eﬃcient copy swap involve extra allocation deallocation  unlikely scenario  slow typical case account
class movable copyable  need delete copy assignment  assignment will simply ill form due delete copy_constructor 
section  implicit move copy bear mind declare destructor inhibit compiler generate implicit move_constructor move assignment_operator 
declare destructor  remember add deﬁnition move operation 
declare move operation will suppress generation copy operation  add object class require copy semantic 
 random number generation section  true random generator generate true random value cryptography generator 
implement term implementation deﬁne pseudo random number engine non deterministic source 
detect implementation possible entropy member_function return zero generator completely deterministic  popular library gcc llvm return zero  high quality external randomness 
section  generate pseudo random number pseudo random number generator generate value guess base previously generate value 
word  deterministic 
pseudo random number generator situation true random number require 
code create random number generator  distribution generate integer range equal likelihood 
count time generate 
template parameter speciﬁes type integer generate 
generate ﬂoat double 
section  generator multiple distribution random number generator multiple distribution 
distribution will generate value  generate  chance generate 
 reference section  deﬁne reference reference behave similarly  entirely like const pointer 
reference deﬁne suﬃxe ampersand type 
reference initialize correctly time deﬁnition  modiﬁed
follow piece code cause compile error  
bind directly reference nullptr  pointer  
note stable 
container random access iterator sort algorithm  
sort member_function implement sort algorithm work iterator type 
member sort function sort entire  sort sub range element 
fast splicing operation  extract element sort sort stuﬀ back eﬃciently like  void mylist  start  end 
output  entry equal key possible  like follow example 
output complete tip secret professional 
section  sort sequence container overloaded operator ordering function pass  will order element call operator pair element  build comparison operator 
overload operator default sort call work user deﬁne type 
section  sort sequence container specife order value container operator overload  specialized functor sort ascend descend order  
 regular expression return entire character sequence match regex  optionally capture match object return portion character sequence match regex  optionally capture match object return input character sequence modiﬁed regex replacement format string initialize character sequence deﬁne iterator  capture index iterate regex 
dereference return currently index match regex 
incremente move next capture index currently last index  reset index hind next occurrence regex match character sequence initialize character sequence deﬁne iterator regex 
dereference return portion character sequence entire regex currently match 
incremente ﬁnd next occurrence regex match character sequence signature complete tip secret professional 
regular expression  introduce  optionally support return match string textual syntax deﬁne replace match pattern string operate
section  basic example 
section  example processing capture iteratively choice 
dereference return 
great conditional capture capture interdependence 
let want tokenize code 
give  enum tokens number  addition  subtraction  multiplication  complete tip secret professional division  equality    
notable gotcha regex iterator regex argument value  value will work  visual studio bug 
section  anchor only anchor  assert start string assert end string assert character beginning end string assert character 
important note here anchor consume character 
section  example 
section  example tremendous tool extract element comma separate value ﬁle 
advantage iteration  iterator able escape comma method struggle  
notable gotcha regex iterator regex argument value 
value will work 
section  quantiﬁer let  give const string phone number validate 
start require numeric zero quantiﬁer    quantiﬁer    fall short contain invalid numeric string like    let  quantiﬁer ensure least digit  will guarantee will least phone number digit  contain numeric string 
important note lazy quantiﬁer match character possible  only way character will match character match 
now  area code optional only accept country code area code present 
ﬁnal regex  require digit 
digit optionally precede digit 
note append lazy quantiﬁer   
non capturing group match once  prefer match 
cause mismatch didn  include area code like    
conclusion quantiﬁer topic  like mention appending quantiﬁer possessive quantiﬁer 
lazy quantiﬁer possessive quantiﬁer append quantiﬁer 
possessive quantiﬁer  only function assist regex engine tell  greedily take character don  give cause regex
example doesn  sense   like    wouldn  match will match character match allow regex succeed 
possessive quantiﬁer regex start possessive quantiﬁer leave oﬀ   character  regex engine try adjust allow match  regex just tracking see early adjustment allow match 
parent class  let  start polymorphic class  class public  virtual virtual virtual 
deﬁne polymorphic behavior introduce member_function keyword virtual 
here will obviously implement diﬀerently square circle 
function invoke object  function correspond real class object will determine runtime 
sense deﬁne abstract 
function follow 
mean function pure virtual_function 
polymorphic class deﬁne virtual destructor 
deﬁne non virtual member_function 
function_will invoke object  function_will choose depend class compile time 
here deﬁne way 
class contain least pure virtual_function abstract_class 
abstract class instantiate 
only pointer reference abstract_class type 
derive class once polymorphic base_class deﬁne derive 
example  class square  public point  
explanation  deﬁne override virtual_function parent class 
function virtual parent class virtual derived_class 
need tell compiler keyword virtual
recommend add keyword override end function_declaration  order prevent subtle bug cause unnoticed variation function signature 
pure virtual_function parent class deﬁne instantiate object class  will abstract_class 
oblige override virtual_function 
keep version parent suit need 
example instantiation 
time  need know real type object  virtual_function allow manipulate object independently type  std       need downcast  design perfect 
need downcast 
typical example want invoke non virtual_function exist only child class 
example circle 
only circle diameter 
class deﬁne class circle  public see example define polymorphic class point center  
risky  circle behavior code will undeﬁne 
play russian roulette  safely 
speciﬁcally polymorphic class  
section  polymorphism destructor class intend polymorphically  derive instance store base pointer reference  base_class  destructor virtual protect 
case  will cause object destruction check vtable  automatically call correct destructor base dynamic type 
case  destroy object base_class pointer reference disable  object only delete explicitly treat actual type 
 perfect forward section  factory function suppose want write factory function accept arbitrary list argument pass argument unmodiﬁed function 
example function  safely construct return
language rule variadic_template rvalue_reference allow write function 
compiler_will expand parameter pack correct number argument call site 
argument pass constructor std   
function require preserve ref qualiﬁer argument 
speciﬁer final only virtual  member_function apply non virtual member_function like final  speciﬁer caller  override  prevent override virtual_function derived_class 
speciﬁer override final combine desire eﬀect  class  public base 
section  override virtual later speciﬁer override special meaning onwards  append end function signature 
signiﬁes function override function present base_class base_class function virtual complete tip secret professional run time signiﬁcance speciﬁer mainly mean indication compiler example will demonstrate change behaviour override 
reasoning derived_class deﬁne additional member initialize constructor case destroy destructor case  call member_function unsafe 
construction destruction object  dynamic type constructor destructor class derived_class 
section  pure function specify function pure abstract  declaration 
class pure function abstract  instantiate  only derived_class deﬁne  inherit deﬁnition pure function instantiate 
case  complete tip secret professional 
couple reason want want create class instantiate  prevent derived_class instantiate  declare destructor pure 
destructor  deﬁne anyways  want able deallocate
destructor likely prevent memory leak polymorphic will incur unnecessary performance hit declare function 
useful interface 
 undeﬁned behavior undeﬁned behavior ub 
accord iso standard    behavior mean program encounter ub  allow want 
mean crash  simply demon ﬂy nose  work properly 
needless avoid write code invoke ub 
cause segmentation fault  undeﬁned happen 
result undeﬁned behavior  uninitialised 
incorrectly  claim value  indeterminate   value memory location 
act access value example give undeﬁned behaviour 
practice  print  garbage value  common symptom case  only possible form undeﬁned behaviour 
highly unlikely practice reliant speciﬁc hardware support compiler equally electrocute programmer compile code sample
compiler hardware support  response undeﬁned behaviour markedly increase average live programmer understanding true meaning undeﬁned behaviour standard place constraint resultant behaviour 
note static variable zero initialize possible static  
pointer point element past
section  delete object pointer base_class
section standard delete call object static type destructor  static type object delete diﬀerent dynamic type  static type base_class dynamic type object delete static type destructor behavior undeﬁned 
case regardless question class add data member base_class 
section  extend std posix namespace standard generally forbid extend std namespace  behavior program undeﬁne add declaration deﬁnition namespace std namespace namespace std speciﬁed 
posix behavior program undeﬁne add declaration deﬁnition namespace posix namespace namespace posix speciﬁed 
following  algorithm 
standard forbid algorithm header include deﬁne deﬁnition  code violate deﬁnition rule 
general  forbid 
speciﬁc exception allow 
usefully  allow add specialization user deﬁne type 
example  suppose code class 
section  invalid pointer arithmetic follow pointer arithmetic cause undeﬁned behavior  addition subtraction integer  result belong object pointer 
pointer arithmetic operand pointee type match dynamic type object point ignore cv qualiﬁcation 
accord standard   pointer base_class complete tip secret professional 
note  only exception rule 
return_statement  compiler automatically insert return  safely leave
section  access dangle reference illegal access reference object scope destroy 
program undeﬁned behavior  work print case 
section  shift invalid number position build shift operator  right operand nonnegative strictly bit width promote leave operand 
behavior undeﬁned 
argument delete return array  behavior undeﬁned 
object only deallocate delete allocate array 
argument delete return array  behavior undeﬁned 
argument free return malloc  behavior undeﬁned 
evaluation expression  result mathematically deﬁne range representable value type  behavior undeﬁned 
nasty yield reproducible  non crashing behavior developer tempt rely heavily observed behavior 
complete tip secret professional 
compiler exploit undeﬁned behavior optimize 
redeﬁnition class translation unit  problem require diagnose compiler 
section  modify const object attempt modify const object result undeﬁned behavior 
apply const variable  member
compiler_will inline value const object  possible code compile print 
compiler place const object  value read only memory  segmentation fault occur 
case  behavior undeﬁne program
follow program conceal subtle error  iostream 
code  getfoo create singleton type const member initialize 
call value
name  evil  call setter 
pointer point const object
pointer obtain constructor 
const object const initialization complete  type  const  constructor 
complete tip secret professional 
undeﬁned behavior occur obviously dangerous construct program 
section  return noreturn function 
section  overﬂow conversion ﬂoate point type conversion integer type ﬂoate point type  ﬂoate point type integer type  ﬂoate point type short ﬂoating point type  source value range value represent destination type  result undeﬁned behavior 
example  double   hold number large  ub 
initialisation example formally deprecate schedule removal future version standard 
number compiler issue warn suspicious conversion 
 compiler typically warn deprecate conversion 
example illegal  result compiler diagnostic  later 
similar example
exception strict aliasing rule  object class type access type base_class actual class type 
type access char unsigned char  reverse true  char array access arbitrary type 
sign integer type access correspond unsigned type vice versa 
rule non static member_function call object actually type deﬁne class function  derived_class  undeﬁned behavior occur 
true function access object 
section  invalid derive base conversion pointer member convert  member point belong class base_class derived_class
behavior undeﬁned 
see base conversion pointer member section  destroy object destroy 
section  access nonexistent member pointer member access non static member object pointer member  object actually contain member denote pointer  behavior undeﬁned 
see derive conversion 
section  float_point overﬂow arithmetic operation yield ﬂoating point type produce value range representable value result type  behavior undeﬁned accord standard  deﬁne standard machine conform ieee 
section  call pure virtual member constructor destructor standard state  member_function call constructor destructor abstract_class  eﬀect virtual call pure virtual_function directly indirectly object create destroy constructor destructor undeﬁned 
generally  authority  
scott meyers  suggest call virtual_function non pure constructor dstructor 
complete tip secret professional follow example  modiﬁed link  class transaction 
implicitly call constructor  ﬁrst call constructor transaction 
constructor transaction call object type  only type transaction 
call  will intuitive namely call 
pure virtual  example  behaviour undeﬁned 
non pure virtual  will call 
section  function_call mismatch function pointer type order call function function pointer  function pointer type exactly match function 
 value reference semantic section  deﬁnition type value semantic observable state functionally distinct object type 
mean copy modiﬁcation will way visible old 
basic type value semantic  int  
type reference semantic instance type share observable state external  manipulate will cause state change
pointer value semantic point reference semantic state point 
section  deep copying move support type wish value semantic  need store object dynamically allocate  copy operation  type will need allocate object 
copy assignment 
kind copying call deep copy  
eﬀectively take reference semantic turn value semantic  struct    
move semantic allow type like avoid truly copy reference datum 
user value way provoke move  copy  leave empty datum reference  complete tip secret professional 
 overload resolution section  categorization argument parameter cost overload resolution partition cost pass argument parameter diﬀerent categorize  call  sequence  
sequence include zero  conversion standard conversion sequence void   
general principle standard conversion sequence cheap  follow user deﬁne conversion sequence  follow ellipsis conversion sequence 
special case list initialization sequence  constitute conversion initializer list expression type 
cost determine deﬁne equivalent conversion sequence  depend parameter_type form initializer list 
section  arithmetic promotion conversion convert integer type corresponding promote type convert integer 
order ensure will ambiguity call function integral ﬂoating point argument standard type  total overload need  possible argument type  overload match exactly unique overload promote argument type will select 
exact match  take reference cv qualiﬁed standard conversion sequence viable function 
solution here constrain constructor 
result  copy_constructor invoke want 
section  exact match overload conversion need parameter_type only conversion need type
purpose overload resolution  type  array match exactly type  pointer  function type match exactly function pointer type  complete tip secret professional 
inaccessible function select overload 
section  step overload resolution step overload resolution 
find candidate function name lookup 
unqualiﬁed call will perform regular unqualiﬁed lookup argument dependent lookup applicable 
filter set candidate function set viable function 
pick viable candidate 
 move semantic section  move semantic move semantic way move 
empty old place
rvalue_reference type diﬀerent normal reference  now call lvalue reference 
act diﬀerent type  constructor function take type will deal move semantic 
reason need diﬀerent type specify diﬀerent behavior 
lvalue reference constructor copying  rvalue_reference constructor move 
move will 
way discuss
important note create just rvalue_reference 
word statement change content auto possibly
introduce core language standard_library support move
idea temporary want logical copy  safe just pilfer resource  dynamically allocate buﬀer  leave logically empty still destructible copyable 
core language support mainly rvalue_reference type builder   rvalue_reference  special support move_constructor  suppose eﬃciently move resource speciﬁed actually copy resource  special support move assignment auto arrow_operator  suppose move source 
standard_library support mainly function utility header 
function produce rvalue_reference speciﬁed  move just temporary 
container actual copying typically complexity  number item container  move  constant time 
algorithm logically copy container time  reduce complexity impractical just linear 
complete tip secret professional article  container change  dr 
dobbs journal september  andrew koenig present interesting example algorithmic ineﬃciency style programming variable immutable initialization 
style loop generally express recursion 
algorithm generate collatz sequence  recursion require logically copy container  base example andrew koenig dr 
dobbs journal article 
concrete number  visual compiler invocation result collatz sequence item item copy  plus copy_constructor call 
item copy remove simply move vector value need anymore 
remove const reference type argument  pass vector value 
function_return automatically optimize 
call vector pass  function  just apply move buﬀer actually copy  
algorithm necessarily still length collatz sequence produce  dramatic improvement  
language support move still express enforce immutability
alas  support
loop free code move enforce declaration relevant name incomplete struct  struct result  ugly likely understand programmer  diagnostic misleading 
sum language library support move allow drastic improvement algorithm complexity  due support incompleteness  cost forsake code correctness guarantee code clarity const
completeness  instrumented class measure number item copy due copy_constructor invocation  class item class private  
create copy_constructor  function copy create normally choose syntax show constructor take reference type  copy manually inside method 
complete tip secret professional alternatively  write const default  automatically copy member  copy_constructor 
create move_constructor  will take rvalue_reference lvalue reference  like here 
move semantic design allow  steal  state original instance  important original instance look like stealing 
case  change value zero double amount dollar play 
move construct object old 
simple example  show move_constructor intend
useful complex case  resource management involve 
section  move assignment similarly assign value object lvalue reference  copy move value object construct
call move assignment 
move value object exist object 
complete tip secret professional 
access static function decorate correctly  point function like normal function class  typedef int  fn type function accept int return int note myfn type  fn  
point function_call point function_call section  pointer function access function class  need  handle  complete tip secret professional pointer reference
give class  point member pointer  syntax correct 
course  pointer declare type point 
give class  point member  syntax correct 
course  declare type point 
point fetch point fetch complete tip secret professional 
syntax require extra syntactic element  deﬁne type need mention base type  inside class  int   
class reference want  need akin
class want  need arrow_operator akin arrow_operator 
section  pointer static variable static variable just_like ordinary variable  scope  inside class  need name decorate class_name  accessibility  public  protect private 
access static variable decorate correctly  point variable like normal variable class  class public  
section  basic pimpl idiom 
pimpl contain state 
description state expose header ﬁle  only expose implementation 
real  implementation pimpl 
danger  note work implement point ﬁle impl fully visible 
 std    wrap element callable 
section  std   think situation need callback argument 
section  bind std   callable type example show way std   call like class member lambda complete tip secret professional function_call right argument argumen order  type count
live output  test store function argument    call argument    result call argument    result call argument     result call argument    result lambda call argument    result section  store argument program need store argument future calling
complete tip secret professional 
output  call 
std    copy move give callable
take callable arbitrary type  will frequently allocate_memory dynamically
implementation call  small object optimization   small type like pointer  member pointer  functor little state will store directly object 
only work type noexcept move constructible 
standard require implementation
parameter preferred solution sortmycontainer  let assume possible desirable reason 
sortmycontainer need store pred call 
pred allocate_memory functor give non trivial size 
sortmycontainer need callable  just reference
here overkill  eﬃcient 
standard_library type merely reference callable 
alternate solution will find  choose live overhead 
eﬀective mean control memory allocation object come
yes  constructor take allocator  implementation implement 
constructor take allocator long part type 
way manage allocation 
call slow call content directly 
instance hold callable  call indirect 
overhead call order virtual call 
 const keyword const initial  declare const variable  change const  declare reference const variable const  declare pointer const 
pointer change  underlying data member change pointer const  declare const pointer 
pointer reassign point underlying data member change const const  declare const pointer const 
section  avoid duplication code const non const getter method 
method diﬀer only const qualiﬁer overload 
need version getter return reference member 
let foo class  method perform identical operation return reference object type bar  class foo public  
only diﬀerence method non const return non const reference modify object second const return const reference 
avoid code duplication  temptation call method
call non const method const
call const method non const
will require remove const qualiﬁer 
solution struct foo 
call const method non const  object non const  cast away const allow 
examine follow complete example  iostream class student 
const member  pointer eﬀectively const myclass myclass 
mean change member variable compiler_will emit warn 
setmyint declare const 
mark member_function const possible 
only const member_function call const myclass 
static method belong class call object  modify object internal variable 
declare static method const redundant 
section  const local_variable 
especially convenient deal long type_name  
section  auto proxy object auto behave expect programmer 
type deduce expression  type deduction right
example  proxy object code  
modiﬁes container  pseudo reference end dangle  refer element long exist 
case like declare variable auto initialize cast type want deduce  auto  point  simply replace auto bool sense 
case proxy object cause problem expression template 
case  template design last current full expression eﬃciency sake  proxy object next cause undeﬁned behavior 
section  auto expression template 
auto  create dangle reference 
mult return std    code deﬁnitely 
section  auto  const  reference auto keyword represent type  similar char 
modiﬁed const keyword symbol represent const type reference type 
modiﬁer combine 
example  type type will infer  iteration loop copy string
body loop modiﬁes call  stuff   only copy will modiﬁed  original member
hand  declare auto will reference type infer  iteration loop will assign reference string 
complete tip secret professional 
auto range base loop  generally practice const auto loop body will modify structure loop avoid unnecessary copy 
section  trail return_type auto syntax trail return_type  
solution large object dynamically allocate manage pointer 
solution work small primitive type rarely dynamically allocate manage pointer 
example  struct person deﬁne 
possible person pet 
pet member person declare std   wrapper 
here return fraction  deﬁne inﬁnity return empty 
complex case  template class range  class pre 
return empty find  contain tothe element
let take maybe null give default behavior actually need value 
way  default behavior  decision push back point complete tip secret professional 
section  introduction optional know maybe type represent type content present 
implement std   class 
example  object type contain value type_int  contain value 
optional commonly represent value exist return_type function return meaningful result 
approach approach solve problem std   solve  complete  pointer  sentinel  bool  
optional pointer case  pointer exist object nullptr failure 
limit case exist  value type  return resort memory allocation 
optional sentinel common idiom special value value meaningless 
integral type  nullptr pointer 
reduce space valid value diﬀerentiate valid meaningless type natural choice sentinel value 
optional bool  common idiom pair  element bool value meaningful 
rely value type default constructible case error  possible type possible undesirable
 case error  need construct
section  optional represent failure function  function typically represent failure way  null pointer return 
call function delegate app instance delegate return nullptr 
solution dynamically allocate large manage pointer  solution small typically stack allocate pass copy 
speciﬁc value return_type reserve failure 
call function unsigned vertex vertex connect return zero
value pair bool return_value meaningful 
call function  bool str string argument integer return undeﬁned int bool set false 
example  john give pet  fluﬀy furball 
function call retrieve john  pet whisker 
john pet name whisker  function complete tip secret professional 
 copy elision section  purpose copy elision place standard object copy move order initialize object 
copy elision call return_value optimization optimization speciﬁc circumstance  compiler permit avoid copy move standard happen 
follow function  
standard clear code interpret 
copy elision rule permit compiler ignore creation temporary subsequent copy destruction 
compiler take initialize expression temporary initialize function return_value directly 
obviously performance 
visible eﬀect user  
type copy move_constructor call 
compiler elide copy move  type still able copy move 
side eﬀect copy move_constructor guarantee circumstance elision happen 
will call func
will print  copying   temporary rvalue moveable type 
will print  move  
copy elision rule  require print  move  
copy elision rule exist  move_constructor call  implementation dependent 
depend calling copy move_constructor contexts elision possible 
elision optimization  compiler support elision case 
regardless compiler elide case type still support operation elide 
copy construction elide  type still copy_constructor  will call 
section  guarantee copy elision normally  elision optimization 
virtually compiler support copy elision simple case  elision still place burden user 
namely  type who copy move elide still copy move operation elide 
useful case mutex privately hold system  external user want scope lock
legal  std   copy move 
virtually compiler_will elide copy move  standard still require type operation
mandate elision eﬀectively redeﬁne meaning expression copy move take place 
pre wording  code create temporary temporary copy move return_value  temporary copy elide 
word  create temporary
 prvalue expression  initialize object type expression  generate temporary 
expression directly initialize object 
return prvalue type return_value  type need copy move_constructor 
rule  code work 
wording work case prvalue type match type initialize 
give will require copy move  std    result prvalue expression initialize object type  copying move will happen 
expression create temporary  directly initialize 
elision copy move elide elide 
term  guarantee copy elision  misnomer  feature propose standardization 
guarantee elision eliminate copy move altogether  redeﬁne copy move elide 
feature only work case involve prvalue expression 
usual elision rule  
valid case copy elision  rule eliminate copy move case 
type still copy move_constructor initialize return_value 
still compile error 
implementation allow refuse elide copy pass return object trivially copyable type 
allow move object register  abi mandate calling convention 
copy elision permit expression directly create object str  
useful optimization case constructor declare explicit 
example  write   only string implicit constructor convert const char string 
constructor explicit  force temporary call explicit constructor 
copy elision needless copy move 
section  return_value elision return prvalue expression function  prvalue expression type function 
section  name return_value elision return lvalue expression function  lvalue  represent automatic variable local function  will destroy return automatic variable function_parameter type variable type function return_type case  copy move lvalue elide  
 bit operator 
binary value binary value binary value  int int bit wise xor change value original value speciﬁcally assign bit wise 
note  following example show example nice trick 
production code way achieve result 
note shift value left time
possible output   compiler_will yield result expect  note leave shift sign number sign bit aﬀecte  result undeﬁned 
undeﬁned number bit wish shift negative number large number bit type left hold  example  
complete tip secret professional right bit wise shift will shift bit left hand value number speciﬁed right  note operation right shift standard  happen bit right shift sign negative number implementation deﬁne guarantee portable  example  int  int  value will depend compiler 
 fold expression section  unary fold unary fold fold parameter pack speciﬁc 
kind unary fold  unary left fold 
section  binary fold binary fold basically unary fold  extra argument 
kind binary fold  binary left fold value op 
ts void  ts 
compiler_will allow issue warning  will expect   compiler extension guarantee across compiler 
union specialized struct member occupy overlap memory 
complete tip secret professional 
 unnamed type section  unnamed class name class struct  unnamed class struct instantiate deﬁne  constructor destructor 
section  anonymous union member name anonymous union belong scope union declaration distinct name scope 
example here construction example anonymous member struct  standard conform 
think cache expensive computation  keyword 
lock example  datum ﬁeld lock unlocked inside const method  keyword
keyword break logical const ness object 
example cache  class 
bit ﬁelds tightly pack structure reduce size 
painless  specify number bit member  compiler work mingling bit 
restriction inability take address bit ﬁeld member  store mingle 
cost bit ﬁeld slow access  memory retrieve bitwise operation apply extract modify member value 
operation add executable size 
section  declaration usage 
here  ﬁeld will occupy bit memory 
speciﬁe expression variable_name 
base bit ﬁeld integral bit int bit int 
unsigned recommend  surprise come 
bit require  replace   number bit require 
example  struct date 
non scalar std   initialize follow way  struct int   aggregate aggregate initialization brace elision 
pos range container  runtime segmentation violation error occur 
method element access equivalent classic array thereof eﬃcient pos 
complexity constant 
complexity constant 
 singleton design pattern section  lazy initialization example lift section here  see article simple design lazy evaluate guarantee destruction singleton  sample singleton 
classic lazy evaluate correctly destroy singleton 
see article discuss thread implication singleton  singleton instance declare static variable getinstance method see article explain double check locking will work  common undeﬁned behaviour programmer know
section  static deinitialization safe singleton 
time multiple static object need able guarantee singleton will destroy static object singleton long need
case keep singleton alive user static destructor call end program  class 
section  thread safe singeton standard guarantee initialization function scope object initialize synchronize manner 
implement thread safe singleton lazy initialization 
 iso standard  ﬁrst publication standard making internally standardize language 
time  evolve result diﬀerent dialect 
page  ﬁnd overview diﬀerent standard change compare previous version 
detail feature specialized page 
section  current working draft publish iso standard sale iso store 
work draft standard publicly free
diﬀerent version standard  propose refer march working draft 
refer november working draft refer february working draft section  standard feature complete propose standardization 
compiler experimental support feature  refer 
language extension fold expression declare non type template argument auto guarantee copy elision template parameter deduction constructor structure binding compact nest namespace attribute  fallthrough  nodiscard  default message initializer switch complete tip secret professional inline variable constexpr order expression evaluation guarantee dynamic_memory allocation align data library extension merge extract associative container ﬁle system library filesystem header 
parallel version standard algorithm algorithm header 
addition mathematical special function cmath header 
move node map   set  section  standard major extension standard 
ﬁnd overview change group isocpp faq link detailed documentation 
language extension general feature auto decltype range statement initializer list uniform initialization syntax semantic rvalue_reference move semantic lambda noexcept prevent exception propagation constexpr nullptr null pointer literal copying rethrowe exception inline namespace user deﬁne literal class default delete control default move copy delegate constructor class_member initializer inherit constructor override control  override override control  ﬁnal explicit conversion operator type enum_class long long long integer extend integer type generalize union complete tip secret professional generalized pod template extern template template alias variadic_template local type template argument concurrency concurrency memory model dynamic initialization destruction concurrency thread local storage miscellaneous language feature value cplusplus 
suﬃx return_type syntax prevent narrow right angle bracket compile time assertion raw string literal attribute alignment features library extension general garbage collection abi tuple type trait function bind regular expression time utility random number generation scope allocator container algorithm algorithms improvement container improvement unordere container concurrency thread mutual exclusion lock condition variable complete tip secret professional atomic future promise async abandon process section  standard refer bugﬁx 
contain only limited list change extension 
ﬁnd overview change group isocpp faq link detailed documentation 
language extension binary literal generalize return_type deduction generalize lambda capture generic lambdas variable template extend constexpr deprecate attribute digit separator library extension share lock user deﬁne literal std   type type transformation alias deprecate remove deprecate remove deprecate section  ﬁrst standardized version 
develop extension set add 
class  derived_class  virtual member_function  const member_function function overloading  operator overload reference delete template namespace exception speciﬁc cast complete tip secret professional library extension standard template library section  standard mainly address defect report standard 
defect  only add
language extension value initalization section  upcoming standard  currently development  base standard 
progress track oﬃcial iso cpp website 
follow simply accept next release standard  target 
language extension language extension accept now 
library extension library extension accept now 
 user deﬁne literal section  self user deﬁne literal write like  int  here come famous example self implementation number  
follow duration user literal declare namespace  literal inline namespace 
access operator gain namespace  namespace  namespace 
complete tip secret professional 
access operator gain namespace  namespace  namespace 
follow user literal declare namespace  literal inline namespace 
access operator gain namespace  namespace  namespace 
 enumeration section  iteration enum build iterate enumeration 
way enum only consecutive value  enum    
section  scope enum introduce know scope enum 
enumeration member qualiﬁed 
scope enum declare enum_class syntax 
example  store color rainbow  enum_class rainbow red  orange  yellow  green  blue  indigo  violet  
int invalid 
scope enum allow specify underlying type  type represent member 
default int 
tic tac toe game  store piece enum_class piece  char       
depth example find here  blind fruit merchant example section  basic enumeration declaration standard enumeration allow user declare useful name set integer 
name collectively refer enumerator 
enumeration associated enumerator deﬁne follow  enum myenum    enumeration type  distinct type 
case  name type myenum 
object type expect assume value enumerator enumeration 
enumerator declare enumeration constant value type enumeration 
enumerator declare type  scope operator   need access name 
name ﬁrst enumerator 
scope operator optionally access enumerator enumeration 
enumerator assign integer_value start increase enumerator enumeration 
case  value  value 
enumerator assign speciﬁc value user  value integral constant expression 
enumerator who  value explicitly will value set value previous enumerator + 
useful feature switch_statement enumeration default statement include switch  value enum utilize  compiler_will issue warning 
section  move only type erase operation 
require store_value copyable 
cause problem context  like lambda store unique ptrs 
context copying matter  like thread pool dispatch task thread  requirement add overhead 
sig callable object move only 
store  pretty heavy weight obscure way create move only callable type erasure class 
demonstrate write simple type 
omit copy_constructor involve add clone method 
library worthy  want add small buﬀer optimization  store callable heap 
add sbo require non default  deleter set destroy only return memory heap 
section  erase regular type manual vtable thrive know regular type least pseudo regular 
regular type type construct assign assign copy move  destroy  compare equal
construct argument 
finally  complete tip secret professional support operation highly useful std algorithm container 
root paper  want add support 
will manual vtable approach type erasure here 
regular type key accept regular key  like   basically map anothe regular  copyable 
small object optimization support original datum back 
original type back hard 
small object optimization require store align storage buﬀer  carefully tweak deleter only destroy object delete
start teach store datum buﬀer  heap room buﬀer 
section  basic mechanism type erasure way hide type object code derive common base 
bridge world static polymorphism template  place exact type know compile time  need declare conform interface deﬁnition dynamic polymorphism inheritance virtual_function  place exact type need know compile time  declare conform interface deﬁnition 
follow code show basic mechanism type erasure 
note template  normal function only need declare header ﬁle  deﬁne implementation ﬁle template  deﬁnition visible place 
deﬁnition concrete type  need know printable  just need conform interface  template  struct   
section  erase contiguous type erasure involve virtual inheritance  allocation  placement  function pointer 
type erasure type erasure set  take type support behavior wrap
set behavior forget   erase  
take incoming range container type erase contiguous buﬀer
take std    std   std     initializer list include base  support 
case  datum extract erase  view  non state  mean allocate_memory write custom type dependent function 
complete tip secret professional improvement non member datum non member size adl enable context 
section  type erasing type erasure example 
syntax end auto 
create function pointer type  factory function pointer  give  class typename  class  class 
want able method time 
bundle  write helper wrapper stick static storage basis maintain pointer
specialize case small example  item  direct pointer store class case eﬃciency 
now start
declaration bit easy 
note non lambda hairy  lookup step 
ﬁxe  example long
initialize method lambda  parametarize lambda 
public  class sfinae test anys match std     nullptr friend auto self  don  value unique check auto
term  heap  general computing term mean area memory portion allocate deallocate independently memory stack 
standard refer area free store accurate term 
area memory allocate free store live long original scope allocate 
datum large store stack allocate free store 
raw memory allocate deallocate delete keyword 
array allocation compatible non array allocation  mix will lead heap corruption 
allocate array allocate_memory track size array late deletion implementation deﬁne way 
smart pointer recommend ownership 
add std   stl  change recommendation favor std   std   naked delete 
section  placement situation don  want rely free store allocate_memory want custom memory allocation
situation placement tell  allocate_memory preallocate memory location example  char  example  memory point byte allocate stack  integer variable 
beneﬁt kind memory allocation programmer control allocation 
example allocate stack  don  need explicit call delete 
behavior achieve dynamic allocate_memory
example  char  
case need explicitly calldelete release memory 
section  set bit style bit manipulation  
section  check bit style bit manipulation value bit obtain shift right time perform bitwise 
naive way require iteration bit  unsigned  unsigned  accumulate total set 
method ﬁrst propose peter wegner cacm known programming_language brian
kernighan dennis
require arithmetic operation  multication  
section  clear bit style bit manipulation bit clear bitwise operator 
section  bit manipulation application  small capital letter application bit manipulation convert letter small capital vice versa choose proper bit operation 
example  letter binary representation capital counterpart 
diﬀer solely bit parenthesis 
case  convert letter small capital basically set bit parenthesis
following  convert small letter captial letter 
result  array array element type place adjoining memory location 
element individually reference unique identiﬁer add index 
allow declare multiple variable value speciﬁc type access individually need declare variable
section  array initialization array just block sequential memory location speciﬁc type variable 
array allocate way normal variable  square bracket append name contain element ﬁt array memory 
following example array typ int  variable_name  element array space int  
case  deﬁne length
output  support special syntax index multi dimensional 
view array possibly array   ordinary single index notation level 
example refer row zero base index 
row index turn  
build support dynamic size array  dynamic allocation  dynamic size matrix implement class 
raw matrix indexing notation cost  expose implementation 
program declare  determine run time  compile compiler support variadic length array vla language extension 
vla support standard 
example show manually allocate dynamic size  
part function call hierarchy code exception safe  exception delete cause memory leak 
way address issue automate cleanup 
generally way address just 
idiom size   will accept pointer argument will generally yield incorrect result 
forthcoming writing build core language standard_library utility obtain size implement pass reference function template  show
fine important point  template size parameter  inconsistent sign function result type  order accommodate compiler insist template matching 
later  specialize array 
section  expand dynamic size 
expand run time  
internally achieve double buﬀer size  capacity  large buﬀer need 
generally sum sequence exceed
compare dynamic size raw example  code require user supply know number item front 
just expand value speciﬁe user 
section  dynamic size matrix std   storage 
unfortunately dynamic size matrix class standard_library 
matrix class support dynamic size number party library  include boost matrix library sub library boost library 
want dependency boost library  poor man dynamic size matrix just_like   std   
advantage indexing notation ﬁxed size raw matrix  bit ineﬃcient dynamic allocation row  bit unsafe possible inadvertently resize row 
output  code industrial grade  design show basic principle  serve need student learn 
example  deﬁne operator overload simplify indexing notation 
commonly allow function data_structure know modify memory copy memory refer
pointer usable primitive build user deﬁne type 
pointer dereference    address  arrow  arrow_operator operator 
 arrow_operator  operator access memory point operator address memory 
section  pointer operation operator pointer  address operator return memory address operand 
content dereference operator return value variable locate address speciﬁe operator 
asterisk declare pointer simple purpose pointer 
confuse dereference operator  obtain value locate speciﬁed address 
simply diﬀerent represent sign 
section  pointer basic version note  following  existence constant nullptr assume 
early version  replace nullptr null  constant play similar role 
create pointer variable pointer variable create speciﬁc syntax  
variable pointer int  just contain memory address 
memory address location datum underlie int store 
diﬀerence clear compare variable pointer 
take value nullptr represent null memory location 
pointer equal nullptr contain invalid memory location refer valid datum 
memory address variable give preﬁxe variable address operator 
value_return pointer underlie contain memory address variable valid datum long variable scope 
access content pointer take address require  access content require usage dereference operator  preﬁx 
pointer dereference  variable underlie actually  reference 
read modiﬁed  const 
scenario  correctly issue warning  clang warning  address stack memory associate local_variable  retval  return wreturn stack address warning  address local_variable  retval  return local addr 
section  pointer arithmetic increment decrement pointer incremente decremente preﬁx postﬁx 
incremente pointer advance pointer value element array element past currently point element 
decremente pointer move previous element array 
pointer arithmetic permit pointer point complete 
pointer end element incremente  pointer point element past end array 
pointer dereference  decremente 
incremente pointer past end element array  decremente pointer ﬁrst element array yield undeﬁned behavior 
pointer non array object treat  purpose pointer arithmetic  array 
addition subtraction integer_value add pointer  act incremente  speciﬁc number 
integer value subtract pointer act pointer decrementing 
incremente decrementing  pointer point complete 
pointer diﬀerencing diﬀerence pointer compute 
pointer array object  undeﬁned behavior result 
give pointer array  ith element array  jth element 
result  cstddef 
 explicit conversion simple speciﬁer brace init list typename speciﬁer brace init list type id cast expression expression explicitly convert cast type   
support function style cast notation   style cast notation  
section  style cast style casting eﬀort  casting name only cast c
syntax cast 
cast follow cast order 
functional casting similar  restriction result syntax  
result  only type space cast
cast  readable spot easily inside source_code error will detect compile time  run time 
cast result unintended  dangerous 
complete tip secret professional section  cast away constness pointer const object convert pointer non const object keyword 
here call function const correct 
only accept non const argument write pointer  
section  derive conversion pointer base_class convert pointer derived_class
source type polymorphic  perform base derive conversion 
perform run time check failure recoverable produce undeﬁned behaviour 
pointer case  null pointer return failure 
reference case  exception throw failure type class derive 
result implementation deﬁne typically yield numeric address byte memory pointer_pointer
typically  long unsigned long long hold pointer value  guarantee standard 
type exist  guarantee long hold void pointer object type 
guarantee long hold function pointer 
similarly  convert integer type pointer type 
result implementation deﬁne  pointer value guarantee unchanged round trip integer type 
standard guarantee value zero convert null pointer 
section  conversion explicit constructor explicit conversion function conversion involve call explicit constructor conversion function implicitly 
request conversion explicitly
meaning direct initialization  result temporary 
occasionally useful  follow example  pass argument ellipsis  expect  argument type statically know  implicit 
convert enumeration type 
conversion unscoped enumeration type arithmetic type implicit conversion  possible 
scope enumeration type convert arithmetic type  enum  value represent exactly destination type  result value 
destination type integer type  result unspeciﬁed 
destination type ﬂoate point type  result convert underlying type ﬂoating point type 
note value unequal enumerator 
example  enum scale 
type point match 
operand null pointer member value  result null pointer member value 
conversion only valid member point operand actually exist destination class  destination class base derived_class class_contain member point operand 
conversion valid  behaviour 
section  void  void implicitly convert object type 
perform conversion explicitly 
operand actually point object  result point object 
operand point object  long operand point byte address properly 
result pointer resp 
dangerous read write pointer reference obtain trigger behaviour source destination type unrelated 
 rtti  run time type section  function  help cast inheritance hierarchy complete tip secret professional description 
non polymorphic work derived_class receive base_class  write like class public  virtual  class  public 
section  typeid keyword typeid keyword unary operator yield run time type operand operand type polymorphic class type 
return lvalue type const 
top level cv qualiﬁcation ignore 
section  cast convert pointer reference inheritance hierarchy 
low level reinterpreting bit pattern 
extreme caution 
cast away const volatile 
avoid stick const incorrect api 
 standard_library algorithm section  template class iterator bool iterator first  iterator last  template class iterator  class compare bool iterator first  iterator last  compare cmpfun  eﬀect  sift data sequence range ﬁrst  last next lexicographically high permutation 
cmpfun permutation rule customize 
parameter  beginning range permutate  inclusive last end range permutate  exclusive return_value  return true permutation exist 
range swap lexicographically small permutation return false 
complexity   distance first last 
example  std      
parameter  first  last range apply
return value  
complexity  apply exactly last first time 
section  deﬁne header numeric template class inputiterator  class template class inputiterator  class  class binaryoperation eﬀect  perform fold operation function range  last start init accumulator value 
eﬀectively equivalent init  
version place accumulate container equivalent sum container element 
parameter   last range apply
return value  accumulate value application 
complexity   distance last  complexity function 
example  simple example  
function modify input return iterator minimum range complexity linear number element compare 
parameter iterator point beginning range iterator point end range return iterator point ﬁrst range predicate function return true
iterator point find example 
output item first item  first item  first item  section  find median algorithm take iterator  iterator beginning  nth position  end 
once function_return  nth order will nth small 
sake example  let deﬁne median sequence length complete tip secret professional position 
example  median sequence length small  median sequence length 
section  template class inputiterator  class typename count inputiterator  inputiterator  const  eﬀect count number element parameter iterator pointing beginning range iterator pointing end range occurrence value range will count return number element range 
output section  template class inputiterator  class unarypredicate typename inputiterator  inputiterator  unarypredicate  eﬀect count number element range speciﬁed predicate function true parameter iterator pointing beginning range iterator pointing end range return number element speciﬁed range predicate function_return true 
function pointer count odd number half   isodd  functor count number great    
output  odd    friend keyword design class encapsulate functionality  hide implementation clean  document interface 
allow redesign change long interface unchanged 
complex scenario  multiple class rely implementation detail require 
friend class function allow peer access detail  compromise encapsulation hiding document interface 
section  friend_function class structure declare function friend 
function friend class  access 
section  friend method method declare friend function  
whole class declare friend 
friend class declaration mean member friend access private protect member declaring class  class accesser 
purpose avoid unnecessary temporary optimize loop calculation single pass typically perform operation numerical aggregate 
expression template initially devise order circumvent ineﬃciencie naïve operator overload implement numerical array matrix type 
equivalent late version book   programming_language  
actually dive expression template  understand need ﬁrst place 
illustrate simple matrix class give template typename col  row class matrix 
illustrate able overload notation mimic natural mathematical notation matrix 
understand happen write expression c
word  loop inside execute twice  easily perform single pass 
result temporary create  degrade performance 
essence  add ﬂexibility notation close mathematical counterpart  class highly ineﬃcient 
example  operator overloading  implement eﬃcient summation single pass  template typename col  row col  row col  row const col  row 
previous example disadvantage create convoluted interface class method     addmultiply 
let take step back see adapt operator overload perform eﬃcient way problem stem expression evaluate eagerly  opportunity build entire expression tree 
word  want achieve evaluate pass only once actually need assign result express
core idea expression template  evaluate result add instance  will_return expression template  future evaluation once entire expression tree build 
example  here possible implementation expression template correspond summation type  template typename lhs  typename rhs class matrixsum 
see  long return eager evaluation  result add instance instance  expression template represent addition operation 
important point keep mind expression evaluate
merely hold reference operand 
instantiate expression template follow  double  double   
see  beneﬁt expression template  basically manage evaluate sum assign single pass 
combine multiple expression template 
example  result follow expression template  double  double  double   
finally  last piece puzzle actually plug expression template class 
essentially achieve implementation   take expression template argument evaluate pass  manually  template typename col  row class 
 scope section  global_variable declare single instance variable accessible diﬀerent source ﬁle  possible global scope keyword extern 
keyword compiler code deﬁnition variable  write read will place memory 
complete tip secret professional section  simple block scope scope variable block 
complete tip secret professional 
 compile time 
mandatory ﬁrst parameter  condition  bool constexpr 
second parameter  message  string literal 
 second parameter optional  mandatory 
general  veriﬁcation compile time require type constexpr value template function need verify property type pass want write test case template metafunction constexpr function macro metaprogramme note participate sfinae  additional overload specialization possible  template metaprogramme technique like 
template code expect overload specialization find  veriﬁcation require 
case  concrete error rely sfinae
 precedence section  logical operator  short circuit precedence  mean parenthesis place evaluate evaluate
complete tip secret professional 
section  arithmetic_operator arithmetic operator precedence mathematic  multiplication division leave will evaluate left right high precedence addition subtraction  leave associativity 
force precedence expression parenthesis 
just way normal mathematic 
add parenthesis  confusion exist intent writer 
 constexpr constexpr keyword mark variable value constant expression  function potentially usable constant expression  statement only branch select compile 
section  constexpr variable variable declare constexpr implicitly const value constant expression 
comparison define constexpr type safe replacement define base compile time expression 
constexpr compiletime evaluate expression replace result 
compiler work 
example define  
pre evaluated constexpr correctly give 
constexpr produce compile time constant  change 
argue const change 
compiler second statement will work gcc  example 
array  know  constant expression 
second variable assign value decide runtime know  compiler compiletime 
mean const true compile time constant 
guarantee enforce const value absolutely compile time 
define pitfall 
constexpr statement conditionally compile code 
condition constant expression 
branch select discard 
discard statement inside template instantiate 
example  complete tip secret professional 
example  ifdef conditionally compile code depend value template parameter 
hand  constexpr discard syntactically invalid code  ifdef
section  constexpr function function declare constexpr implicitly inline call function potentially yield constant expression 
example  follow function  call constant expression argument  yield constant expression 
similarly  array will constant expression  function sum constexpr 
interesting constexpr function like ordinary function  
need write function 
mean try assign call non const variable  will compile  complete tip secret professional 
reason simple  constexpr only assign compile time constant 
function_call sum non constexpr value non const  value declare constexpr 
constexpr function return compile time constant 
follow will compile  
call  will compile time constant expression result 
 date time chrono header section  measure time chrono measure time elapse part program execution 
section  find number day date example show ﬁnd number day date 
date speciﬁe year month day month  additionally hour minute second 
program calculate number day year 
section  avoid qualify nest type_name 
trail return_type look scope class  lead return_type look enclose namespace scope require  redundant  qualiﬁcation 
section  lambda expression only trail return_type  lead return_type syntax applicable lambda 
 function template overload section  valid function template overloading 
function template overload rule non template function overloading name  diﬀerent parameter_type addition overloading valid complete tip secret professional return_type diﬀerent  template parameter list diﬀerent  naming parameter presence default normal function  compare parameter_type easy compiler  informat 
type template determine
rule parameter_type equal approximative here non depependend type value need match spelling dependent type expression need precisely  need conform call odr rule  template parameter rename 
diﬀerent spelling  value type deem diﬀerent  will instantiate value  overloading invalid  diagnostic require compiler 
following invalid  diagnostic require template typename void + template typename void section  undeﬁned reference  linker error happen  linker ﬁnd symbol 
happen library link
variable compile  complete tip secret professional 
error occur need header include 
section  fatal error   ﬁle directory compiler ﬁnd ﬁle source ﬁle   
detail pattern  check design pattern documentation 
section  adapter pattern convert interface class interface client expect 
adapter wrapper let class work incompatible interface 
adapter pattern motivation reuse exist software modify interface 
adapter pattern rely object composition 
client call operation adapter object 
adapter call adaptee carry operation 
complete tip secret professional 
adapter let legacyrectangle respond request inherit class 
legacyrectangle class method adapter take method call turn invoke method
adapter design pattern translate interface class compatible diﬀerent interface 
similar proxy pattern single component wrapper 
interface adapter class original class diﬀerent 
see example adapter pattern useful expose diﬀerent interface exist api allow work code 
adapter pattern  take heterogeneous interface  transform consistent api 
bridge pattern structure similar object adapter  bridge diﬀerent intent  mean separate interface implementation vary easily independently 
adapter mean change interface exist object 
section  observer pattern observer pattern intent deﬁne dependency object object change state  dependent notiﬁed update automatically 
subject observer deﬁne relationship 
observer dependent subject subject state change  observer notiﬁed 
depend notiﬁcation  observer update
here example book  design pattern  gamma 
complete tip secret professional 
digital time analog time here summary pattern  
object digitalclock analogclock object interface attach detach subscribe register observer unsubscribe remove observer    
subject observer observer 
observer need implement interface 
interface just method   
addition attach detach method  concrete subject implement notify method update current observer state change 
case  parent class   attach  void   detach void   notify 
concrete object method set state 
concrete observer class implement interface 
observer subscribe register concrete subject receive update  
object pattern loosely couple  interact little knowledge
variation  signal slot signal slot language construct introduce qt  easy implement pattern avoid boilerplate code 
concept control know widget signal contain event receive control special function know slot 
slot qt class_member declare
signal slot system ﬁts way graphical user interface design 
similarly  signal slot system asynchronous include socket  pipe  serial device  event notiﬁcation associate timeout event object instance method function 
registration deregistration invocation code need write  qt meta object compiler moc automatically generate need infrastructure 
language support similar construct diﬀerent terminology syntax  event play role signal  delegate slot 
additionally  delegate local_variable  like function pointer  slot qt class_member declare
section  factory pattern factory pattern decouple object creation allow creation name common interface  
section  builder pattern fluent api builder pattern decouple creation object object
idea object responsible creation 
correct valid assembly complex object complicated task task delegate class 
inspire email builder  decide version here 
email object necessarily complex object  demonstrate pattern 
old version  just ignore operation remove conversion will create temporary copy 
builder ﬁnishe work release build email 
example  builder temporary object return email destroy 
explicit operation like conversion 
pass builder great feature builder pattern ability actor build object
pass builder actor will give build object 
specially powerful build sort query  add ﬁlter speciﬁcation 
design variant  mutable object change design pattern ﬁt need 
will give variant 
give example object immutable   property modiﬁed access
desire feature 
need modify object creation setter
setter duplicate builder  class builder class need anymore 
need build object mutable ﬁrst place 
complete tip secret professional  optimization section  introduction performance know high performance language largely due heavy amount code customization  allow user specify performance choice structure 
optimize important benchmark relevant code completely understand code will
common optimization mistake  premature optimization  complex code perform bad optimization  waste time eﬀort 
first priority write correct maintainable code  optimize code 
optimization wrong case  add overhead worth slowdown micro optimization  compiler eﬃciently micro optimization hurt compiler ability optimize code typical optimization goal work eﬃcient algorithm structure hardware optimize code negative side eﬀect  include  high memory usage complex code diﬃcult read maintain compromise api code design section  empty base_class optimization object occupy byte  member array type address 
true derived_class small base_class 
base_class empty  size necessarily add derived_class  class base  class  public base 
empty base_class optimization perform padding require  sizeof  additional allocation empty base 
possible multiple base_class  multiple basis type  issue arise 
note only perform ﬁrst member diﬀer type base_class 
include direct indirect common basis 
type basis common base  least allocate single byte require ensure distinct object type address 
complete tip secret professional section  optimize execute code straightforward approach optimizing execute code 
approach give ﬁxed speed change time complexity code 
approach give clear speedup  will only give noticable improvement code call
remove useless code 
code only once  lookup  slow insertion lookup 
complete tip secret professional 
section  container optimize right data_structure right time change time complexity code 
container diﬀerent implementation store element hash container tree  transform implementation complexity
side eﬀect  will call comparison operator only call insert string end bucket 
small object optimization technique low level data_structure  instance complete tip secret professional refer short small string optimization 
mean stack space buﬀer allocate_memory case content small ﬁt reserved space 
add extra memory overhead extra calculation  try prevent expensive heap allocation 
beneﬁts technique dependent usage hurt performance incorrectly
example naive way implement string optimization following  cstre 
see code extra complexity add order prevent delete 
top class large memory footprint couple case 
try encode bool  pointer bit manipulation reduce size single instance intel bit  reduce size byte 
optimization only possible know alignment rule platform
optimization add complexity  recommend optimization single class 
will encounter commonly low level data_structure 
common standard_library implementation ﬁnd usage 
optimization only prevent memory allocation store datum small buﬀer  will only give beneﬁts class small datum 
ﬁnal drawback optimization extra eﬀort require move buﬀer  moveoperation expensive buﬀer
especially true buﬀer contain non pod type 
 compile building program write need compile run 
large variety compiler depend operating_system 
section  compile gcc assume single source ﬁle name  command compile link non optimize executable follow compile optimization useful initial development debugging  oﬃcially recommend gcc version 
alternatively  optimization ﬂag group experimental optimization directly 
following example build optimization  plus ﬂag optimization level  app partial pre produce platform speciﬁc optimize executable production machine architecture  app will_produce binary ﬁle run windows linux  mac os 
ﬂag skip 
case  gcc will create default output executable window unix like system 
compile ﬁle link option  complete tip secret professional 
note optimization emphasis debug experience recommend standard edit compile debug cycle optimization  include disregard strict standard compliance 
ﬂag enable warning common error
improve code quality encourage warning ﬂag automatically enable wextra 
code expect speciﬁc standard  specify standard include ﬂag 
support value correspond year ﬁnalization version iso standard 
gcc  valid value ﬂag    
value separate forward slash equivalent 
compile extension enable  value xx year value list
default standard will speciﬁed 
version gcc prior  default  gcc great  default 
note due bug gcc  ﬂag present compilation link gcc support standard threading functionality introduce   thread   
omit threading function result warning invalid result platform 
link library  option pass library name  library standard_library path  add path option  custom multiple library link library depend put dependent library independent library  lib lib let linker determine ordering group group note  signiﬁcant performance cost  group lib lib  group complete tip secret professional section  compile visual studio graphical interface hello world 
download install visual studio community 
open visual studio community 
click file arrow_operator arrow_operator project 
click template arrow_operator visual arrow_operator console application name project myfirstprogram 
click ok 
click next follow window 
complete tip secret professional 
follow console output  section  online compiler website online access compiler 
online compiler feature set vary signiﬁcantly site site  allow following  paste code web form browser 
select compiler option compile code 
collect compiler program output 
complete tip secret professional online compiler website behavior restrictive allow run compiler execute arbitrary code server side  ordinarily remote arbitrary code execution vulnerability 
online compiler useful follow purpose  run small code snippet machine lack compiler smartphone  tablet  
ensure code compile successfully diﬀerent compiler run way regardless compiler compile
learn teach basic 
learn modern feature near future date compiler local machine 
spot bug compiler comparison large set compiler 
check compiler bug ﬁxe future version  unavailable machine 
solve online judge problem 
online compiler develop full feature small application 
online compiler allow link third party library download build artifact 
perform intensive computation 
sever side computing resource limited  user program_will kill second execution 
permit execution time testing learning 
attack compiler server third party host net 
example  disclaimer  documentation aﬃliate resource list
website list alphabetically 
edit code compile source_code warning error work
gcc clang compiler
allow edit compiler command line  option gui control 
useful need inspect code compile diﬀerent compiler 
gcc  clang  msvc cl  intel compiler icc  ellcc  zapcc present  compiler arm   atmel avr  mips    powerpc   architecutre 
compiler command line argument edit 
gcc clang allow edit compiler command line 
complete tip secret professional programmer come gcc clang visual studio  programmer comfortable command line general  visual compiler command line ide 
desire compile code command line visual studio  ﬁrst need set command line environment 
open visual studio command prompt developer command prompt native tool command prompt native tool command prompt similar version visual studio  command prompt  navigate vc subdirectory compiler install directory typically file visual studio  version number  run vcvarsall batch command line parameter speciﬁed here 
note gcc  visual studio front end linker compiler  linker separate program  compiler call exit 
link option speciﬁe cl will translate option link  ﬁle process cl will pass directly link 
mainly simple guide compile visual studio command line  argument link will time  need list  see here 
note argument cl case sensitive  argument link
unfamiliar variable  expand current working directory 
command line  will directory run cl  speciﬁe command prompt default command prompt  example  assume single source name current folder  command compile link unoptimised executable useful initial development debugging following cl 
perform link  
generate executable   
perform link   
generate executable   
wildcard  expect  
perform link   additional object file generate 
object file will current folder 
generate executable   
rename relocate executable  following  cl name complete tip secret professional 
pass parameter let call param link param  append extension generally name  param
knowledge identical functionality  prefer visual studio 
note space speciﬁed folder name optional  space speciﬁed folder name 
similarly  produce optimise executable production  cl optimise executable size 
pass option   link time code generation link  tell call cl link phase perform additional optimisation 
link perform time  generate object file link  
cl optimisation option 
finally  produce platform speciﬁc optimize executable production machine speciﬁed architecture  choose command prompt vcvarsall parameter target platform 
tell cl exit call link  produce object ﬁle  later link ﬁle
perform link   
generate executable   
link will output dll  addition lib exp file link 
dll program  pass associate lib cl link compile program 
familiar nix system gcc clang  cl  link  visual studio command line tool accept parameter speciﬁe hyphen slash 
additionally  windows recognise slash backslash valid path separator  nix style path
easy convert simple compiler command line cl  vice versa  minimal change 
complete tip secret professional app src cl app src course  port command line complex option  need look equivalent command applicable compiler documentation resource site  easy start minimal time spend learn
case need speciﬁc language code  speciﬁc release msvc require 
visual update possible choose version standard compile ﬂag 
possible value will follow soon 
note  old version compiler  speciﬁc feature ﬂag preview
section  compile clang clang front end design compatible gcc  program compile gcc will compile swap build script 
give  will
window user who msvc swap clang 
default  clang try compatible high version msvc instal 
case compile visual studio  clang cl change platform toolset project property 
case  clang only compatible front end  try generate binary compatible object ﬁle 
user clang cl note compatibility msvc complete
clang clang cl  default installation linux distribution bundle ide like xcode mac 
version compiler platform instal  download oﬃcial download page 
cmake build code switch compiler set environment variable like mkdir build cd build clang cmake 
see introduction cmake 
section  compilation process develop program  next step compile program run
compilation process convert program write human readable language like machine code  directly understand central processing unit 
example  source_code ﬁle name execute compile command  prog stage involve create executable ﬁle source ﬁle 
complete tip secret professional 
expand source_code ﬁle produce preprocessor compile assembly language platform 
assembler code generate compiler assemble object code platform 
object code ﬁle produce assembler link object code ﬁle library function produce library executable ﬁle 
preprocesse preprocessor handle preprocessor directive  like include deﬁne 
agnostic syntax  care 
work source ﬁle time replace include directive content respective ﬁle just declaration  replacement macro deﬁne  select diﬀerent portion text depend ifdef ifndef directive 
preprocessor work stream preprocesse token 
macro substitution deﬁne replace token token operator enable merge token sense 
preprocessor produce single output stream token result transformation
add special marker tell compiler line come produce sensible error_message 
error produce stage clever error directive 
compiler ﬂag  process preprocesse stage 
compiler parse pure source_code now preprocessor directive convert assembly code 
invoke underlie toolchain assemble code machine code produce actual binary ﬁle  coff   
object ﬁle contain compile code binary form symbol deﬁne input 
symbol object ﬁle refer name 
object ﬁle refer symbol deﬁne 
case declaration  deﬁnition
compiler mind will happily produce object ﬁle long source_code form 
compiler let compilation point 
useful compile source_code ﬁle separately 
advantage need recompile only change single ﬁle 
produce object ﬁle put special archive call static library  easy reuse later
stage regular  compiler error  like syntax_error overload resolution error  report 
order process compile step  option  complete tip secret professional assemble assembler create object code 
unix system see ﬁle suﬃx msdo object code ﬁle 
phase assembler convert object ﬁle assembly code machine level instruction ﬁle create relocatable object code 
compilation phase generate relocatable object program program diﬀerent place compile
process assembly step  option  link linker produce ﬁnal compilation output object ﬁle assembler produce 
output share dynamic library name similar  common static library mention early executable 
link object ﬁle replace reference undeﬁned symbol correct address 
symbol deﬁne object ﬁle library 
deﬁne library standard_library  need tell linker
stage common error miss deﬁnition duplicate deﬁnition 
mean deﬁnition exist 
obvious  symbol deﬁne diﬀerent object ﬁle library 
download install here 
window  careful select ﬁle name contain mingw  ﬁle install compiler 
open click create  complete tip secret professional 
select  console application  click   
click  next   select    click  next   select name choose folder click  next  click  finish  
now edit compile code 
default code print  hello  console
compile run program  press compile run button toolbar  complete tip secret professional compile run  press run  press  run compile press 
compile run default  hello  code give follow result   type trait section  type property complete tip secret professional type property compare modiﬁer place diﬀerent variable 
usefulness type trait obvious 
note  example only oﬀer improvement non optimizing compiler 
simple proof concept  complex example 
fast divide
sign  will evaluate true sign type 
unsigned  will evaluate true unsigned type 
header contain set class helper transform check property type compile time 
trait typically template check user error  support generic_programming  allow optimization 
type trait check type fulﬁl criterion 
follow form  complete tip secret professional 
give trait follow member  constant static constexpr bool true fulﬁl criterion foo  false function operator bool return 
type name deﬁnition bool type bool  trait construct 
example std    
example  int 
section  type relation complete tip secret professional type relation compare type 
will evaluate boolean  true type false
actually demonstrate ﬁrst example compare entirely clear 
combine static assert std   valuable tool enforce proper usage template class function 
function only allow input choice struct 
number diﬀerent type trait compare general type 
pointer  evaluate true pointer 
 std   section  compare operator parameter operator lhs rh test element lhs rhs equal 
return true lhs 
return true
pair allow treat object object 
pair easily construct help template function 
keyword lose special meaning inside attribute 
section  asm asm keyword take single operand  string literal 
implementation deﬁne meaning  typically pass implementation assembler  assembler output incorporate translation unit 
asm statement deﬁnition  expression  block scope namespace scope include global scope 
inline assembly constrain rule language  asm inside constexpr function 
section  keyword void 
function_return type  void keyword speciﬁes function return
function parameter list  void speciﬁes function take parameter 
virtual keyword declare virtual_function virtual base_class 
virtual keyword 
pointer pointer accessible only nonstatic member_function class  struct  union type 
point object member_function call 
static member_function pointer 
nonstatic member_function call object  address object pass compiler hidden argument function 
example  follow function_call   interpret way  
implement exception_handle  try  throw  catch expression 
first  try block enclose statement throw exception 
throw expression signal exceptional condition error occur try block 
object type operand throw expression 
typically  object communicate error 
case  recommend class derived_class deﬁne standard_library 
recommend derive exception class 
handle exception throw  implement catch block follow try block 
catch block speciﬁes type exception handle 
circumstance  convenient grant member level access function member class member separate class 
only class implementer declare who friend
function class declare friend class 
class deﬁnition  friend keyword non member_function class grant access private protect member class 
deﬁnition  type parameter declare friend 
declare friend_function previously declare  function export enclose nonclass scope 
friend_function function member class access class private protect function class_member  normal external function give special access privilege 
friend_function declare class grant access 
friend declaration place class declaration 
aﬀecte access control keyword 
section  typename 
follow qualiﬁed  typename speciﬁes type 
require template  nest speciﬁer dependent type current instantiation 
example  depend template parameter order nest type_type  need preﬁx entire qualiﬁed typename 
deatil  see put template  typename  keyword 
introduce type parameter declaration template 
context  interchangeable class 
apply single argument constructor  prevent constructor perform implicit conversion 
operand expression  evaluate 
size constant expression type 
operand type  parenthesize 
illegal apply sizeof function type 
illegal apply sizeof incomplete type  include void 
sizeof apply reference type  equivalent 
sizeof apply class type  yield number byte complete object type  include padding byte middle end 
sizeof expression value 
see layout object type detail 
char  sign char  unsigned char type size 
conversely  byte deﬁne amount memory require store char object 
necessarily mean bit  system char object long bit 
expr expression  equivalent sizeof type expr 
unary operator determine evaluation operand propagate exception 
note body call_function examine  yield false negative 
declare function  speciﬁes function propagate exception 
alone  declare function propagate exception 
parenthesize argument  declare function propagate exception depend truth value argument 
complete tip secret professional void void void void void void 
example  declare   propagate exception 
speciﬁer omit  equivalent false  implicitly declare propagate exception  exception actually throw execution 
function part function type  example   diﬀerent type   
signiﬁcant function pointer  template argument 
section  odr violation overload resolution identical token inline function  odr violate lookup name refer entity 
section  multiply deﬁne function important consequence deﬁnition rule non inline function external linkage only deﬁne once program  declare multiple time 
function deﬁne header  header include multiple time diﬀerent translation unit 
program  function deﬁne header  include twice  once once 
translation unit contain deﬁnition
note guard prevent happen  separately 
likely result try build program link time error identify multiply deﬁne 
avoid error  declare_function header deﬁne corresponding ﬁle  exception see example 
section  inline function function_declare inline deﬁne multiple translation unit  deﬁnition identical 
deﬁne translation unit
inline function deﬁne header need mention implementation ﬁle 
program_will behave single deﬁnition function 
complete tip secret professional 
translation unit contain deﬁnition program form inline 
function deﬁne class deﬁnition member_function friend_function implicitly inline 
class deﬁne header  member_function class deﬁne class deﬁnition  deﬁnition include multiple translation unit  
 unspeciﬁed behavior section  value range enum scope enum convert integral type small hold value  result value unspeciﬁed 
example  enum   
section  evaluation order function argument function multiple argument  unspeciﬁed order evaluate
follow code
 order evaluation function argument remain unspeciﬁed 
function argument completely evaluate  call object guarantee evaluate
section  result conversion result function pointer type function reference type unspeciﬁed 
example  int  auto  unspecified value 
section  space occupy reference reference object  object  guarantee occupy contiguous byte memory 
standard leave unspeciﬁed reference require storage
number feature language conspire impossible portably examine storage reference occupy  sizeof apply reference  return size reference type  give reference occupy storage 
array reference illegal  possible examine address consecutive element hypothetical reference array order determine size reference 
address reference take  result address referent  pointer reference
class reference member  attempt extract address member offsetof yield undeﬁne behavior class standard layout class 
class reference member  class long standard layout  attempt access datum store reference result undeﬁned unspeciﬁed behavior 
practice  case reference variable implement similarly pointer variable complete tip secret professional 
section  move state standard_library class standard_library container leave valid unspeciﬁed state move
section  result pointer comparison pointer compare     result unspeciﬁed follow case  int  int  const bool int  const bool const bool 
void value convert pointer object type   properly align result pointer value unspeciﬁed 
example  complete tip secret professional 
section  order initialization global across tu inside translation unit  order initialization global_variable speciﬁed  order initialization across translation unit unspeciﬁed 
program follow ﬁle iostream 
 float_point arithmetic section  float_point number weird 
happen untrue  
program write conclude 
rewrite loop logic check loop terminate  end diﬀerent 
compliant machine  will sum
reason happen float_point number represent approximation assign_value 
classical example follow computation  
programmer see number write  compiler underlying hardware see binary number 
  require perfect division easy system  impossible system number store imprecise format  similar number store imprecise form 
 argument dependent name lookup section  function find function find ﬁrst collect set associated class  associated namespace  ore following  depend argument type
first  let show rule class  enumeration class_template specialization name 
nest class  member enumeration  surround class
enumeration class  innermost namespace
class  base_class class
innermost namespace associated class 
classtemplate templateargument  class namespace associate template type argument  namespace template template argument surround class template template argument  template argument member template 
now rule builtin type pointer array class namespace associate
example  void    include namespace class associate see next rule 
function type  class namespace associate parameter return_type 
example  include namespace class associate
pointer member  class namespace associate member type apply complete tip secret professional 
function template associate namespace find argument dependent lookup 
addition  namespace scope friend_function declare associate class find  normally visible 
directive ignore 
following example call valid  qualify namespace name call 
 section  create pseudo method pointer advanced example 
variant light weight type erasure 
now type method  struct void os  struct 
section  basic std   create tagged union store int string 
know auto  
variant guarantee dynamic_memory allocation allocate contain type 
only type store rare case involve exception assign safe way back empty 
variant let store multiple value type variable safely eﬃciently 
basically smart  union 
section  construct std   cover allocator 
case end switch  code next case will execute 
last prevent break statement 
call fallthrough behavior introduce bug intend  compiler static analyzer give warning
complete tip secret professional standard attribute introduce warning need code mean fall
compiler safely give warning case end break fallthrough least statement 
section  nodiscard nodiscard attribute return_value function ignore function_call 
return_value ignore  compiler give warning
attribute add function deﬁnition add attribute behaviour add attribute single function return
section  deprecate  introduce way deprecate function attribute 
link preprocessor condition
compiler give warning unused variable  way suppress intent 
typical example variable need debug builds unneeded production return_value success 
debug build  condition assert  production assert remove 
function compilation  compiler give warning
ideally like guard preprocessor tag caller  complex attribute maintainable alternative 
function function return caller execute return_statement  reach end body important note apply void function  return caller  just return value 
function end call std    throw exception 
worth note function return execute longjmp 
instance  function will throw exception call  candidate noreturn  noreturn void 
follow library function attribute  std    proﬁle section  proﬁle gcc gprof gnu gprof proﬁler  gprof  allow proﬁle code 
need perform follow step  
build application setting generate proﬁle 
generate proﬁle run build application 
view generate proﬁle gprof order build application setting generate proﬁle add ﬂag 
example  gcc app gcc app forth 
once application  app  build  execute usual  produce ﬁle call 
see proﬁle result  now run gprof app note application generate output 
course  pipe redirect  complete tip secret professional 
result last command table  row function  column call  total time spend  self time spend time spend function exclude call child 
section  generate callgraph diagram complex application  ﬂat execution proﬁle diﬃcult follow 
proﬁle tool generate form annotate callgraph
run proﬁler example gprof compile profiling flag run generate profile datum translate profile datum text  create image gprof dot section  proﬁle cpu usage gcc google perf tool google perf tool cpu proﬁler  slightly friendly interface 
install google perf tool 
compile code usual 
add libprofiler proﬁler library library load path runtime complete tip secret professional 
pprof generate ﬂat execution proﬁle  callgraph diagram example  compile code run profiler local lib output ﬁle proﬁle datum proﬁler sampling frequency  pprof post process proﬁle datum 
generate ﬂat call proﬁle text  pprof profile  interrupt pprof local file 
local file 
total  sample longrunningfoo multiarch memcpy multiarch memcpy stdlib stdlib munmap unix syscall random stdlib stdlib rand stdlib multiarch memcpy multiarch memcpy random stdlib random stdlib stdlib stdlib rand stdlib csu start rand stdlib complete tip secret professional 
covariant result version base example  static type checking 
covariant result version base example  static type checking 
section  non static member_function class struct member_function member variable 
function syntax similar standalone function  deﬁne inside class deﬁnition  deﬁne class deﬁnition  function name preﬁxe class  name scope operator 
function allow access member variable member_function  regardless variable function access modiﬁer 
write order  access member variable call member_function declare entire class deﬁnition parse compiler begin compile class 
inside class  freely access non static member_function  class  access regulate member_function  read modify
prevent unintentional modiﬁcation variable  separate function read write
complete tip secret professional 
due name resolution rule  name lookup  once correct name find  look  clearly find correct version entity name  due overload function derived_class prevent name lookup discover overload base_class 
avoid declaration import  name base_class derived_class  will name lookup 
output  output  output  output  std   derived_class import name declaration  declare_function signature
section  virtual member_function member function declare virtual 
case  call pointer reference instance  will access directly  will look function virtual_function table list pointer tomember function virtual_function  commonly know vtable vftable  call version instance dynamic actual type 
function call directly  variable class  lookup perform 
complete tip secret professional 
note   call func call   func  func  vtable update  func entry point  func 
conversely  note pass instance slicer result  func call  pass instance know datum slicing  pass instance parameter value render portion instance instance inaccessible 
member_function deﬁne virtual  derived_class member function signature override regardless override function speciﬁe virtual
 intent override explicit context sensitive keyword override 
tell compiler programmer expect override base_class function  cause compiler omit
beneﬁt tell programmer function declare least base_class  complex class easy parse 
function declare  deﬁne class deﬁnition  speciﬁer include function_declaration  repeat deﬁnition 
complete tip secret professional 
section  const correctness primary cv qualiﬁer const correctness 
practice guarantee only function need modify object write access object directly indirectly 
prevent unintentional modiﬁcation  code errorprone 
allow function need modify state able take const non const object  need rewrite overload function 
turn  allow pass byreference parameter declare const need modiﬁed  allow function take const non const object complain  const ness propagate outward manner 
due getter frequently const  function need modify logical state 
class const correct  function const safely assume change state  function const safely assume change state 
 recursion section  tail recursion fibonnaci style recursion solve fibonnaci sequence simple obvious way recursion nth term fibonnaci sequence 
replace simple tail recursion 
section  recursion memoization recursive function expensive 
pure function function return value call argument  depend modify external state  considerably fast expense memory store value calculate 
following implementation fibonacci sequence memoization  
version  caller require maintain store_value 
advantage function now reentrant  caller remove value long need  memory 
disadvantage break encapsulation  caller change output populate incorrect value 
complete tip secret professional  callable object callable object collection structure function 
practice  pass stl function invoke constructor  include  function pointer  class operator  class implicit conversion  reference function  pointer member_function  pointer member datum  lambda 
callable object stl algorithm predicate 
section  function pointer function pointer basic way pass_function c
purpose callable object  function pointer deﬁne 
deﬁnition look like  template typename  typename predicate begin  end  predicate predicate 
 section  expression setprecision setprecision  set precision parameter stream exactly 
parameter function integer  precision 
section  expression set ﬁll character stream c
note  current ﬁll character obtain   
complete tip secret professional 
section  expression  set format ﬂag stream speciﬁed mask 
list  dec decimal base integer oct octal base integer hex hexadecimal base integer basefield useful mask operation adjustfield 
useful mask operation scientific generate ﬂoating point type scientiﬁc notation  hex notation combine ﬁxed fix generate ﬂoating point type ﬁxed notation  hex notation combine scientiﬁc floatfield 
useful mask operation boolalpha insert extract bool type alphanumeric format showbase generate preﬁx numeric base integer output  require currency indicator monetary showpoint generate decimal point character unconditionally ﬂoating point number output showpos generate character non negative numeric output skipws skip lead whitespace input operation unitbuf ﬂush output output operation uppercase replace lowercase letter uppercase equivalent output output operation 
need set width output ﬁeld  need output structured proper layout 
syntax std   
 side side comparison classic example solve section  loop container  loop sequence container index follow     simple  writing subject common semantic error  like wrong comparison operator  wrong 
here only parameter container variable hold current 
implementation  expression auto   force type  incremente  dereference 
range base loop only work container deﬁne pair iterator iterator 
standard relax constraint change implementation 
 pointer section  pointer non static member_function hidden parameter  pointer instance class  name parameter silently insert beginning parameter list  handle entirely compiler 
member class access inside member_function  silently access allow compiler single non static member_function instance  allow member_function call member_function polymorphically 
constructor  safely implicitly explicitly access ﬁeld initialise  ﬁeld parent class  conversely  implicitly explicitly access ﬁeld initialise  ﬁeld derived_class  unsafe due derived_class construct  ﬁeld initialise exist 
unsafe call virtual member_function constructor  derived_class function will due derived_class construct  constructor update vtable 
note constructor  type object type constructor construct 
hold true object declare derive type 
example  example  type ctorthisbase inside ctorthisbase  type ctorthis inside ctorthis  canonical type ctorthisderive 
derived_class construct base_class  instance gradually class hierarchy fully construct instance intended type 
constructor   ctorthisbase fully construct time ctorthis constructor enter 
valid state initialise  access 
valid state initialise access 
valid state initialise  access 
bad constructor   initialise reach 
invalid state initialise access cause undeﬁned behaviour 
ctorthisderive construct ctorthis construct 
invalid state initialise  access cause undeﬁned behaviour 
object still ctorthis leave ctorthis  will update
 regardless intend call 
section  pointer access member datum 
section  pointer member datum parameter 
see output code  section  pointer cv qualiﬁers cv qualiﬁed  pointer 
due parameter list parameter list  special syntax require cv qualiﬁer list parameter list 
const include const volatile  function unable write member variable implicitly explicitly 
sole exception mutable member variable  write regardless const ness 
due const member_function change object logical state way object world  modify physical state way object look hood 
logical state way object observer 
directly tie physical state  store physical state 
long observer see change  logical state constant  ﬂip single bit object 
physical state  know bitwise state  object store memory 
object nitty gritty  raw datum 
object only physically constant representation memory change 
note basis constness logical state  physical state 
complete tip secret professional 
note technically non cv qualiﬁed  mutable
liable invoke undeﬁned behaviour object actually const  mutable design safe
possible run extremely old code 
exception rule deﬁne non cv qualiﬁed accessor term const accessor  object guarantee const non cv qualiﬁed version call  risk ub 
regular pointer  volatile include const volatile  load memory time access  cache 
eﬀect optimisation declare pointer complete tip secret professional 
note instance cv qualiﬁed  only member_function allow access member_function pointer least cv qualiﬁed instance non cv instance access member_function 
key tenet const correctness 
similarly cv qualiﬁer  apply ref qualiﬁer
ref qualiﬁer choose normal rvalue_reference semantic  allow compiler copy move semantic depend apply
note ref qualiﬁer reference syntax  still pointer 
note ref qualiﬁer actually change type just easy understand eﬀect look
access temporary nameless member_function overload ref qualiﬁer  programmer choose
thankfully  cv qualiﬁer conjunction ref qualiﬁer  allow const 
inline function multiply deﬁne violate deﬁnition rule  deﬁne header external linkage 
declare function inline hint compiler function inline code generation  guarantee 
inline function see  body inline caller  body 
add inline  function call 
overhead call function create frame  copy argument  local_variable  jump lose locality reference cache miss 
section  non member inline function_declaration inline int int  
placeholder placeholder section  assignment_operator assignment_operator replace datum initialized object
time  initialize non previously initialized object 
mean copy object assign actually initialize object copy
now let  take look code modify assignment constructor copy_constructor  
code will similar
let  take 
initialize previously 
next call assignment initialize   client server example section  hello tcp client program complimentary hello tcp server program  run check validity
program ﬂow common hello tcp server  sure take look
here  code cstre 
note  bind call hello tcp server
section  hello tcp server let start ﬁrst visit beej guide network programming give quick read  explain stuﬀ bit verbosely 
will create simple tcp server here will hello world  incoming connection close
note server will communicate client iteratively  mean client time 
sure check relevant man page contain valuable function_call structure 
will run server port  will take argument port number
let start code cstre 
follow run detect     enter number host address bind  header_file section  basic example following example will contain block code mean split source ﬁle  denote filename comment 
source file note header contain only declaration function 
complete tip secret professional guard implement check header file unique preprocessor token define  only include header include once
inclusion header file  source_file compile 
compilation process header ﬁle part compilation process workﬂow  typical compilation process header source ﬁle convention will following 
assume header ﬁle source_code ﬁle directory  programmer execute follow command  compile source_file object file link object file contain compile  object version produce final executable alternatively  wish compile object ﬁle ﬁrst  link only object ﬁle ﬁnal step  complete tip secret professional section  template header_file template require compile time generation code  template function  example  will eﬀectively turn multiple distinct function once template function parameterize source_code 
mean template function  member_function  class deﬁnition delegate separate source_code ﬁle  code will templated construct require knowledge deﬁnition generally generate derivative code 
template code  put header  contain deﬁnition 
prevent instance modiﬁed unintentionally  code errorprone  document code intend change instance state
allow instance treat const need modiﬁed  deﬁne const need change initialisation  lose functionality 
give member_function const cv qualiﬁer  pointer reference parameter const  case need write access 
call modifying function const instance 
due nature const correctness  start class  member_function  work way outward  try call non const member_function const instance  non const instance treat const  compiler_will give error lose cv qualiﬁer 
section  const correct class design const correct class  member_function change logical state cv qualiﬁed const  modify object mutable ﬁeld  freely modiﬁed const instance  const cv qualiﬁed function_return reference  reference const 
allow call constant non cv qualiﬁed instance  const capable bind const 
turn  allow function declare pass reference parameter const need modiﬁed  lose functionality 
const correct class  pass reference function_parameter will const correct  discuss const correct function_parameter  only modiﬁed function explicitly need modify
first  let look cv qualiﬁer  assume class field  member_function  void   
section  const correct function_parameter const correct function  pass reference parameter mark const function directly indirectly modiﬁes prevent programmer inadvertently change mean change 
allow function take const non cv qualiﬁed instance  turn  cause instance type const member_function call  class  type 
section  const correctness documentation useful const correctness serve way document code  guarantee programmer user 
guarantee enforce compiler due constness  lack constness turn code
modify member variable instance call mutable variable 
call function modify member variable instance  mutable variable 
complete tip secret professional conversely  member_function const assume intent modify instance  modify logical state 
call function modify logical state 
assumption state object give member_function call  see deﬁnition function  
call calc 
call calc 
function parameter const assume intent read parameter  modify parameter  call member_function modify
pass parameter function modify call member_function modify
conversely  function parameter const assume intent modify parameter  modify parameter  call member_function whould modify
pass parameter function modify call member_function modify
assumption state parameter pass give function  see deﬁnition function 
due require programmer speciﬁcally tell compiler intend ignore constness  inconsistent across compiler  generally safe assume const correct code will refrain speciﬁed 
thread write atomic object thread read behavior deﬁne see memory model detail addition  access atomic object establish inter thread synchronization order non atomic memory access speciﬁed 
standard_library specialization template follow type  
full specialization type bool typedef name deﬁne treat non specialized standard layout  trivial default constructor  trivial destructor  support aggregate initialization syntax  typedef name full specialization bool specialization typedef integral type  follow  typedef name full specialization char char sign char unsigned char short unsigned short int unsigned int long unsigned long long long unsigned long long complete tip secret professional 
 data_structure section  link list implementation create list node class listnode 
complete tip secret professional 
 refactore technique refactore refer modiﬁcation exist code improved version 
refactoring change code add feature ﬁx bug  term refer improve code necessarily add feature ﬁxing bug 
section  goto cleanup code basis ﬁnd pattern goto cleanup 
goto command workﬂow function hard understand  avoid 
replace return_statement  complete tip secret professional 
 stream section  string stream class object look like output_stream write operator  actually store writing result  form stream 
mainly useful class stream serialization deﬁne  want string form 
example  suppose class_class 
section  print collection iostream basic printing std   allow print content stl container output_stream explicit loop 
implicit type cast std   allow cast container  content type implicitly 
example  let  tune std   print 
generation transformation  function powerful tool data manipulation 
section read text ﬁle  consideration apply native array 
example  let  print square value native array  int  
type struct tuple  parameter pack parameter accept zero argument 
least parameter pack variadic 
section  expansion parameter pack pattern 
code invoke     hello   print hello  literal traditionally  literal expression denote constant type value evident spelling 
example  literal  see declaration know type read previous line code know value 
add user deﬁne literal  literal traditional sense shorthand function_call 
section  member_function class  keyword_this pointer instance class
type depend cv qualiﬁcation member_function  const  type const  modify non static datum_member const member_function 
likewise  inherit volatile qualiﬁcation function
note letter integer literal case insensitive  represent number negative integer literal 
expression apply unary minus value represent literal  involve implicit type_conversion 
prior  unsuﬃxed decimal value ﬁt long int allow type unsigned long int 
control expression elif  sign integer constant act type complete tip secret professional 
keyword denote null pointer constant 
convert pointer pointer member type  yield null pointer result type 
 flow control section  case introduce case label switch_statement 
operand constant expression match switch condition type 
switch_statement execute  will jump case label operand equal condition 
section  switch accord standard  switch_statement cause control transfer statement depend value condition 
keyword switch follow parenthesized condition block  contain case label optional default label 
switch_statement execute  control will transfer case label value match condition  default label 
condition expression declaration  integer enumeration type  class type conversion function integer enumeration type 
section  catch catch keyword introduce exception handler  block control will transfer exception compatible type throw 
catch keyword follow parenthesized exception declaration  similar form function_parameter declaration  parameter name omit  ellipsis 
exception handler will only handle exception declaration
throw occur expression operand  eﬀect throw copy
try block follow catch block 
propagate try block  corresponding catch block try block opportunity handle type match 
section  conditional structure  check give expression return true false act complete tip secret professional condition statement condition valid expression return check truth falsehood example  true code here evaluate true true execute code bracket false code here skip code false false condition function  variable  comparison example evaluate function  return true  will execute code return function pass argument var will evaluate return experssion will true equal false unequal boolean type  will evaluate value  integer  non zero value will true  want check multiple expression way  binary operator  will true only true binary operator scope here true ifelse simple switch
section  jump statement  break  continue  goto  exit 
break instruction  break leave loop condition end fulﬁlle 
end inﬁnite loop  force end natural end syntax break  
continue instruction  continue instruction cause program skip rest loop present iteration end complete tip secret professional 
goto instruction  allow absolute jump point program 
feature carefully execution ignore type nest limitation 
destination point identiﬁed label  syntax goto label  
complete tip secret professional 
exit function  exit function deﬁne cstdlib 
purpose exit terminate run program speciﬁc exit code 
prototype void exit int exit code  
return operand  operand convert function return_type  converted value return caller 
introduce deﬁnition class type 
declaration template template parameter  keyword class precede name parameter 
argument template template parameter only class_template  class here redundant 
grammar require
declaration deﬁnition enum  declare enum scope enum 
introduce deﬁnition enumeration type 
 enum optionally follow class struct deﬁne scope enum 
scope unscope enum underlying type explicitly speciﬁe follow enum name  refer integer type 
introduce opaque enum declaration  declare enum deﬁne
redeclare previously declare enum  forward declare enum previously declare 
enum ﬁrst declare scope later declare unscope  vice versa 
declaration enum agree underlie type 
forward declare unscoped enum  underlying type explicitly speciﬁed  infer value enumerator know 
introduce deﬁnition union type 
implementation deﬁne char sign range least  inclusive unsigned range least  inclusive 
unsigned integer type size alignment  large hold code unit 
unsigned integer type size alignment  large
section  void incomplete type  possible object type void  array void reference void 
return_type function return
function redundantly declare single parameter type void  equivalent declare function parameter 
syntax allow compatibility function_declaration diﬀerent meaning 
type void  pointer void  property object pointer convert back result pointer 
feature type void suitable kind type unsafe type erase interface  example generic context style apis 
expression convert expression type void  call discard value expression  
section  integer type large represent character large support extended character set  know wide character set 
type write long int 
case  yield type value category expression follow  lvalue type 
xvalue type 
prvalue type
include case extraneous parenthesis 
section  const type speciﬁer  apply type  produce const qualiﬁed version type 
see const keyword
section  volatile type qualiﬁer  apply type  produce volatile qualiﬁed version type 
volatile qualiﬁcation play role const qualiﬁcation type system  volatile prevent object modiﬁed  force compiler treat access object side eﬀect 
example volatile  compiler optimize function perform only ﬁnal write  incorrect great 
volatile qualiﬁcation force treat write diﬀerent side eﬀect perform order 
section  sign keyword part integer type_name 
alone  int imply  sign  sign int  int type 
combine char  yield type sign char  diﬀerent type char  char sign 
combine short  long  long long  redundant  type sign 
section  unsigned type speciﬁer request unsigned version integer type 
alone  int imply  unsigned type unsigned int 
type unsigned char diﬀerent type char  char unsigned 
hold integer least 
combine bool    
 type deduction section  template parameter deduction constructor prior  template deduction deduce class type constructor 
explicitly speciﬁed 
type cumbersome case lambda impossible name  proliferation type factory like    
type deduction auto keyword work template type deduction 
diﬀerence outline auto auto auto auto 
see remark
deduce code reject 
allow  addition usage auto allow  follow  
return_type function trail return_type  speciﬁes function return_type deduce return_statement function body 
early  auto keyword completely diﬀerent meaning storage class speciﬁer inherit c
section  template type deduction template generic syntax 
case type deduction work way 
compiler ignore reference part exist expr 
compiler pattern match expr type paramtype determe
case type deduction case expr rvalue 
expr lvalue  paramtype deduce lvalue reference 
expr reference reference part ignore 
expr const ignore
volatile ignore deduce type 
output hello world wrong type  memory model 
optimizing compiler decide reorder program similar way 
reordering change behavior program run single thread thread interleave call init 
hand multi threaded set thread see part write perform thread happen see true garbage
memory model allow programmer specify reorder operation permit multi threaded program able behave expect 
example rewrite thread safe way like 
here init perform store release operation 
only store value true tell compiler move operation write operation sequence
function load acquire operation 
read current value forbid compiler place read operation sequence happen load acquire 
operation cause compiler put hardware instruction need inform cpu refrain unwanted reordering 
store release memory location load acquire  memory model stipulate load acquire operation see value write store release operation  write perform init thread prior store release will visible load thread execute load acquire 
see true  guarantee see 
note compiler cpu still allow write write similarly read variable happen order 
load operation see value write store store happen load  fence  release fence happen acquire fence write precede release fence visible std   statement follow acquire fence 
fence beneﬁcial reduce number acquire  release synchronization operation 
 build system  like long varied history compilation workﬂow build process 
today  popular build system compile program  multiple platform build system 
here  build system will review analyze 
section  generate build environment cmake cmake generate build environment nearly compiler ide single project deﬁnition 
follow example will demonstrate add cmake ﬁle cross platform  hello world  code 
cmake ﬁle name   exist project root directory possibly sub directory basic ﬁle look like  
see live coliru 
ﬁle tell cmake project name  ﬁle version expect  instruction generate executable call  helloworld  require 
generate build environment instal compiler ide command line  cmake 
build application cmake 
generate default build environment system  depend os instal tool 
keep source_code clean build artifact source  build  mkdir build cd build cmake 
cmake abstract platform shell basic command previous example  cmake build cmake chdir build cmake 
generate makeﬁle visual studio nmake  cmake  nmake makefile  
gnu speciﬁc program fall family 
remain popular unix like posix like operating_system  include derive linux kernel  mac os bsd 
gnu especially notable attach gnu project  attach popular gnu linux operating_system 
gnu compatible version run ﬂavor window mac os
stable version historical signiﬁcance remain popular 
reason gnu teach 
basic rule compile create makeﬁle project directory 
makeﬁle simple makeﬁle set variable command first  set compiler want compile recommend warning extra
compile warning  output file target reverse target 
call argument  like clean  correspond target call 
will error  miss separator 
run command line  following  cd project ls app makefile complete tip secret professional hello world 
recompile take time 
follow directory structure  
ensure only recompile change ﬁle  minimize compile time 
documentation see oﬃcial documentation free software foundation  stackoverﬂow documentation dmckee elaborate answer stackoverﬂow 
complete tip secret professional section  build scon build cross platform  hello world  code  scon python language software construction tool 
first  create call sconstruct note scon will look exact name default 
now  directory right 
write line now  terminal  run scon 
see like scon scon  read sconscript file 
glob class_will help conﬁgure build 
 sconstruct  include     build executable hello  ﬁle src 
include boost speciﬁes standard 
introduction autotool group program create gnu build system give software package 
suite tool work produce build resource  gnu 
autotool de facto build system generator 
notable autotool program include  autoconf general  autotool mean generate unix compatible script allow follow command build install package simple case install autotool relationship package manager  especially attach operating_system conform posix 
section  ninja introduction complete tip secret professional ninja build system project website small build system focus  ninja design ﬁle generate build system generator  take low level approach build system  contrast high level build system manager like cmake meson 
ninja primarily write python  create alternative scon build system chromium project 
introduction nmake command line utility develop microsoft primarily conjunction microsoft visual studio visual command line tool 
nmake build system fall family build system  distinct feature diverge unix like program  support window speciﬁc path syntax diﬀer unix style path 
 concurrency openmp topic cover basic concurrency openmp 
openmp document detail openmp tag 
parallelism concurrency imply execution code time 
section  openmp  parallel section example illustrate basic execute section code parallel 
openmp build compiler feature  work support compiler include library 
wish include want openmp api feature 
sample code std    begin  
output example produce possible output dependent operating_system hardware 
output illustrate race condition problem occur implementation 
output output begin begin section  openmp  parallel section example show execute chunk code parallel std    begin  
output begin begin begin begin execution order guarantee  observe output 
section  openmp  parallel loop 
split element vector thread qty
complete tip secret professional 
continue process only thread complete allocate loop job take extra care modify size vector parallel loop allocate range index update automatically 
section  openmp  parallel gathering reduction example illustrate concept perform reduction gathering std   openmp 
suppose scenario want multiple thread help generate bunch stuﬀ  int here simplicity replace data_type 
useful need merge result slave avoid segement fault memory access violation wish library custom sync container library 
hint compiler parallelize code 
fun master  type inference topic discuss type inference involve keyword auto type 
section  data_type  auto 
auto keyword perform expect type inference additional hint const constexpr unsigned int 
sequence implement class function template beneﬁt positional access 
standard_library contain  factory  type create ascend sequence integer_value just number element 
section  turn function_parameter pass multiple value
example  store sequence parameter form queue 
process tuple element need turn function_call argument  
function entirely independent number argument 
section  create parameter pack consist integer std   hold sequence integer turn parameter pack 
section  turn sequence index copy element expand parameter pack index comma expression value create copy value index 
sadly  gcc clang think index eﬀect warn gcc silence cast index void 
 resource management hard resource management 
thankfully   way design resource management program 
article hope explain idiom method manage allocate resource 
section  resource_acquisition_is_initialization resource acquisition initialization raii common idiom resource management 
case dynamic_memory  smart pointer accomplish resource management 
raii  acquire resource give ownership smart pointer equivalent resource manager 
resource only access manager  manager keep track operation 
example  automatically free corresponding resource fall scope delete 
weird copy semantic  container 
reason prevent delete memory twice  ownership resource  try free destroy 
free free resource generally cause problem  important prevent
method avoid transfer ownership copying  
section  mutexe thread safety problem happen multiple thread try access resource 
simple example  suppose thread add variable 
ﬁrst read variable  add store back 
suppose initialize variable  create instance thread 
thread ﬁnish  intuition suggest variable value 
table illustrate wrong  thread thread time step read variable time step read variable time step add plus time step add plus time step store variable time step store variable see  end operation  variable  
reason thread read variable thread update
mutex portmanteau mutual exclusion resource management object design solve type problem 
thread want access resource  acquire  resource  mutex 
once access resource  thread  release  mutex 
mutex acquire  call acquire mutex will return mutex release 
understand think mutex wait line supermarket  thread line try acquire mutex wait thread ahead ﬁnish resource  step line release mutex 
complete pandemonium try access resource once 
section  change default sort set set multiset default compare method  case need overload
let  imagine store string value set  know string contain only numeric_value 
default sort will lexicographical string comparison  order will match numerical sort 
want apply sort equivalent value  need functor overload compare method  iostream 
output will default sort   custom sort  lambda sort  example ﬁnd diﬀerent way add compare operation std    useful context 
default sort will compare operator key ﬁrst template argument 
key will default function 
function specialize  operator object 
especially useful code try ordering  allow consistency whole code base 
write code way  will reduce eﬀort update code key change api  like  class_contain member change class_contain member 
update operator class  occurrence will update 
expect  default sort reasonable default 
custom sort add custom sort object compare operator default comparison comply 
example string refer integer 
case  want compare smart pointer base object refer need diﬀerent constraint compare example  compare value first 
create compare operator  stable sorting 
result compare operator change insert  will undeﬁned behavior 
practice  compare operator only constant const member  const function 
example will encounter class member compare operator 
result default constructor copy_constructor 
default constructor allow omit instance construction time copy_constructor require take copy compare operator 
complete tip secret professional lambda sort lambda short way write function_object 
allow write compare operator line  code readable 
disadvantage lambdas lambda speciﬁc type compile time  will diﬀerent compilation compilation unit cpp ﬁle multiple compilation unit include header ﬁle 
reason  recommend function_object compare operator header ﬁle 
construction encounter std   local scope function function_object prefer function argument class_member 
sort option compare operator std   template argument  callable object compare operator example only speciﬁc case 
only restriction callable object copy constructable callable argument type key 
note ask delete element multiset  present multiple time  equivalent value will delete 
section  insert value diﬀerent method insertion set 
first  simple insert value 
method return pair allow caller check insert occur 
second  insert give hint value will insert 
objective optimize insertion time case  know value insert common case 
careful case  way give hint diﬀer compiler version 
finally insert range value give starting end pointer 
start will include insertion  end exclude 
possibility exist 
section  search value way search give_value std   std    iterator ﬁrst occurrence key  find function
return end key exist 
aﬀect type declaration  typically modify way entity store 
section  extern extern storage class speciﬁer modify declaration follow way  depend context  
declare variable deﬁne 
typically  header ﬁle variable will deﬁne separate implementation ﬁle 
function declare extern  eﬀect 
hint reader function_declare here deﬁne translation unit 
example  void  typically forward declaration  define later tu extern void  typically forward declaration  define tu code  change extern non extern  aﬀect correctness semantic program likely confuse reader code 
complete tip secret professional section  register version storage class speciﬁer hint compiler variable will heavily
word  register  compiler choose store variable cpu register access
local_variable function_parameter declare register 
place restriction register variable 
example  valid take address register variable  prevent compiler actually store variable register 
keyword register unused reserve 
program keyword register ill form 
section  static static storage class speciﬁer diﬀerent meaning 
section  auto declare variable automatic storage duration 
redundant  automatic storage duration default block scope  auto speciﬁer allow namespace scope 
section  mutable speciﬁer apply declaration non static  non reference data member class 
meaning mutable add 
follow parameter list lambda  suppresse implicit const lambda  function_call operator 
mutable lambda modify value
 alignment type alignment 
restriction memory address object type create
memory address valid object  creation divide address object  alignment complete tip secret professional whole number 
type alignment power include 
section  control alignment alignas keyword force variable  class datum_member  declaration deﬁnition class  declaration deﬁnition enum  alignment  support 
come form  aligna  constant expression  give entity alignment  support 
multiple alignas speciﬁer apply entity  strict apply 
valid alignment power great zero 
compiler require support valid alignment alignment type 
support large alignment support allocate_memory object limited 
upper limit alignment implementation dependent 
feature direct support operator allocate_memory align type 
section  query alignment type alignment requirement type query alignof keyword unary operator 
possible output alignment requirement  apply array  yield alignment requirement element_type 
apply reference type  yield alignment requirement reference type 
multiply deﬁne  linker will merge deﬁnition single object ﬁnal program 
section  deﬁne static data member class deﬁnition static data member class fully deﬁne class deﬁnition declare inline 
example  follow class deﬁne header 
prior  ﬁle contain deﬁnition foo   deﬁne only once  multiple deﬁnition inline variable foo   refer object 
 linkage speciﬁcation extern string literal declaration extern string literal declaration linkage speciﬁcation tell compiler compile declaration way allow link declaration write language  c
section  signal handler unix like operating_system signal handler will kernel call convention  tell compiler
deﬁnition separately compile distribute header object form 
program  compiler_will know function deﬁne symbol  will try look mangled name  locate
ﬁnd deﬁnition library  platform calling convention  compiler_will call convention call  likely cause segmentation fault expect call convention 
way remedy problem wrap declaration header extern  block 
 curiously recur template pattern pattern class inherit class_template template parameter 
crtp static polymorphism 
crtp powerful  static alternative virtual_function traditional inheritance give type property compile time 
work base_class template take  template parameter  derived_class 
permit legally perform pointer derived_class 
course  mean crtp class base_class class 
let set container support function begin end 
only static cast inside function begin class allow compiler drastically optimize code virtual table look happen runtime 
limitation  class templated diﬀerent diﬀerent dynarray possible store pointer class type homogenous array generally normal inheritance class dependent derived type  
complete tip secret professional 
section  import name individually namespace once introduce name namespace std scope function 
section  redeclare member class avoid name hiding using declaration occur class scope  only allow redeclare member class 
example  std   allow class scope 
name redeclare hide 
example  code  only refer char compilation error will occur 
function   hide 
special case  using declaration class scope refer constructor direct class 
perform forwarding explicitly   feature inherit constructor  implicitly 
section  basic typedef syntax typedef declaration syntax variable function_declaration  contain word typedef 
presence typedef cause declaration declare variable function 
rule typedef declaration syntax ordinary variable function_declaration read write complex declaration 
section  declare multiple type typedef typedef keyword speciﬁer  apply separately declarator 
declare refer absence typedef 
syntax simple  deﬁne left hand side  deﬁnition right hand side 
need scan see
simply alternative syntax accomplish
typedef  template 
complete tip secret professional  layout object type section  class type class   mean deﬁne class struct keyword enum struct enum_class 
empty class still occupy least byte storage  will consist purely padding 
ensure point object empty class  distinct address point distinct object 
possible empty class size base_class 
see empty base optimisation 
class type member base_class type   size least + + 
depend alignment requirement member base_class  compiler force insert padding 
padding insert object due alignment requirement  size will great sum size member base_class 
byte alignment  size will typically small multiple large size member base_class 
member memn will typically place address multiple  will typically large alignof member  alignof 
due member small alignof follow member large alignof  possibility member will align properly place complete tip secret professional
case  padding know alignment member will place member  member desire alignment 
conversely  member large alignof follow member small alignof  padding will
process know pack  
due class typically share alignof member large alignof  class_will typically align alignof large build type directly indirectly contain 
strict alignment force aligna  padding will force type meet speciﬁed alignment  small 
example  deﬁnition will possibly padding byte insert end total size 
possible class alignment size impossible array class  size round multiple insert padding byte 
padding insert need 
non static member class access speciﬁer  come later declaration order guarantee come later object representation 
non static member diﬀerent access speciﬁer  relative order object unspeciﬁed 
unspeciﬁed order base_class subobject object  occur consecutively  member subobject 
section  arithmetic type narrow character type unsigned char type bit represent binary number 
example  unsigned char bit  possible bit pattern char object represent diﬀerent value    
number guarantee represent bit pattern 
sign char type padding bit   sign char bit  bit capacity represent number 
note guarantee apply type narrow character type 
integer type unsigned integer type pure binary system  contain padding bit 
example  possible unlikely unsigned bit only capable store integer  inclusive 
bit pad bit  write directly 
sign integer type binary system sign bit possibly pad bit 
value belong common range sign integer type correspond unsigned integer type representation 
example  bit pattern unsigned object represent value  represent value interpret object 
implementation deﬁne complement  complement  sign magnitude representation system satisfy requirement previous paragraph 
float point type complete tip secret professional value representation ﬂoate point type implementation deﬁne 
commonly  double type conform ieee bit example  bit precision follow exponent bit sign bit 
standard guarantee
float point type trap representation   cause error calculation 
section  array array type padding element 
array element_type just sequence object lay memory  order 
multidimensional array array array  apply recursively 
example  declaration  array array int 
 consist element   
 incompatibility code will break compiler 
section  reserve keyword ﬁrst example keyword special purpose  following legal 
section  weakly type pointer pointer cast void  need explicit cast 
follow illegal  legal
 container support fast insertion removal element container 
fast random access support 
implement singly link list essentially overhead compare implementation c
compare container space eﬃcient storage bidirectional iteration need 
complete tip secret professional 
output      frogurt  cursed frogurt  cursed frogurt  cursed mo  mo  mo  mo  mo section  method method name deﬁnition assign_value container assign assign_value container return associated allocator access front access ﬁrst element return iterator element begin return constant iterator element begin begin return iterator begin cbegin return const iterator beginning end return iterator end cend return iterator end complete tip secret professional capacity empty check container empty return maximum possible number element modiﬁer clear content insert element element construct element place element erase element element insert element beginning construct element place beginning remove ﬁrst element resize change number element store swap swap content operation merge merge sorted list move element remove remove element satisfy speciﬁc criterion remove element satisfy speciﬁc criterion reverse reverse order element unique remove consecutive duplicate element sort sort element clear  optimization compile  compiler_will modify program increase performance 
permit rule  allow transformation change observable behavior 
section  inline expansion inline inline expansion know inline compiler optimisation replace call function body function 
function_call overhead  cost space  function duplicate time 
complete tip secret professional section  empty base optimization size object member subobject require least type empty class type class struct non static datum_member  order able guarantee address distinct object type distinct 
base_class subobject constrained  completely optimize object layout  
achieve store require data member  begin  end  capacity pointer vector 
reference  cppreference  semaphore semaphore now  easily implement mutex condition variable 
example take semaphore 
synchronize thread 
section  semaphore class action follow function add thread 
thread compete semaphore  set
slow call  allow wait thread proceed 
result start spin  cause semaphore usage remain 
thread turn condition variable call 
topic  ﬁnd diﬀerent structure standard_library solve issue 
section   generalization  work type basiclockable structure 
throw case complete task 
section  object lock access 
want lock entire object perform multiple operation
example  need examine modify object iterator 
need call multiple member_function generally eﬃcient lock whole object individual member_function 
example  class 
 debug debug prevention tool technique developer spend debug 
topic mean assist task give inspiration technique 
expect extensive list issue solution ﬁxe tool manual mention tool 
section  static analysis static analysis technique check code pattern link know bug 
technique consume code review  check only limit program tool 
check incorrect semi colon statement var advanced graph algorithm determine variable initialize 
compiler warning enable static analysis easy  simplistic version build compiler  
enable option  will notice compiler_will ﬁnd bug will error technique valid valid speciﬁc context 
code review  ﬁghte tool understand code  tell useful bug disagree
last case  suppress warning locally 
option enable warning  enable warning want 
complete tip secret professional 
compiler warning assist development  slow compilation bit 
want enable default 
default enable continuous integration expensive check 
external tool decide continuous integration  tool stretch 
tool like clang tidy list check cover wide range issue  example  actual bug prevention slicing assert side eﬀect readability check mislead indentation check identiﬁer name modernization check nullptr performance check find unneeded copy find ineﬃcient algorithm call list large  clang compiler warning  will bring step close high quality code base 
tool tool similar purpose exist  like  visual studio static analyzer external tool clazy  clang compiler plugin check qt code conclusion static analysis tool exist  build compiler external tool 
try take easy setup will ﬁnd bug miss code review 
section  segfault analysis gdb 
start beginning 
only variable line pointer 
let examine content typing print 
line  know try dereference null pointer 
section  clean code debugging start understand code try debug 
regardless code style prefer consistent coding format style will help understand code 
look code identify couple improvement improve readability debuggability  separate function separate action separate function allow skip function debugger interested detail 
speciﬁc case  interested creation printing datum only want step sorting 
advantage need read code memorize step code 
now only need read line code order understand whole function 
third advantage simply code look help train eye spot bug second 
consistent formatting construction consistent formatting construction will remove clutter code easy focus code text 
discussion feed right  format style 
regardless style  single consistent style code will improve familiarity easy focus code 
format code time consume task  recommend dedicated tool
ide least kind support format consistent human 
note style limit space newline long mix free style member_function begin end container 
point attention important part code 
regardless style determine choose  code contain couple marker give hint important  complete tip secret professional comment state optimize  fancy technique early return sortvector special conclusion clean code will help understand code will reduce time need debug
second example  code reviewer spot bug ﬁrst glance  bug hide  future promise promise future ferry single object thread
object set thread generate result 
object retrieve test see halt execution
section  async operation class  perform asynchronous operation 
section  std   std   follow example set consume thread  
section  defer async example code implement version  behave async call deferred launch policy 
function async special behavior  return destroy acquire
thread start run
detach join end scope 
function_call ﬁnishe  result ready 
note slightly diﬀerent return std   destruct will actually block thread ﬁnishe 
section  constraint std   std   meet exception type throw 
error code member exception type value test case  enum_class  task long share  answer retrieve  answer store  access non shared state
note  example launch policy 
avoid being create call 
case example  call order  synchronize call 
default policy  mean implementation determine policy create
 undeﬁned behavior example wrong 
continuation undeﬁned behavior section  refer non static member initializer list refer non static member initializer list constructor start execute result undeﬁned behavior 
result member construct time 
standard draft   object non trivial constructor  refer non static member base_class object constructor begin execution result undeﬁned behavior 
 mutexe section  mutex type oﬀer selection mutex class  oﬀer simple locking functionality 
section  deadlock avoidance algorithm lock mutexe 
exception throw call 
complete tip secret professional allow exclusive ownership mutexe 
section  strategy lock class    create std    diﬀerent locking strategy choose  
section  simple  non recursive synchronization structure protect datum access
destroy  mutexe release reverse order 
 unit testing unit testing level software testing validate behavior correctness unit code 
  unit code  refer class  function  group
unit testing perform specialized  testing framework  testing library  non trivial syntax usage pattern 
topic will review diﬀerent strategy unit testing library framework 
section  google test google test testing framework maintain google 
require build gt library link testing framework build test case ﬁle 
minimal example 
scenario  vector size resize give  item reserve change complete tip secret professional  recursive mutex section  recursive mutex allow thread recursively lock resource unspeciﬁed limit 
real word justiﬁcation
complex implementation need call overloaded copy function release lock 
keyword decltype type variable  function expression 
section  basic example example just illustrate keyword
type variable now automatically float 
let intvector  
work key map 
key name help uniqueness map 
map value just content associate key 
data_type key map predeﬁne data_type user deﬁne 
section  declaration usage mention declare unordered map type 
let unordered map name ﬁrst string integer type 
section  basic function 
compare equality 
decide large 
deﬁne simple quotation mark  digit separator  number user deﬁne literal 
easy human reader parse large number 
long long long long long long long long decn hexn octn binn 
single quote mark ignore determine value 
example  literal     value 
literal value 
position single quote irrelevant 
follow equivalent  long long long long long long long long 
detail parameter see variable function_call inside function  visible behaviour accessibility variable diﬀer method hand
additionally  reusability variable respective value function_call explain topic 
section  call value call function create program stack 
include complete tip secret professional function space memory location parameter return_value 
hand parameter function value variable literal copy memory location function_parameter 
imply now memory location value 
inside function only work parameter memory location 
leave function memory program stack pop removed erase datum function_call  include memory location parameter inside 
value change inside function aﬀect value 
code create inside function 
call function create  share name outer variable share memory location 
behaviour identical 
follow graphic symbolize happen stack change varibale 
graphic fully accurate emphazise example 
call  call value  hand only value
section  user input standard output 
manipulator special helper function help control input output_stream operator operator 
include iomanip 
eﬀect input stream 
width property reset function call full list here 
eﬀect stream 
output      usd  usd 
output  number fix  number scientific  number hexfloat  number default  parse complete tip secret professional 
eﬀect stream 
complete tip secret professional 
see link
section  output_stream manipulator insert null character   output_stream 
formally manipulator declaration look like template class chart  class trait  trait  trait  
cause produce 
section  input stream manipulator consume lead whitespace input stream 
complete tip secret professional sstream 
container vector  list  map 
template  container contain collection primitive 
section  container flowchart choose container tricky  here simple ﬂowchart help decide container right job 
ﬂowchart base mikael persson post 
little graphic ﬂowchart megan hopkin 
example template metaprogramme process arithmitic operation compile time 
example show eﬃcient way calculate template metaprogramming 
handle negative exponent  template int  int 
sarid aaronsnoswell abhinav gauniyal abyx adam trhon adhokshaj mishra aditya ajay    alain alejandro alexey guseynov alexey voytenko    amchacon ami tavory     anatolyg andera      andrea chua  andrea corbelli   andyg anothergatsby antonio barreto aprogrammer aravind archbishopofbanterbury  artalus asantacreu asu ate goral bakhtiar hasan baron                       barry    bcmpinc ben ben steﬀan benjy kessler bigonotation bim                      brian             ii caﬀeinetocode callyalater  complete tip secret professional candlemancer cap celtschk chachmu cheer hth 
mark gardner masterhd mathsquared matt matthew brien matthieu
                                                                                                                   complete tip secret professional maxito meena alfon merlinnd meysam michael gaskill mike mikemb mikitori mindriot misgevolution mkarol mkluwe motkohn motti mpromonet msalters msd mtb mtk muhammad aladdin 
naor hadar nathan osman naveen mittal neil
nemanja boric niall nicholas nicol bolas nikola vasilev nitinkumar ambekar nnrale nonnumeric null nwp omnifarious oz 
pankaj kumar boora patmanpato patryk obara paul paul beckingham pavel strakhov pcaf perette barella peter phandinhlan pietro saccardi plasmacel pmelanson podgorskiy praetorian pyve                                      complete tip secret professional qchmqs quirk
martinho fernande ralismark ramenchef ravi chandra reuben thomas richard dally rockoder rodrigo roland romcoo ronen ness rtmh rushikesh deshpande ryan haine saint sajithp tufail sean sergey serikov shoe sigalor silvergasp singerofthefall sirguy skipper skywrath smeeheey snowhawk stackptr stephen sth stradigos strangeqargo 