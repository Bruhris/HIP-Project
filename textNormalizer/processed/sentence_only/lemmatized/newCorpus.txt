practical programming steve oualline associates 
beijing cambridge k√∂ln paris sebastopol taipei tokyo page iv practical programming steve oualline copyright associates 
right reserve 
print united states america 
editor  adrian nye dale dougherty production editor  nicole gipson print history  august first edition 
january  minor correction 
nutshell handbook  nutshell handbook logo  logo register trademark java series trademark associates 
designation manufacturer seller distinguish product claim trademark 
designation book  associates 
precaution take preparation book  publisher assume responsibility error omission  damage result contain
book print acid free paper recycled content  post consumer waste 
associate commit paper high recycled content consistent high quality 
page xv preface book devote practical programming 
teach only mechanic language  style debugging 
entire life cycle program discuss  include conception  design  writing  debugging  release  documentation  maintenance  revision 
style emphasize 
create program involve just type code 
art writing programming skill blend form masterpiece 
write program only function correctly  simple easy understand 
comment allow programmer include descriptive text program 
clearly write  comment program highly prized 
program simple possible 
avoid clever trick 
cleverness complexity kill program 
book stress simple  practical rule 
example  operator precedence rule simplify  
multiply divide add subtract 
put parenthese
write clever programmer  trick 
program contain comment  work 
nicely comment structured  work 
program useful 
long run  broken  useful fix maintain easily 
clever work now  soon later will modify 
hard work will modify cleverly write program 
page xvi scope handbook handbook write people previous programming experience  programmer who know want upgrade skill  who know want improve programming style reliability 
access computer know basic function text editor file system 
computer language learn writing debug program 
sweat broken program morning only find effective teaching tool 
programming example book 
contain deliberate error 
encourage enter example computer run debug
process introduce common error short program will know spot correct error large program 
generic  unix compiler work unix system 
microsoft visual ms window standard only minor difference compiler 
book clearly compiler difference affect programmer 
specific instruction give produce run program compiler 
book give example programming utility automate program production 
book organize crawl walk 
part basic learn crawl 
teach write simple program 
start mechanic programming programming style 
next  learn variable simple decision control statement 
page xvii point will learn create simple program   programming process  embark complete tour programming process show real program create 
  give overvie basic programming process give write simple  history explain language organize 
 basic program writing  expla  style  discuss programming style 
ho  basic declaration expression  int comment program cover  write clear simple code 
basic variable assignment statement cover detail arithmetic_operator  +     
 array  qualifier  reading number  cover arrays complex variable 
shorthand operator     +  
 decision control statement  explain simple decision statement include
problem discuss 
 programming process  take step require create simple program  specification release 
structured programming  fast prototyping  debugging discuss 
part ii  simple programming  simple statement operator programming 
learn organize statement simple function 
 control statement  additional control statement 
include break  continue 
switch_statement discuss detail 
 variable scope function  introduce local_variable  function  parameter 
 preprocessor  preprocessor  give great flexibility create code 
tremendous number way screw
simple rule help keep preprocessor problem
 bit operation  discuss logical operator work bit 
part iii  advanced type class  learn basic declaration statement construction advanced type structure  union  class 
learn concept pointer 
page xviii  advanced type  explain structure advanced type 
sizeof operator enum type include 
 simple class  introduce concept class 
powerful feature 
class allow group datum operation perform datum object 
 class  additional operation perform class 
 simple pointer  introduce pointer variable show
advanced programming technique explore part iv  advanced programming concept 
section  explore number feature let create complex  easy object class 
 file input output  buffer unbuffered input output 
ascii binary file discuss show construct simple file 
old style operation include 
 debug optimization  debug program  interactive debugger 
show only debug program  write program easy debug 
optimization technique program run fast efficiently 
 operator overloading  explain allow extend language define additional meaning language operator 
create complex type operator work
float point  simple decimal float point format introduce problem inherent float_point  roundoff error  precision loss  overflow  underflow 
 advanced pointer  advanced pointer construct dynamic structure link list tree 
 advanced class  show build complex  derived_class simple  base
finally number miscellaneous feature language feature 
 exception  explain handle unexpected condition program 
page xix  modular programming  show split program file modular programming technique 
utility explain detail 
 template  allow define generic function class generate family function 
 portability problem  problem occur port program move program machine 
 put detail step take complex program conception completion 
hide modular programming technique  object orient programming  stress 
  turn code code  address trap lurk code bite programmer 
 dustier corner  statement  comma operator   operator 
 programming adage  list programming adage will help construct program 
appendix ascii table  contain list character code value 
appendix range  list numeric range variable_type 
appendix operator precedence rule  list rule determine order operator evaluate 
appendix compute power series  contain program show computer compute value function 
read book know build language 
know will find material present familiar 
introduce number include  
entirely system 
system discuss detail  file 
constant reference variable 
function overloading  inline function  reference parameter  default parameter 
class unique powerful language 
font convention follow convention book  italic directory emphasize introduce 
italic highlight comment example 
bold keyword 
constant width program element program example show content file output command 
reference text word item example code fragment show constant width font 
constant bold example show command text type literally user 
example execute only root 
page xxi surround optional value description program syntax 
notation ctrl control character 
mean hold control  key type character  
denote key similarly  return carriage return 
example command line follow return
obtain source_code obtain source_code program present book associate internet server 
example program book electronically number way  ftp  ftpmail  bitftp  uucp 
cheap  fast  easy way list first 
read top first work
ftp directly internet 
ftpmail internet  receive electronic mail internet site include compuserve user 
bitftp electronic mail bitnet 
uucp work 
ftp ftp  need machine direct access internet 
sample session show  type boldface 
name  joe anonymous guest login ok  domain style mail address password 
specify binary transferfor type set
page xxii ftp quit goodbye 
include company service provider allow email connection internet 
message body  give ftp command want run 
server will run anonymous ftp mail file back
complete help file  message subject single word  help  body 
following sample mail session example 
command listing file select directory requested example file 
listing useful late version example interested
bitftp bitftp mail server bitnet user 
electronic mail message request file  back file electronic currently page xxiii serve only user who mail node directly bitnet  earn  netnorth 
bitftp public service princeton university 
here work 
bitftp  mail contain ftp command 
complete help file  help message body 
following message body bitftp  ftp netdata user anonymous cd oreilly nutshell practcpp dir binary quit once desire file  follow direction ftp extract file archive 
unix system  need version uudecode  uncompress  atob  tar system 
vms  mac version
uucp uucp standard virtually unix system ibm compatible pcs apple macintosh 
example uucp modem uunet  uunet connect time charge apply 
example uunet account
company account uunet  system direct uucp connection uunet 
find system  type  uucp oreilly nutshell practcpp backslashe omit bourne shell sh csh 
file time later day directory spool uucppublic yourname 
account  like electronic mail  contact uunet 
idea file oreilly ls short test file contain filename size file
once desire file  follow direction ftp extract file archive 
page xxiv comment question address comment question book publisher  associates 
special thank dale dougherty rip first book force put correctly 
greatly appreciate hard work put phil straite gregory satir 
especially thank people who review edit book 
thank production group associates nicole gipson  project manager production editor  john files  juliette muellner  jane ellln  production assistant  mike sierra  book design implementor 
finally  special thank hard work programmer code teach
page basic page 
brief histoty 
learn profanity language programmer understand 
computer design handle process large amount quickly efficiently 
high level programming allow software engineer efficiently communicate computer 
highly flexible adaptable 
creation  wide variety program include firmware micro controller  operating_system  application  graphic programming 
quickly programming choice 
tremendous demand people who tell computer let quickly efficiently 
brief history programmer  brian kernighan dennis ritchie  create call c
extremely simple flexible soon type program 
quickly popular programming_language world 
page major problem 
procedure orient 
mean design typical program  programmer start datum write procedure manipulate datum 
programmer eventually discover program clear easy understand able take bunch datum group operation work datum 
grouping call object class 
design program design class know object orient design ood 
bjarne stroustrup start work call   improve add number important class 
improve  augment  finally 
owe success allow programmer organize process effectively language 
build work c
program transform program little trouble 
program  work 
way  allow programmer build exist base code 
organization design bridge programmer raw computer 
idea let programmer organize program way easily understand 
compiler translate machine
computer program consist part  datum instruction 
computer impose little organization part 
computer design general possible 
idea programmer impose organization computer way
datum computer store series byte 
organize byte useful datum 
datum declaration programmer work
let compiler decide byte memory minor bookkeeping detail need worry
page variable total simple variable 
hold only integer only total 
series integer organize array 
will handle detail  
width rectangle pixel height rectangle pixels color rectangle fill pattern datum only part program 
need instruction 
computer know layout instruction 
know only current instruction next instruction 
high level 
let write high level statement 
compiler translate statement series cryptic machine instruction 
sort statement call assignment statement 
compute store value arithmetic expression 
control statement control order processing 
statement switch_statement enable computer simple decision 
statement repeat loop statement
group statement wrap form function 
only need write general purpose function draw once reuse function want draw
rich set standardfunction perform common function search  sort  input  output 
set function group form module  module link form program 
major goal organize instruction reusable component 
write program fast borrow  code
group reusable module combine library 
example  need sort routine  standard function qsort library link program 
page computer divide world datum instruction 
long time  highlevel language keep divide line place 
define datum write instruction  combine
major innovation idea combine datum instruction construct call class object 
object orient programming allow group datum operation perform datum 
concept take step allow derive exist
last feature extremely powerful 
allow build complex top small  simple
allow define basic  abstract_class derive specific
example  abstract_class shape define shape  triangle  circle 
organization key write program 
book  know table content front index back  way book organize 
organization book easy
let organize program simple powerful syntax 
book syntax teach style rule enable create highly readable reliable program 
combine powerful syntax programming style create powerful program perform complex wonderful operation 
learn only way learn program write program 
will learn writing debug program will read book 
book contain programming exercise  try possible 
exercise keep programming style mind 
comment program  exercise only
commenting help organize thought  let seduce idea  only write program need comment  first code look obvious write confusing cryptic revisit week later 
write comment help organize idea 
once write program design work only computer caltech 
program highly system dependent 
only who page program  program print follow message command line wrong  user twit year later student syracuse university 
secretary school computer science need program similar caltech listing program  adapt program
unfortunately  forget funny little error_message 
imagine horrified come computer science office accost chief secretary 
lady power dean cringe 
look  user twit   luckily sense humor  here today 
sprinkle book break  program 
spend time figure work 
problem subtle  misplaced semicolon 
program let learn spot mistake small program 
way similar mistake big program  will mistake  will train spot
page basic program writing 
program conception execution 
create real program 
create program commandline compiler 
create program integrated development environment 
programming exercise first important least writer today  strip language clean  lay bare bone ernest hemingway computer powerful tool store  organize  process tremendous amount
give detailed instruction 
communicate computer easy 
require instruction exact detailed 
life easy write program english 
tell computer   add check deposit  tell total   machine balance checkbook 
english lousy language write exact instruction 
language full ambiguity imprecision 
grace hopper  grand old lady computing  once comment instruction find bottle shampoo  wash rinse repeat try follow direction  run shampoo 
course  try write precise english 
careful sure spell sure include instruction contingency 
work hard  write precise english instruction  right 
page turn group people who spend time try write precise english 
call government  document write call government regulation 
unfortunately  effort regulation precise  government document unreadable 
read instruction book come tax form  know precise english like 
still  extra verbiage government put problem occur 
year ago california pass law require motorcycle rider wear helmet 
shortly law effect cop guy wear helmet 
man suggest police officer take close look law 
cop give motorcyclist ticket man helmet firmly strapped knee 
english  problem  computer language 
now  communicate computer 
first computer cost million dollar  time programmer cost year 
programmer force program language instruction reduce series number  call machine language 
language directly input computer 
typical machine language program look like  
program ancient machine  software engineer write program simple language word stand single instruction 
call assembly language programmer manually translate  assemble  line machine code 
typical program look like  program translation mov add halt 
translation difficult  tedious  exact task 
software engineer decide perfect job computer  write program  call assembler  job automatically 
page figure 
assemble program show boss chew  dare think expensive machine mere  clerical   give cost hour computer time cost hour programmer time  unreasonable attitude 
fortunately  time pass cost programmer cost computer
cost effective let programmer write program assembly language program_call assembler translate program machine language 
assembly language organize program way easy programmer understand 
program difficult machine
program translate machine execute
start trend 
programming language convenient programmer start require computer time translate useful computer 
year series high level language devise 
language attempt let programmer write easy understand precise simple computer understand 
early high level language design handle specific type application 
fortran design number crunching  cobol  write business report  pascal  student
rumor nicklaus wirth  know pascal successful  later brian kernighan dennis ritchie develop bjarne stroustrup turn 
page program conception execution program write high level language letter  number  symbol find computer keyboard 
computer actually execute low level language call machine code series number 
program undergo transformation 
program start idea programmer head 
write thought file  call sourcefile source_code  text editor 
file transform compiler objectfile 
next program_call linker take object file  combine predefine routine standard_library  produce executable program set machine language instruction 
follow section  will see form program work produce final program 
figure show step take transform program write high level language executable program 
figure transformation high level language program wrapper fortunately run compiler  assembler  linker individually 
compiler wrapper  program  determine tool need run run
page programming system developer integrate development environment ide 
ide contain editor  compiler  linker  project manager  debugger  convenient package 
borland microsoft ide compiler 
create real program actually start create program need know basic programming tool 
section will take step step process enter  compile  run simple program 
section type compiler 
first type standalone command line compiler 
type compiler operate batch mode command line 
word  type command compiler turn source_code executable program 
type compiler contain ide 
unix system command line compiler 
ide type compiler unix  rare 
hand compiler ms window contain integrate development environment 
command line die hard  compiler contain command line compiler
create program command line compiler section will step step process need create program command line compiler 
instruction give generic unix compiler  free software foundation compiler  turbo  borland  microsoft visual 
borland microsoft compiler  want skip ahead section ide 
step  create place program easy manage create separate directory program work
case will create directory call hello hold hello program 
unix  type  mkdir hello cd hello page ms type  mkdir hello cd hello step  create program program start text file 
example show hello program source form 
example source program 
favorite text editor enter program 
unix file name ms window file name 
warn ms window user word process program microsoft word wordperfect write program 
word process program add format code file confuse compiler 
text editor ms edit program capable edit ascii file 
step  run compiler compiler change source_file just create executable program 
compiler command line 
command popular compiler list
unix base compiler follow generic standard 
compiler name cc 
compile hello program need follow command  cc option enable debug 
see compiler manual detail possible option 
compiler unix  command line slightly
page free software foundation compiler free software foundation  gnu people  publish number high quality program 
compile program compiler  follow command line  additional switch turn warning 
borland turbo ms borland international low cost ms compiler call turbo 
compiler ideal learn 
command line turbo tcc tell turbo large memory model 
book discuss
take attitude   large worry switch tell turbo put debug program 
warning turn  stack check 
compiler_will actually compile 
force compile switch 
finally  tell turbo create program name hello  name source_file 
see turbo reference manual complete list option 
borland ms window addition turbo  borland international full feature  professional compiler ms window call borland 
command line bcc command line option turbo borland 
microsoft visual microsoft visual compiler ms window 
robust full feature borland counterpart  will compile program book 
compile  follow command line  cl page option tell program large memory model 
debugging turn option warning option 
step  execute program now  run program type  example  hello unix ms prompt  message  hello world will screen 
create program integrate development environment integrate development environment shop come program 
take compiler  editor  debugger wrap neat package programmer 
development environment tend change  version require slightly keystroke 
create place program easy manage create separate directory program work
case will create directory call hello hold hello program 
ms type  mkdir hello cd hello step  enter  compile  run program ide little include separate instruction
start turbo ide command  tc 
option compiler code generation command pull code generation dialog box see figure 
change memory model large 
option compiler entry exit command turn stack check show figure 
page figure 
code generation dialog box figure 
entry exit code generation dialog box 
option compiler message display command bring compiler message dialog box see figure 
select display warning message 
option command option
page figure 
compiler message dialog box 
open project file dialog box select project file 
case project file call 
screen look like figure finish 
figure open project file dialog box 
press insert key add file project 
file want add see figure 
page figure 
add project list dialog box 
press esc add file  cycle 
press arrow key line 
line now  highlight see figure 
figure  hello  project 
press return edit file 
finished project 
run run command execute program 
program run  control return ide 
mean see program output 
see result program switch user screen command window user 
press key will_return ide 
figure show output program 
finish program file isave command 
exit ide file quit command 
page figure 
user screen borland 
create directory call hello hold file hello program 
create directory window  file manager program type follow command ms prompt  mkdir 
window  double click borland icon start ide program begin execution display blank workspace see figure 
select project project item create project program 
fill project path name   blank 
target type select 
target model set large 
result show figure 
click advanced button bring advanced option dialog 
clear item show figure 
click ok return target dialog 
press alt bring node sub menu show figure 
select edit node attribute bring dialog show figure 
style sheet blank  select item  debug  click ok return window 
page figure borland initial screen 
figure node attribute dialog box 
project option dialog select option project option item 
compiler item click +  expand option 
turn test stack overflow option show figure 
click ok option 
click ok return window 
press arrow select item project see figure 
press return start edit file 
type follow code  
finish  screen will look like figure 
compile run program select debug run menu item 
program_will run display  hello world  window  show figure 
page figure project option dialog box 
page microsoft visual 
create directory call hello hold file hello program 
create directory window file manager program type follow command ms prompt  mkdir 
window  double click visual icon start ide 
blank workspace will display show figure 
figure microsoft visual initial screen 
click project bring project dialog show figure 
fill project name blank 
change project type quickwin application 
visual edit dialog allow name source_file project see figure 
case only file 
click add enter name project click close tell visual file program 
select option project option bring project option dialog show figure 
click compiler button change compiler option 
page figure project create screen 
figure project option dialog box 
custom option item category change warning level show figure 
change memory model category change memory model large see figure 
close dialog click ok button 
bring back project option dialog 
click ok dismiss dialog
select  file start file 
type follow line  
result look like figure 
file menu item file name 
project build command compile
compiler_will output message build 
finish screen look like figure 
page figure compiler option dialog box 
now start debug command 
result figure 
figure  hello world  result help unix unix system online documentation system call man  access man command 
item activate hypertext base help system 
programming exercise exercise  computer  type hello execute
exercise  take programming example source  enter computer  run
page style 
indentation code format 
consistency organization 
summary programming_language  matter structure  will prevent programmer write bad program
flon nobiliy  style will writer unreadable forty year now stendhal discuss programming style create simple 
style separate gem junk 
separate programming artist butcher 
learn programming style first  type first line code  write will high quality 
contrary popular belief  programmer spend time writing program 
time spend maintain  upgrading  debug exist code spend create
amount time spend maintenance skyrocket 
average number line typical application million 
average system age year 
matter bad  manager survey annual meeting conference software maintenance association report system department maintain specific individual understand page software build exist software 
recently complete code
only create scratch  adaptation exist 
programmer believe purpose only present computer compact set instruction 
program write only machine problem  
difficult correct author understand
modification upgrade difficult maintenance programmer spend considerable amount time figure code 
comment ideally  serve purpose  first  present computer set instruction second  programmer clear  easy read description
example contain glaring error 
error programmer still cause trouble problem 
contain comment 
working uncommented time bomb wait explode 
soon later will modify upgrade lack comment will job time difficult 
comment  simple art 
learn comment important learn code properly 
flavor comment 
first type start end
type comment span multiple line show  single line comment 
page advantage comment style easily span multiple line  style keep put line 
disadvantage forget screw code 
program clear easy read possible 
matter taste 
book style comment big  multiline comment style reserve comment take only single_line 
comment style decide comment
example show hello world  program look comment add 
way organize thought write language clear easy understand 
once process clearly state  translate computer program 
understand important part programming 
once write page comment complex graphic algorithm 
comment revise twice start code 
actual instruction page poor person typeset typeset font style size  bold  italic part text stand
programming  limit single  monospace font 
people come ingenious way limitation typeface 
comment trick warning  example message grab attention programmer 
bold typeface emphasize word 
organize thought lucky  program work first time 
page program read like essay 
clear easy understand possible 
programming style come experience practice 
style follow page result year programming experience 
starting point develop style 
rule  only suggestion 
only rule program clear  concise  simple possible 
beginning program comment block contain program 
box comment stand
list follow contain section include beginning program 
program_will need section  only apply 
head first comment contain name program 
short description
amazing program  slice  dice  solve world problem  useless know
author trouble create program 
take credit
later modify program  come help 
purpose write program 
usage section give short explanation run program 
ideal world  program come set document
world ideal 
oualline law documentation state  time documentation lose 
remain  time revision documentation revision program completely useless 
time actually documentation correct revision documentation  documentation will write japanese 
avoid fall prey oualline law documentation  put documentation program 
reference creative copying legitimate form programming break copyright law process 
real world  matter working program  long give credit credit due 
section reference original author work copy 
page file format list file program read write short description format 
restriction list limit restriction apply program  datum file correctly format  program check input error 
revision history section contain list who modify program change
computer source control system unix  rcs sccs  ms window  mks rcs  pcvs will keep track
error handling program detect error  error 
note include special comment cover 
format begin comment will depend need environment program 
example  student  instructor ask include program head assignment number  name  student identification number 
industry  project number part number include 
comment explain programmer need know program 
possible overcomment program 
insert comment easy way unix editor vi  put following file easy construct box 
type return will end box 
number star carefully select end box align tab
page code actual code program consist part  variable executable instruction 
variable hold datum program 
executable instruction tell computer datum 
class combination datum instruction work datum 
convenient way package instruction datum 
variable place computer memory store value 
identify place variable_name 
name length choose meaning clear 
reader idea 
represent number angel head pin  location acceleration plasma bolt game space invader 
put comment declaration effect  create mini dictionary define meaning variable_name 
definition variable known place  easy look meaning name 
once ask modify program convert plot data file format
unit length program variable declaration page comment 
try hard figure impossible determine unit program 
finally  give put follow comment program  note  idea input unit idea output unit discover divide plot look right size 
cleverness unreadable unmaintainable program 
program  nature  extremely complex 
cut complexity will program
follow code  write clever programmer 
novice programmer who know tell program move datum source destination 
computer care version
compiler_will generate machine code version 
programmer who benefit verbose code 
name style name contain uppercase lowercase letter 
book lowercase name variable   
uppercase page reserve constant   
convention classic convention follow program 
program mixed case name  recordsinfile 
capitalization first letter variable 
example  recordsinfile denote local_variable recordsinfile denote global_variable 
matter religion style 
consistent naming style extremely important 
book choose first style  lowercase variable_name uppercase constant  book 
code religion computer scientist devise programming style 
include structured programming  top programming  goto programming 
style following cult 
term  religion  people teach follow rule blindly know reason
example  follower goto cult will goto statement  natural
rule present book result year programming experience 
discover follow rule  create program 
follow blindly 
find system  mean
general rule program indent level conditional 
example level logic  indentation level 
statement outermost 
statement inside next level 
statement inside break innermost level 
style indentation  vast religious war wage programming community
first short form  
format commonly
format feel comfortable
book short form 
amount indentation leave programmer 
space common 
study show space indent readable code 
choose indent size long consistent 
clarity program read like technical paper 
organize section paragraph 
procedure form natural section boundary 
organize code paragraph 
idea begin paragraph topic sentence comment separate 
version swap corner swap coordinate  
simplicity program simple 
general rule thumb 
single function long page 
rule come human mind hold only short term memory 
page human mind wrap sitting 
avoid complex logic multiple nest
complex code  indentation level will need 
time start run right margin  think split code multiple procedure decrease level complexity 
read sentence  like author string sentence sentence word   understand short sentence job bother
long statement avoid 
equation formula look like long line  split short equation 
split large single code file multiple small
way difficult edit print 
class see  simple class  put class module 
finally  important rule  program simple easy understand possible  mean break rule 
goal page clarity  rule give design help accomplish goal 
rule way  rid
see program single statement span page 
specialized nature program  statement simple easy understand 
consistency organization style only element create high quality program 
consistency factor 
book organize table content front index back 
book print similar organization 
consistency easy look word index find title table content 
unfortunately programming community develop variety code style 
advantage disadvantage 
trick efficient programming group pick style consistently 
way avoid problem confusion arise program write style combine 
style nice  consistency
read touch only basic style 
later expand base  add learn language 
summary program concise easy read 
serve set computer instruction  reference work algorithm datum inside
document comment 
comment serve purpose 
first  program maintenance programmer who fix second  comment help remember
class  create style sheet class assignment 
discuss comment program
class  analyze style exist program 
program write manner clear easy understand 
improve style program 
page exercise  programming exercise book write comment block
will serve purpose 
first  will give practice comment 
second  will short circuit old programmer excuse   time put page basic declaration expression 
element program 
output class 
basic program structure 
variable storage 
float point number 
answer question journey thousand mile begin single step lao zi carpenter building way programmer program  first woodpecker come destroy civilization anonymous element program construct building  need brick blueprint tell put
computer programming need datum variable instruction code 
variable basic building block program 
instruction tell computer variable 
comment variable instruction 
note author document program clear easy read 
comment ignore computer 
construction  start order material   need large brick  half size brick   similarly  declare variable
variable define begin
construction basic structure room 
combine room form building 
basic structure function 
function combine form program 
page apprentice builder start build empire state building 
start room house 
will concentrate construct simple  function program 
basic program structure basic program datum declaration  function  comment 
let see organize simple program 
basic structure function program head comment data declaration 
head comment tell programmer program 
datum declaration datum program
single function name
name special  first function_call 
function call directly indirectly
function begin 
nonzero error big return_value  severe error 
typically simple error  missing file bad command line syntax 
now let take look hello world  program example 
beginning program comment box enclose
follow line  page statement signal set standard class_call stream class 
type datum declaration 
semicolon end statement way period end sentence 
line orient language basic  end line end statement 
sentence book span line end line treat space separate word 
work way 
single statement span line 
similarly  put sentence line  just put statement line 
time program readable statement start separate line 
standard class console output message 
standard class generally useful object define put standard_library 
library collection class  function  datum group reuse 
standard_library contain class function input  output  sort  advanced math  file manipulation 
see reference manual complete list library function standard class 
contain computation  merely single message screen 
starting point 
once master simple program  great deal right 
program simple look 
once work  move create complex code 
simple expression computer just print string 
perform calculation 
expression specify simple computation 
simple operator list table 
page table 
simple operator operator meaning 
multiply  divide  modulus precedence addition + subtraction 
parenthesis group term 
program example compute value expression + 
calculate answer 
will learn class later  simple class 
now know operator tell output 
statement     tell take string   write console 
execute will write  half console 
note put space  half  space side  string 
space need output separate number 
space inside string  will output 
result code  half omitting need space common first time programming mistake 
remember  only text inside quotation mark will output 
variable storage allow store_value variable 
variable identify variable_name 
additionally  variable variable_type 
type tell variable kind number real  integer hold 
avoid confusion  name variable depend case difference 
programmer lowercase variable_name 
name  int  float  special meaning reserved word 
follow example variable_name  average average grade pi pi decimal place number student class following variable_name  end int 
begin number contain space reserve word avoid variable_name similar 
example follow illustrate poor choice variable_name  total total number item current entry 
variable declare 
variable declaration serve purpose  
define name variable 
define type variable integer  real  character  
give programmer description variable 
declaration variable answer int answer  result expression 
keyword int tell variable contain integer_value 
semicolon indipage cate statement end  comment define variable programmer 
general form variable declaration  
type variable_type int  float  name valid variable_name 
comment explain variable will
variable declaration come just line top program 
integer know whole number fractional part decimal_point 
number   integer 
number integer contain decimal_point 
general form integer declaration  int 
calculator digit display only handle number 
try add  will overflow error 
computer similar limit 
limit integer implementation dependent  mean change computer computer 
calculator decimal digit 
computer binary digit call bit 
bit byte 
number bit hold integer vary machine machine 
number convert binary decimal print 
unix machine integer bit byte  range 
pc turbo  only bit byte range 
question  follow will work unix machine willfail pc int  
will result run pc 
page assignment statement variable give value assignment statement 
variable declare 
example  int  
variable left side equal assign value expression + right side 
semicolon end statement 
declare allocate storage put unknown value inside
think declaration create box hold datum 
start mystery box contain unknown quantity 
illustrate figure 
assignment statement compute value expression drop value box show figure 
declaration assignment statement 
equal assignment  equality 
page example term store integer_value later expression 
variable  like expression  output output operator  operator check result 
example tterm 
real number number fractional part 
way store internally  real number know float_point number 
number   float_point number 
decimal_point distinguish float_point number integer  number float_point number integer 
float point number contain decimal_point 
number    float_point number 
possible omit digit decimal_point specify number  extra clear float_point number 
similar rule apply 
float point zero write 
additionally  float_point number exponent specification form 
example  shorthand 
form float_point declaration  
limit range float point number computer handle 
range vary widely computer computer 
float point accuracy discuss  float_point 
float point number output
example       page float_point integer divide division operator special 
vast difference integer divide float point divide 
integer divide  result truncate fractional part discard 
example  integer divide value 
divisor dividend float point number  float_point divide execute 
table expression example expression result 
float point allow assignment integer expression float point 
will automatically perform integer point conversion assignment 
similar conversion perform assign point number integer 
float point number truncate assign variable 
example float 
page question  example print  value  
program fix
character enclose single quotation mark  
backslash character call escape character 
signal special character follow 
example  character represent single character   character 
cause output device beginning next  similar return key typewriter 
character backslash
finally  character specify nnn octal code character 
table summarize special character 
full list ascii character code  see appendix
special character character name 
tab advance next tab column  apostrophe single quotation mark character  
page note character enclose single quote   data_type  string  enclose double quote  
way remember difference type quote single character enclose single quote string number character include double quote character  enclose double quote 
example reverse character 
example cc 
abc reverse cba boolean draft standard define boolean  bool  value true false 
compiler support will discuss here 
program exercise exercise  write program print name  social security number  date birth 
exercise  write program print block asterisk  character high character wide 
page exercise  write program compute area circumference rectangle inch wide inch long 
change program work rectangle inch wide inch long 
exercise  write program print  hello  big block letter letter character high character wide 
answer question answer  large number store int unix machine 
turbo limit 
zip code large  mangle result 
problem fix long int just int 
type integer discuss  array 
qualifier  read number 
answer  problem division  
number number integer  divide 
fraction truncate divide 
expression write page array  qualifier  read number 
type integer 
type float 
programming exercise mysterious independent variable political calculation  public opinion 
fine small number brick  happen want construct large 
like point stack brick  left wall 
brick  brick  declare array element    separate variable 
reference element array  number call index number inside square bracket 
funny language like start count  element number 
page note common sense tell declare element long  valid 
common sense wrong illegal 
example compute total average number 
special character   nul end string 
create character array element long 
note allocate character end string marker 
string constant consist text enclose double quote  
notice string constant extensively output standard class 
note line need inform string function library 
variable length string 
example  declaration  
size array  length string 
string character long store string 
list table 
table string function_function 
page function 
example take first last combine string 
program work initialize variable first first steve 
last oualline put variable last 
construct full  first copy 
strcat add space 
call strcat tack last 
dimension string variable know encounter character long 
note  strcat strcpy page 
steve oualline read datum learn compute expression output result 
need program read number
output class variable operator write number 
input class variable cin operator read
example  code  cin price  read number  price 
input program number  separate white space 
example  type  price value 
note give precise control input 
reasonable job simple input 
program expect number type enter program_will skip enter white space wait type number 
lead think program stuck 
example  cin number user double example double char 
program ask user single number double
notice end enter 
want computer print newline prompt 
example  sample run program look like  enter replace enter enter result enter question  example design compute area triangle  give width height 
strange reason  compiler refuse believe declare variable width 
declaration right line just definition height 
compiler see
example comment int_int 
read string  cin class end line part string 
enter test  initialize variable allow variable initialize declaration statement 
number element curly brace match array size 
number present  warning will issue 
number  extra element will initialize 
page dimension give  will determine dimension number element initialization list 
example  initialize variable statement  product number part int    
variable length string 
example  declaration  char  sam   create array contain character 
size array  length 
character long store
element initialize contain random datum 
multidimensional array array dimension 
declaration dimensional array  
additional dimension tack
last element answer vary 
page type integer medium level language allow close actual hardware machine 
language  basic  great length completely isolate user detail processor work 
consistency come great loss efficiency 
let give detailed hardware
example  machine let length number 
simple basic allow programmer only number type 
simplify programming  basic program extremely inefficient 
allow programmer specify kind integer  programmer hardware 
type specifi int tell efficient size machine integer 
byte depend machine 
need extra digit store number large allow normal int 
declaration  long int answer  answer calculation allocate long integer 
long quantifier inform wish allocate extra storage integer 
small number wish reduce storage  
guarantee storage long 
actual practice  allocate byte  long  byte  byte 
type byte  bit 
fifteen bit normally number bit sign 
give range 
unsigned bit number  give range 
declaration default sign  declaration  sign long answer  final result page 
character variable take byte 
number range 
integer  default sign  default compiler dependent 
compiler dependent 
specify sign unsigned worry problem like 
read write integer little tricky 
try char variable output statement  will write  character 
need trick believe char variable integer 
accomplish operator 
example show write integer number 
example cc 
next line write value variable 
try write directly  treat character 
turbo command line switch default type char sign unsigned page read integer possible 
first read assign integer 
summary integer type long declaration allow programmer explicitly specify extra precision need expense memory 
compact integer type char 
limited range 
kind number will depend program storage requirement 
range type integer list appendix
type float float type come flavor 
double precision give programmer twice range precision single precision float variable 
quantifier long double denote extend precision 
system double  offer additional precision 
type float point number sign 
machine  single precision float point instruction execute fast accurately double precision 
double precision gain accuracy expense time storage 
case float adequate  accuracy problem  switch double see  float_point 
constant reference declaration want value change  
keyword const 
note convention variable_name lowercase only constant uppercase only 
language require  programming system convention 
page constant initialize declaration time change 
compiler  borland version  will allow integer constant type expression 
special character   tell reference 
reference variable page form reference variable useful 
actual programming
 variable scope function  will see form reference variable useful 
qualifier see  allow specify number qualifier variable declaration 
qualifier think adjective type follow 
table summarize qualifier 
table qualifier simple type special volatile blank class register static extern auto blank size long short double blank sign sign unsigned blank type_int float char blank special volatile keyword specialized programming driver share memory application 
advanced modifier scope book 
brief description class follow  register frequently variable keep machine register 
see  debugging optimization 
keyword  variable scope function   modular programming 
page extern variable define file 
size size qualifier allow select efficient size variable 
sign number sign unsigned 
qualifier apply only char int type 
float point number sign 
default sign int undefined character 
type specify type variable 
simple type include  int integer float float point number char single character  short integer page hexadecimal octal constant integer number specify string   
decimal base number  
computer deal binary base number  
octal base system easily convert binary 
group transform single octal digit 
write change octal 
hexadecimal base number similar conversion  bit time
language convention represent octal hexadecimal value 
lead zero signal octal constant 
example  octal decimal 
start number ox  hexadecimal base constant 
table show number basis 
table integer example base base 
operator perform shortcut only rich set declaration  give large number special purpose operator 
frequently programmer want increment add variable 
normal assignment statement  look like  +  page 
simple operator show table manner 
table shorthand operator operator shorthand 
side effect unfortunately  allow programmer side effect 
side effect operation perform addition operation execute statement 
example  follow legal code  
first statement assign value 
second statement  order 
possible answer  
answer compiler dependent vary computer computer 
write code like worry sort question 
correct answer  increment occur assignment 
effect confuse worry side effect 
note programmer highly value compact code 
holdover early day computing storage cost significant amount money 
view art programming evolve point clarity valuable compactness 
programmer read statement  decode
part statement  put line difference form operator noticeable 
note prefix form prefer suffix form variable allow compiler generate slightly simple code 
page complex side effect confuse compiler 
follow code 
multiply add
multiply add
add result multiple
step equal priority  previous example  compiler execute order want
suppose decide execute step first  show figure 
expression evaluation  method execute step first  show figure 
first method   second method 
expression ambiguous 
operator middle large expression  create problem 
avoid trouble keep program simple  put line
page figure expression evaluation  method programming exercise exercise  write program convert celsius fahrenheit 
exercise  write program print rectangle give height width 
exercise  write program convert kilometer hour hour 
exercise  write program take hour input output total hour 
exercise  write program take integer output total hour hour 
answer question answer  programmer accidentally omit end comment symbol comment height 
comment continue next line page engulfs width variable declaration 
example show program comment underline 
answer  problem way specify element array  
reason specification generate syntax_error legal strange 
comma operator see dark corner expression evaluate 
treat pointer see simple pointer write show memory address 
answer  problem zip code begin zero 
tell octal constant 
print print decimal 
program print  york zip code  page decision control statement 
assignment side effect 
answer question once decision worry afteruard harry truman calculation expression only small part computer programming 
decision control statement need  specify order statement execute 
construct linear program  program execute straight line  statement
will see change control flow program branch statement loop statement 
branch statement cause section code execute depend conditional clause 
loop statement repeat section code number time condition occur 
general form statement  statement  expression true nonzero statement will execute 
expression zero  statement will execute 
example  suppose write billing program 
end  customer owe credit owe negative amount want print message 
write   owe   page relational represent equal
statement read  equal zero  print  complete list relational operator find table 
relational operator operator meaning 
equal multiple relational expression group logical_operator 
example  statement     logical cause statement print  quit  lowercase  uppercase   table list logical_operator 
table logical_operator operator usage 
readability  statement enclose curly brace indent 
allow programmer quickly tell statement conditionally execute 
will see later  mistake indentation result program misleading hard read 
page statement alternative form statement  statement  statement  condition true  first statement execute 
false  second statement execute 
accounting example  write message only owe 
real life want tell customer owe balance due 
now program fragment  
worry situation write code like
accord syntax rule  near syntactically correct 
write code like violate kiss principle keep simple  stupid 
write code clearly simply possible 
code fragment write 
original example  clear statement clause  add extra set brace improve readability  understanding  clarity 
strcmp function strcmp compare string return zero equal nonzero
check string equal  code  check equal 
unfortunately  obvious wrong 
string equal strcmp return zero  execute 
backwards behavior strcmp  careful strcmp comment
loop statement computer only calculation  will
computer repeat work  need loop statement 
loop statement
example  loop number word document number account past due balance 
fibonacci sequence 
term compute equation  + + +
general term + mathematical equation math style variable_name 
mathematician terse style name variable 
programming  terse dangerous  translate name verbose 
want loop current term large 
loop  will repeat computation printing reach limit 
loop compute value print next need advance term 
complete body loop 
first term fibonacci sequence 
initialize first term value 
figure show happen variable execution program 
print value current term 
variable compute value 
next advance term put 
repeat compute last term loop exit 
page example show write code 
example fib fib cc int  
page break_statement statement compute fibonacci number 
loop exit condition beginning false 
loop exit point break_statement 
suppose want add series number know number add
need way let program know reach end list 
program number zero signal end list 
note statement begin program_will loop will exit only expression zero 
only way exit loop break_statement 
see end list indicator zero  statement  break  exit loop 
example  modify previous program only number large  example 
first version burie assignment inside expression 
program clear simple hide
important rule programming keep simple 
allow put assignment statement conditional 
example  program like      
sample output  enter number dollar owe  dollar 
programming exercise exercise  write program find square distance point 
find distance only want independent research need perform square root 
exercise  professor generate letter grade table 
table grade value correct grade 
give numeric grade  print letter 
exercise  modify previous program print letter grade base last digit score 
modifier list table 
table grade modification value last digit modifier 
note  only
note programmer frequently modify code write 
exercise  give amount  compute number quarter  dime  nickel  penny need 
exercise  leap year year divisible divisible  
write program tell year leap year 
page exercise  write program give number hour employee work hourly wage  compute weekly pay 
count hour overtime time half 
answer question answer  program illustrate common error frustrating 
problem allow assignment statement inside conditional 
statement  single equal sign double equal 
will assign value test result zero 
result nonzero true  clause execute 
result zero false 
statement equivalent  statement write  common error begin programmer
difficult frustrating find 
once teach course programming 
day month course end see student street 
greet  steve  tell truth 
class think bit overboard 
mark program 
programming exercise just simple matter programming 
software life cycle 
bear  grow mature  finally die  only replace young product 
understand cycle important programmer will spend only small amount time actually write
programming time spend modify debug exist 
software exist vacuum  document  maintain  enhance  sell 
section take look small programming project programmer 
large project involve people discuss  modular programming 
final hundred line  principle construction apply program thousand line 
figure illustrate software life cycle 
major step program 
program start idea assign implement
requirement document general term  want 
beginning  preliminary specification program
later  program refined  specification 
finally  program finish  specification serve complete description program
page figure 
software life cycle 
programmer design program 
design include major algorithm  class definition  module specification  file format  data_structure 
stress   think  study show design result program size poorly design
especially true  designpage ing object critical write program 
next step write program 
involve first write prototype fill create full program 
programmer design test plan test program 
idea  possible  test program 
unfortunately  program work first time 
correct test
program package  document  world
program perfect 
bug will find will need correction 
revise update 
program work user will want change  feature intelligent algorithm 
point specification create process start
set operating_system allow group file directory 
just file folder serve way keep paper filing cabinet  directory serve way keep file
will create simple calculator program 
file program_will store directory name calc 
create directory unix  execute follow command  cd mkdir calc ms type  cd mkdir calc tell operating_system directory want unix type command  cd ms type  cd page organize directory find operating_system documentation 
specification assume give assignment write program act like function  typically  specification give vague incomplete 
refine exactly define program produce 
first step write document call preliminary user  specification  program
document internal structure program algorithm plan
sample specification function calculator calc function calculator preliminary specification dec 
resemblance software live dead purely coincidental 
calc program allow user turn computer function calculator 
program add  subtract  multiplie  divide simple integer 
program run  zero result register display content 
user type operator number 
result update display 
follow operator valid  operator meaning 
division calc result  enter operator number  + result  enter operator number  result  page enter operator number  result  enter number  result  preliminary specification serve purpose 
first  give boss customer sure think think agree 
second  circulate colleague see suggestion correction 
preliminary specification circulate receive comment   add paragraph  dividing result error_message result register leave unchanged 
professor sort number student create program work only roman numeral + vii 
program come complete user manual write latin 
code design preliminary specification approve  start design code 
code design phase  plan work 
large programming project involve people  code break module programmer 
stage  file format plan  data_structure design  major algorithm decide
simple calculator file require fancy data_structure 
leave phase design major algorithm 
outline pseudo code  shorthand halfway english real code  loop read number calculation page display result end loop prototype once code design complete  begin write program 
try write entire program once debug will method call fast prototyping 
consist write small portion specification implement will still
case  will cut function function calculator 
once small part work  build rest function stable foundation 
prototype give boss look play idea direction project take 
communication key programming  show
code first version function calculator find example 
example calc calc cc int char 
parse store variable value 
plus +  perform addition line   +  + value  
makefile once source enter  need compile link 
now run compiler manually 
tedious prone error 
large program consist module extremely difficult compile hand 
fortunately  unix turbo utility call handle detail compilation 
now  just example template substitute name program place calc 
program discuss detail  modular programming 
basically  look file call makefile description compile program run compiler
unix system generic compiler  makefile file  calcl makefile unix compiler  standard  command name calc calc  page calc clean  rm calc free software foundation compiler  makefile file  calcl makefile free software foundation compiler calc calc  calc clean  rm calc turbo  makefile file  calcl makefile borland turbo compiler tcc flag check stack overflow enable debug turn warning large model  clean  erase borland  makefile compiler name bcc 
finally  microsoft visual  makefile file  calcl makefile microsoft visual cl flag al compile large model page zi enable debug turn warning  
compile program  just execute command
compilation create object file 
modification date object file late modification date source 
source edit  modification date update  object file date 
test once program compile error  move testing phase 
now time start write test plan 
document simply list step perform sure program work 
write reason 
bug find  want able reproduce
change program  will want retest sure break section program previously work 
test plan start try follow operation + + result result error_message output page run program result  enter operator number  + result  enter operator number  + result  enter operator number  result  clearly wrong 
entry   generate error_message
bug program  begin debug phase 
advantage small working prototype isolate error early 
debug first inspect program see detect error 
small program difficult spot mistake 
let assume line program  large contain line 
program inspection difficult  need proceed next step 
system debug program  debugger
system debugger 
case resort diagnostic print statement 
put data bad 
run program keep put isolate area program contain mistake 
note beginning line flag line debug line 
easy tell temporary debug output real program output 
finally find bug easy find remove debug line editor 
page run program result result  enter number  + result  enter number  + + + result  enter number  + result  see wrong statement 
variable come
close inspection reveal old mistake 
fix bug  program run correctly 
build work foundation  add operator     create example 
example int  
expand test plan try
word  preliminary  remove specification program  test plan  specification release 
maintenance programmer put program long rigorous testing process release world 
first user try program find bug 
start maintenance phase 
bug fix  program test sure fix break  program release
revision program officially finish  finish
month  will come ask   add modulus  revise specification  add change program  update test plan  test program  release
time pass  people will come additional request change 
soon program trig function  linear regression  statistic  binary arithmetic  financial calculation 
design base idea 
soon find run character
point program work initially design
soon later reach point program need scrap write scratch 
point write preliminary specification start process
page electronic archaeology unfortunately  programmer start project design step 
thrust maintenance revision stage 
mean programmer face bad possible job  understanding modify code 
contrary popular belief  program write disorganized orangutan zen programming technique poorly comment esperanto 
just look way 
electronic archeology art dig old code discover amazing like code work 
computer greatly search discover true meaning code 
tool examine format code 
tool upgrade 
see early section tool  
program name like xref  cxref  cross 
system unix utility cscope 
print list variable variable
pretty printer vgrind cprint typeset source_code printing laser printer 
system unix program cflow analyze structure program 
system public domain utility  call  produce call graph  show who call whom who call whom 
class browser allow display class hierarchy tell component build class structure 
will learn class  simple class 
programmer work way 
technique examine code list
choose work
mark program take printout program note
red blue ink tell difference printout note 
highlighter emphasize important section 
note useful  put program comment  printout start process
page debugger debugger great tool understand work 
debugger allow step program line time  examine variable discover work 
once find code note put comment 
text editor browser tool code text editor 
suppose want find variable sc
search command find first place sc
search find second 
continue search know variable
suppose find sc sequence counter 
editor  easily global search replace change variable sc 
sure word replacement will find replace sc place comment declaration way create understandable program 
add comment afraid put matter little  comment 
code add comment improve style  structure will clear
insert note comment  code easy understand future programmer 
suppose confront follow program write terser school programming 
assignment figure program
first pencil comment show figure 
page figure 
terse program mystery program require work 
apply principle section  comment  easy understand version show example 
example guess guess simple guessing game usage  guess random number choose 
return number maxint slightly favor page low number 
programming exercise assignment  follow software life cycle specification release 
exercise  write program convert english unit metric  mile kilometer  gallon liter  
include specification code design 
exercise  write program perform date arithmetic  day 
include specification code design 
exercise  serial transmission line transmit character second 
write program will calculate long will take file  give file size 
try exercise  write program add sale tax give amount round result near penny 
exercise  write program tell number prime 
exercise  write program take series number count number positive negative value 
page ii simple programming page control statement 
answer question grammar  know control king moli√®re statement statement allow execute block code specified number time 
general form statement 
normally count item     
will change thinking zero base counting count item     
careful examination flavor program reveal similarity version  show figure 
old programming_language allow change control variable case inside loop 
change control variable anytime wish jump loop generally pascal fortran programmer cringe 
similarity question  example contain error 
page question  example read list number count number datum 
give wrong answer 
number datum datum count number data index datum 
general form switch_statement  case constantl  statement 
duplicate label allow  only case will select 
expression evaluate integer  character  enumeration 
default label put switch 
see switch_statement  evaluate expression look matching case label 
find  default label
default find  statement
break_statement inside switch tell computer continue execution switch 
break execution continue next statement 
note switch_statement similar pascal case statement 
difference pascal allow only statement label  allow
keep execute hit break_statement 
pascal fall case
calculator program  programming process  contain series statement 
section code easily rewrite switch_statement 
switch  case operation 
default clause take care illegal operator 
rewrite program switch_statement only simple  easy read see example 
example calc sw int  
break_statement require end case 
break execution will continue next statement 
example   example programming case     case  
reset initialize case end break_statement 
print  reset  program fall example programming 
suppose modify program slightly add case switch  little problem case     
work close unpleasant surprise 
problem cause case long last case 
put break_statement  worry need 
finally  ask question  happen 
case  matching case default clause  entire switch_statement skip 
example  programmer default statement will   
variable assign strange value  need little defensive programming 
inside switch cause exit switch_statement 
inside loop  cause loop exit 
continue statement only valid inside loop cause top loop 
illustrate statement work  produce calculator print only valid datum input help command 
help command special 
want print help command  end help case break end continue 
continue force execution top loop 
unknown enter  print error_message 
help case  continue statement skip print
finally  special command  quit 
command handle switch 
handle break top loop 
break switch  belong loop cause exit
flow see figure 
page figure switch continue page programming exercise exercise  print checkerboard grid 
square character wide 
example_follow  + + + exercise  total resistance resistor parallel suppose network resistor value 
equation substitute value resistor total resistance resistor network 
write compute total resistance number parallel resistor 
exercise  write average number 
exercise  write print multiplication table 
exercise  write read character print vowel consonant 
page exercise  write convert number word 
example  result answer question answer  problem lie semicolon end statement 
body statement closing parenthesis semicolon 
statement indent  part statement 
indentation mislead 
compiler look indentation 
expression false 
answer  problem read number 
range legal array index array case 
strange happen  case variable change 
solution only 
page variable scope function 
scope storage class_function summary parameter_type structure programming basic recursion programming exercise answer question gross scope opinion bode strange eruption state 
variable set program 
learn kind variable
tell divide code function 
aspect function detail  include function overloading  function build structured program  recursive function_call 
scope storage class variable attribute  scope storage class 
scope variable area program variable valid 
global_variable valid point declare end program 
local_variable scope limit block declare access set read block 
block section code enclose curly brace 
figure illustrate difference local global_variable 
possible declare local_variable name global_variable 
normally  scope variable count first declaration figure whole program 
declaration second  local count take precedence global declaration inside small block local count declare 
block  global count hide 
nest local declaration hide local_variable 
local  variable small local scope normal local  variable 
local global_variable previous sentence give idea nest hide local_variable program easy figure illustrate hidden variable 
figure hidden variable variable count declare local_variable global_variable 
normally scope global entire program  variable declare inside block  instance variable page active length block 
global hide local scope block 
shaded area figure show scope global hide 
programming practice hide variable 
problem statement   difficult tell refer
global  declare top middle loop 
give variable name   current  
storage class variable permanent temporary 
global variable permanent 
create initialize program start remain terminate 
temporary variable allocate section memory call stack beginning block 
try allocate temporary variable will stack overflow error 
space temporary variable return stack end block 
time block enter  temporary variable initialize 
size stack depend system compiler
unix system  program automatically allocate large possible stack 
system  default stack size allocate change compiler switch 
turbo stack space byte 
like space  large array eat quickly 
large array permanent 
local variable temporary declare static 
note static entirely meaning global see  modular programming 
complete discussion meaning word  static   see table 
example illustrate difference permanent temporary variable 
choose obvious variable_name  temporary temporary variable permanent permanent 
initialize temporary time create beginning statement block  permanent initialize only once  program start time 
loop variable incremente 
top loop temporary initialize 
page example perm 
output program temporary temporary temporary note temporary variable refer automatic variable space allocate automatically 
qualifi auto denote variable  practice auto
table way variable declare 
table declaration modifier declare scope 
once note keyword static overloaded operator 
mean depend
complete list see table 
page function_function allow group commonly code compact unit repeatedly 
encounter function 
special function_call beginning program 
function directly indirectly call
suppose want write program compute area triangle 
write formula time  create function work function time 
function begin comment block contain following  name name function description description function parameter description parameter function_return description return_value function additional section add file format  reference  note 
refer  style  suggestion 
function compute area triangle begin triangle compute area triangle parameter width width triangle height height triangle return area triangle function proper begin line  float function type 
define type datum return function 
parameter variable local function pass function 
page note function type require 
function type declare  type default int 
omit function type  clear want function default int just forget function type 
avoid confusion  declare function type default 
function compute statement  width height  
leave give result caller 
return_statement  full triangle function see example 
see function_call perform follow operation  triangle variable triangle begin execution first line function triangle 
page technical name type parameter passing call  assignment only occur function call  data flow parameter only way 
return_statement datum function 
triangle example  function assign local_variable value execute statement return  return_value function 
value assign
example compute triangle 
function declare just_like variable 
declaration tell compiler function return_value parameter 
way declare function 
first write entire function
define call function prototype  give compiler just call function 
function prototype look like first page line function  only function body 
example  prototype function float float  float  note semicolon end line 
tell prototype real function 
allow leave parameter name declare prototype 
function just easily write  float float  float  technique commonly
reason easy create prototype simply editor copy first line function put line want prototype 
function parameter declare parameter list void 
example  int  keyword void function return value similar fortran subroutine pascal procedure 
example  function just print result  return value 
ordinary parameter change inside function  change will pass back call program 
page example  function  change
easily declare const 
return_value change  declare const
const declaration serve notify programmer parameter change inside function 
attempt change const parameter  compiler generate error 
improved function const declaration see example 
reference parameter return_value remember  basic declaration expression  discuss reference variable 
reference variable way declare additional name variable 
global local_variable  reference variable useful 
parameter take entirely
suppose want write subroutine increment counter 
write like example  will work 
default call value 
mean value come
happen convert parameter counter reference 
reference just way give variable name 
call  counter reference
mean counter result change
example  reference parameter  work properly 
examine program find look like example  front counter 
 tell counter reference normal call value parameter 
reference declaration return_value 
example  example find big element array 
return reference 
remember follow code   
follow code section perform equivalent operation 
actual variable   change  way refer
page dangle reference careful return  careful  wind reference variable long exist 
example illustrate problem 
example ref ref cc return  
return reference small integer 
line call function 
function min call create temporary integer hold value expression + 
reference temporary pass min function parameter 
create temporary parameter 
function min call return reference 
refer temporary create
end statement destroy temporary 
let look call min line detail 
here pseudocode version line  include detail normally hide programmer  create integer  assign value + create integer  assign value + bind parameter refer tmpl bind parameter refer 
page end line bad situation  refer temporary variable destroy 
word  point exist 
call dangle reference avoid 
array parameter deal only simple parameter 
treat array little differently 
first put size prototype declaration 
example  int array  parameter pass scheme call  call address  pass array 
way thinking automatically turn array parameter reference parameter 
allow size array pass 
function sum just declare accept integer array length    length 
want put size
allow ignore number put
put size alert people read program function take only fix size array 
now function name 
old language pascal true 
allow function overloading  mean define multiple function name 
define square function type int  float  short int  double  char figure mean square character 
keep code consistent  function name perform basic function 
example define follow square function  square integer 
perfectly legal code  confusing who read code 
problem parameter list tell function
parameter list routine void 
result tell routine flag second declaration error 
default parameter suppose want define function draw rectangle screen 
function need able rectangle need 
function definition function discover time ability draw
word  time factor 
allow specify default_value
tell programmer intend just forget put
useful  default parameter trick sparingly 
unused parameter define parameter compiler_will generate warning 
time want parameter 
way shut bother
trick leave name parameter 
people style ugly confusing 
right easy read 
way  just wish think
question ask now  write code like
turn programming system callback function 
example  tell window system   exit  button push call function  callback function handle button  important know button push 
supply button parameter function 
happen know only button cause call 
still give just ignore
function unused parameter 
call function overhead generate 
include put parameter stack  enter leave function  stack fix function_return 
example  code  
see code  line overhead line work 
allow cut overhead inline function 
inline keyword tell function small 
mean simple easy compiler put entire body function code stream generate call function 
expand function inline eliminate line overhead result fast execution 
inline modifier valuable hint generating code 
inline tell compiler code extremely small simple 
like page register  inline modifier hint 
compiler generate function inline  will create ordinary function 
summary parameter_type table list parameter_type 
table parameter_type type declaration 
value pass function change inside 
constant call value 
reference pass function 
constant reference value change function 
form parameter efficient constant call value  array 
value pass modify 
call address 
pass pointer item 
pointer cover  simple pointer 
structured programming basic computer scientist spend great deal time effort study program 
result come absolutely  positively  programming methodology month 
system include flow chart  top programming  bottom programming  structured programming  object orient programming 
now learn function  talk structured programming technique design program 
way divide structure program small  define function 
program easy write easy understand 
claim system absolute way program 
happen system work
system work
page structured programming concentrate program code 
later will see merge code datum form class begin perform object orient programming 
first step programming decide
 programming process 
next  decide structure datum 
finally  code phase begin 
write paper  start outline  section paper single sentence 
detail fill later 
write program similar 
start outline  outline function 
detail hide function 
example  program example solve world problem 
global solution 
course  detail remain fill
start write function 
page long 
grow long  split small  simple function 
size function limit page maximum amount human being store short term memory time 
function complete  start function 
type structured programming call top programming 
start top work way
type coding call bottom programming 
involve write low level function first  test build working set 
tend bottom technique work function
write small function sure know function work continue
approach construct calculator program 
actual practice  technique useful 
result top partially bottom technique 
computer scientist term methodology  chaos 
page recursion recursion occur function_call directly indirectly 
programming function lend naturally recursive algorithm  factorial 
recursive function follow basic rule  
end point 
problem simple 
definition factorial 
second  simplify problem simple 
factorial legal only 
happen try compute 
program abort stack overflow similar message 
ending point 
call infinite recursion error 
iteratively recursively  sum element array 
define function add element array follow  only element  sum simple 
sum element sum rest 
exercise  write function  begin   return true begin 
write program test function 
exercise  write function count  array  length will count time array 
array length element 
function recursive 
write test program function 
exercise  write function will take character_string return primitive hash code add value character string 
exercise  write function return maximum value array number 
exercise  write function scan string character   replace  
answer question  programmer trouble explain loop increment index 
semicolon end
keep read see statement case put loop 
contain correctly write version program 
page loop reach end string character
still develop  soon apparent need facility handle name constant  macro  include file 
solution create preprocessor run program pass compiler 
preprocessor specialized text editor 
syntax completely understanding construct 
merely dumb text editor 
preprocessor useful soon merge compiler 
compiler keep pre processor 
system  like unix  still separate program  automatically execute compiler wrapper cc 
compiler  like turbo  pre processor build
example  follow line perform similar function  define 
take drudgery guesswork change 
page preprocessor command begin hash mark column 
free format 
language element place line  end line treat just_like space 
preprocessor free format 
depend hash mark column 
will see  preprocessor know edit program 
warn preprocessor part compiler 
entirely syntax require entirely mind set
problem will see occur preprocessor treat like 
preprocessor directive terminate end line 
semicolon end statement 
preprocessor directive end semicolon  put lead unexpected result 
preprocessor directive continue put backslash end line 
simple preprocessor define replacement macro 
example  command  define foo bar occur 
common programming practice uppercase letter macro name 
easy tell difference variable lowercase macro uppercase 
general form simple define statement define name substitute text name valid identifi 
substitute text long fit single_line 
substitute text include space  operator  character 
possible follow definition  like  clear array
page programmer want know loop search beginning program definition 
bad define macro large scale replacement basic programming construct 
example  define following  define begin define end 
begin    end problem long program  half half pascal mongrel 
preprocessor cause unexpected problem check correct syntax 
example  example generate error line 
example big define 
definition line cause pre processor expand line look like  illegal operator  generate syntax_error 
page question  follow program generate answer expect example 
cc output preprocessor standard output 
ms window  command  cpp create file call prog contain output preprocessor 
run program example thepreprocessor give
example first first  local lib include  line include stuff omit 
note output preprocessor contain easily ignore 
case  need scan output reach line 
examine line will give idea cause error 
question  example generate warning counter set 
surprise loop set
strange warning   null effect   line 
question  example compute wrong valuefor 
question  follow program suppose print message  fatal error  abort  exit receive bad datum 
datum  exit 
example dis 
const prefer define reason 
first check syntax const statement
define directive check macro
const syntax  define syntax
finally  const follow normal scope rule  constant define define directive continue
case const statement prefer define 
here way define constant 
conditional compilation problem programmer write code work machine 
theory  code portable  actual practice machine little quirk account
example  book cover unix  msdo  window compiler 
difference  will see  portability problem 
preprocessor allow great flexibility change way code generate conditional compilation 
suppose want put debug code program work remove debug code production version 
include code section 
beginning program contain directive  define debug turn debug include 
program contain directive  undef debug turn debug omit 
strictly speak undef debug unnecessary 
define debug statement  debug undefined 
undef debug statement explicitly read code debug conditional compilation now turn
directive ifndef will cause code compile symbol define 
page reverse sense conditional 
example  ifdef debug  test version 
debug   debug  production   endif debug programmer wish temporarily remove section code 
common method comment code enclose
cause problem  show following example  comment section  handle end section stuff dumptable  end comment section generate syntax_error fifth line 
method ifdef construct remove code 
example  command  prog compile program include code ifdef debug pair define debug program 
turbo equivalent  tcc general form option
example  follow set  prog compiler automatically define system dependent symbol 
example  turbo define symbol turboc ms define msdo 
ansi standard compiler define symbol stdc 
compiler define symbol cplusplus 
unix compiler define name system  sun  vax  celerity   rarely document 
symbol unix define unix machine page note command line option specify initial symbol only 
define undef directive program change symbol 
example  directive  undef debug result debug undefined 
tell preprocessor take file insert current program 
file include program call headerfile 
unix  file locate
ms window  locate turbo directory installation dependent 
standard file define data_structure macro library routine 
example  standard class know now print datum standard output 
ostream class definition routine define 
want write set file 
local file useful store constant data_structure program span file 
especially useful sharing team programmer work local file specify double quotation mark  filename 
filename   valid filename 
simple file     relative path  call    absolute path  call page include file nest 
cause problem 
suppose define useful constant file 
file put
define constant twice fatal error  define data_structure union twice error avoid 
way problem check see include define symbol define 
look follow code  ifndef define constant define endif include  define symbol 
symbol define file include early  ifdef conditional hide define cause trouble 
note possible put code header_file 
poor programming practice 
convention  code file definition  declaration  macro  inline function file 
parameterized macro discuss only simple define macro 
macros take parameter 
follow macro compute square number  
rule put parenthesis parameter macro 
example illustrate problem occur rule follow  example 
expression  side effect  lead unexpected result illustrate example 
produce expect output 
program show example sqr expand case 
result time loop 
actual result expression system dependent 
question  follow program tell undefined variable  only variable_name
example rec 
extensive example operator see  put
parameterized macro inline function case inline function parameterized macro  avoid trap cause parameterized macro 
case parameterized macro inline function 
example  sqr macro work float int data_type 
write inline function perform function 
advanced feature book cover complete list preprocessor directive 
advanced feature advanced form directive page conditional compilation pragma directive insert compiler dependent command file 
see reference manual feature 
summary preprocessor useful part language 
completely look feel 
treat compiler 
problem macro definition show macro define  result error program 
follow simple rule  decrease chance problem 
put parenthese
enclose define constant macro parameter 
define macro statement  enclose code 
programming exercise exercise  standard contain boolean type bool define value true false 
problem compiler implement type
create boolean type define define value boolean  true  false 
exercise  write macro return true parameter divisible false
exercise  write macro return true argument decimal digit 
write second macro return true argument hex digit 
second macro reference first 
exercise  write preprocessor macro swap integer 
change definition program execute correctly 
answer  preprocessor simple minded program 
define macro  past identifier part macro 
case  definition max literally   
statement expand  result allow compute result throw away 
statement  program check see discard answer 
answer  previous problem  preprocessor syntax convention 
case programmer semicolon end statement  preprocessor include part definition
assignment statement expand     semicolon end hurt middle killer 
line tell assign compute throw away result null effect warning 
answer  output preprocessor look like  
problem statement follow line 
normally put line 
properly indent program 
obvious exit 
statement hide single preprocessor macro 
cure problem put curly brace multistatement macro 
avoid problem  inline function parameterized macro 
answer  only difference parameterized macro parameter parenthese follow macro name 
case  space follow definition reciprocal  parameterized macro 
simple text replacement macro replace reciprocal space reciprocal number correct problem 
page bit operation 
bit operator operator bitwise bitwise exclusive complement operator left right shift operator set  clearing  testing bit bitmappe graphic exercise answer question question 
bit small unit
normally represent value 
allow programmer hood  machine 
high level program_will need bit operation 
lowlevel code write device driver pixel level graphic programming require bit operation 
plan program only high level  safely skip 
bit form byte  represent data_type char 
byte contain follow bit  
write hexadecimal number 
table give hexadecimal hex binary conversion  table 
hex binary hex binary 
hexadecimal number represent binary number 
bit operator bit  bitwise  operator allow programmer work individual bit 
example  short integer hold bit machine 
bit operator treat independent bit 
contrast  add operator treat bit single bit number 
bit operator allow set  clear  test  perform operation bit 
bit operator list table 
table bit operator operator meaning 
operator work integer character data_type 
operator compare bit 
result operator define table 
table operator 
page bit variable char variable ande  operator work bit independently 
follow program segment illustrate operation  
output program 
logical operand true nonzero  result true 
bitwise  corresponding bit operand true  correspond bit result true 
bitwise work bit independently logical work operand whole 
operator  example illustrate  
answer  operator bitwise
result bitwise zero 
programmer first form  mistake  program still execute correctly 
note soon discover bug illustrate program tell office mate   now understand difference  understand
understand language fascinate utter sentence understand trouble amaze
bitwise operator test number odd 
base  last digit number zero last digit odd number
follow function bitwise pick last digit 
zero number  function true 
inclusive operator know just operator compare operand 
table list truth table operator 
truth table exclusive operator list table 
table exclusive 
table operator bit 
page byte left shift operator move datum leave specified number bit 
bit shift left side disappear 
bit come right zero 
right shift direction 
example  shifting leave multiply 
shifting leave multiply  
see pattern form here 
shifting leave place multiply 
shift multiply 
shifting fast multiplication 
compiler smart perform speedup automatically 
mean put shift gain expense clarity 
left shift operator multiplie  right shift divide 
clever trick modern code 
right shift detail right shift tricky 
variable shift right  need fill space left side
sign variable  page value sign bit 
unsigned variable  zero 
table illustrate typical right shift 
table right shift example sign character sign character unsigned character expression 
treat separate flag 
bit operation pack single bit value single byte 
example  suppose write low level communication program 
store character buffer later
character will store set status flag 
flag list table 
table communication status value name description 
power lose communication device store flag character variable 
mean character buffer  need byte status storage 
large buffer  add
assign status flag bit bit status character  cut storage requirement original need 
assign flag bit number list table 
bit assignment bit name 
page table bit assignment bit name 
bit number convention 
constant bit define table 
table bit value bit binary value 
table show left shift operator define bit 
left shift operator bit definition representation base equivalent 
bit page representation base equivalent 
bit hard tell bit represent  easy tell bit mean 
flag define true error set const int  frame error occur character const int  character wrong parity const int  carrier signal const int  power lose communication device const int  now define bit  manipulate
set bit  operator 
suppose want clear bit 
binary bit 
want create mask bit set bit want clear 
mask ande number clear bit 
computer now graphic 
pc  graphic device like ega vga card 
unix  windowe system 
bitmappe graphic  pixel screen represent single bit memory 
example  figure show bitmap screen enlarge see bit 
suppose small graphic device pixel monochrome display 
want set bit  
bitmap device show array bit figure 
data_type array bit 
close come array byte 
array bit now array byte  show figure 
set pixel bit number need set fourth bit byte 
set bit statement   page 
figure array byte constant leftmost bit 
generalize process produce macro turn bit pixel locate  
need compute value  coordinate byte number bit byte 
bit address  
byte group bit  mean byte address  
bit byte simple 
want generate mask consist single bit want set 
leftmost bit  
next bit   occur 
generate bit mask expression 
now byte location bit mask  set bit 
follow function set give bit bitmappe graphic array name graphic 
example draw diagonal line across graphic array print array terminal 
constant bit across  translate byte 
loop    draw diagonal line across graphic array 
bitmappe graphic device will simulate subroutine 
bit byte handle loop  
loop cause variable start leftmost 
iteration loop  move right 
run bit  loop exit 
loop counter cycle
finally  heart loop code  binary hex 
programming exercise exercise  write set inline function   operation define example 
write program test function 
exercise  write program draw bitmappe square 
page exercise  change example draw white line across black background 
exercise  write program count number bit set integer 
example  number decimal  binary  bit set 
exercise  write program take integer long int split exercise  write program will take bit number shift left end 
example  binary binary 
answer question answer  define number  bit character variable number 
solution problem flag short integer bit 
answer  problem character bit 
value represent bit 
first  sign  set 
right shift variable  sign fill  
variable work sign bit long 
notice set near sign 
solution problem declare unsigned variable 
page iii advanced type class page advanced type 
structure union typedef enum type bit field packed structure array structure programming exercise total grandeur total edifice 
choose inquisitor ofstructure wallace stevens rich set datum 
structure  union  enum  class  programmer extend language
structure suppose write inventory program warehouse 
warehouse fill bin contain bunch part 
part bin identical  worry mixed bin partial 
bin need know  
name part hold character_string long 
price integer cent 
previous array store group similar  example mixed bag  integer string 
array  will type call structure 
array  element type number 
structure  element  field  name type 
page general form structure definition  
name part bin put print cable definition actually tell
first struct bin look like 
statement define type declare variable 
statement declare variable 
structure bin define  declare additional variable  struct bin  place put terminal cable structure name part definition omit 
name part bin put print cable variable still define  type create 
type variable anonymous structure 
variable name part omit 
define structure type variable 
extreme case  variable name structure name part omit 
create section correct totally useless code 
once structure type define define variable  struct bin  define box hold printer cable allow struct omit  follow declaration  bin  define box hold printer cable page define variable contain name field  name  quantity 
access syntax  variable 
structure initialize declaration time put list element curly brace 
union structure define type field 
field take separate 
field share space 
think structure large box divide compartment  name 
union box  divide label place single compartment inside 
structure  field interact 
change field change
union  field occupy space  only active time 
word  put  assign wipe old value 
page follow show union define variable hold integer
suppose want store shape 
shape standard shape circle  rectangle  triangle 
need draw circle need draw rectangle  need define structure shape  
first field code tell type shape
second union hold shape 
graphically represent shape large box 
inside box single integer kind union 
union box label
question real  label 
tell look union  define tell label read 
layout shape structure illustrate figure 
figure  shape  layout 
way extend basic type 
general form typedef statement typedef variable declaration name variable_name 
example  typedef int width  define width object define width  integer 
value reference name tag 
compiler assign tag integer_value internally  day week 
directive const create value day week follow  typedef int  const const const const const const const int_int int int_int int int define day week 
structure  enum name variable name omit 
tag valid identifier  tag uppercase 
additional advantage enum will restrict value list enum declaration 
follow will result compiler error   disadvantage enum enum variable index array 
accomplish cast typecast operation 
expression int tell   know integer  treat like  fix problem  statement   today  int    page cast useful expression sure variable correct 
general  change expression expression  useful work integer float_point number 
support old style casting 
syntax style casting  value example  float turn   float_point number style cast frown easily ambiguous 
example  expression  + float apply + 
expression clear need add parenthese  + see  form complex cast 
simple casting 
pack structure allow declare structure way take minimum storage 
example  follow structure take byte bit machine 
unpacked structure field list see only value   only bit need represent
plan item bit 
redefine structure bit field  take only byte  follow field colon number bit field 
pack structure pack structure care 
machine code extract datum bit field large slow 
storage problem  packed structure
 bit operation  need store character datum status flag character 
case  byte flag eat storage byte incoming character 
page bitwise operation pack flag single byte 
alternatively  pack structure 
character device true error set framing error occur character wrong parity carrier signal power channel packed structure flag clear error prone bitwise operator 
bitwise operator allow additional flexibility 
clear easy
array structure structure array combine 
suppose want record time runner 
element consist single time structure 
follow  runner just past timing point
suppose want write program handle mailing list 
mailing label line high character wide 
need structure store name address 
mailing list will sort name printout  sort zip code order actual mailing 
mailing list structure look like  
exercise  design structure store time date 
write function find difference time minute 
exercise  design airline reservation data_structure contain follow data  flight number departure time arrival time write program list plane leave airport specify user 
page simple class 
stack improve stack class introduction constructor destructor automatically generate member_function shortcut style programming exercise think heaven class lie late snore cyril connolly simple variable structure hold datum function process datum 
class allow combine datum function
will see class improve code implement simple stack way  first  structure function  class 
stack stack algorithm store datum 
datum put stack push operation 
pop operation remove datum 
datum store last first lifo order 
think stack stack paper 
perform push operation  put top stack 
push time want 
time data top stack 
datum stack pop operation  take top stack give caller 
suppose start empty stack put element    push operation 
first pop return top element  
element remain stack 
pop will give 
page push value   stack 
pop twice will give number  order 
illustrate table 
stack operation operation stack operation 
structure will need place put datum call data count number item currently push stack call count 
note  version program check stack overflow error condition 
later   class  will see simple stack safe  complex
popping simply remove top item decrease number item stack 
notice need zero datum field stack  element datum overwrite push operation 
now finish 
actually stack declare struct statement 
next sure initialize push pop heart content least limit stack 
example contain complete implementation structure version stack short test routine 
improve stack structure version work drawback 
first datum function define separately  force pass struct variable procedure 
problem datum protection 
field datum accessible
design state only function access field  prevent rogue code modify
struct mixed collection datum 
class only hold datum like structure  add set function manipulate datum access protection 
turn struct class class private  
declare field  datum 
class item call field  call member variable 
keyword private access privilege associate member variable 
level access privilege  public  private  protect 
class  datum function  mark private class 
access only function class 
opposite private public  access 
finally  protect similar private allow access derived finish define datum class 
now need define function manipulate datum 
section start keyword public 
tell want member_function
case  just define function prototype 
code function_will define later 
next come body init function 
function belong class  prefix name procedure  
procedure zero
structure version stack init function pass parameter 
function part class  unnecessary 
mean access member variable directly 
class class like structure 
declare class variable word class struct 
call init member_function class need  
example contain class version
introduction constructor destructor stack class minor inconvenience 
programmer call init member_function stack 
programmer terribly forgetful soon later forget initialize stack 
nice automatic way initialize stack 
actually will automatically call number member_function 
first call class create 
call constructor function name class 
example  constructor stack class name stack know stack   stack class body 
variable create declare 
constructor return value void need 
compiler_will complain present 
destructor constructor automatically call variable create 
destructor automatically call variable destroy 
occur variable scope pointer variable delete 
stack class destructor name 
page suppose rule stack empty programmer finish
word  push
happen  error warn user 
create destructor stack check empty stack issue warning stack empty 
destructor look like  
constructor class take parameter 
suppose want define class hold person name phone number 
datum_member class look like  class person 
parameterized destructor parameterized destructor 
destructor take parameter supply return_value 
destroy variable 
copy constructor copy_constructor special constructor exact copy class 
function expect turn current class exact copy parameter 
face copy_constructor important 
remember  back  variable scope function  discuss way pass parameter function 
call value 
copy parameter pass function 
class pass call value parameter  copy class copy_constructor 
follow code  add commentary show function will automatically call back 
see  work scene 
start declare 
call default constructor create 
variable pass function 
pass value  copy copy_constructor 
function add item 
note  copy  affect 
page end function contain item      contain item   
finally function_call  print top element   
automatically generate member_function class constructor destructor 
programmer write member_function  will automatically generate
member_function copy_constructor call automatically 
automatically generate function default constructor 
automatically generate constructor define 
generate code fill datum_member class random value 
automatically call variable class declare parameter  var  copy_constructor 
automatically generate programmer explicitly define copy_constructor 
function generate copy datum_member old class
automatically call pass call value parameter function 
member_function call create duplicate variable  
automatically generate programmer define 
page automatically call variable destroy 
occur variable scope 
function generate copy datum_member old class
only function prototype class create 
possible define body function inside class
class public  
page style programming style class look pretty like style structure function 
member variable follow comment explain member_function comment like function 
comment prototype member_function differently normal function prototype 
normal function put full function comment block front prototype 
member_function class  comment obscure structure class 
case comment cause trouble 
put comment front member_function prototype full comment front function
inline member_function  entire body function declare inside class 
put full comment  obscure structure class 
put  omit useful
proper commenting balance act 
need put useful leave
solution keep size inline member_function small 
reason first inline function small secondly  large function_declare inside class class excessively complex 
rule thumb function require line code  put prototype class put body function
structure small member_function obvious require full blow comment block 
function obvious require extensive comment  put prototype comment body function later program 
require access protection declaration public  private  protect first member variable 
following perfectly legal  
put explicit declaration  worry question like
suppose class specify copy_constructor  page comment class note  style class leave desire class queue 
will copy_constructor automatically generate work  programmer design class know copy_constructor call 
important question answer class write 
class default constructor  copy_constructor  assignment  destructor 
want generate automatically  put comment class default
automatically generate destructor 
now obvious member_function programmer want let generate automatically  obvious important programming project 
copy_constructor automatically generate simple limited 
work case  will see later start construct complex class 
happen automatic copy_constructor will work desire want trouble create
page decide class_will copy error 
solution create dummy copy_constructor print error_message abort program  class 
work  sort
problem error detect runtime compile time 
want catch error soon possible  solution hack 
prevent compiler automatically call copy_constructor 
trick declare private 
way world   yes  copy 
now compiler attempt copy_constructor will error_message like programming exercise exercise  write parity class 
class allow program put number item return true number item put false odd number
page exercise  write checkbook  class 
put list number class total
queue similar stack datum remove first first fifo order 
exercise  define class will hold set integer 
element set set member_function clear clear member_function 
error set element set clear element clear 
function test tell element set 
stack flash page card time 
word right  card discard 
wrong  card back stack 
write class implement system 
friend constant function constant member static member variable static member_function meaning static programming exercise method define number class class class similar give class 
suppose want write function see stack equal 
first glance simple 
function look like example 
example test see stack equal  stack return stack equal stack equal int  index item array 
like program  solution simple  clear  wrong 
problem member variable datum private 
mean access
solution variable public 
give function access datum 
problem give access  want
fortunately give way  let only stack equal access private datum class  accomplish friend directive 
class declare friend 
function access private datum class  class allow
note member_function class stack 
normal  simple function 
only difference function friend access private datum class call friend 
page friend_class friend restrict just function 
class friend
example  int  current datum array const int  maximum number item array item treat differently 
example  change value change 
now let class implement set number 
definition class warning  member_function class incomplete see definition class_class 
function test change
obviously want allow set clear constant 
okay test member_function 
know constant
trick put keyword const end function header 
tell member_function constant variable 
put const member_function test  will allow constant 
member_function set clear keyword  constant 
constant member_class contain constant member 
problem constant behave little differently inside class
constant variable declaration initialize 
example  const int  number datum item input stream page 
syntax trick fool define constant  class foo public  enum  number datum item list define constant value 
actually declare element enum type give explicit value 
treat enum integer  work define integer constant 
page drawback method tricky  only work integer  exploit hole syntax away language define 
code easily cause difficulty programmer try maintain code who familiar trick 
static member variable suppose want keep run count number stack give time 
way create global_variable incremente stack constructor decremente destructor 
note single global_variable 
matter stack create  only
system work  drawback 
definition class stack contain stack  variable 
nice put class  define member variable  will copy time declare stack class variable 
special modifier member variable  static 
tell only variable define class 
statement  int stack    stack define difference static non static member variable define stack  create member variable  only
member variable belong individual stack 
static variable belong class 
stack  stack  
allow access syntax  statement   number active stack stack   
static member_function member variable define private 
mean class access
want know stack define  need function value
first cut class stack 
access nonstatic member variable function class 
access static member datum  static member_function  function datum class 
meaning static keyword static meaning 
table complete list way static
table meaning static usage mean variable body function scope variable limit file declare 
variable declaration inside function variable permanent 
initialize once only copy create function call recursively 
function declaration scope function limit file declare 
page usage meaning member variable copy variable create class variable 
member function_function only access static member class 
programming exercise exercise  class share file 
area program need know file busy 
create function return file class 
exercise  ask write booking program veterinarian  dr 
able smith  phd pig  horse  dog 
define class type animal 
class keep track number animal define class private static variable 
define function return total number animal type combine 
exercise  write class instance class access stack stack instance  stack period 
instance class lock stack exclusive unlock later 
define member_function perform lock unlock function 
add attraction  unlock function check see current instance class instance lock stack first place 
exercise  need supply routine handle line file 
basic definition line number class class 
page class time 
class maintain internal list know class
call  function_will scan list class find near give line number start scan give line number 
example  suppose active variable  variable position 
line wish move line 
function search list line nearest case jump line 
read file character character see end line character position line 
page simple pointer 
constant pointer_pointer print pointer array split string pointer structure command line argument programming exercise answer question choice point view initial act culture ortega gasset pointer figure 
pointer come size  big  small 
pointer come only size book box represent
box large small  box 
pointer represent arrow 
novice programmer pointer content confuse 
limit problem  pointer variable book end extension ptr 
want follow convention program 
common notation extremely useful 
strange architecture  turbo force near pointer bit pointer bit see manual detail page figure show variable_name
name variable write box represent
variable contain value 
actual address variable 
automatically assign address variable compile time 
actual address differ machine machine 
time worry variable address  compiler take care detail 
pointer call address variable contain address variable 
case  pointer contain address 
address point
example  live house 
street address
 address small write piece paper 
put house piece paper require work large crane 
street address approximately size  line 
house come size 
pennsylvania  refer big house skid row  refer room shack  address size 
address variable point
true street address
table list important service small town 
table small town directory 
ed gas station case large  multipurpose building service 
address variable service  only address will see pointer quick simple way access array 
later will discover pointer create variable complex data_structure link list tree 
rest book  will able understand data_structure create
page pointer declare put asterisk front variable_name declaration 
pointer operators operator meaning 
ampersand operator change pointer 
change pointer operator easily cause confusion 
let look simple operator detail 
declaration int contain asterisk  pointer 
asterisk declaration pointer 
put extension ptr name 
variable pointer 
de reference operator tell look datum point pointer
note  point integer  integer 
point specific variable 
follow example show misuse pointer operator 
ask object point variable 
pointer  invalid operation 
page figure pointer operator legal  strange 
address operator pointer object case 
result pointer pointer 
declare object   pointer  
pointer point          
line operator change simple variable pointer assign
pointer  direct assignment line 
execute program fragment  situation illustrate figure 
pointer
finally  special pointer call null point
figure null 
declare constant pointer little tricky 
example  declaration  
tell datum point constant 
datum change  pointer
need sure know difference pointer
yes  just 
const char array 
datum point change 
constant pointer 
integer case  value represent memory address 
address vary program program 
treat character pointer little differently pointer 
character treat string 
example  char  hello   simple set character char  pointer character  string     
string hello pointer array allow arithmetic 
addition subtraction allow pointer 
note parenthesis 
parenthesis add de reference 
page figure pointer array first glance like complex way represent simple array index 
start simple arithmetic 
later will complex pointer handle difficult function efficiently 
pointer merely memory address 
array element assign consecutive address 
example  place address 
place address
example print element address simple character array 
run program print  character take byte  element character array will assign consecutive address 
short int take byte  array short int address increase
mean will work character 
automatically scale arithmetic work correctly 
case will point element number 
shorthand deal array 
blur distinction pointer array treat case 
here variable automatically conversion 
example count number element non zero zero find 
limit check least
expression end program   compute
pass procedure  will automatically change
put will issue warning 
example illustrate pass 
splitting string suppose give string form  last  want split string  contain first name contain last name 
example read single_line  strip newline_character
function strchr call find location slash 
split string replace slash end string nul  
now point just last name point null string 
move next character point beginning first name 
graphically illustrate figure 
example contain full program 
page figure 
split string example split split split entry form last first part 
question  example suppose print name  tmpl name  result happen 
line street address character abbreviation numeric zip code mailing list frequently sort order zip code order 
sort entry entry byte long 
datum move
sorting fast 
imagine warehouse full big heavy box need locate box quickly 
way put box alphabetical order 
require move  assign location number  write number index card  sort card
command line argument procedure actually take argument 
call argc argv 
parameter argc number argument command include program 
array argv contain actual argument 
example  program arg run command  args test argc note unix shell expand wildcard character like   command line program 
see sh csh manual detail 
turbo will expand wildcard character file link program 
see turbo manual detail 
page unix command standard command line format 
standard  carry environment 
standard unix command form  command option filel filel 
option precede hyphen single letter 
example  option turn verbose mode 
option take parameter  parameter follow letter 
example  switch set maximum number symbol set output file outfile 
give assignment write program will format print file 
part documentation program look like  length filel 
line  set verbose option  turn progress message 
option length set page size length line set output file 
list file print follow option fiel   
file specify  print file 
loop cycle option 
actual loop argc   argument  program 
expression argc check additional argument 
first will number 
first character first argument 
character dash option 
end loop code  
consume argument 
number argument decremente option  pointer first option incremente  shift list left place 
switch_statement decode option 
character argument hyphen 
character option character  expression  switch 
page option argument  just cause flag set 
option take integer argument 
library function atoi convert string integer 
previous example know start string contain number 
string pass atoi 
option take filename 
copy whole string  set character pointer point part string 
time know    start file set point string statement   finally option parse fall processing loop 
merely execute function file argument 
example contain complete option decode program 
example print print cc print format file printing
output file number line page dummy routine handle file parameter file print
way parse argument list 
loop switch_statement simple easy understand 
method limitation 
argument follow option 
example  will work  will
improved parser program friendly  work simple program 
exercise  write function take single string argument return pointer first nonwhite character string 
answer question answer  problem variable temporary variable 
compiler allocate space function enter reclaim space function exit 
function assign correct value return pointer
function disappear pointer illegal value 
solution declare static 
permanent variable will disappear end function 
page question  fix function  try filename 
example print name  tmpl name 
answer  first call return pointer
only second call change return pointer
pointer  point 
library function_return pointer static string 
second call routine will overwrite first value 
solution problem copy value  
iv advanced programming concept page file input output 
file conversion routine binary ascii file end line puzzle binary buffer problem unbuffere designing file format style routine style conversion routine heir age  foremost file time tennyson file collection datum 
treat file series byte 
file reside disk  device terminal  printer  magnetic tape file 
annotate reference manual ellis stroustrup current widely standard 
book contain specification system 
de facto standard evolve base library supply cfront compiler 
problem detail differ compiler compiler 
example  turbo flush end line sunpro unix compiler
current version ansi draft standard september contain detailed description call 
currently compiler support standard still undergo revision 
discuss package 
first stream class 
commonly system now 
next  examine raw routine give direct access low level
finally look system 
outdated  call still old code 
case  style routine superior 
page file file base class  istream class input  ostream class output  iostream class input output 
refer file stream stream byte 
class variable automatically create start program 
list table 
table predefine class variable_variable
console log variable define standard include file 
normally cin assign keyboard cerr  clog assign screen 
operating_system allow change assignment redirection see operating_system manual detail 
example  command run program assign cin file 
disk file redirection file version stream class 
ifstream  ofstream  fstream define include file 
note ifstream class actually derive istream class 
similarly  ofstream derive ostream fstream derive iostream 
will learn derived_class  advanced class 
suppose want read series number file 
start declare input file variable  ifstream  file read datum
close file free resource program 
allow open call combine constructor 
example  writing  ifstream  file read datum
file miss 
tell problem 
member_function bad return  true  problem  false 
test problem need 
version program reading number example 
function define parameter function buffer buffer store datum read 
function read len byte datum buffer 
character signal end line 
function_return reference input file 
function read include end line character 
end line character store buffer 
problem occur size specify big 
convenient way sure size parameter just right sizeof operator 
sizeof operator return size byte argument 
byte long long array 
note sizeof length 
sizeof operator return number byte string 
output file function output file similar input file 
example  declaration  ofstream   create file name let write file file variable 
actually  constructor take additional parameter 
full definition output file constructor  char name  int  int  parameter function name name file 
set flag ore determine open 
flag io   require output file 
flag list table 
operator discuss detail file protection 
operating system dependent value determine protection file 
unix protection default read write owner  group read  read 
ms window default normal file 
open flag flag meaning 
open file output supply ofstream open 
page flag meaning io   binary binary file present  file open ascii file see section  binary page definition binary file 
input file overwrite exist file 
file exist  cause open
conversion routine just write character string 
section  sophisticated operation  conversion 
write number printer terminal convert number character 
printer understand only character  number 
example  number convert character        print 
operator convert datum character put file 
function extremely flexible 
convert simple integer variable size string hex  octal  decimal number left right justification 
default conversion output 
serve pretty want control output exactly  need learn conversion flag 
member_function setf unsetf set clear flag control conversion process 
general form function  
table conversion flag flag meaning 
output leave justify 
page flag meaning 
convert number character member_function  int size  determine minimum character
example  normally convert character_string   note lack space 
width set result  represent single space 
page member_function  int digit  
character padding small specify width 
note flag parameter reset output call
flag permanent temporary change compiler compiler 
general  assume remain set will okay 
think manipulator magic bullet input output file change state file 
manipulator cause output  just change state 
example  manipulator change output conversion hexadecimal 
manipulator define file 
table contain full list manipulator 
manipulator manipulator 
page manipulator description 
example show manipulator
set printable character control code 
write program  file ascii 
terminal  keyboard  printer deal character datum 
want write like screen  convert character    write 
similarly  read keyboard  datum convert character integer 
ascii character   value    value 
want convert single digit ascii subtract value  
computer work binary datum 
read number ascii file  program process character datum conversion routine like conversion routine just define 
binary file require conversion 
generally take space ascii file 
drawback directly print terminal printer 
move machine machine little trouble 
binary file certainly nonportable 
expert programmer  impossible portable binary file 
case  ascii
small medium amount datum  conversion time seriously affect performance program 
page only large amount datum will space performance problem force binary format 
end line puzzle back dark age bc computer  exist magical device call teletype model 
amazing machine contain shift register motor rotor keyboard rom consist solely lever spring 
teletype contain keyboard  printer  paper tape reader punch 
transmit message telephone modem blazing rate character second 
teletype problem 
take second move printhead right side second character time 
second character come printhead middle return  character lose 
teletype people solve problem end character  carriage return position printhead margin  feed move paper way feed  print  printhead race back margin 
early computer come designer realize character end waste storage time storage expensive 
pick feed end  choose carriage return 
die hard stay character sequence 
unix feed end 
character code lf feed 
ms window character carriage return feed 
compiler designer problem deal old program think just feed 
solution add code library strip carriage return character ascii input file change feed carriage return feed output 
ms window  file open ascii binary important note 
flag io   binary binary file  open ascii file read    open binary file read    question  member_function put write single byte binary file 
follouing program write number afile call 
page work just fine unix  create byte long file  msdo window  thefile contain byte 
write half ascii half binaryfile want
binary binary accomplish member_function  read write 
syntax read  size  pointer place put datum 
page size number byte read 
member_function gcount return number byte last read 
number byte request 
example  read encounter end file error  struct int 
example read structure rectangle 
operator rectangle pointer 
cast  char  need read want character array 
sizeof operator determine byte read check read successful 
member_function write call sequence similar read 
datum keep buffer big write  flush 
follow program design print progress message section finish 
write message step complete  put buffer 
only program finish buffer flush  message come spill once 
page manipulator flush force flushing buffer 
properly write 
unbuffere buffer datum buffer file 
unbuffered datum file 
drop number paperclip floor  pick buffer unbuffered mode 
buffered mode  right hand pick paper clip transfer left hand 
process repeat left hand full  dump handful paperclip box desk 
unbuffered mode  pick paperclip dump box 
left hand buffer 
case buffer unbuffered 
unbuffered read write require system call 
call operating_system expensive 
buffer minimize call 
unbuffere only read write large amount binary datum direct control device file require 
back paperclip example pick small item like paperclip left hand buffer 
pick cannon ball large  buffer
open system call open unbuffered file 
macro definition call differ system system 
unix ms window  conditional compilation ifdef endif bring correct file 
page endif msdo int 
integer identify file read  write close call 
error occur 
open flag table 
table open flag flag meaning 
normally file 
example  open exist file text mode reading  following     
notice combine flag operator 
quick easy way merge multiple flag 
program initially run  file open 
page table 
standard unbuffered file file number description 
end file negative number error 
file descriptor open file 
size request 
actual number byte read format write call write  buffer  size  actual number byte write 
negative number error 
file descriptor open file 
system will try write byte  device full problem  small number byte write 
finally  close call close file  success  negative error 
file descriptor open file 
page example copy file 
unbuffere large buffer size 
sense buffer read buffer ifstream transfer buffer 
example copy copy file usage copy file copy file copy
buffer input file descriptor output file descriptor number byte last read 
note program 
first buffer size define constant  easily modify 
remember  programmer expression 
form constant obviously 
user improperly program  error_message result 
help user right  message tell program 
read full buffer last read 
determine number byte write 
design file format suppose design program produce graph 
height  width  limit  scale define graph configuration file 
assign write user friendly program ask operator question write configuration file learn text editor 
design configuration file 
way follow  low limit upper limit low limit upper limit scale scale page typical plotter configuration file look like  file contain datum  look trouble identify example  value low limit 
solution comment file configuration program write only datum 
suppose user run plot program type wrong filename  program lunch menu today plot configuration file 
program upset try construct plot result wind egg face 
way identify file plot configuration file 
method put word  plot configuration file  first line file 
try give program wrong file  program_will print error_message 
take care wrong file problem  happen ask enhance program add optional logarithmic plotting 
simply add line configuration file  old file 
reasonable ask throw away 
user point view accept old format file 
easy put version number file 
typical file now look like  plot configuration file log logarithmic normal plot low limit page upper limit low limit upper limit scale scale binary file  common practice put identification number first byte file 
call magic number 
magic number type file 
method choose magic number start first letter program name  list convert hex  
add number  
generate magic number unique 
high bit set byte byte non ascii avoid confusion ascii binary file 
read write binary file contain type structure  easy lose 
example  read name structure expect size structure 
detect later program 
locate problem early  programmer put magic number beginning structure 
program read name structure magic number correct  know wrong 
magic number structure need high bit set byte 
magic number just ascii character easy pick beginning structure file dump 
style routine allow library program 
time occur take program translate want bother translate call 
case  old library easy library 
example  string conversion routine sscanf sprintf easy counterpart 
declaration structure function function store standard file 
declaration file variable file  comment
format fopen  mode  file variable 
mode writing read 
function fclose close file 
format fclose fclose  variable will zero fclose successful non zero error 
preopened file 
list table 
standard file file description 
equivalent cerr 
file equivalent clog 
function fgetc read single character file 
datum file function_return constant eof eof define 
note fgetc return integer  character 
eof flag noncharacter value 
example count number character file 
format fgets call  fgets string  size  file  equal string read successful  null eof error detect 
end string null 
example  char 
format fput function  fput string  file  parameter fput similar fget 
style conversion routine operator output 
printf family function 
printf call consist part  format print datum list datum print 
general form printf call  printf format     
example  see format string  take next parameter parameter list integer print
figure show element printf statement work generate final result  figure 
type parameter conversion 
example  want print float_point number  need conversion 
table list conversion 
style conversion conversion variable_type 
see reference manual detail 
printf function check correct number parameter line 
add extra parameter ignore 
add will value miss parameter 
type check parameter  float_point number  will strange result 
warning  return_value sprintf differ system system 
ansi standard define character store string  implementation unix define pointer string 
read accomplish scanf family call 
scanf function similar sister function  fscanf sscanf 
format fscanf   format  parameter 
case random variable instruction will modify 
common unix machine  ms window  lack memory protection  easily detect problem 
ms window  omitting cause system crash 
problem scanf  next impossible end ofline handle right 
simple way limitation scanf
fget follow string version scanf  function sscanf  
fget sscanf
style binary binary accomplish routine  fread fwrite 
syntax fread fread dataptr   size  file  size datum read 
size  end file error occur 
example  struct int 
cast  char  turn rectangle proper parameter_type  sizeof operator determine byte fread check read successful 
full description function see reference manual 
question  matter filename give follow program  program find
programming exercise exercise  write program read file count line
exercise  write program copy file  expand tab multiple space 
exercise  write program read file contain list number write file  number divisible contain number 
exercise  write program read ascii file contain list number write binary file contain list 
write program way check work 
exercise  write program copy file remove character high bit exercise  design file format store person name  address 
write program read file produce set mail label 
answer question answer  problem write ascii file  want binary file 
unix  ascii binary  program run fine 
msdo window  end issue cause problem 
write character oxoa file  carriage return oxod add file 
write binary datum output editing need open file binary option     
problem parameter contain answer omit 
happen printf answer random location print garbage 
properly write  printf statement answer   answer  page answer  printf call check type parameter 
tell printf call print integer supply float_point parameter result 
mismatch cause unexpected result print wrong answer 
print float_point need conversion 
properly write  printf statement answer   result  answer  problem fget entire include character 
file name sam  program read try look file file  program report error 
fix strip character 
error_message case poorly design 
true  open file  programmer supply user
try open file input output 
file try open 
know message error  warning  just part normal operation 
error_message   error  unable open    notice message help detect programming error 
type sam  error error  unable open sam input clearly show try open file
page debugging optimization 
debug divide conquer debug only code debug commandline switch interactive debugger debug binary search runtime error confessional method debug optimize case study exercise answer question bloody instruction learn  return plague inventor 
here find program work think work 
eradicate bug  need way reproduce bug program let locate correct problem 
case  find bug easy 
discover bug test department produce clear easy test display bug  output come bad 
case  especially interactive program  reproduce bug percent problem 
especially true deal bug report user field 
typical call user user  database program give break 
programmer  wrong 
user  sort  wrong order 
page programmer  command
user  sort command 
programmer  tell exactly type  keystroke keystroke 
user  remember exactly 
programmer  come show bug 
user  course 
user type away program stubbornly work  matter user
programmer give back office only find message user   example short database lookup program 
ask user input check input hard code list name 
simple  program structure typical large complex interactive program 
typical execution program enter  sam sam enter  john page john enter  release program  user start complain mysterious problem away programmer
nice little gremlin sit user shoulder copy type 
unfortunately  gremlin unavailable  change program produce file contain keystroke user type 
program statement   sizeof  read user datum 
let write  getline 
only will line 
example xget program_will open file command line 
change program handle   specify file 
now complete record user type 
look input  see type  sam john second name begin space john  list   john 
case find error inspect input  complex program complex input 
type debugging  add feature add playback file
playback file enable  input will take keyboard  will take file 
example xget 
program now look like example 
playback data open flag true playback progress char  int size  istream  char char char  name look  name  name playback int name  lookup name 
now user call error report  tell  try feature enable  copy  user run program input 
case half battle 
once reproduce problem proceed next step  find fix
once programmer ask user programmer copy floppy 
express package arrive next day contain photocopy floppy 
user completely computer illiterate  know sided floppy  photocopy side 
serial debugging start debug  old   work  copy program safe place 
will find bark page wrong tree need start
last working copy invaluable 
once reproduce problem  determine cause happen 
divide conquer divide conquer method briefly discuss  programming process 
consist put statement know data sure  data bad  point
way start zero section code contain error 
statement reduce scope error bug finally locate 
debug only code divide conquer method temporary statement 
put need take
pre processor conditional compilation directive put take debug code 
example  ifdef debug       endif debug program compile debug undefined normal define debug need 
debug command line switch compile time switch create special version program  permanently debug code add special program switch will turn debug output 
example        debug variable set present command line 
advantage only single version program exist 
problem debug only  code code frequently easily stale date 
frequently programmer try find bug only discover debug only code date need fix 
advantage debug command line switch user turn switch field  output  analysis 
page runtime switch case conditional compilation  reason want customer able debug
program concept debug level 
level output only minimal debug level level  output
debug technique see ghostscript program aladdin enterprise 
program implement idea debug letter 
command set debug flag type diagnostic output want 
example  code fill algorithm code path tracer 
want trace section  specify 
implement follow code  only put zero  will fill rest array zero
free software foundation 
mass ave  cambridge 
ma  phone 
form debugging allow user great deal easily 
output enable printout nice way time datum want easily lose 
shell command line interpreter allow redirect normally screen file file  
example  buggy will run program buggy high level set output file 
text editor system file browser 
search capability look want find 
interactive debugger compiler manufacturer interactive debugger 
give ability program point  examine change variable  single step  program 
debugger detailed discussion possible 
discuss debugger gdb 
program unix machine free software foundation 
turbo build debugger 
exact syntax debugger principle show here will work debugger 
basic gdb command run start execution program 
run program reach breakpoint  execution control return debugger 
commonly  command break execution beginning program 
page cont continue execution breakpoint 
current statement call function  function single step 
command skip function_call 
program count number series number 
problem keep wrong answer number
program show example 
page return  number command line
start invoke debugger gdb name program debug count 
debugger initialize  output prompt gdb  wait command 
absolutely warranty gdb  type  show warranty  detail 
gdb sun  copyright free software foundation  
know variable change  will start beginning work way error 
step will display variable just sure okay 
need program beginning single step
command break tell gdb set breakpoint first instruction function
command run tell gdb start program  will run hit first breakpoint 
number gdb identify breakpoint 
now need start program  gdb run start program  sdo count count breakpoint   message breakpoint  
page reach point initialize 
command next will execute single statement  treat function_call statement 
try next line  check time  gdb next  gdb print gdb next enter number   gdb print change value 
last statement execute  function 
add breakpoint beginning  rid start program run command  gdb break breakpoint  file  line 
start beginning 
narrow problem statement 
inspection see  illegal member array 
only element long  
cin put someplace  decide put random memory location  case 
debug binary search binary search algorithm fairly simple 
want see give number order list 
check number middle list 
number  lucky
number big  find top half list 
try middle top half 
small  try bottom half 
keep try divide list half find number list single number 
example binary search see number find file 
input file middle search range upper low bind number search
datum file run program unix  result run program ms system lock hit reset switch 
program run window application error lucky 
mean wrong program program try read memory
debugger gdb read file help determine happen 
page absolutely warranty gdb  type  show warranty  detail 
gdb sun  copyright free software foundation  
debugger tell kill segmentation fault generate procedure 
procedure number 
routine belong library 
now command find function_call function know stack trace gdb
current function print first  function call reach outer function
see number call doscan  call sscanf 
recognize sscanf library routine 
function subroutine call sscanf 
last function control call sscanf  line
now list command take look source line  gdb list break        break   gdb quit program run 
quit anyway kill 
way find problem single step program error occur 
first list section program find convenient place put breakpoint  start execution single step process 
page script start mon oct gdb gdb free software welcome distribute copy condition  type  show copying  see condition 
absolutely warranty gdb  type  show warranty  detail 
gdb sun  copyright free software foundation  
quit anyway kill 
inspection notice forget put ampersand front variable sscanf 
change line 
page note wonder function sscanf line  data  perform function 
answer simple 
sscanf cause problem 
pointer error debug 
statement reliable  reliable code place debug 
first number list  try
time output look like  enter number search quit  find index find index find enter number search quit  program find number  let know index  ask number 
find message find message 
know run smoothly time first find message 
back debugger  list command locate find message put breakpoint
absolutely warranty gdb  type  show warranty  detail 
gdb sun  copyright free software foundation  
page breakpoint   find    gdb step find gdb step gdb step  gdb step +  gdb step gdb step  find    gdb step find gdb quit program run 
quit anyway kill 
continue search 
number find  search result strange behavior 
miss break
need change   find     
fix  try program search enter number search quit  find enter number search quit  find enter number search quit  find enter number search quit  runaway program 
time set breakpoint just start run program 
second pass believe stick infinite loop  program control 
normally page abort program return shell prompt 
run debugger  return control gdb 
absolutely warranty gdb  type  show warranty  detail 
gdb sun  copyright free software foundation  
quit anyway kill 
algorithm error 
obviously element match 
exit find message 
point include element range 
code adjust interval   
example cc search set number usage  will ask number look page file  number line
input file middle range upper low bind number
interactive debugger work program 
need little help 
try debug find 
want put breakpoint calculation
debugger insert breakpoint program  program_will execute normally hit breakpoint  control will_return debugger 
allow user examine change variable perform debug command 
cont command type  program_will continue execution happen 
problem point want  want
add follow temporary code    temp code  line line useful serve line debugger
put breakpoint line command break 
program_will process first point  execute line  hit breakpoint 
advanced gdb command break runtime error runtime error easy fix 
type runtime error segmentation violation  stack overflow  divide 
segmentation violation error program try de reference pointer contain bad value 
stack overflow program try temporary variable 
mean program big big temporary array  time due infinite recursion problem 
unix system automatically check error 
turbo will check stack overflow only compile time option
divide divide obvious error 
unix mask problem report integer divide zero error_message float exception core dump 
case  program execution will
unix  image running program  call core file  write
file analyze debugger determine program die 
first run example result core dump 
buffer buffer file flush 
lead unexpected surprise 
start lead think divide start 
happen message   
statement execute  put message buffer  program die 
buffer chance empty 
put explicit flush buffer command inside code  truer picture happen  show example 
page confessional method debug confessional method debugging programmer explain program interested party  uninterested party  wall matter whom explain long talk
typical confessional session like  hey  bill  take look
program bug
output compute formula check payment value rate date correct  wrong leap year optimization now word optimization 
program need optimize 
run fast
who care interactive program take second start 
fair  slow program speed
simple optimization step show replace poorly design core algorithm efficient
write program  simple way program run fast fast computer 
time cheap buy powerful machine optimize program  introduce code 
expect miracle optimization 
program only speed percent percent 
example initialize matrix dimensional array 
function optimize 
first notice local varible 
qualifi register variable  tell compiler frequently place fast register relavely slow memory 
number register vary computer computer 
slow machine like pc  unix system supercomputer 
possible declare moreregister variable register 
will put extra variable program now look like example 
example matrix 
outer loop execute time 
mean overhead associate start inner loop execute time 
reverse order loop  will deal inner loop only time 
general  loop order innermost loop complex outermost loop simple 
example contain function loop reorder 
program perform follow step  
address matrix 
add part form address 
code look like  matrix + +  typically will write matrix access way handle detail 
aware detail help generate efficient code 
compiler_will convert multiplie power    shift  take expensive operation multiply change inexpensive operation shift 
example   compile   power
increase waste memory fast program 
example show take advantage power
initialize consecutive memory location  initialize matrix start first location store next size element 
method  cut number loop
indexing matrix change standard index matrix  require shift add  pointer de referent matrixptr increment 
example turn array pointer 
loop counter
example successfully eliminate loop counter combine array pointer 
function now optimize 
only way manually code assembly language 
fast  assembly language highly nonportable error prone 
library routine memset fill matrix array single character value 
initialize matrix program 
frequently library subroutine memset code assembly language special processor dependent trick job fast 
example let function memset work 
example matrix 
now function consist only single function_call 
shame call function just call function 
pay overhead function_call 
call memset function 
rewrite code memset 
hundred call want editing 
rid overhead function_call 
function inline 
final version function inline eliminate call overhead see example 
optimize matrix initialization function illustrate optimizing strategy 
remove invariant code code need put inside loop put loop 
example  matrix +  
loop order nest loop order simple loop outermost complex loop innermost 
page reduction strength fancy way cheap operation expensive
table list relative cost common operation 
table relative cost operation operation relative cost file input output  include function printf scanf 
costly conversion character_string number 
function avoid time critical section code 
reference pa ra meter constant reference parameter const type constant parameter structure  union  class 
power power integer multiply divide 
compiler_will substitute shift operation 
pointer pointer fast index array 
inlinefunction inline function eliminate overhead associate function_call 
page case study  inline function normal function once work write word process program large computer manufacturer 
function next character current file 
thousand place program 
first test program write function  program unacceptably slow 
analyze program find percent time spend 
change inline function 
speed double  code size percent require memory expansion card work 
speed right  size unacceptable 
finally write routine function hand optimize assembly language size speed acceptable level 
case study  optimize color render algorithm once ask optimize program color render large picture 
problem program take hour process single picture 
limit picture day 
first run program machine float point accelerator 
bring time hour 
next permission high speed risc computer belong project currently sit idle 
reduce time hour 
hour solely fast machine 
code change
fairly simple function call only once innermost loop 
rewrite function macro minute 
next change float point operation float point integer 
saving amount minute run 
notice program spend minute read ascii file contain long list float point number conversion process 
know scanf extremely expensive function  cut initialization process file binary 
total runtime now 
carefully inspect code trick know  minute  leave minute short goal hour run 
point page project refocus program put mothball future date 
programming exercise exercise  take previous program run interactive debugger examine intermediate value 
exercise  write matrix multiply function 
create test program only test function  time
optimize program pointer determine time saving 
exercise  write program sum element array 
exercise  write program count number bit character array 
optimize register integer variable 
time array size 
exercise  write version library function memcpy 
implementation memcpy write assembly language take advantage quirk trick processor 
memcpy compare
answer question answer  problem memset character fill routine 
consist byte character 
byte assign value 
byte will receive value   byte hex value 
byte hex value 
take single byte value  put come 
work zero
number will_produce wrong answer 
page operator overload 
operator function operator member_function full definition complex class programming exercise answer question overload  undermanned  ment flounder  euchre god almighty storm  bluff eternal sea 
build complex type  know add complex number 
feature call operator overloading  teach  handle complex number 
operator overloading define set function add  subtract  multiply divide complex number normal operator +   
section define complex number class 
let start define basic complex class 
complex number consist part  real imaginary  class complex protect  
next define member_function 
include usual constructor destructor routine real imaginary part number 
recall  const function discuss  class 
now want complex number 
declare variable simple 
initialize number + easy 
happen want add complex number 
need define function 
efficient way pass structure function 
finally  small function  define inline function efficiency 
function  explicitly declare result return
step  version complex add function 
version add function explicitly allocate variable result 
version  automatically create temporary variable result 
number name exist return_statement 
create temporary variable cause constructor call 
temporary variable assign call assignment function 
assignment  long temporary variable throw away call destructor 
page operator function add function complex number little awkward 
nice able convince automatically call function try add complex number operator 
operator overloading come
write add function 
note  operator overloading function carefully 
try design follow common sense rule 
+ addition   subtraction 
stream break rule define shift operator input output operator 
lead confusion   output   follow   output value expression 
expert tell 
case number    will output 
see overload operator 
now let explore operator
binary arithmetic_operator binary operator take argument  side operator 
parameter class structure 
define function just support addition complex class 
diarrhea definition typical overload_operator 
table list binary operator overload 
binary operator overloaded operator meaning + addition subtraction 
right shift relational operator relational operator include 
normally take constant class return 
table relational operator operator meaning 
great page operator meaning 
great equal unary operator unary operator  negative  take single parameter 
table unary operator operator meaning 
complement shortcut operator operator + shortcut complicated operator 
close examination standard reveal operator return value variable increase decrease 
note function define  first parameter constant 
return reference first  copy first parameter 
page table list shortcut operator 
simple shortcut operator operator meaning 
shift right increment decrement operator increment decrement operator form  prefix suffix 
language contain hack handle case 
define complex type mean increment part  function handle form prefix 
reduce cute trick  unused integer parameter 
actual practice  suffix version increment put prefix version line
way  avoid problem 
see  prefix version simple suffix version 
restrict prefix version only simplify code  compiler job little easy 
table list increment decrement operator 
table increment decrement operator operator meaning 
decrement logical_operator logical operator include   
overload  just mean
theory  logical_operator work only boolean value 
practice  boolean type  work integer 
confuse issue overload
table list logical_operator 
table logical_operator operation meaning 
logical operator operator input output 
actually operator overload version shift operator 
advantage fairly simple  cost minor confusion 
like able output complex number just_like data_type 
need define
page datum output_stream class ostream 
output function 
normally take constant argument 
case first parameter non constant ostream output side effect  major data output_stream 
general  idea add side effect operator
input just simple output 
think read number extra character simple minded input operation 
function set set flag input operation find problem 
allow caller test see input work call bad function 
see  exception  reach  
let read part number 
page example 
operator index array 
will see  advanced pointer  operator useful define class mimic array 
normally  function take argument  class simulate array index  return reference item array 
cover operator detail  modular programming 
first introduce  advanced pointer  know
second  know will want override
see only program delete_operator overridden least equivalent 
program write clever programmer who like little strangely 
result code nightmare debug 
clever programmer  leave delete alone 
clever programmer  leave delete alone anyway 
day debug code 
exotic operator contain rich set operator 
include   allow define default function class 
allow expression concatenate 
rarely overload 
operator discuss  dustier corner 
operator member_function overloading function just_like ordinary function 
define function 
only difference function first argument  class imply 
example  write + ordinary function function 
here ordinary version see 
case  need
+  come handy 
flavor overloading function
program clearest easy read 
general  standard function simple operator  +     function shortcut unary operator  +    unary 
overloaded function only work function 
include cast operator class specific version delete 
cast finally come cast operator 
cast way change type
example  let cast complex type double  want real part 
define cast function  class complex  public  double double return realpart  automatically call function want turn complex double 
trouble define cast  give call back 
personally  like know call avoid create cast operator 
reason define create cast function 
page full definition complex class example list entire complex class 
beginning header_file summarize function define 
create class discover consist exact little line function 
comment full function comment block obscure code 
word  case add comment cause confusion  small function comment 
create class  notice function similar structure 
matter create copy + function edit little 
contain rich set cause sort repetition happen try define complete set operator class 
finally  simple operation define file long function leave file 
example complex  complex file  ifndef define 
copy constructor call copy_constructor call
review section  copy_constructor  
thank jeff hewett th problem 
programming exercise exercise  write class handle fraction  define addition  subtraction  multiplication  division operator fraction 
exercise  write fix point number class handle number 
number form 
word  number only single digit right decimal_point 
integer implement class 
exercise  write class implement sparse integer array 
like simple integer array  int  simple array  index 
bad news 
news element will set time 
rest element will zero 
exercise  write time class 
implement function add  subtract  read  print time 
exercise  write date class allow add  subtract  read  print simple date form mm dd 
assume year leap year 
page exercise  advanced write full date class allow add  subtract  read  print date form mm dd yy 
answer question answer  copy_constructor call function 
parameter list function trouble trouble   trouble parameter function pass call value parameter 
see type parameter call copy_constructor put parameter stack 
infinite loop copy_constructor call function 
see call value parameter call copy_constructor  call cause copy_constructor call 
keep system run stack space user disgusted abort program 
solution pass parameter reference 
only efficient  work 
float point format float addition subtraction multiplication division overflow underflow roundoff error accuracy minimizingroundoff error determine accuracy equal sufficiently large value 
arithmetic simple  exact  fast 
float point opposite 
computer float point arithmetic only great difficulty 
discuss problem occur float_point 
order address principle involve float point arithmetic  define simple decimal float point format 
suggest put computer work problem pencil paper see firsthand problem pitfall occur 
format computer similar define base  computer base   
problem demonstrate here paper occur computer 
float point format float_point number consist part  sign  fraction  exponent 
fraction express digit decimal 
exponent single decimal digit 
format page sign plus minus 
represent number format  
format similar float point format computer 
ieee define float point standard  machine
table show typical float point number 
float point example notation number 
minimize error guard digit 
extra digit add end fraction computation 
computer guard digit float point unit 
float addition subtraction add number like  computer perform follow step  
start number 
add guard digit number 
shift number small exponent right digit increment exponent 
continue exponent number match 
add fraction 
result exponent number 
normalize number shift leave right just nonzero digit left decimal_point 
adjust exponent
number like normalize 
number normalize 
finally  guard digit great equal  round next digit
truncate number 
float point subtraction  change sign second operand add 
multiplication want multiply number  follow rule apply 
add guard digit 
number number 
normalize result 
guard digit great equal  round next digit
truncate number 
rule multiplication short add 
integer multiplication slow integer addition 
float_point  multiplication speed close addition 
page division divide number like  perform follow step 
add guard digit 
divide fraction  subtract exponent 
normalize result 
guard digit equal  round next digit
truncate number 
result follow calculation 
example overflow call exponent overflow 
computer generate trap occur  interrupt program cause error_message print 
nice generate wrong answer like 
computer follow ieee float point standard generate special value call + infinity 
underflow occur number small computer handle 
example  result small fit digit  underflow 
page roundoff error float_point exact 
know +  know + 
show follow float point calculation  float_point float_point  computer similar problem float_point 
example  number exact representation binary float_point 
float point money 
deal dollar cent  tempting define float  calculation float_point  big roundoff error 
bank  credit card  irs tend fussy money 
give irs check right happy 
money store integer number penny 
accuracy digit fraction accurate 
first glance tempt digit 
who read previous section roundoff error tempt change answer
answer accuracy depend calculation 
operation  subtract number close generate inexact result 
follow equation  page  correct answer 
first digit fraction wrong 
example problem call roundoff error occur float point operation 
minimize roundoff error technique minimize roundoff error 
guard digit discuss 
trick double float 
give approximately twice accuracy twice range 
push away minimization problem twice
roundoff error still creep
advanced technique limit problem cause float_point find book numerical analysis 
scope text 
purpose give idea sort problem encounter 
float point nature exact 
people tend think computer accurate machine 
give wildly wrong result 
aware place error slip program 
determine accuracy simple way determine accurate float_point simple calculation 
method follow program add +  +  +  second small difference result 
old language specify float point number double 
remove restriction  compiler page front end compiler  frequently arithmetic double 
mean expression  float   
note trick determine accuracy float point number storage 
example float 
precise definition find standard file 
precision speed variable type double twice precision normal float variable 
people assume double precision arithmetic take long single precision 
let assume old compiler double 
equation  float    +  perform follow step  
convert single double precision 
convert single double precision 
double precision add 
convert single precision store variable type double  only perform step  
double precision add 
store see  second form simple  require conversion 
case  convert program single precision double precision run fast 
note specifie float_point double float  sure
change float double program run fast  slow 
only sure float_point result unpredictable 
page computer  include pc series machine  special chip call float point processor float point arithmetic 
actual test motorola float point chip float_point pc show single precision double precision run speed 
power series trigonometry function compute power series 
example  series 
angle require number term 
know ahead time number term optimize algorithm number term 
lose accuracy angle 
compromise strike speed accuracy 
assume number come computer  accurate 
library function generate bad answer especially work excessively large small value 
time will problem function  aware limitation 
finally  question 
float point format only digit 
function cyclical 
float point format only digit  actually mod 
big  error render meaningless result
programming exercise exercise  write class string represent float point number format
class function read  write  add  subtract  multiply  divide float point number 
page attend physics class cal tech teach professor 
give lecture sun  
exercise  create class handle fix point number 
fix point number constant fix number digit right decimal_point 
page advanced pointer 
pointer  structure  class delete_operator link list order link list double link list tree print tree rest program data_structure chess program programming exercise answer question race bind body chain call liberty  call fresh link progress robert buchanan useful complex feature pointer 
pointer create complex data_structure link list tree 
figure illustrate data_structure 
now data_structure allocate compiler permanent temporary variable 
pointer create allocate dynamic data_structure  grow shrink need 
will learn common dynamic data_structure 
pointer  structure  class structure class contain pointer  pointer instance structure 
following example  class item 
operator storage variable return pointer 
create thin air actually area memory call page figure example pointer figure item 
operator unnamed variable return pointer
 create only reference pointer  name 
follow example  allocate heap 
variable will point
operator single argument  type item allocate 
accord late standard  memory throw exception abort program 
suppose work complex database contain mailing list 
want keep storage minimum  only want allocate_memory person exist 
create array class person allocate datum statically space 
will allocate space need 
structure person class person public  char char char float 
name live part address age height inch want allocate space
later pointer record will put database 
example storage character array byte long   include 
variable point storage 
substitute simple type array specification 
return memory heap
note reason form delete way tell difference object array object 
delete rely programmer  tell
strictly speak  line  null  unnecessary 
idea  null pointer delete 
way  try delete memory  help prevent attempt delete memory twice 
problem occur memory free 
delete memory return memory pool reuse 
delete call similar array index bound error 
memory belong
cause unexpected result program crash 
link list suppose write program list name computer communication line 
type name day  work dial computer name 
problem know ahead time name type 
link list data_structure  create list name grow name enter 
link list easily insert name middle list slow difficult array 
will see later  link list combine data_structure handle extremely complex datum 
link list chain item item point next item chain 
think treasure hunt game play kid 
give note  look  race mailbox find next clue   look big tree back yard   find treasure lose 
treasure hunt clue point next
figure graphically illustrate link list 
variable point first list 
beginning  insert element list empty  variable initialize null 
figure illustrate add beginning link list 
now translate code 
 execute follow step  
create item add 
example contain find function 
question  run program result bus error 
time will report  find  return item list 
find program cumbersome notation current ptr access field structure 
shorthand construct arrow_operator operator 
dot operator mean field structure  structure pointer operator arrow_operator field structure pointer 
follow expression equivalent  currentptr 
only add head link list 
suppose want add order 
figure example order link list 
page figure order list figure show step add    list 
follow member_function implement algorithm 
first step locate insertion point 
point first list 
program move variable list find proper place insertion 
variable set point previous value 
will insert
add   order list now know insert
point  page 
accomplish code   
double link list double link list contain link 
link point forward next  point backward previous 
double link list useful program need list forward backward 
class double link list class private  
page figure double link list care case insert head list end list 
double link list insert  part link set
now break old link item connect 
bit trick 
only pointer 
follow previous link back  want 
now fix
code surprisingly simple   visually see operation figure 
previous pointer   
tree suppose want create alphabetized list word file 
link list  search link list slow check find correct insertion point 
type call tree  reduce number comparison tremendously 
binary tree structure look like figure 
box call node tree 
box top root box bottom node contain pointer  left pointer right pointer  point left right subtree 
page figure 
double link list insert  part 
tree store symbol table list variable program 
will tree store list word programming tree write top leave bottom common sense tell upside case notice  common sense little programming page 
tree print list alphabetically 
advantage tree link list search tree take considerably time 
page example  node store single word 
left subtree store word current word  right subtree store word great current word 
example  figure show descend tree look word   start   orange   lemon   descend right link figure 
tree search recursion extremely useful tree 
rule recursion function simple endpoint 
algorithm insert word tree 
null tree subtree  create node tree word 
node contain word 
enter word left right subtree  depend value word 
algorithm satisfy recursion rule 
definite endpoint  
match find 
enter word subtree simple whole tree 
page see work  happen insert word  fig  tree 
first check word  fig    fig  small   fig  big   fig  small grape   try left link 
null  create
code strdup 
create copy heap return pointer
later return heap delete enter value tree 
pass pointer tree 
null  create
change value pointer  pass reference pointer 
compiler see part unwritten standard page print tree complex nature tree structure  easy print 
printing algorithm 
null tree  print
print datum come leave tree 
print datum come right tree 
code print tree 
rest program now data_structure define  need complete program function 
check correct number argument call scanner routine 
scan read file break word 
standard macro isalpha 
macro return argument letter
define standard include file 
word find  enter call put word tree 
example listing 
question  once program read dictionary memory tree structure program search misspelled word 
tree suppose befast  program slow think link list 
hint  graphically construct tree word  able    baker    cook    delta   easy  look
page data_structure chess program classic problem artificial intelligence game chess 
spite advance computer science  able create program play chess grand master 
design data_structure chess play program 
chess move
opponent response  answer  back forth level move 
data_structure begin look like tree 
binary tree  branch figure 
problem number move give position vary dramatically 
example  beginning piece run trivia question 
move chess starting position 
page like rook  queen  bishop move number square straight line 
reach end game evenly match game  side only pawn major piece 
number possible move greatly reduce 
want efficient storage possible chess program stress limit machine 
reduce storage requirement change next move array link list 
result structure 
graphically  look like figure 
add little complexity  great deal storage 
programming exercise exercise  write cross reference program 
exercise  write function delete element link list 
exercise  write function delete element double link list 
page exercise  write function delete element tree 
answer question answer  problem statement  value check check see valid null 
null easily check random memory location contain
solution check check point null break  answer  problem follow  first dictionary small  right hand link 
entire list order  only right hand link
define tree structure  link list 
see figure 
figure dictionary tree page advanced book data_structure  wirth algorithms + datum program  discuss way prevent balance binary tree 
trivia answer  give
right  move resign 
page advanced class 
derive class virtual_function virtual class_function hide derived_class constructor destructor derived_class summary programming exercise answer question question rule idea age idea rule class karl marx manifesto communist party derived_class class define example contain major limitation  check bad datum 
example  prevent user push
need define 
simple include check 
allow build old
case will build exist simple 
technically will class base_class create class  
start tell create
keyword public tell member accessible world 
declare private public protect member accessible only inside 
declaration tell base 
figure show view combination 
now need define push member_function 
first check see room
room  print page figure derived_class base_class 
result call push  perform limit check call push 
push belong  perform check call push 
result push will call system run space 
want want 
want tell want call push
accomplish scope operator     
look like  
full definition show example 
class simple  illustrate important feature language 
first declare protect member variable 
mean variable only class stack class derive stack  
function push pop work 
stack variable 
derive stack  type_variable stack type_variable
follow example  create name parameter function  take normal  unbounded stack parameter 
function take parameter 
variable type_variable  turn call 
way explain type  function look peephole allow see only part variable show figure 
figure  see let improve basic allocate fix size  allocate dynamically 
start class private   pointer protect   current item public  
give size declare
page way put base constructor unitization just declaration constructor derived_class  flexibility create problem bound checking  constructor contain parameter 
bind check initialize simple 
solution syntax similar initialize constant member 
note dynamic_memory delete  vital define big member_function  constructor  destructor  copy_constructor  assignment 
virtual function today way letter 
mail united states postal service  federal express  certify mail  fax
method letter person time  differ cost speed 
let define class handle sending letter 
start define address class class define address sender receiver 
little problem class 
depend magic  letter
process letter depend service
way handle call routine depend service 
solution bit clunky 
mail class know mailing service world 
happen add function class  class mail public  
create big switch_statement 
will big switch_statement worry
bad  instruction cost service now spread function 
nice group function postal service class  federal express class 
example  class postal service 
trouble letter mail class  call call base_class mail 
need way tell   call member_function type 
example illustrate virtual_function 
page derived_class contain member_function name c
reach line   try find derived_class
try find member_function base_class 
case succeed call now let move function 
take base_class argument  restrict search member_function base_class 
line   output call happen member_function call 
tell search rule change 
first check member_function derived_class  check base_class 
case derived_class  line   output  call member_function virtual_function 
start look function derived_class 
case define look base_class 
define call now back mail 
need simple base_class basic mailing function type service 
now write routine letter worry detail 
call let virtual_function work 
mail class abstraction generalized mailer 
associate real mailing service  need base derived_class 
happen programmer forget put right member_function derived_class 
example  class  public mail 
try find cost letter federal express  will notice cost function call mail 
cost function mail know call  spit error_message abort program 
error_message nice  compilation run
allow specify virtual_function overridden derived_class 
example   abstract mailer class mail public  
call directly 
class_contain pure virtual_function call abstract_class 
try abstract_class ordinary type  mail  
virtual class let design class handle tax form 
upper right corner form blank name  address  social security number 
form contain will define class corer form 
deduction need schedule let define class
tax return structure problem structure name class 
taxpayer name change form
want class structure show figure 
tax return structure declare base_class virtual tell combine common base_class 
redefine virtual base_class 
notice class_name base derived_class  derived_class cause base_class constructor call initialize class 
mean constructor name will call twice 
smart know name twice ignore second initialization 
function hide derived_class example define base_class overloaded function  come integer version float point version 
clearly  derived_class call integer version  call derived_class 
happen call float point version 
normally  member_function derived_class  will look base_class 
version define derived_class  will look derived_class flavor 
word  form define derived_class  lock form function 
constructor destructor derived_class constructor destructor behave differently normal member_function especially derived_class 
derive class variable create  constructor base_class call first  follow constructor derived_class 
example define simple base_class create derived_class 
example con class cc 
destroy variable 
see  pointer base_class 
point code see base_class 
way know derived_class
variable delete  call derived_class destructor 
need way tell   hey  derived_class want call  way destructor base_class virtual_function 
see virtual destructor  will call destructor derived_class call destructor base_class 
virtual destructor place  safely delete base_class variable program_will output proper destructor call base_class destructor call question  example delete variable program upset try call clear line 
page example 
summary programming begin  programmer try find way build usable code 
 derived_class  allow page build class top exist code 
great deal flexibility code easy organize maintain 
programming exercise exercise  combine checkbook class exercise queue class exercise implement checkbook class print last entry checkbook 
exercise  define string match  base_class 
define derived_class match word  number  blank string 
exercise  define base_class shape simple shape square  circle equilateral triangle 
size shape reduce single dimension 
define derived_class shape 
create virtual_function base_class return area shape 
note  will need precisely define dimension store base_class 
define derived_class call man woman define gender specific item 
write pure virtual_function base_class operation common sex handle way
exercise  write base_class number hold single integer_value contain member_function  
define derived_class print value hex  octal  decimal 
answer question answer  remember destructor call order derived_class first base_class 
case  destructor derived_class   call destroy class 
next  destructor base_class list call 
call function 
pure virtual_function  call function derived_class 
page upset abort program 
page language feature page exception 
stack exception runtime library exception programming exercise glorious painful exception alfred de musset airplane fly place time trouble 
trouble stuck wheel engine fire  pilot train handle emergency 
let examine detail happen airborne emergency engine catch fire 
exception normal flight 
fire alarm cockpit 
catch pilot  attention start fire emergency procedure 
extensive list case fire 
airline prepare list ahead time pilot list memorize 
pilot handle exception  activate fire extinguisher  shut engine  land quickly 
let break procedure pseudocode 
pilot take try fly plane point problem 
page happen exception 
need handle
type emergency 
fire engine number  engine number  engine number assume engine plane 
engine fire store variable 
class type fire occur 
definition class public  int engine  
bury
code sense fire  put variable_name trigger exception throw statement 
throw statement execute  normal processing
fire occur  normal flying
execution transfer catch statement 
summarize  exception_handling consist 
description possible problem  case class 
case  statement 
cause exception trigger emergency procedure throw statement 
exception handle code inside catch block 
stack exception  advanced class  define stack bound check 
user attempt push datum stack pop class issue error_message abort 
way handle exception 
think pilot feel plane display error_message shut time fire 
first need decide type exception handle class 
stack example  only exception expect bound error 
will error simple string 
class bound error const int  
exception check start keyword try 
tell exception generate section code follow will handle try block 
example  try perform big stack operation  code look like  
catch statement catch type exception 
exception catch  unexpected exception will cause call unexpected exception handler  abort program default 
want catch exception   exception type 
body catch 
basic function definition tell   expect exception throw  push function only throw exception 
allow list possible exception function put throw directive end function_declaration  inline void int item page happen throw exception list exception 
will turn call function unexpected 
example contain bind check stack exception 
runtime library exception exception handling mechanism
standard  exception still refine update 
detail still work
compiler maker need time catch standard 
time writing  currently compiler generate exception runtime library  generate  standard  exception 
situation will change ansi standard define compiler improve 
advice give read compiler reference manual watch
programming exercise exercise  add code queue class exercise will trigger exception item put queue 
exercise  take fraction class exercise add code generate exception divide zero occur 
add code generate exception bad number read 
exercise  update checkbook class exercise generate exception balance zero 
page exercise  write function take single character 
function_will number consonant vowel 
nonletter give function  generate exception 
page modular programming 
module public private extern modifier header body module program infinite array makefile multiple file infinite array hand light work 
program grow large large  split section  module 
allow program split multiple file  compile separately  combine link form single program 
programming example  discuss technique need create module 
show put module form program 
module module collection function class perform function 
example  module handle database function lookup  enter  sort 
module handle complex number 
programming problem big  programmer need finish
efficient way splitting large project assign programmer module 
way programmer only worry internal detail code 
discuss module handle infinite array 
page public private module divide part  public private 
infinite array example  put public declaration file see list page 
internal module private 
directly usable world keep private 
example illustrate simple extern modifier 
actually  modifier file variable define  show table 
complete list meaning static see table datum define globally  static mean  private  datum define inside function  liberal rule static  extern  blank modifier 
possible declare variable extern beginning program later define blank 
ability useful external variable define header_file 
program include header_file define variable extern  define variable real 
problem declare variable file 
compiler carefully analyze program  pick value likely wrong 
case  only global_variable call 
will initialize depend whim compiler 
entirely possible program print initialize zero 
avoid problem hidden initialization  keyword static limit scope variable file declare 
write  file  static int 
header share module put header_file 
convention  header filename end  
infinite array example  file 
header contain public 
comment section clearly module user 
public structure page 
commenting excessive  real gut coding hide program file 
file serve program file documentation world 
notice mention comment infinite array implement 
level  care
add element array will just cause grow 
code define inline 
actual code storage define header_file 
body module body module contain function datum module 
private function call module declare static 
variable declare function module declare static 
program infinite array infinite array module show figure 
program simple link list store element array 
link list grow long need run memory 
list element  bucket  store number 
find element  program start beginning  skip past first bucket  extract element datum current bucket 
infinite array structure page example contain code module 
makefile multiple file utility design programmer compile link program 
user explicitly type compile command time change program  note command gnu compiler 
compiler system name slightly syntax 
program grow  number command need create grow 
type series command tiresome error prone  programmer start write shell script ms file 
programmer type computer compile
overkill  file recompile regardless need 
number file project grow  recompiling significant problem 
change small file  start compilation  wait day computer execute hundred compile command frustrating especially only compile need 
program create intelligent compile 
purpose first decide command need execute execute
file makefile upper lowercase important unix contain rule decide build program 
makefile contain follow section  page 
default rule line begin comment 
macro format  data name valid identifier 
datum text will substitute see 
example  simple makefile explicit rule tell command need create program 
rule take form 
common target  source command command command 
target file create 
 create  source_file source 
target create file  list 
command create target list line 
take command create target 
command list line 
indent tab 
example  rule  hello  hello tell create file hello file command  hello page will create hello only
file creation hello  arrange chronological order modification time  show table 
table file modification times unix ms window 
programmer change source_file  file modification time will date file 
form explicit rule source  command command case  command execute time run  unconditionally 
command omit explicit rule  set build rule determine command execute 
example  rule   tell create  standard rule 
file include header  depend
unix makefile create program hist list example 
example ia makefile file need debug 
object file date  will create
line   tell create imply 
command specify  default
example show makefile ms window  turbo 
big drawback
only check see file change  rule 
compile program debug need produce production version  will recompile 
command touch change modification date file 
useful change compile time flag want force compilation 
rich set command create program 
only discuss infinite array histogram program hist design infinite array package 
take file argument 
file contain list number 
number entry
program print histogram show time number
first let computer work possible 
example  program like 
computer accurate computation 
hist program  user type correct number parameter command line  message tell wrong correct
program library routine memset initialize counter array 
routine highly efficient set value array zero 
line       zero entire array counter 
example contain program infinite array store datum produce histogram 
sample run program produce  test               page            divide task module unfortunately  computer programming art science 
hard fast rule tell divide task module 
know module come experience practice 
section general rule module division apply real world program 
technique here work
vital part program 
key program decision want processing want perform
sure analyze flow begin design 
design module minimize amount pass
look organization army  will see divide module 
infantry  artillery  tank corps 
amount pass module minimize 
example  infantry sergeant want artillery bombard enemy position  call artillery command  pillbox location 
rid  artillery command handle detail decide battery firepower allocate base requirement fire mission  maintain supply  program organize way 
keep inside module
minimize amount intermodule communication cut communication error limit maintenance problem occur module upgrade 
program allow user display change text file 
piece text file edit 
editor display orient continually display line current file screen 
finally  piece need  editing command 
command type user 
parse computer understand
individual command small perform similar function delete line like delete character 
impose standard structure command execution module improve readability reliability 
block diagram editor see figure 
module division text editor minimal communication module 
display section need know only cursor file currently look like 
file module need read file  write file  keep track change 
way change minimize 
page editing command  matter complex  break series insert delete 
responsibility command module take complex user command turn simple insert delete file handler process 
pass module minimal 
pass command decoder display module 
word processor just fancy text editor 
simple editor only worry ascii character font  size  word processor able handle size shape 
compiler construction compiler  process code 
job compiler transform source machine dependent object code 
stage process 
first code run preprocessor expand macro  take care conditional compilation  read include file 
next processed file pass first stage compiler  lexical analyzer 
lexical analyzer take input stream character return series token 
token computer science term mean word operator 
example  let look english command  open door 
character command 
lexical analysis turn word period 
token pass parser assemble sentence 
stage symbol table start parser idea variable program 
now compiler know program suppose
optimizer look instruction try figure efficient 
step optional omit flag specify command line 
code generator turn high level statement machine specific assembly code 
assembly language  assembly language statement correspond machine instruction 
assembler turn assembly language binary code execute machine 
general flow compiler diagram figure 
lexical analysis parsing common wide variety program 
utility lex generate lexical analyzer module program  give description token program 
utility  yacc  generate parser module 
program book lex associates 
page figure compiler module spreadsheet simple spreadsheet take matrix number equation display result screen 
manage program equation datum 
core spreadsheet equation 
change equation number  need lexical analysis parsing  just_like compiler 
page compiler  generate machine code 
result pass display manager  put screen 
add input module allow user edit change equation  spreadsheet  show figure 
figure spreadsheet layout module design guideline hard fast rule come lay module program  here general guideline 
module contain line 
line  difficult edit  print  understand 
programming exercise exercise  write class handle format 
contain follow function  
close print file 
exercise  write module call first receive array filename search find exist  open file 
exercise  write symbol table class_contain follow function  enter name symbol table 
remove name symbol table 
exercise  take word program  advanced pointer  combine infinite array module create cross reference program 
template  hard way function specialization class_template class specialization implementation difficulty summary programming exercise patten excel nature shakespeare othello  act template 
allow write generic class function work data_type 
template will useful part language  grow
problem draft ansi standard specify complete syntax template  implement
result compiler maker implement template differently  program template tend nonportable 
template  hard way suppose want define function max return maximum item 
actually  want define just max function  family function  find maximum int  float  char 
start define parameterized macro generate code function 
call definition stage 
macro look like  define type dl  type return dl 
page note line last end backslash 
define macro span single_line  backslash turn line
put backslashe column easily tell miss
macro generate code 
merely definition next phase generate function want 
call generation phase 
finally  code function just define 
figure show source_code define style template code generate
method work adequately simple function like max 
work large function 
drawback system invoke macro data_type want
nice call automatically 
template allow define generic function 
template generate specific instance function need 
example  define function max template  write  template class kind 
note construct class kind tell word kind replace type 
like parameterized macro  generate code  merely definition next phase page figure 
code generate define style template 
page see function max float  float 
check see code function generate generate
word  automatic 
see first time max float generate float_point version max 
next max int  int version max create 
note last line  
figure template code generation page function specialization template bit simple code generation 
handle special case
want tell   normal comparison data_type string  process call specialization 
declare special version max function just string  
will find simple function  char try expand
class template class little complex function 
declare easy 
define just_like function 
example show stack class  simple class  write template 
example cc 
just specify procedure class 
put template clause template class kind front procedure put template parameter kind class 
example  push routine look like    push push item warning  check overflow parameter item item put template class kind 
will generate automatically member_function  int   push  double   push  
explicitly declare member_function will definition generate
suppose want store string char 
want store pointer  want store actual string 
need special version push function duplicate string push 
implementation difficulty annotate reference manual elli stroustrup default standard language 
contain complete definition syntax
explain compiler implement
see  implement easy 
example  suppose put module 
file define class file define now want integer int file 
figure show source code layout 
compiler implementor start pull hair
page figure 
source code layout know  int 
matter file define prototype member_function push pop 
compiler see int  automatically generate code push pop 
body member_function tuck away file 
compiler work 
know file  know generate push int pop int 
compiler generate push int pop int compile 
yes  know declare int variable 
only who compiler work file just now 
manager call situation compatible 
code write compiler work
case  code write version compiler work version 
template lead edge compiler technology like just bug work
follow section  discuss way compiler maker attempt solve problem associate template 
compiler technology standard constantly evolve  section date 
microsoft implementation publication date  microsoft visual compiler template 
extremely simple  form implementation  page limited 
hand  trouble template microsoft compiler 
turbo gnu template turbo gnu compiler take similar approach 
plan float  float file define member_function  
beginning file  will need line  typedef float  actually type 
typedef just tell compiler generate need member_function 
compiler switch tell compiler inline function handle inline 
suppose define function  class kind inline kind dl  kind 
suppose function complex compiler decide ignore file compile  copy max float generate 
turbo linker smart detect will throw away 
gnu linker smart  will wind copy routine code 
turbo gnu compiler option help solve problem 
put line  pragma interface gnu only option 
option clunky  nonportable  difficult
mean solve implementation problem properly solve
cfront base compiler cfront name translator basis first compiler 
compiler maker standard compatible late version cfront 
cfront handle problem generation put link time  only compile link file 
link time  cfront notice float 
look file name 
method simple detail take care
example  file automatically include linker try compile 
bad  include include    compiler confuse 
cfront approach attempt solve problem  still bug work
write portable template write portable 
simple answer   way create truly portable write inline function put function single header_file 
tell  method work compiler template 
efficient way portable 
summary template convenient way write generic class function 
implementation template still undergo refinement 
practical matter  want wait language settle little
programming exercise exercise  write template min return minimum value 
sure handle string correctly 
page exercise  write template class implement array bound check 
exercise  define template class implement set 
class allow set  page portability problem 
modularity word size byte order problem alignment problem null pointer problem filename problem file type summary answer question spake disastrous change  move accident flood field  hair breadth  scape imminent deadly breadth shakespeare program porting othello  act  scene just complete work great masterpiece  ray trace program render complex dimensional shaded graphic cray supercomputer mb memory gb disk space 
come ask port program ibm pc memory mb disk space 
only illegal  unprofessional 
only choice whimper start port 
process will find nice  work program exhibit sort strange mysterious problem 
program suppose portable 
contain machine dependent feature 
vast difference unix ms window  system dependency frequently find program 
discuss problem associate write truly portable program trap encounter 
modularity trick write portable program put nonportable code separate module 
example  screen handling differ greatly msdo window unix 
design portable program  write machine specific screen update module 
page example  terminal set function key label 
pc function key set 
problem key set code 
hp esc return  pc null  
case  want write routine character function key string keyboard translate function key 
translation machine  machine dependent module need
hp machine  put program hp  pc pc 
word size long int bit  short int bit  normal int bit depend machine 
lead unexpected problem 
example  follow code work bit unix system  port ms window  int  
byte order problem short int consist byte 
byte value 
value store first byte 
answer machine dependent 
cause considerable trouble try write portable binary file 
motorola series machine type byte order abcd  intel digital equipment corporation machine badc 
solution problem portable binary file avoid
put option program read write ascii file 
ascii offer twin advantage portable human readable 
page disadvantage text file large 
file big ascii 
case  magic number beginning file useful 
suppose magic number bad magic number  example 
program read magic number  check correct number byte swap version 
program automatically fix file problem  const int magic 
alignment problem computer limit address integer type datum 
example  series require integer start byte boundary 
attempt access integer odd address  generate error 
processor alignment rule  restrictive  require integer align byte boundary 
alignment restriction limit integer 
float point number pointer align correctly 
hide alignment restriction
example  declare follow structure  
structure architecture class machine alignment restriction  allocate show right figure 
problem size structure change machine machine 
 structure size byte 
write binary file contain record  will byte long  will only byte long 
obviously file write way machine 
way problem ascii file 
problem binary file 
solution explicitly declare pad byte  struct char 
pad character field value align correctly machine structure correct size class machine 
pad character difficult error prone 
example  portable machine byte alignment bit integer  portable machine byte integer alignment 
null pointer problem program utility write unix vax computer 
computer  first byte program 
program write computer contain bug  null pointer
page example  
actually illegal
null pointer dereference 
vax  error cause problem 
byte zero program zero  point null 
due luck  design 
vax  will print  old celerity  first byte program  program run celerity  will print  string  computer  type generate unexpected result 
utility port vax celerity exhibit bug 
filename problem unix specifie file sub file ms window 
port unix ms window  file name change 
example  ifndef msdo sys unix version file msdo version file endif msdos question  example work unix  run msdo window message  oot ew able  file find example 
file type unix only file type 
ms window text binary 
flag ms window file type 
old version unix flag 
way handle problem write open call system  ifndef msdo    msdo    endif msdo messy 
way define dummy flag  ifndef 
run type machine operating_system  easy 
keep portability mind create code  minimize problem 
port letter word portability problem limit program 
practical programming translate japanese  translator problem exercise   write program remove word file replace problem japanese  letter word 
translator come phrase directly translate  put english 
letter word  decide english additional help star add 
word like additional help star add 
word like page answer question answer  problem backslash escape character 
character return   tab 
name  return oot ew tab able name specify note filename  
double backslashe  single backslashe 
follow line correct  page put 
requirement code design code functional description testing revision final warning program file programming exercise exercise isn  job top earth beggar know  kiple create complete program 
step process cover  set forth requirement test result 
requirement start  need decide
important step leave programming cycle 
program fulfill requirement 
first  long demonstrate modular programming  time short fit inside single
second  complex demonstrate wide range feature  simple novice programmer understand 
finally  useful 
simple define 
useful person useful
decide refine requirement restate useful  program select read source_file generate simple statistic nesting parenthesis  ratio comment code line 
specification statistic program preliminary specification statistic gather program steve oualline february  page program stat gather statistic source_file print
command stat file file list source_file 
follow show output program short test file 
maximum nesting  number blank line number comment only line number code only line number line code comment comment code ratio code design school code design 
structured programming  divide code module divide module submodule  divide sub module sub submodule 
know orient programming 
object orient programming  try think problem collection datum manipulate member_function 
approach  state table transition diagram 
basic principle heart   arrange program clear program break logical module 
first  token scanner  read raw code turn token 
actually  function sub divide small module 
first read input stream determine type character
second take character type assemble token 
module contain statistic gathering small program 
token module program scan source_code token generate statistic 
token group character form single word  number  symbol 
example  line  +  compute sort consist token  leave parenthesis number page number right parenthesis divide operator number semicolon comment end line token module need identify group character 
example  identifier define letter underscore  follow number letter digit 
tokenizer need contain pseudocode  current letter scan letter digit see pseudocode  tokenizer depend great deal type  need module help type
character type module purpose module read character decode type 
type overlap 
example  include numeric set 
module store type array require only little logic handle special type like 
statistic class program  statistic object consume token output statistic 
start define abstract_class statistic 
class basis statistic collect 
figure statistic class hierarchy definition statistic token collect  statistic print beginning line end file 
page statistic specific 
example  class count nesting parenthesis maximum nesting 
count number token output count start line 
code coding process fairly simple 
functional description section class major function program 
complete detailed description  take look listing end
part  table name 
type   include type character  
addition table  need little code special case 
buffer line command write line output 
input stream consist character 
actually  tokenizer simple  deal detail full tokenizer handle 
page clever trick section 
macro generate enumerate list token type string array contain name token 
let examine detail 
allow generate list string contain name token  
trick like acceptable limited case 
trick extensively comment maintenance programmer who fix code understand
start member_function consume token 
function pure virtual_function  mean derived_class define function 
need way print
print statistic place 
first beginning line second end file 
abstract_class contain virtual_function handle case  
define eof 
counting class 
only care 
beginning line output line number current count token 
end file  class output
matter class define eof function 
let default page class class keep track nesting level curly brace 
feed class stream token member_function 
function keep track left right curly brace ignore
result statistic print place 
first beginning line 
second end file 
define member_function print statistic  output start line statistic namely current line number 
matter create copy class perform simple edit 
combine class class class parameter tell count 
next version 
page class class  keep track line comment line code line line
result print end file 
know statistic class
list  static static static static 
counter counter counter counter line 
   type  base type stat 
mean put array call 
design easy add statistic list 
define class put
test test program  come small program contain type possible 
result show example 
revision stand  program collect limited set statistic 
nice add like average identifi size  procedure statistic  pre class statistic 
keep mind design program need expendability 
statistic collection type statistic fulfil mission demonstrate reasonable advanced set construct 
add program complex fit
whole  program job
final warning just generate statistic mean useful 
program file file example stat character type class member_function  type return type character 
example stat token token handle module function  next token input
depend read 
example stat stat produce statistic program usage  stat option file list
counter counter counter counter line 
page list statistic collect static stat     null  process single file parameter name name file process
example stat makefile unix compiler  standard  command stat  stat stat 
page unix makefile example 
exercise  write program remove letter word file replace acceptable equivalent 
page exercise  write mailing list program 
program_will read  write  sort print mailing label 
exercise  update statistic program present add cross reference capability 
exercise  write program take text file split long line small line 
split point end sentence possible  end word sentence long 
overview function struct malloc free turning structure class setjmp longmp summary programming exercise distinction little excite envl derive ancestor long descent 
blessing curse 
curse mean will deal ancient code 
hand  will work
difference migrate
style function classic call author  brian kernighan dennis ritchie function header 
parameter_type name include inside define function 
classic only name
come ansi committee decide idea definition 
code old method  accept type function 
classic require prototype 
case  prototype miss program 
prototype implied prototype int  
will manually 
build memory handle operation 
library routine  malloc free 
malloc take single parameter number byte allocate return pointer char void 
know page big structure
sizeof come
return number
calloc similar malloc take parameter  number
memory allocator messy  convert possible 
number trap style memory allocation 
suppose take structure turn class 
memory routine allocate space class  class  struct  code like treat struct special form class compiler_will complain code 
problem malloc statement allocate space
constructor call  possible class_will set correctly 
free return memory heap 
free take single character pointer parameter cast  
careful turn class 
just return memory heap 
call destructor
style memory allocation messy risky 
convert rid malloc  calloc  possible 
warn accord ansi draft standard  memory allocate malloc deallocate
similarly  memory allocate deallocate delete 
compiler see implement call malloc delete call
word  mix will work 
avoid error  follow rule avoid mix operation 
turn structure class frequently examine code find number struct statement look like class 
actually  structure just data only class member public 
programmer frequently take advantage structure only contain datum 
example read write structure binary file 
keep extra virtual pointer  class 
write class disk raw write  output
bad  read class overwrite bookkeeping datum 
page example  suppose class  
internally  class consist member variable  constant  will allow change  simple   pointer real call 
write disk call  sample  
class read  member change 
include constant suppose change pointer now point strange 
programmer memset set member structure zero 
careful turn structure class 
class structure  zero constant virtual pointer 
result crash try call 
setjmp mark place program 
longjmp jump place mark setjmp 
normally setjmp return zero 
tell program execute normal code 
exception occur  longjmp call return location setjmp 
only difference program see real setjmp call fake setjmp call cause longjmp normally setjmp return zero 
setjmp call  longjmp  return_value control parameter longjmp 
definition longjmp call void env  int  env environment initialize previous setjmp call return code will return setjmp call figure illustrate control flow setjmp longjmp problem here 
longjmp call return control corresponding setjmp 
call destructor class destroy  process 
figure see subroutine define class_name 
normally call destructor end function return_statement 
case longjmp exit function 
longjmp function know class destructor call destructor 
now situation variable disappear destructor convert  change setjmp longjmp combination exception 
page figure 
change style function header standard header 
change setjmp longjmp call catch throw operation 
follow step program 
work  program clothing 
convert real program need following  
change malloc
change delete delete call 
turn printf scanf call cout cin 
turn struct declaration class variable  careful read  write  memset function entire structure class 
programming exercise exercise  program
page dustier corner 
title dustier corner statement real programming 
program loop  test expression  expression false 
note construct execute least once 
actual practice find goto statement once year 
rare time goto syntax goto label  page 
label statement follow  
 operator inside expression 
general form  expression 
note define min inline function parameterized macro 
see  preprocessor  detail 
comma operator 
only place comma operator 
overload operator rarely
normal member_function easily purpose advantage user function_name 
pointer member operator   point member class 
example  follow code declare pointer integer sample   class sample 
let set point member  ordinary pointer identify single item 
member pointer identify member identify individual variable 
set member sample 
need tell class want  sample  typical sample 
variable point integer member sample 
unable actually feature  present here bit sketchy 
soon compiler maker catch standard  macro will cause problem 
answer question answer  compiler see default misspell  default   flag error defualt  valid goto label 
compile program warning  warning  defualt unused function mean define label goto 
page programming adage 
general design declaration switch_statement preprocessor style compile commandment programmer final note answer question second thought wise euripide general 
comment  comment  comment 
put comment program 
tell programmer
kiss  principle keep simple  stupid 
clear simple complex wonderful 
put assignment inside conditional 
put assignment inside statement 
know difference 
practice crucial people involve profession require significant level skill creativity  artist  athlete 
help learn program 
practice know  think know 
page design 
come choice quick hack  involved flexible solution  flexible solution 
likely reuse learn
likely thankful later requirement shift little code ready
trust user input expect 
program give point cat walk across keyboard  time 
watch sign unsigned conversion underflow condition 
put variable declaration line comment
variable_name long easily understand  long
default return declaration 
function_return integer  declare type_int 
put default case switch_statement 
case switch end break fall statement 
put parenthesis   constant expression define pre processor define directive  define size box pixel
construct conditional compilation  put define undef statement near top program comment
inline function prefer parameterized macro 
single block code enclose span couple page 
split big block small  simple procedure 
code start run right margin  time split procedure small  simple procedure 
define constructor  destructor  copy_constructor class 
default   define  routine comment 
create makefile will know compile program 
compile  turn warning flag 
know compiler find 
commandment programmer phin straite 
shalt rely compiler default method construction  destruction  copy construction  assignment simple class 
shalt forget big method nontrivial class 
shalt declare define destructor virtual heir fruit labor 
shalt violate rule abuse inheritance mechanism twisted perversion 
shalt rely implementation dependent behavior compiler  operating_system  hardware environment  code cage dungeon 
shalt augment interface class low level prudent deliberation 
ill begotten practice imprison client unjustly class create unrest code maintenance extension require 
shalt restrict friendship truly worthy contemporary 
beware  art expose rudely trenchcoat 
shalt abuse implementation datum public static rare circumstance 
datum share
shalt suffer dangle pointer reference harbor object 
nefarious precarious agent random wanton destruction 
shalt class library conscientiously possible 
code reuse  just client holy grail oo 
shalt forswear vile printf scanf  favor flow stream 
cast vile cloak partake wondrous fruit flexible extensible
final note just think discover think
still surprise store 
question  example think
answer question answer  statement 
equivalent  programmer accidently reverse 
statement read  page vi appendix page ascii table table 
ascii character chart dec 
page dec 
page range table list range variable_type 
accuracy page name bit 
page operator precedence rule practical subset operator precedence rule table 
practical operator precedence rule precedence operator 
put parenthese
standard rule table 
standard precedence rule precedence operator 
page computing power series program design compute function power series 
limited float point format demonstrate problem occur float_point 
program compute term power series display result 
continue compute term last term small contribute final result 
comparison purpose  result library function display compute
program invoke value value angle radian 
example  compute command  
compute command  
page makefile makefilefor unix example 
intend produce exact value function 
slow  work 
glossary symbol bitwise exclusive operator 
invert bit 
symbol logical operator 
symbol bitwise operator 
symbol precede variable_name 
mean address name variable address 
assign value pointer variable 
declare reference variable 
symbol multiply operator 
symbol precede pointer variable_name mean value_store address point pointer variable 
page symbol decrementation operator 
end string character null character 
define  code follow include source 
currently undefined  code following include macro expansion 
page ptr convention book 
pointer variable end extension ptr 
boolean operation yield operand operand 
ansi version conform specification american national standards institute committee 
ansi version conform specification american national standards institute 
time writing  standard exist only draft form still detail work
 array store contiguous memory 
ascii american standard code interchange 
code represent character 
base_class class base derived_class 
page bit field group contiguous bit take unit 
language feature allow access individual bit 
see complement 
borland version language personal computer develop borland 
high end version borland turbo product 
technique combination asterisk  vertical horizontal rule  typographic character draw box comment order set code 
general purpose computer programming_language develop bell laboratory dennis ritchie 
high level language 
page language base invent bjarne stroustrup 
first call  class   evolve language 
code computer instruction write language 
compiler software translate source_code machine code 
syntax see syntax 
program basis first compiler 
currently compiler  native compiler now exist 
cga color graphic adapter 
common color graphic card ibm pc 
page see storage class 
define operation 
comment programmer note future programmer 
text ignore compiler 
logical complement invert operation 
page continue flow control statement cause next execution loop begin 
variable reach predetermined value  loop terminate 
delimit group element treat unit 
debug process find remove error program 
see derived_class class build top baseass 
page directive command preprocessor oppose statement produce machine code 
number require twice storage type float 
see link list 
ega enhanced graphic adapter 
common graphic card ibm pc 
compiler assign integer member set 
eof end file character define 
represent backslash character 
page exponent underflow condition result float point operation result exponent large negative value fit bit field allot exponent 
fast prototype top programming technique consist write small portion specification implement will still
old style package stdio 
old style package stdio 
old style package stdio 
old style package stdio 
file macro definition stdio declare file variable 
old style package stdio 
system handle large small number 
error cause divide illegal arithmetic operation 
misleading error cause integer float point error 
personal computer  find math coprocessor 
advanced processor float point unit build
old style package stdio 
old style package stdio 
old style package stdio 
old style package stdio 
old style package stdio 
replace delete_operator see malloc 
free software foundation group programmer who create distribute high quality software free 
product editor emac compiler 
address free 
old style package stdio 
old style package stdio 
generic pointer pointer point variable restriction type variable 
pointer storage content 
page ghostscript interpreter freely free software foundation 
header_file see include file 
manipulator function output  input  cause set conversion flag parameter 
ieee float point standard ieee standard  standardize float point format  precision  non numerical value 
operation yield result run system 
inclusive see
page index value  variable  expression select element array 
idea keep possible hide inside module public only absolutely
left shift operation move bit bit field leave specify amount fill vacate position zero 
node consist value pointer next item list 
page logical boolean operation return true argument true 
integer  bit operate separately 
integer  bit operate separately 
machine code machine instruction binary format recognize directly machine translation 
value number sign 
modification program change condition external computer system 
makefile file contain command utility
function now obsolete 
operator function 
page member element class structure 
ms operate system ibm personal computer develop microsoft 
operator heap 
boolean operation yield logical inverse operand 
yield yield 
pointer point valid datum 
object orient design design methodology programmer base design data object class connection
zero zero
page boolean operation yield operand yield zero operand 
pack structure data structure technique bit field only large need  regardless word boundary 
mean argument pass caller call procedure 
insertion occur expansion macro 
picture element 
numeric_value add pointer 
numeric_value subtract pointer 
pointer subtract pointer 
page portable compiler compiler write stephen johnson easy adapt compiler computer architecture 
old style package stdio 
return value function type void 
process express solution problem language represent instruction computer 
page pseudocode coding technique precise description procedure write easy read language construct bother precise attention syntax rule computer language 
class_contain pure virtual_function directly base class 
radix positive integer weight digit place multiply obtain weight next high digit base numbering system 
similar option  file  exist take input file keyboard 
page return_statement statement signal completion function cause control return caller 
file debug tool keystroke type user file future
see replay file 
case fget sscanf combination
old style package stdio 
cause de reference bad pointer 
define operation 
delimit single character 
old style package stdio 
old style package stdio 
cause big program infinite recursion 
inside set curly brace  permanent variable 
set curly brace  file local_variable 
class_member denote variable function instance independent 
see table complete list
old style package stdio 
page stdin predefine input source 
old style package stdio 
old style package stdio 
sunview graphic windowing system sun workstation 
temporary variable variable storage allocate stack 
variable initialize time block define enter 
exist only execution block 
define operation 
page text editor software create alter text file 
turbo version language personal computer develop borland 
unbuffered read write result system call 
unix popular multiuser operating_system first develop ken thompson dennis ritchie bell telephone laboratory 
modification improved performance
value quantity assign constant 
datum represent variable_name time execution assume value 
page version term identify edition software 
customary practice include version number 
whole number major rewrite 
fraction minor rewrite correction problem 
cast  give_value discard 
attribute memory map share memory application  advanced programming 
iterative statement repeat statement long give condition true 
window system graphic windowing system  consortium  currently run computing system 
zero base count system count first object give count zero
page index decrement operator    command line option  negative operator  subtraction operator   unary operator  logical operator   equal operator    quotation mark   quotation mark  include file  string   preprocess operator  diagnostic tag  modulus operator   modulus operator   conversion  conversion  conversion  conversion  ld conversion  lu conversion  conversion  conversion  conversion  conversion  address operator    bitwise operator   reference variable  logical operator   operator  default class_function operator  overloading  parenthese macro parameter  simple operator  dereference operator   multiplication operator   multiply operator   + addition operator   + positive operator  increment operator    + increase operator    comma operator   dot operator  division operator    comment marker  divide operator    construct    scope operator    semicolon  statement  preprocessor directive  operator   left shift operator   number character operator  output operator     shift leave shortcut operator  equal operator   assignment operator  class  equal operator  page equal operator   assignment operator  decrease operator   arrow_operator class_member operator  great operator  arrow_operator structure pointer operator  arrow_operator pointer member operator  great equal operator   great operator  character number operator  input operator    right shift operator   shift right shortcut operator  construct  index operator  escape character  preprocessor directive  character   backspace character  form feed character  newline_character  return character  tab character  exclusive operator   exclusive operator  curly brace   structure  bitwise operator   merge flag  operator  logical operator   bitwise operator   tilde class destructor name  abstract_class   stat  accuracy float point arithmetic  float double datatype  add function complex number  add complex number  element link list  float point number  addition + operator   address operator    address  variable  alignment problem portability  reference variable  operator  logical   operator  binary   operator  argc argv argument  argument  command line  array  index operator  infinite  module example  initializing    multidimensional   parameter  pointer  optimizing  structure  ascii character  assembly language  operator  class  equal operator  statement   placement author  comment auto qualifier  auto variable class  automatic generation member_function  variable  escape character  preprocessor directive  backspace character  bad member_function  page base_class  initializing  search order  binary file  multiple structure  binary  binary operator  subtraction  modulus    logical  multiplication  + addition  division  left shift   right shift   exclusive     merge flag    binary search  debugging  binary tree  node  recursion bit field  bitmappe graphic  bit  operation muliplication shifting  setting  clearing  testing  blank modifier  block  stack boldface comment  borland compiler  makefile bottom programming  branching statement  statement  switch_statement  break command debugger  break_statement   switch_statement   browser  class  byte order portability  byte   pad  conversion  language  binary language  compiler  conversion routine  input output  handle exception programming tool compiler borland   microsoft visual  turbo  unix cc 
time study practical way write program risk generate bug reduce 
work motorola celerity computing  currently special consultant hewlett packard  work research department ink jet division 
colophon animal cover practical programming eastern chipmunk  striped ground squirrel find eastern north america 
eastern chipmunk dark light stripe back  extend head rump  stripe long  bushy tail 
distinguish ground squirrel white stripe eye 
coloration chipmunk north america vary  uniform region 
chipmunk home sparse forest farm  build entrance lodge stone wall  broken tree  thick underbrush 
lodge consist maze tunnel lead large leaf line nest 
chipmunk spend daylight hour outdoors  head lodge nightfall 
excellent climber  chipmunk live primarily ground 
chipmunk eat nut  seed  insect  occasionally bird  egg 
like ground squirrel  large cheek pouch  extend back shoulder  store food 
collect store nut seed summer fall 
weather start cool  chipmunk region will suddenly disappear lodge begin hibernation 
warm winter day see chipmunk pawprint snow  will wake leave lodge brief period temperature rise 
mating season eastern chipmunk mid march early april 
gestation period day  litter bear 
baby chipmunk leave lodge month  mature july 
chipmunk likely name noise sound like loud   occasionally see chipmunk hang upside tree branch  cheep  call 
page edie freedman design cover book  century engraving dover pictorial archive 
cover layout produce quark xpress itc garamond font 
possible  book  durable flexible lay flat binding 
page count exceed repkover limit  perfect binding
inside layout design edie freedman  modification nancy priest  implement framemaker mike sierra 
text head font itc garamond light garamond book 
illustration book create aldus freehand chris reilley michelle willey 
colophon write clairemarie fisher 