location videonote text  public private member  
walter savitch university california  diego contributor kenrick mock university alaska  anchorage boston columbus indianapolis york francisco upper saddle river amsterdam cape town dubai london madrid milan munich paris montreal toronto delhi mexico city s√£o paulo sydney hong kong seoul singapore taipei tokyo editorial director  marcia horton acquisitions editor  matt goldstein program manager  kayla smith tarbox editorial assistant  kelsey loane marketing coordinator  kathryn ferranti production director  erin gregg manage editor  scott disanno senior operation supervisor  vincent scelta operation specialist  linda sager cover designer  joyce wells permissions manager  timothy nicholl image permission manager  karen sanatar media producer  renata butera medium project manager  wanda rockwell full service vendor  hardik popli  cenveo publisher service composition  cenveo publisher services printer binder  courier westford cover printer  lehigh phoenix color hagerstown credit acknowledgment borrow source reproduce  permission  textbook page text 
microsoft windows register trademark microsoft corporation united states america country 
screen shot icon reprint permission microsoft corporation 
book sponsor endorse affiliate microsoft corporation 
copyright      pearson education 
right reserve 
manufacture united states america 
publication protect copyright  permission obtain publisher prior prohibit reproduction  storage retrieval system  transmission form mean  electronic  mechanical  photocopying  recording  likewise 
obtain material work  submit write request pearson education   permission department  boylston street  suite  boston  massachusetts 
designation manufacturer seller distinguish product claim trademark 
designation book  publisher aware trademark claim  designation print initial cap cap 
library congress catalog publication datum savitch  walter  solve walter savitch  contributor  kenrick mock 
computer program language 
isbn  isbn  preface book mean first course programming computer science language 
assume previous programming experience mathematic high school algebra 
previous edition book  read follow section explain change ninth edition skip rest preface 
book  rest preface will give overview book 
change ninth edition ninth edition present programming philosophy eighth edition 
material eighth edition remain  follow enhancement  end program now split program project 
program require direct application concept present solution short 
program laboratory exercise 
project require additional problem solve solution generally long program 
project homework problem 
example content include type  auto type  raw string literal  strong enumeration  nullptr  range loop  conversion string integer  member initializer  constructor delegation 
walk student process problem solve code help reinforce key programming concept 
icon margin book videonote topic cover text 
instructor eighth edition  continue teach course change 
flexibility topic order book write allow instructor wide latitude reorder material 
illustrate flexibility  suggest alternative way order
preface topic 
loss continuity book read way 
ensure continuity rearrange material  need move section entire
only large section convenient location move 
help customize order class need  end preface contain dependency chart  prerequisite  section explain material need cover section
reorder  early class effectively design class  student need basic tool control structure function definition 
basic material cover 
complete  student begin write class 
possible reordering allow early coverage class follow  basic       
material cover control structure  function definition  basic file
 cover additional control structure  defer wish cover class early possible 
class namespace   section  
material cover defining class  friend  overload_operator  namespace 
array  string vector  pointer dynamic array  array class  section inheritance  recursion  alternately  recursion move later pointer link list  subset follow exception_handling  template  standard template library  reordering  class slightly later still early version cover control structure basic material array class  class cover later previous ordering slightly early default ordering 
material cover control structure  function definition  basic file
preface array string   section class namespace   section  
material cover defining class  friend  overload_operator  namespace 
pointer dynamic array  array class  section inheritance  recursion  
clear correct read instructor experienced programmer 
material need present way accessible begin student 
introductory textbook  endeavor write way student find clear friendly 
report student who early edition book confirm style material clear enjoyable student 
ansi iso standard edition fully compatible compiler meet late ansi iso standard 
time write late standard 
advanced topic advanced topic  part standard course 
part course  text enrichment material 
book offer number advanced topic integrate course leave enrichment topic 
give coverage template  inheritance include virtual_function  exception_handling  stl standard template library 
book library teach student importance library  require nonstandard library 
book only library essentially implementation 
preface dependency chart dependency chart next page show possible ordering subsection 
line join box mean upper box cover low box 
ordering consistent partial ordering read loss continuity 
box contain section number number  box refer only section entire
summary box major point summarize boxed section 
box section spread
self test exercise contain numerous self test exercise strategic point 
complete answer self test exercise give end
videonote videonote videonote design teach student key programming concept technique 
short step step video demonstrate solve design coding 
videonote self pace easy navigation include ability select  play  rewind  fast forward  videonote exercise 
online practice assessment myprogramminglab myprogramminglab help student fully grasp logic  semantic  syntax programming 
practice exercise personalize feedback  myprogramminglab improve programming competence begin student who struggle basic concept paradigm popular high level programming_language 
self study homework tool  myprogramminglab course consist hundred small practice problem organize structure textbook 
student  system automatically detect error logic syntax code submission offer target hint enable student figure wrong
instructor  comprehensive gradebook track correct incorrect answer store code inputte student review 
myprogramminglab offer user book partnership turing craft  maker codelab interactive programming exercise system 
full demonstration  see feedback instructor student  start myprogramminglab course  visit 
preface display dependency chart introduction basic function function flow control array streams recursion class multidimensional array class string vector exception_handle separate namespace class arrays pointer dynamic array class dynamic arrays pointer link list inheritance template contain occasional reference derived_class  reference omit stl ix 
preface support material support material user book additional material only qualified instructor 
material user book source_code book powerpoint slide videonote access material  savitch resource qualified instructor only visit pearson education instructor resource center irc access follow instructor resource  instructor resource guide include teach hint  quiz question solution  solution programming project test bank test generator powerpoint lecture include program art text lab manual integrate development environment ide resource kit instructor who adopt text order student kit contain popular ide microsoft visual studio express edition  dev  netbean  eclipse  codelite access web site contain write video tutorial start ide 
order contact campus pearson education representative 
contact comment  suggestion  question  correction welcome 
mail acknowledgment numerous individual group suggestion  discussion  help prepare textbook 
first edition book write visit computer science department university colorado boulder 
remainder writing first edition work subsequent edition computer science engineering department university california  diego ucsd 
grateful institution conducive environment teach material write book 
preface extend special thank individual who contribute critique programming project early edition draft book 
alphabetical order  alex feldman  amber settle  andrew burt  andrew haas  anne marchant  barney maccabe  bob holloway  bob matthews  brian
king  bruce johnston  carol roberts  charles dowling  claire bono  cynthia martincic  david feinstein  david teague  dennis heckman  donald needham  doug cosman  dung nguyen  edward carr  eitan
gurari  ethan munson  firooz khosraviyani  frank moore  gilliean lee  huzefa kagdi  james stepleton  jeff roach  jeffrey watson  jennifer perkin  jerry weltman  joe faletti  joel cohen  john
westman  john marsaglia  john russo  joseph allen  joseph
oldham  jerrold grossman  jesse morehouse  karla chaveau  ken rockwood  larry johnson  len garrett  linda
wilson  mal gunasekera  marianne lepp  matt johnson  michael keenan  michael michal sramka  naomi shapiro  nat martin  noah aydin  nisar hundewale  paul
kaiser  paul kube  paulo franca  richard borie  scot drysdale  scott strong  sheila foster  steve mahaney  susanne sherba  thomas judson  walter
manrique  wei lian chen  wojciech komornicki 
extend special thank instructor who early edition book 
comment helpful reviewing book receive 
finally  thank kenrick mock who implement change edition 
impossible task editor  sensibility  superb job
walter savitch xi 
improve result programming power practice personalized feedback  myprogramminglab improve performance 
learn brief content table location videonote inside front cover inside back cover introduction computer programming 
stream introduction object class 
pointer dynamic array define class friend  overload_operator  array class xiv 
brief content separate compilation namespace pointer link list recursion inheritance exception_handle template standard template library appendix keyword 
content table location videonote inside front cover inside back cover computer programming 
content summary answer self test exercise practice program programming project 
content global constant global_variable call value formal parameter local_variable block scope namespace revisit 
content summary answer self test exercise practice program programming project 
content summary answer self test exercise practice program programming project 
efficiency issue summary answer self test exercise practice program programming project 
content copy_constructor overload assignment_operator summary answer self test exercise practice program programming project 
content pointer iterator insert remove node inside list pitfall  assignment_operator dynamic data_structure variation link list link list class stack queue stack programming example  stack queue programming example  queue class summary answer self test exercise practice program programming project 
standard template library iterator declaration 
content programming tip  auto simplify variable declaration pitfall  compiler problem kind iterator constant mutable iterator reverse iterator kind iterator 
soon analytical engine exist  will necessarily guide future course science 
introduction basic component computer  basic technique design write program 
show sample program work 
collection program computer refer software computer 
actual physical machine computer installation refer hardware 
will see  hardware computer conceptually simple 
computer now come large array software task programming 
software include editor  translator  manager sort 
result environment complicated powerful system 
book exclusively software  brief overview hardware organize will useful 
hardware class computer  pcs  workstation  mainframe 
pc personal computer small computer design person time 
home computer pcs  pcs widely business  industry  science 
workstation essentially pc 
mainframe large computer typically require support staff generally share user 
distinction pcs  workstation  mainframe precise  term commonly convey general computer 
network consist number computer connect share resource printer share
network contain number workstation mainframe  share device printer 
purpose learn programming  will matter work pc  mainframe  workstation 
basic configuration computer  will view type computer 
computer think component  input  output  processor call cpu  central processing unit  memory  secondary memory 
processor  memory  secondary memory normally house single cabinet 
processor memory form heart computer think integrate unit 
component connect memory operate direction processor 
arrow display direction flow 
input device device allow person communicate computer 
primary input device likely keyboard mouse 
output device allow computer communicate
common output device display screen  refer monitor 
output device 
example  addition monitor  computer connect printer produce output paper 
keyboard monitor think single unit call terminal 
display component computer 
introduction computer programming order store input equivalent scratch paper perform calculation  computer memory 
program computer execute store memory 
computer form memory  call memory secondary memory 
program execute keep memory  memory name imply  important memory 
memory consist long list numbered location call memory location  number memory location vary computer range thousand million  billion 
memory location contain string 
content location change 
think memory location tiny blackboard computer write erase 
computer  memory location contain number zero digit 
digit assume only value call binary digit bit 
memory location computer contain bit multiple bit 
eightbit portion memory call byte  refer numbered memory location byte 
rephrase situation  think computer memory long list numbered memory location call byte 
number identify byte call address 
datum item  number letter  store byte  address byte find datum item need 
case  entire chunk memory hold datum item still call memory location 
address first byte memory location address large memory location 
practical matter  think computer memory long list memory location vary size 
size location express byte address first byte address name memory location 
display show picture hypothetical computer memory 
size memory location fix  change run computer 
byte address memory divide numbered location call byte 
number associate byte call address 
group consecutive bytes location datum item  number letter 
address first byte group address large memory location 
computer memory represent need great program computer system display memory location byte byte byte byte byte byte byte byte byte byte byte location address byte location address byte location address byte location address programming_language 
point will soon start write program 
computer need interpret string number  letter  instruction  type
computer perform interpretation automatically accord code scheme 
code type item store computer memory  code letter  whole number  fraction  instruction 
example  commonly set code  code letter number 
order know string location stand computer keep track code currently location 
fortunately  programmer seldom need code safely reason location actually contain letter  number  desire 
byte memory location hold bit 
reason special 
first  power 
second  turn bit byte require code single character letter keyboard symbol 
introduction computer program memory discuss now memory 
memory  computer
memory only computer actually follow instruction
computer form memory call secondary memory secondary storage 
alternative term commonly refer secondary memory auxiliary memory  auxiliary storage  external memory  external storage 
secondary storage keep unit call file  large small like 
example  store file secondary storage copy memory run 
store letter  inventory list  unit file 
kind secondary memory attach single computer 
common form secondary memory hard disk  diskette  cds  dvds  removable flash memory drive 
cd dvds computer read only computer read  change  datum disc  cd dvds computer write  datum change computer 
hard disk fix place normally remove disk drive 
diskette cd easily remove disk drive carry computer 
diskette cd advantage inexpensive portable  hard disk hold datum operate fast 
flash drive largely replace diskette today store datum type memory call flash memory 
memory  flash memory require power maintain store device 
form secondary memory list cover form likely encounter 
memory refer ram random access memory 
call random access computer access datum memory location 
secondary memory require sequential access  memory location find item need 
processor know central processing unit  cpu brain  computer 
computer advertise  computer company tell chip contain 
chip processor 
processor follow instruction program perform calculation specify program 
processor simple brain 
follow set simple instruction programmer 
typical processor instruction like  interpret number  add number memory location number memory location  computer system put answer location   read letter input  convert code string  place memory location  processor add  subtract  multiply  divide move memory location
interpret string letter letter output device 
processor primitive ability rearrange order instruction 
processor instruction vary computer
processor modern computer hundred instruction 
instruction typically simple just
software normally talk directly computer  communicate operating_system 
operating_system allocate computer resource task computer accomplish 
operating_system actually program  think chief servant 
charge servant program  deliver request
want run program  tell operating_system name file contain operating_system run program 
want edit file  tell operating_system name file start editor work file 
user  operating_system computer 
user see computer operating_system 
name common operating_system unix  linux  window  mac os  io  android 
program set instruction computer follow 
show display  input computer think consist part  program datum 
computer follow instruction program way perform process 
data conceptualize input program 
example  program add number  number datum 
word  data input program  program datum input computer operating_system 
give computer display simple view run program program datum 
introduction computer programming program follow datum program  run program data  computer execute program datum 
word datum general meaning just give
general sense  mean computer 
word commonly narrow sense general sense 
high level language language write program 
text will discuss programming_language write program 
high level language  programming_language likely hear  java  python  php  pascal  visual basic  fortran  cobol  lisp  scheme  ada 
high level language resemble human language way 
design easy human being write program easy human being read 
high level language   contain instruction complicated simple instruction computer processor cpu capable follow 
kind language computer understand call lowlevel language 
exact detail low level language differ kind computer
typical low level instruction following  add instruction mean  add number memory location call number memory location call place result memory location call  sample instruction write call assembly language 
assembly language language understand computer  undergo simple translation computer understand
order computer follow assembly language instruction  word need translate string 
example  word add translate  translate   
version instruction computer ultimately follow assembly language instruction translation differ machine machine 
program write form write machine language  version program computer machine actually read follow 
assembly language machine language distinction will important
important distinction computer system machine language high level language like  high level language program translate machine language computer understand follow program 
compiler program translate high level language like machine language call compiler 
compiler peculiar sort program  input data program  output program 
avoid confusion  input program call source program source_code  translate version produce compiler call object program object code 
word code frequently mean program part program  usage common refer object program 
now  suppose want run program write 
order computer follow instruction  proceed follow 
first  run compiler program datum 
notice case  program treat set instruction 
compiler  program just long string character 
output will long string character  machine language equivalent program 
next  run machine language program normally think datum program 
output will normally conceptualize output program 
basic process easy visualize computer diagram display 
reality  entire process accomplish computer time 
compiler compiler program translate high level language program  program  machine language program computer directly understand execute 
complete process translate run program bit complicated show display 
program program
item program like input output routine compile object code wait combine program object code produce complete machine language program run computer 
program  call linker  combine object code program piece object code compiler produce 
introduction computer programming program 
interaction compiler linker diagram display 
routine case  system will link automatically 
need worry link case 
link object code program combine object code routine input output routine program
process combine object code call link program_call linker 
simple program  link automatically 
program datum program compiler 
computer output program computer system display prepare program run program compiler 
component computer 
datum program add number 
datum program assign letter grade student class 
difference machine language program highlevel language program 
role compiler 
source program 
object program 
operate system 
purpose operating_system serve 
introduction computer programming 
name operating_system run computer prepare program course 
find link automatically compiler course 
know order perform 
follow analysis  power anticipate analytical relation truth 
province assist acquaint
history note babbage  ada augusta first truly programmable computer design charles babbage  english mathematician physical scientist 
babbage begin project work rest life 
complete construction machine  design conceptual milestone history computing 
know charles babbage computer design come writing colleague ada augusta  countess lovelace daughter poet byron 
ada augusta frequently give title first computer programmer 
comment  quote opening section  still apply process solve problem computer 
computer magic least ability formulate sophisticated solution problem encounter 
computer simply programmer order
solution problem carry computer  solution formulate programmer 
discussion computer programming begin discussion programmer formulate solution 
section general principle design write program 
apply matter programming_language
algorithm learn first programming_language  easy impression hard part solve problem computer translate idea specific language will feed computer 
definitely case 
difficult part solve problem computer discover method solution 
come method solution  routine translate method required language  programming_language 
helpful temporarily ignore programming_language concentrate formulate step solution write plain english  instruction give human being computer 
sequence instruction express way frequently refer algorithm 
sequence precise instruction lead solution call algorithm 
approximately equivalent word recipe  method  programming problem solve charles babbage model babbage computer ada augusta  countess lovelace first computer programmer direction  procedure  routine 
instruction express programming_language human language 
algorithm will express english programming_language 
computer program simply algorithm express language computer understand 
term algorithm general term program 
sequence instruction algorithm  mean instruction express english  express programming_language specific term program 
example help clarify concept 
display contain algorithm express english 
algorithm determine number time specified name occur list name 
list contain winner last season football game name favorite team  algorithm determine game team win 
algorithm short simple typical algorithm will deal 
introduction computer programming display algorithm algorithm determine time name occur list name  
list name 
name check 
set counter zero 
following name list  compare name list name check  name add counter 
announce answer number counter 
instruction number sample algorithm mean carry order list 
specify  will assume instruction algorithm carry order give write 
interesting algorithm specify change order  repeating instruction instruction sample algorithm 
word algorithm long history 
derive name alkhowarizmi  ninth century persian mathematician astronomer 
write famous textbook manipulation number equation 
book entitle kitab al jabr  translate rule reunite reduce 
similar sound word algebra derive arabic word al jabr  title book translate reunite restore 
meaning word algebra algorithm intimately today 
modern time  word algorithm refer only algebraic rule solve numerical equation 
today  word algorithm apply wide variety kind instruction manipulate symbolic numeric datum 
property qualify set instruction algorithm now determine nature instruction manipulate instruction 
qualify algorithm  set instruction completely unambiguously specify step take order take 
person machine carry algorithm exactly algorithm
algorithm algorithm sequence precise instruction lead solution 
complete set rule  algorithm tell write program 
program design creative process 
still  outline plan follow 
outline give diagrammatic form display 
entire program design process divide phase  problem solve phase implementation phase 
result problem solve phase algorithm  express english  solve problem 
produce program programming_language  algorithm translate programming_language 
produce final program algorithm call implementation phase 
first step task want program completely precisely specify 
take step lightly 
know exactly want output program  surprised program produce 
know input program_will exactly suppose output  form
example  program bank accounting program  know only interest rate interest compound annually  monthly  daily 
program suppose write poetry  need determine poem free verse iambic pentameter meter 
novice programmer understand need design algorithm write program programming_language   try short circuit process omit problemsolving phase entirely  reduce just problem definition part 
mark  time 
answer time 
experience show phase process will_produce correctly work program fast 
phase process simplify algorithm design phase isolate detailed rule programming_language 
result algorithm design process intricate prone error 
modest size program  represent difference half day careful work frustrating day look mistake poorly understand program 
implementation phase trivial step 
detail concerned occasionally detail subtle  simple first think 
once familiar programming_language  translation algorithm english programming_language routine task 
display  testing take place phase 
program write  algorithm test  algorithm find deficient  algorithm redesign 
desktop testing perform mentally algorithm execute step
introduction computer programming display program design process problem solve phase start implementation phase problem definition algorithm design translate desktop testing testing working program large algorithm will require pencil paper 
program test compile run sample input datum 
compiler_will give error_message kind error 
find type error  check see output correct 
process diagram display idealize picture program design process 
basic picture mind  reality complicated 
reality  mistake deficiency discover unexpected time  back redo early step 
example  show display  test algorithm reveal definition problem incomplete 
case back reformulate definition 
occasionally  deficiency definition algorithm observe program test 
case back modify problem definition algorithm follow design process 
object orient programming program design process outline previous section represent program algorithm set instruction manipulate datum 
correct view  productive view 
modern program design method know objectoriented programming  oop 
oop  program view collection programming problem solving interact object 
methodology easy understand program simulation program 
example  program simulate highway interchange  object represent automobile lane highway 
object algorithm behave situation 
programming oop style consist design object algorithm
program oop framework  term algorithm design display replace phrase design object algorithm 
characteristic oop encapsulation  inheritance  polymorphism 
encapsulation form hiding abstraction 
description correct  easierto understand characterization encapsulation form simplification description object 
inheritance write reusable program code 
polymorphism refer way single name multiple meaning context inheritance 
statement  admit hold little meaning reader who hear oop
will term detail later book 
accommodate oop class  kind data_type combine datum algorithm 
software life cycle designer large software system  compiler operating_system  divide software development process phase collectively know software life cycle 
phase life cycle 
maintenance evolution system 
obsolescence mention last phase discussion design take place finish put service 
keep mind 
will able add improvement correction design easy read easy change 
design program easily modify important topic will discuss detail develop bit background programming technique 
meaning obsolescence obvious  easy accept 
work fix reasonable amount effort  discard replace completely
introduction computer programming se es exe cise 
algorithm approximately recipe  kind step allow recipe allow algorithm 
step follow recipe allow algorithm 
place teaspoon sugar mix bowl 
add egg mix bowl 
add cup milk mix bowl 
add ounce rum  drive 
add vanilla extract taste 
beat smooth 
pour pretty glass 
sprinkle nutmeg 
first step take create
design process divide phase 
section introduce programming_language  programming_language book 
origin language first people notice language unusual name 
programming_language name
answer question
general thrust question mark 
programming_language  derive language call language call bcpl 
language derive language  derive language 
plus name 
will see next operation language  produce nice pun 
language bcpl
early version programming_language 
will start description programming_language description language 
programming_language develop dennis ritchie bell laboratory 
first write maintain introduction unix operating_system 
want maintain unix system  need c
unix fit soon just system program  commercial program run unix write language 
popular version language write popular operating_system  limit computer unix 
popularity  shortcoming 
language peculiar high level language feature low level language 
extreme high level language low level language  lie strength weakness 
like low level assembly language  language program directly manipulate computer memory 
hand  feature high level language  easy read write assembly language 
excellent choice write system program  program sense system program  easy understand language  automatic check high level language 
overcome shortcoming bjarne stroustrup bell laboratory develop early 
stroustrup design c
subset  program program 
language continue evolve 
major add 
version refer 
minor expect major 
sample program display contain simple screen display generate user run interact
person who run call user 
output run show sample dialogue 
text type user show color distinguish text output
actual screen text look alike 
source_code show line 
line number show only reference 
type line number enter
keyword predefined meaning show color 
keyword discuss 
person who write call programmer 
confuse role user programmer 
user programmer person 
example  write run programmer user 
professionally produce program  programmer programmer user person 
introduction computer programming display sample program 
sample dialogue press return enter number 
enter number pod  enter number pea pod  pea pod pea pod  pea pod 
next will explain detail need write program like display  give feel program work  will now brief description program work 
detail bit unclear  worry 
section just want give feel program
beginning end sample program contain detail need
program begin follow line  
will briefly line  start follow line  int    line call variable declaration 
variable declaration tell computer   will name variable 
variable will explain precisely next easy understand program 
program variable name number 
word start line  int  abbreviation word integer tell computer number name variable will integer 
integer whole number  like        forth 
remain line instruction tell computer
instruction call statement executable statement 
program statement fit exactly line 
need true  simple program  statement list line 
statement begin word cin
statement input statement output statement 
word cin  pronounce  see  input 
statement begin cin tell computer enter keyboard 
word  pronounce  see  output  program terminal screen 
letter language 
arrow  write  tell direction data move 
arrow   call  insert  extract   put 
example  line   press return enter   line read   put   simply  output    
think word name screen output device  arrow tell computer string quote screen 
show sample dialogue  cause 
introduction computer programming text contain quote write screen 
end quote string tell computer start write text 
similarly  next program begin program cause follow text write screen  enter number pod  next program start word cin  input statement 
let look cin  read   cin  simply  input  
think word cin stand keyboard input device  arrow input keyboard variable 
look sample dialogue 
next show write bold 
bold type keyboard 
type number  screen 
press return key call enter key  program 
statement begin cin tell computer input value variable 
point value  see later program  think stand number 
next program line   enter number pea   cin  line similar previous line 
first message screen ask number 
type number keyboard press return key  number value variable peas 
sample dialogue  assume type number 
type press return key  value variable pea 
next nonblank program  show computation simple program   asterisk symbol   multiplication 
statement multiply 
case  multiply give result 
equal sign variable equal result 
special equal sign  meaning here mathematical context 
give variable left hand side possibly  case
just output statement work basically previous statement begin
only second statement  output variable 
variable output  variable output 
statement cause output 
begin special instruction output 
rest program contain understand discuss able understand rest program 
pitfall wrong slash statement sure backslash  write
mistake  compiler_will give error_message 
program_will run  output will look peculiar 
point direction datum move 
example  statement  cin  statement  data move keyboard variable number 
hand  output statement   statement datum move variable screen  arrow point variable
introduction computer programming layout simple program general form simple program show display 
compiler break space need show example 
compiler_will accept reasonable pattern break indentation 
compiler_will accept unreasonable pattern break indentation 
program lay easy read 
place opening brace   place closing brace   will punctuation easy find 
indent statement place statement separate easy see program instruction
later statement will long fit will slight variant pattern indent break 
follow pattern set example book  follow pattern specify instructor class 
display  variable declaration begin word int 
will see next need place variable declaration beginning program  default location
reason place place start program show display sample program display 
statement instruction follow computer 
display  statement line begin cin begin follow equal sign 
statement call executable statement 
will term statement executable statement interchangeably 
notice statement see end semicolon 
semicolon statement way period english sentence  mark end statement 
display layout simple program 
now view first line funny way beginning  explain bit detail 
first iostream call directive 
tell compiler find item program 
case iostream name library contain definition routine handle input keyboard output screen  iostream file contain basic library 
linker program discuss early combine object code library iostream object code program write 
library iostream will happen automatically system 
will eventually library will name directive start program 
library  need just place directive program  order library program  will need least place directive library program 
directive begin symbol 
compiler require directive space  safe place start line space word 
follow line explain directive just explain  namespace std  line name define iostream interpret standard way  std abbreviation standard 
will line bit later book 
third fourth nonblank line  show next  simply part program start here  correct term function  part  reason subtlety will 
brace mark beginning end part program 
need line way easy find will place line
next last line return  end program  line need last program  simple program sense place
compiler_will allow omit line will figure program end statement 
introduction computer programming execute 
compiler_will insist line  habit include compiler happy
line call return_statement executable statement tell computer specifically  tell computer end program 
number intuitive significance meaning will clear learn 
note return_statement end program  still add closing brace   end part program 
pitfall put space file name extra space iostream file name display end file name closing 
compiler directive smart  will search file name start end space 
file name will find  produce error difficult locate 
error deliberately small program  compile
message compiler produce know error_message mean next time error_message 
program run 
write program text editor way write document term paper  love letter  shopping list 
program keep file just_like document prepare text editor 
text editor  detail will vary text editor 
consult documentation editor 
way compile run program depend system will discuss point only general way 
need learn give command compile  link  run program system 
command find manual system ask people who system 
give command compile program  will_produce machine language translation program 
translate version call object code program 
object code link combine object code routine input output routine write
likely linking will automatically  need worry link 
system  require separate call linker 
consult manual local expert 
finally  give command run program  give introduction command depend system check manual local expert 
pitfall compile program know recent version standard programming 
approve august  international organization standardization 
compiler able compile run program write old version 
version include feature compatible old compiler 
mean old compiler able compile run program 
need specify compile standard 
example  require compiler flag add command line  compiler_will assume program write old standard 
command line compile program name look like  check documentation compiler determine special step need compile program determine feature support 
obtain copy program display 
download internet 
type line number 
compile program 
error_message  check typing  fix type mistake  recompile file 
once program compile error_message  try run program 
program compile run normally  set 
need example show book 
program compile run normally  read
follow offer hint deal setup 
once simple program run normally  will know small change program file order run system 
program run  see output line testing   likelihood  program give output  disappear see
try add following end program  just line return  line program allow read output 
introduction computer programming display 
program compile run try change iostream 
program require iostream 
program still compile run normally  try delete namespace  program still compile run  check documentation version see directive  need console  input output 
course course computer  check documentation compiler check friend who similar computer setup 
change undoubtedly small once find easy 
se st exer cise 
follow statement program  cause write screen 
wrong follow directive 
lewis carroll  look glass mistake program call bug  process eliminate bug call debug 
colorful history term come
occur early day computer  computer hardware 
introduction computer programming extremely sensitive occupy entire room 
rear admiral grace murray hopper third programmer world first largescale digital  denise
gurer   pioneer woman computer science  cacm  january hopper work harvard mark computer command harvard professor howard
aiken  unfortunate moth cause relay
hopper programmer tape deceased moth logbook note  first actual case bug  logbook currently display naval museum dahlgren  virginia 
first document computer bug 
professor aiken come facility slack time inquire number compute 
programmer reply debug computer 
admiral hopper person computing  see robert slater  portrait silicon mit press  
today  bug mistake program 
section kind programming mistake give hint correct
kind program error compiler_will catch kind mistake will write error_message find mistake 
will detect call syntax_error  large  violation syntax grammar rule programming_language  omit semicolon 
compiler discover program contain syntax_error  will tell error likely kind error likely
compiler program contain syntax_error  confident
compiler incorrect location nature error 
job determine location error  line determine source error 
compiler guess mean write easily guess wrong 
compiler read mind 
error message subsequent first high likelihood incorrect location nature error 
compiler guess meaning 
compiler first guess incorrect  will affect analysis future mistake  analysis will base false assumption 
program contain direct violation syntax rule programming_language  compiler_will give error_message 
compiler_will give only warning message  technically speak  violation programming_language syntax rule  unusual likely mistake 
warning message  compiler  sure mean  stage development  treat warning error instructor approve ignore warning 
appropriately call run time error 
computer system will detect run time error output error_message 
run time error numeric calculation 
example  computer attempt divide number zero  normally run time error 
compiler approve program program run once run time error_message  guarantee program correct 
remember  compiler_will only tell write syntactically grammatically correct program 
will tell program want
mistake underlie algorithm translate algorithm language call logic error 
example  mistakenly addition sign + multiplication sign display  logic error 
compile run normally give wrong answer 
compiler approve runtime error perform properly  undoubtedly contain logic error 
logic error hard kind diagnose  computer give error_message help find error 
reasonably expect give error_message 
computer know  mean write 
pitfall assume program correct order test logic error  run representative data set check performance input 
pass test  confidence still absolute guarantee correct 
still want run datum 
only way justify confidence carefully avoid error 
kind error 
kind error discover compiler 
omit punctuation symbol semicolon error produce 
kind error 
omit final brace produce error 
kind error 
introduction computer programming suppose situation compiler report warning 
give text answer local answer text 
identify answer text base local rule 
kind error
summary collection program computer refer software computer 
actual physical machine computer installation refer hardware 
memory only run 
secondary memory hold datum will stay computer run 
number associate byte call address byte 
byte group form large memory location 
case  address first byte address large memory location 
digit only zero call bit 
algorithm write english programming_language  like 
word algorithm mean sequence instruction write english human language  spanish arabic 
computer will tell error first category 
discover logic error
answer self test exercise individual instruction call statement 
answer lf test exer cis 
component computer input  output  processor cpu  memory  secondary memory 
number add 
grade student test assignment 
machine language low level language consist computer directly execute 
high level language write english like format translate compiler machinelanguage computer directly understand execute 
compiler translate high level language machine language 
high level language input compiler call source 
translate machine language output compiler call object 
operate system cooperate program  think user chief servant 
operate system purpose allocate computer resource task computer accomplish 
possibility macintosh operating_system mac os  window  vms  solaris  suno  unix unix like operating_system linux 
object code program combine object code routine input output routine program
process combine object code call link 
simple program  linking automatically 
introduction computer programming 
answer vary  depend compiler
unix unix like compiler link automatically  compiler integrate development environment window macintosh operating_system 
follow instruction vague algorithm  add vanilla extract taste 
beat smooth 
pour pretty glass 
sprinkle nutmeg 
notion taste    smooth   pretty  precise 
instruction  sprinkle  vague  specify nutmeg sprinkle 
instruction reasonable algorithm 
first step take create program task accomplish program completely precisely specify 
problem solve phase implementation phase 
easy understand 
symbol tell computer start output next item output will next 
statement tell computer read next number type keyboard number variable_name 
statement multiply number variable number  place result variable_name 
include iostream directive tell compiler fetch file extraction operator input output 
enable correct linking object code iostream library statement program 
practice program 
kind program error syntax_error  run time error  logic error 
compiler detect syntax_error 
error technically syntax_error lump syntax_error 
will learn later 
text state take warning report error 
ask instructor local rule handle warning 
logic error 
practice program practice program generally solve short program directly apply programming principle present
text editor  enter type program show display 
type first exactly show display 
sure first begin left hand end space symbol 
compile run program 
compiler give error_message  correct program recompile program 
compiler give error_message 
run program 
modify program enter practice program 
change program first write word hello screen program display
will only add program happen 
recompile change program run
change program
add will program write word bye screen end program 
add symbol last output statement read follow     system require final  system recompile run change program 
modify program modify practice program 
change multiplication sign program division sign
recompile change program 
run program 
enter input number pea  notice run time error_message due division zero 
introduction computer programming 
modify program enter practice program 
change multiplication sign program addition sign + 
recompile run change program 
notice program compile run perfectly fine  output incorrect 
modification logic error 
modify program enter practice program 
version calculate total length fence need enclose rectangular area width foot long height foot tall 
program variable width height value enter user 
create variable  totallength  store total length fence need program calculate 
output total message 
videonote solution practice program 
purpose exercise produce catalog typical syntax_error error_message will encounter beginner continue acquaint programming environment 
exercise leave knowledge error look give number common error_message 
program previous practice program 
keep catalog error add program error message continue course 
sequence suggest error introduce
put extra space iostream file name 
omit symbol include directive 
omit int int 
omit misspell word
omit  omit 
omit statement  leave end curly brace 
programming project programming project require problem solve practice program solve way 
visit complete programming project online instant feedback 
write program read integer output sum product 
way proceed start program programming project display modify program produce program project 
type first line program exactly first line display 
sure first line begin left hand end line space symbol 
add symbol last output statement program 
example  last output statement following   end   system require final  system 
write program print  large block letter inside border follow blank line message computer science cool stuff 
output look follow  
oo computer science cool 
write program allow user enter number quarter  dime  nickel output monetary value coin cent 
example  user enter number quarter  number dime  number nickel  program output coin worth cent 
write program allow user enter time second output object drop freefall length time 
assume object start rest  friction resistance air  constant acceleration foot second due gravity 
equation  acceleration time first compute product divide result reason will discuss later book 
videonote solution programming project introduction computer programming 
write program input character keyboard output large block letter  compose character 
example  user input character   output look follow  basic variable assignment variable name  identifier variable declaration assignment statement pitfall  uninitialize variable programming tip  meaningful name type char type bool introduction class type compatibility arithmetic_operator expression pitfall  whole number division assignment statement input output output include directive namespace escape sequence programming tip  end program endl format number decimal_point input cin designing input output programming tip  line break simple flow control simple branching mechanism  string inequality  place compound statement simple loop mechanism increment decrement operator programming example  charge card balance  infinite loop data_type expression type_int double number type type summary answer self test exercise program style indent comment naming constant practice program programming project imagine know computer terminal
computer terminal clunky old television typewriter front
interface mind body connect universe move bit
introduction explain additional sample program present detail language allow write simple program 
prerequisite give brief description sample program 
dijkstra  note structured programming program manipulate datum number letter 
common programming_language programming construct know variable name store datum 
variable heart programming_language like  start description 
will program display discussion will explain item program 
general idea program clear  detail will require explanation 
variable variable hold number data type 
moment  will confine attention variable hold only number 
variable like small blackboard number write 
just number write blackboard change  number hold variable change 
blackboard possibly contain number variable guarantee value only garbage number leave computer memory previously run program 
number type datum hold variable assignment variable call value  value variable item write figurative blackboard 
program display    variable 
example  program run input show sample dialogue  value set equal number statement cin  later  value variable change second copy statement execute 
will discuss exactly happen little later
course  variable blackboard 
programming_language  variable implement memory location 
compiler assign memory location kind discuss variable_name program 
value variable  code form consist  keep memory location assign variable 
example  variable program show display assign memory location address   
exact number will depend computer  compiler  number factor 
know  care  address compiler_will choose variable program 
think memory location actually label variable_name 
sample dialogue enter number candy bar package weight ounce candy bar 
press return 
try brand 
enter number candy bar package weight ounce candy bar 
press return 
apple healthy 
name  identifier first notice name variable sample program long name normally variable mathematic class 
program easy understand  meaningful name variable 
name variable item define program call identifier 
program compile run  read section tip deal variation compiler environment 
identifi start letter underscore symbol  rest character letter  digit  underscore symbol 
example  follow valid identifier  abc sum rate count previously mention name legal accept compiler  first poor choice identifier  descriptive identifier
follow legal identifier reject compiler  change first allow start letter underscore 
remain identifier contain symbol letter  digit  underscore symbol 
case sensitive language  distinguish uppercase lowercase letter spelling identifier 
follow distinct identifier name distinct variable  rate rate rate idea variant program  confusing 
require  variable spell lowercase letter 
predefine identifier  cin   forth  spell lowercase letter 
will see identifier spell uppercase letter later
identifi length  compiler_will ignore character specify typically large number initial character 
identifier identifier name variable item program 
identifi start letter underscore symbol  remain character letter  digit  underscore symbol 
basic special class identifier  call keyword reserved word  predefined meaning name variable
book  keyword write type font like int  double 
wonder word define part language list keyword 
word like cin answer allow redefine word  confuse
predefine word keyword  define library require language standard 
will discuss library later book 
now  need worry library 
needless predefine identifier standard meaning confusing dangerous  avoid 
safe easy practice treat predefine identifier keyword 
variable declaration variable program declare 
declare variable tell compiler ultimately  computer kind datum will store variable 
example  follow declaration program display declare variable program  int  double   variable declaration  variable separate comma 
note declaration end semicolon 
word int first declaration abbreviation word integer 
write entire word line declare identifi variable type_int 
mean value whole number       
word double second line declare identifier variable type double 
variable type double hold number fractional part  
kind datum hold variable call type name type  int double  call type_name 
variable program declare variable
natural place declare variable  just start part program right line 
syntax variable declaration follow  syntax type_name    
variable declaration compiler need order implement variable 
recall compiler implement variable memory location value variable store memory location assign variable 
value code string 
type variable require size memory location method code value string 
computer code encode integer string 
code encode number fractional part 
code encode letter string 
variable declaration tell compiler ultimately  computer size memory location variable code represent variable value string 
syntax set grammar rule language 
example  talk syntax variable declaration box label  variable declaration   talk rule write wellformed variable declaration 
follow syntax rule  compiler_will accept program 
course  only guarantee write legal 
guarantee program_will guarantee program_will want
assignment statement direct way change value variable assignment statement 
assignment statement order computer  set 
assignment statement end semicolon 
expression right hand side equal sign variable  number  complicated expression variable  number  arithmetic_operator 
assignment statement instruct computer evaluate compute value expression right hand side equal sign set value variable left hand side equal value expression 
example help clarify way assignment statement work 
arithmetic_operator place multiplication sign 
follow  example  valid assignment statement  +  statement just_like assignment statement sample program  perform addition multiplication 
statement change value sum value 
course  change program display  program give incorrect output  still run 
assignment statement  expression right hand side equal sign simply variable 
statement  change value variable variable 
program display  give incorrectly low value total weight package assume candy bar package  sense program 
example  follow assignment statement change value   number  like example  call constant  variable  value change 
variable change value time assignment_operator vehicle change value  element time involve meaning assignment statement 
first  expression right hand side equal sign evaluate 
value variable assignment variable left side equal sign change obtain expression 
mean variable meaningfully occur side assignment_operator 
example  assignment statement +  assignment statement look strange first 
read english sentence  equal number plus  equal old plus  equal sign way english simple mathematic 
assignment statement assignment statement  first expression right hand side equal sign evaluate  variable left hand side equal sign set equal
syntax expression  
pitfall uninitialized variable variable meaningful program give
example  variable give lefthand side assignment statement mean give input cin statement  following error  +  meaningful  entire expression right hand side equal sign meaningful 
variable like give uninitialize 
situation bad
uninitialized variable  like  will simply garbage  uninitialized variable determine pattern leave memory location last program portion memory 
program run twice  uninitialized 
basic variable receive time program run 
program give output exactly input datum change program suspect uninitialized variable 
way avoid uninitialized variable initialize variable time declare 
add equal sign follow  int  declare variable type_int set variable equal 
complicated expression involve operation addition multiplication initialize variable inside declaration way 
simple constant
initialize variable declaration list variable 
example  following declare variable initialize double  time   allow alternative notation initialize variable
program easy understand 
easy understand program variable meaningful name 
contrast following  
statement accomplish second easy understand 
variable type_int initialize zero declaration 
initialization alternative 
variable length type double 
write program contain statement output variable declare  initialize 
compile run program 
basic give variable_name follow 
variable hold speed automobile
variable hold pay hourly employee c
variable hold high score exam input output garbage mean garbage
programmer  way program perform input output 
will call stream 
input stream simply stream input feed computer program
word stream suggest program process input way matter input come
intuition word stream program see only stream input source stream  like mountain stream water flow past source unknown
section will assume input come keyboard 
will discuss program read input file  will see kind input statement read input file read input keyboard 
similarly  output_stream stream output generate program 
section will assume output terminal screen  will discuss output file 
output value variable string text output screen combination variable string output 
example  follow line program display   candy   statement tell computer output item  value variable quote string  candy  
notice need separate copy word item output 
simply list item output precede item output arrow symbol 
single statement equivalent follow statement    candy   
symbol symbol 
symbol type space
arrow notation call insertion operator 
entire statement end semicolon 
statement row  combine single long statement 
example  follow line display   candy    ounce   
way write previous long statement break quote string across line  start insert space 
reasonable pattern space break will acceptable computer  previous example sample program model follow 
policy group output intuitively unit 
notice just semicolon statement span line 
pay attention quote string output program display 
notice string include double quote 
double quote symbol single key keyboard  type single quote 
notice double quote symbol end string  separate left right quote symbol 
notice space inside quote 
computer insert extra space item output statement 
quote string sample start end blank 
blank keep string number run
need space quote string want insert space  string contain only space  following     note  tell computer start output 
tell computer next  will put output
depend screen set 
basic produce arbitrary break output run screen 
notice inside quote 
 next special character special symbol way spell special character inside quote string  space symbol 
type symbol  single character call character 
include directive namespace 
library include  definition cin
program cin line start file contain program 
follow know directive 
include  library iostream program cin iostream operator cin define file name iostream directive equivalent copy name file program 
second bit complicated explain 
divide name namespace 
namespace collection name  name cin
statement specify namespace way illustrate follow call using_directive 
mean name will meaning define std namespace 
case  important name cin define iostream  definition std namespace 
name like cin need tell compiler namespace std  
need know now namespace  brief clarify remark will remove mystery surround namespace 
reason namespace name 
result  item receive name  single name definition 
eliminate ambiguity  divide item collection item collection namespace name 
note namespace simply collection name 
body code specify meaning name  definition declaration 
function namespace divide name input output specification collection call namespace name namespace only specification definition  namespace 
namespace divide name  take code name 
want item namespace item name 
complicated  topic later book 
now  need
version follow  old form directive using namespace 
program require iostream  old compiler obtain recent compiler 
escape sequence backslash   precede character tell compiler character follow meaning character
sequence call escape sequence 
sequence type character space symbol 
escape sequence define 
want put string constant  escape ability terminate string constant   ability escape 
tell compiler mean real backslash   escape sequence backslash   mean real quote  string constant end 
stray   string constant will compiler simply give back will_produce error 
ansi standard unspecified escape sequence undefined behavior 
mean compiler author find convenient 
consequence code undefined escape sequence portable 
escape sequence
list here 
basic alternately  support format call raw string literal  convenient escape character 
format follow string parenthesis 
example  follow output literal string      
rule decide endl following  end long string  following  
alternatively  start output endl 
equivalent way write statement follow   definitely win  endl  following   endl  input output programming tip end program endl idea instruction end program 
last item string  end string  endl last action program 
serve purpose 
compiler_will last program instruction end 
system  program work fine final instruction  next program run will first mix last previous program 
problem occur system  put instruction end will program portable 
example  follow simple statement produce wide range output    endl  value  follow notation will explain section extremely unlikely will follow  format sense  ensure form want  program contain sort instruction tell computer number 
magic formula  insert program cause number contain decimal_point  number type double  everyday notation exact digit decimal_point specify 
want digit decimal_point  follow magic formula  
variable type_int place 
will explain magic formula detail 
now think magic formula long instruction tell computer want number contain decimal_point 
wish change digit decimal_point value program number digit  repeat magic formula place 
repeat magic formula  only need repeat last formula 
magic formula occur once program  follow will change digit decimal_point subsequent value type double  input cin cin input way
syntax similar  cin place arrow point opposite direction 
example  program display  variable fill follow cin statement show statement tell user output value type double insert follow  magic formula  program  number type double type allow digit decimal_point will ordinary  everyday notation digit decimal_point  
variable type_int place 
program reach cin statement  wait input keyboard 
set first variable equal first value type keyboard  second variable equal second value type  forth 
program read input user press return key 
allow user backspace correct mistake enter input 
number input separate space break 
instance  want enter number enter number space computer will think enter single number 
cin statement  computer will skip number blank break find next input value 
matter input number separate space space break 
syntax cin 
basic design input output input output  call  part program user see  user will happy program program design
computer execute cin statement  expect datum type keyboard 
type computer simply wait
program tell user type number datum item 
computer will automatically ask user enter datum 
sample program contain output statement like following  
output statement prompt user enter input 
program prompt input 
enter input terminal  input screen type
nonetheless  program write input value time end 
call echo input  serve check see input read correctly 
just input look screen type mean read correctly computer 
unnoticed typing mistake problem 
echo input serve test integrity input datum 
simply omit endl end last prompt line  user input will line prompt 
example  suppose follow prompt input statement   enter cost person    cin  
enter cost person  user type input  will line  like enter cost person  input output el est exer cis es give output statement will_produce follow message screen  answer question life  universe  
precede input statement prompt statement ask user enter whole number 
statement include program ensure number type double output  will output ordinary notation digit decimal_point 
write complete program write phrase hello world screen 
write complete program read whole number output sum 
sure prompt input  echo input  label output 
write short program declare initialize double variable value     
write output statement generate follow legend table 
tab escape sequence column 
unfamiliar tab character  experiment exercise 
tab work like mechanical typewriter 
tab cause output begin next column  multiple space away 
editor word processor will adjustable tab
output square root 
basic data_type expression will happy
overhear cocktail party type_int double conceptually  number number 
whole number type_int  number type double  contain fraction part fraction 
once mathematic computer programming bit learn mathematic class 
practicality computer computer number differ abstract definition number 
whole number behave expect
type_int hold surprise 
value type double troublesome 
store only limited number significant digit  computer store number type double approximate value 
number type_int store exact value 
precision double value store varie computer expect store digit accuracy 
application likely sufficient  subtle problem occur simple case 
know value variable will whole number range allow computer  declare variable type_int 
number constant type double write differently type_int 
constant type_int contain decimal_point 
constant type double write form 
simple form double constant like everyday way write decimal fraction 
type number fraction part call double 
type call  single  half big 
like true 
programming_language traditionally type number fractional part 
type storage imprecise allow significant digit 
second type double amount storage precise  allow number large programmer tend care precision size 
kind number twice storage call data_type expression double precision number  storage call correspond double precision type name double 
type correspond single precision call float 
third type number fractional part  call long double 
type subsection entitle  number  will rarely type float long double book 
constant type double constant type_int common  number contain comma 
complicated notation constant type double frequently call scientific notation float point notation handy write large number small fraction 
instance  express constant 
number express constant 
stand exponent 
basic limit number type 
large allowable number type double large large allowable number type_int 
current implementation will allow value type_int large value type double 
number type numeric type int double 
number type allow size number precision digit decimal_point 
display  value give memory size range  precision only sample set value  intend give general feel type differ 
value vary system system 
numeric type spell word  declare variable type just declare variable type_int double 
example  following declare variable type long double  long double  
course  program  only declaration variable  matter
remember type_name long mean long int  long double 
type whole number  int similar type  call integer type 
type number decimal_point type double similar type call float point type 
call float point computer store number write usual way  like  first convert number like notation  case like 
computer perform conversion  decimal_point float move position 
aware numeric type 
book will only type_int  double  occasionally long 
simple application  need type int double 
write program large whole number  need type long 
precision short call byte 
value entry system 
precision refer number meaningful digit  include digit front decimal_point 
range type float  double  long double range positive number 
negative number similar range  negative sign front number 
type size data_type vary machine
example  bit machine byte bit machine byte 
problematic need know exactly range value store type 
address problem  type add specify exactly size data_type sign unsigned 
type accessible include cstdint 
display illustrate number type 
text will primarily ambiguous type int long  type want specify exact size 
include type_name auto deduce type variable base expression right side equal sign 
example  follow line code define variable_name data_type match compute expression   auto expression  feature buy point will long  messy code start work long data_type define
fix width integer type code declare type 
expression double declare double 
type char want give impression computer only numeric calculation  will introduce nonnumeric type now  eventually will see complicated nonnumeric type 
value type char  short character  single symbol letter  digit  punctuation mark 
value type frequently call character book conversation  program type spell abbreviate fashion char 
example  variable symbol letter type char declare follow  char symbol  letter  variable type char hold single character keyboard 
example  variable symbol hold +  
note uppercase lowercase version letter character 
text double quote output cout call string value 
example  following  occur program display  string  data_type expression sure notice string constant place inside double quote  constant type char place inside single quote 
kind quote mean
string happen contain only character value type char 
notice string character  left right quote
type char illustrate program show display 
notice user type space first second initial 
program skip blank read letter second input character 
cin read input variable type char  computer skip blank line break first nonblank character read nonblank character display type char 
sample dialogue enter initial  period  initial jb once space 
basic variable 
difference blank input
program display will give output user type blank initial  show sample dialogue  user type initial blank  like jb type bool next type discuss here type bool 
type add language iso ansi international standard american national standards organization committee 
expression type bool call boolean english mathematician george boole  who formulate rule mathematical logic 
boolean expression evaluate value  true false 
boolean expression branch loop statement study section 
will boolean expression type bool section 
introduction class string lack native data_type directly manipulate string  string class process string manner similar data_type see
distinction class native data_type discuss 
detail string class discuss 
string class first string library  string 
note space automatically add string 
want space day  space add explicitly  +   + display string class 
sample dialogue enter middle name name pet 
parker pippen name alter ego pippen parker 
sample dialogue enter middle name name pet 
bojangle name alter ego mr 
basic cin read input string variable  computer only read encounter whitespace character 
whitespace character character display blank space screen  include blank space character  tab character  character   
mean input string contain space 
cause error  display  sample dialogue 
case  user intend enter  mr 
bojangles  name pet  string only read  next character space 
bojangle  string ignore program read next cin statement 
technique input string space 
type compatibility general rule  store value type variable
constant type double variable type_int 
unfortunately  compiler_will react way assignment statement 
will issue error_message  will give only warning message  compiler_will object
compiler allow assignment  will give int value  value 
count compiler accept assignment  assign double value variable type_int 
problem arise variable type double constant 
compiler_will object following  
value  come difference 
value type double  type_int 
will see shortly  replace precede assignment variable  assignment acceptable 
variable type  cause problem 
compiler_will allow mix type assignment statement  case
program portable  confusing 
example  compiler let assign variable type_int  variable will receive value  data_type expression  confusing program value will 
special case permit assign value type variable type 
acceptable assign value type_int variable type double 
example  following legal acceptable style  double   will set value variable_name equal 
bad idea store int value variable type char store letter variable type_int 
purpose  language character small integer  unfortunately  inherit c
reason allow variable type char consume memory variable type_int arithmetic variable type char memory 
clear type_int deal integer type char deal character 
general rule place value type variable type exception rule case follow rule 
compiler enforce rule strictly  rule follow 
place datum type variable type cause problem  value change value type value expect 
value type bool assign variable integer type short  int  long integer assign variable type bool 
poor style feature 
completeness help read people code  give detail  assign variable type bool  nonzero integer will store value true 
zero will store value false 
assign bool value integer variable  true will store false will store 
arithmetic operator expression program  combine variable number arithmetic_operator + addition  subtraction  multiplication  division 
example  follow assignment statement  program display  operator multiply  
basic arithmetic_operator number type_int  number type double  number type 
type value produce exact value result depend type number combine 
operand number type_int  result combine arithmetic_operator type_int 
operand type double  result type double 
example  variable increase type_int  number produce follow expression type_int  + increase variable type double  result type double 
true replace operator + operator  
type result significant suspect 
example  operand type double  namely 
result type double number 
operand type_int yield type_int  result 
result  come  difference 
example  operand type double  namely 
result type double number  only approximate quantity 
operand type_int  yield result  type_int exact quantity 
division operator operator affect severely type argument 
operand type double  division operator   behave expect 
operand type_int  division operator   yield integer part result division 
word  integer division discard part decimal_point 
notice number round  part decimal_point discard matter large
operator operand type_int recover lose division number type_int 
value type_int  yield number produce perform long division algorithm learn grade school 
example  divide yield remainder 
operation yield number time number 
operation give remainder 
example  statement  divide  endl   remainder  endl  
display integer division negative value type_int  result operator implementation 
int value only know value nonnegative 
reasonable spacing will arithmetic expression 
insert space operation parenthese  omit
produce result easy read 
specify order operation insert parenthesis  illustrate follow expression  evaluate first expression  computer first add multiply result
evaluate second expression  multiply add result
mathematical formula contain square bracket form parenthese  allow 
allow only kind parenthese arithmetic expression 
variety reserve purpose 
omit parenthese  computer will follow rule call precedence rule determine order operator   perform 
precedence rule similar rule algebra mathematic class 
example  evaluate first multiplication addition 
standard case  string addition simple multiplication embed inside addition  include parenthesis  intend order operation dictate precedence rule 
parenthesis expression easy read prone programmer error 
complete set precedence rule give appendix 
display show example common kind arithmetic expression express 
videonote precedence arithmetic_operator basic display arithmetic expression mathematical formula expression 
pitfall whole number division division operator whole number  result whole number 
problem expect fraction 
problem easily unnoticed  result program look fine produce incorrect output aware problem 
example  suppose landscape architect who charge mile landscape highway  suppose know length highway work foot 
price charge easily calculate follow statement   work foot mile 
stretch highway landscape foot long  formula will tell total price program obtain final value follow  compute 
program multiply produce value 
program  know charge project 
now suppose variable foot type_int  forget put decimal_point zero  assignment statement program read   still look fine will cause problem 
second form assignment statement  divide value type_int  result division  int value value  think 
value assign  
forget decimal_point  will charge 
see  correct value 
miss decimal_point cost 
note will true type int double  damage value assign
convert follow mathematical formula expression  + + 
output follow program line embed
write complete program read whole number variable type_int output part remainder first divide second 
value assign 
rewrite code programmer intend 
output follow program line embed correct program declare    type string 
basic assignment statement shorthand notation combine assignment arithmetic give variable value change add  subtracting  multiply dividing specify value 
general form expression equivalent   
expression variable  constant  complicated arithmetic expression 
follow example  example 
program see consist simple list statement execute order give 
write sophisticated program  will need way vary order statement execute 
order statement execute refer flow control 
section will present simple way add flow control program 
will discuss branching mechanism let program choose alternative action  choose depend value variable 
will present loop mechanism let program repeat action time 
example  suppose want design program compute week salary hourly employee 
assume firm pay overtime rate half time regular rate hour first hour work 
long employee work hour  pay equal possibility employee will work hour  formula will unfairly pay negative overtime 
poor employee will negative correct pay formula employee who work hour simply rate hour hour hour work possible  program_will need choose formula 
order compute employee pay  program action decide hour true 
follow assignment statement  rate + rate hour  
statement exactly kind branch action 
statement choose alternative action 
example  wage calculation discuss accomplish follow statement  rate + rate hour  rate hour  complete program statement give display 
form statement display 
first simple form statement  second form will discuss subsection entitle  compound  first form show  statement executable statement 
boolean expression test check see true false  see satisfied
example  early statement hour 
basic program reach statement  exactly embed statement execute 
true satisfied  execute  false satisfied  execute 
notice enclose parenthesis 
sample dialogue enter hourly enter number work  round whole number hourly simple flow control sample dialogue enter hourly enter number work  round whole number hourly display syntax statement single statement alternative  sequence statement alternative  
boolean expression expression true false 
statement contain 
simple form consist expression  number variable  compare comparison operator show display 
notice operator spell symbol     
sure notice double 
basic display comparison operator math symbol english 
operator space
part compiler separate character name will see  tell rest compiler programmer mean test inequality 
statement execute  expression compare evaluate compare operator 
comparison turn true  first statement perform 
comparison second statement execute 
combine comparison  operator  spell 
follow boolean expression true satisfied great  comparison connect  entire expression true  comparison true satisfied  entire expression false 
combine comparison  operator  spell 
follow true great  comparison connect  entire expression true comparison true satisfied  entire expression false 
remember boolean expression statement  boolean expression enclose parenthesis 
statement operator comparison parenthesize follow  
negate boolean expression
want negate boolean expression  place expression parenthesis place 
 operator form elaborate boolean expression combine simple test  operator 
value score great value score  first statement will execute  second statement will execute 
boolean expression statement enclose parenthesis  place second pair parenthesis negate expression statement 
statement begin follow  
example  hypothetical statement begin follow  equivalent easy read  
will call
basic want alternative statement
accomplish omit part 
sort statement refer statement distinguish statement 
example  first follow statement statement  + bonus     value great equal value minimum  assignment statement execute follow statement execute 
hand  value minimum  embed assignment statement execute  statement cause change bonus add base  program proceed directly statement 
operator form elaborate boolean expression combine simple test  operator 
pitfall string inequality string inequality follow program     
will explain happen learn detail language 
problem will occur string comparison comparison operator  problem limit comparison 
correct way express string inequality  operator follow  correct form    place unfortunately  write think incorrectly form statement turn obscure meaning 
mean mistakenly write expect produce error_message  find program compile run error_message  give incorrect output 
realize write incorrectly  cause problem 
time realize wrong  mistake hard find 
common mistake 
example  statement begin follow  suppose want test see value equal mean 
think compiler_will catch mistake 
expression satisfied
assignment statement  surely compiler_will give error_message 
unfortunately  case 
expression expression return value  just_like + + 
assignment expression value value transfer variable left 
example  value 
see discussion boolean value compatibility int value convert true false 
zero  convert true 
boolean expression statement  boolean expression true  first branch execute 
error hard find look correct 
compiler find error special instruction put left side comparison  videonote common bug 
 compiler_will give error_message mistakenly 
remember drop common error catch compiler  hard see  certainly want 
 executable statement kind expression  include boolean expression statement 
put assignment statement boolean expression expect  assignment statement will interpret boolean expression 
course result  test  will undoubtedly intend boolean expression 
statement look fine quick glance will compile run 
likelihood  will_produce puzzle result run 
accomplish enclose statement branch pair brace   second syntax template display illustrate display 
list statement enclose pair brace call compound statement 
compound statement treat single statement single statement
syntax rule demand yes statement statement exactly statement 
statement desire branch  statement enclose brace convert compound statement 
statement enclose brace place compiler_will give error_message 
display compound statement 
el est exer cis es 
write statement output word high value_variable score great low value score 
variable score type_int 
suppose saving expense variable type double give_value 
write statement output word solvent  decrease value saving value expense  set value expense  savings least large expense 
saving expense  statement simply output word bankrupt change value variable 
write statement output word pass value variable exam great equal value_variable great equal 
statement output word
variable exam type_int 
write statement output word warning value variable temperature great equal  value variable pressure great equal 
statement output word ok 
variable temperature pressure type_int 
quadratic expression  quadratic positive great  involve set number small root great large root 
write boolean expression true formula positive value 
quadratic expression + quadratic negative involve set number simultaneously great small root large root 
write boolean expression true value quadratic negative 
output follow statement embed statement 
assume embed complete correct program 
explain answer 
simple loop mechanism program include action repeat number time 
example  program display compute gross pay worker 
company employ worker  complete payroll program repeat calculation time 
portion program repeat statement group statement call loop 
language number way create loop 
construction call statement loop 
will first illustrate short toy example realistic example 
program display contain simple statement show color 
portion brace   call body loop  action repeat 
statement inside brace execute order  execute forth loop end 
first sample dialogue  body execute time loop end  program output hello time 
repetition loop body call iteration loop  first sample dialogue show iteration loop 
meaning statement suggest english word
loop repeat boolean expression parenthesis satisfied 
display mean loop body repeat long value variable great 
let first sample dialogue see loop perform 
user type cin statement set value 
case  program reach statement  certainly true great  statement loop body execute 
time loop body repeat  follow statement execute  simple flow control display loop 
sample dialogue greeting want 
sample dialogue greeting want 
sample dialogue greeting want 
loop body execute 
computer repeat loop body time  value decrease 
basic display syntax statement loop body statement  
put
statement end repeat loop body time 
syntax statement give display 
boolean expression allow exactly boolean expression allow statement 
just statement  boolean expression statement enclose parenthesis 
display give syntax template case  case statement loop body case just single statement loop body 
note only single statement loop body  need brace 
let action perform statement great detail 
statement execute  first happen boolean expression follow word check 
true false 
example  comparison true value positive 
false  action take program proceed next statement statement 
comparison true  entire body loop execute 
least expression compare typically contain change loop body  value statement display 
body loop execute  comparison check 
process repeat long comparison continue true 
iteration loop body  comparison check true  entire loop body execute
comparison long true  statement end 
boolean expression true statement begin  loop body execute 
exactly happen sample dialogue display 
programming situation want possibility execute loop body zero time 
example  loop read list consist score exam exam  want loop body execute zero time 
just note  loop execute loop body zero time  want 
hand  know circumstance loop body execute least time  statement 
statement similar statement loop body execute least once 
syntax statement give display 
program sample loop give display 
loop  loop  first happen statement loop body execute 
first iteration loop body  dowhile statement behave loop 
boolean expression check 
boolean expression true  loop body execute boolean expression check forth 
increment decrement operator discuss binary operator section entitle  arithmetic_operator  binary operator operand 
unary operator only operand 
know unary operator  +  expression 
language common unary operator  
operator call increment operator display syntax statement loop body statement  
 body forget final semicolon 
loop body single statement  statement 
basic display loop 
sample dialogue hello want greeting 
press yes  press return  hello want greeting 
press yes  press return  hello want greeting 
press yes  press return  bye operator call decrement operator 
variable type_int  increase value decrease value
follow semicolon executable statement 
example  statement 
example  follow statement loop display   experienced programmer decrement operator assignment statement  entire loop read follow  
charge card balance suppose bank charge card balance owe suppose bank charge month interest 
month let pass payment balance owe will exceed 
way solve problem simply read monthly statement count number month balance reach
still  calculate monthly balance program wait statement arrive 
way will obtain answer wait long endanger credit rating 
month plus  
month plus  
month plus 
general  month increase 
program keep track store call 
change value month calculate follow  +  repeat action value reach exceed count number repetition  will know number month will take reach 
need count number time change 
let call count 
final body loop will contain follow statement  
order loop perform correctly  give value variable count loop execute 
case  initialize variable declare 
complete program show display 
pitfall infinite loop loop loop terminate long boolean expression word true 
boolean expression normally contain will change loop body  value eventually change way boolean expression false terminate loop 
mistake write program boolean expression true  loop will run
loop run call infinite loop 
first let loop terminate 
follow code will write positive number 
will output number      line  loop will end 
value increase loop iteration reach 
point  boolean expression word long true  loop end 
now suppose want write odd number  number 
mistakenly think need change initialize statement  mistake will create infinite loop 
value  value equal  loop will terminate 
sort problem common loop terminate check numeric quantity
deal number  safe test pass value 
example  follow will work fine first line loop  change  initialize number loop will still terminate 
now write program contain infinite loop  idea learn force program terminate 
method force program vary system system 
keystroke control will terminate program system 
sample dialogue program tell long take accumulate debt  start initial owe 
interest rate month 
basic el est exe cis es 
output produce follow embed correct program declare type_int 
output produce previous exercise sign replace 
output produce follow embed correct program declare type_int 
important difference statement statement 
output produce follow embed correct program declare type_int 
oscar wilde  importance earnest variable_name sample program choose suggest
sample program lay format 
example  declaration statement indent amount 
matter style aesthetic interest 
program write careful attention style easy read  easy correct  easy change 
indent program lay element naturally group look like group 
way skip line part logically separate 
indent help structure program clear 
statement statement indent 
statement  loop  dowhile loop indent sample program similar manner 
brace determine large part structure program 
place brace line easy find matching pair 
notice indent pair brace 
pair brace embed pair  embed brace indent outer brace 
look back program display 
brace body loop indent brace part program 
least school thought place brace 
first  book  reserve separate line brace 
form easy read 
second school thought hold open brace pair need line
care  second method effective  space 
important point style show structure program 
exact layout precisely dictate  consistent program 
comment order program understandable  explanatory note key place program 
note call comment 
programming_language provision include comment text program 
symbol start comment 
text end line comment 
compiler simply ignore 
basic follow line 
want comment cover line  place line comment 
symbol slash space 
book  comment will write italic stand program text 
text editor comment show color rest program text 
way insert comment program 
symbol pair symbol pair comment ignore compiler 
comment  require additional line  comment span line  like comment span line 
note comment symbol kind second comment type insert program space line break allow 
insert easy read distract layout program 
comment only place end line separate line
differ opinion kind comment
variety kind kind effective care 
will kind book 
difficult just comment program contain 
only correct answer just  course convey little novice programmer 
will take experience feel include comment 
important obvious  merit comment 
comment bad
program comment line will bury comment structure program hide sea obvious observation 
comment like follow contribute understanding program  speed time  travel notice comment give start program display 
program begin comment similar show
give essential program  file program who write program  contact person who write program  program date program last modify  assignment number  program class assignment 
exactly include comment will depend situation 
will include long comment program rest book  begin program similar comment 
sample dialogue enter temperature  fever 
name constant problem number computer program 
first carry mnemonic value 
example  number encounter program  give hint significance 
program banking program  number branch office number teller window office 
order understand program  basic need know significance constant 
second problem program need number change  change tend introduce error 
suppose occur twelve time banking program  time represent number office  time represent number teller window office 
bank open program need update  chance change will change will
way avoid problem name number name number program 
example  banking program constant name
number value  bank open need order update program change definition
name number program 
way initialize variable number value  following example  int  int  problem method name number constant  inadvertently change value variable 
way mark initialized variable change 
program try change variable  produce error condition 
mark variable declaration value variable change  precede declaration word const abbreviation constant 
example  const int  const int  
word const call modifier  modify restrict variable declare 
variable declare const modifier call declare constant 
write declare constant uppercase letter require language  standard practice programmer 
once number name way  name number allow  will exactly meaning number name 
change name constant  need change only initialize value const variable declaration 
meaning occurrence instance  change simply change initializing value declaration
sense unnamed number constant know  easily recognizable  unchangeable quantity  number centimeter meter 
numeric constant give name fashion just
will program easy read easy change 
display contain simple program illustrate declaration modifier const 
name constant const modifier initialize variable inside declaration  mark variable program allow change value 
place word const front declaration  syntax const constant  
el est exer cis es 
follow statement will compile run problem 
lay way consistent statement program 
rewrite layout indenting line break match style
write complete program ask user number gallon output equivalent number liter 
liter gallon 
declare constant 
just exercise  need comment program 
basic summary meaningful name variable 
variable declare assignment statement variable first
statement allow program decide perform action 
modifi const variable declaration 
unique right answer
possible answer 
value entire expression  course 
answer self test exercise int value  numerator denominator int  integer division fractional part discard 
string concatenate operator 
section type compatibility  note int value convert false 
section type compatibility  note nonzero int value convert true 
section type compatibility  note nonzero int value convert true 
output  boolean expression satisfied statement end execute loop body 
output exactly self test exercise 
body loop execute boolean expression check  boolean expression false  output 
statement loop body execute least once 
statement condition loop body execute
infinite loop 
output begin following conceptually once value large large integer allow computer  program exhibit strange behavior  
practice program practice program generally solve short program directly apply programming principle present
metric ton ounce 
write program will read weight package breakfast cereal ounce output weight metric ton number box need yield metric ton cereal 
program allow user repeat calculation user wish 
babylonian algorithm compute square root number follow  answer pick initial 
step repeat  close will square root
write program input double iterate babylonian algorithm time 
challenging version  iterate previous  output answer double 
videonote solution practice treadmill output speed treadmill mile hour mph console  runner think speed term pace 
common pace number minute second mile mph 
write program start quantity mph convert quantity minute second mile 
example  proper output input mph minute second mile 
need convert double int  will discard value decimal_point   
write program play game mad lib 
program prompt user enter follow string  first last name instructor 
animal string input  substitute story output console 
programming project dear instructor instructor name  sorry unable turn homework time 
first  eat rotten food  turn color extremely ill 
come fever number 
next  adjective pet animal smell remain food homework  eat
currently rewrite homework hope will accept late 
sincerely  name 
following short program compute volume give radius 
will compile run  adhere program style recommend section 
rewrite program style indentation  add comment  appropriately name constant 
programming project programming project require problem solve practice program solve way 
visit complete programming project online instant feedback 
government research lab conclude artificial sweetener commonly diet soda pop will cause death laboratory mouse 
friend desperate lose weight give soda pop 
friend want know diet soda pop possible drink die result 
write program supply answer 
input program amount artificial sweetener need kill mouse gram  mass mouse gram  weight dieter gram pound person 
assume lethal dose mouse proportional lethal dose human 
single soda pop mass gram 
ensure safety friend  sure program request weight dieter will dieting  dieter current weight 
assume diet 
basic soda contain artificial sweetener 
variable declaration modifi const give name fraction 
want express percent double value 
program allow calculation repeat user wish 
worker company win pay increase retroactive month 
write program take employee previous salary input  output amount retroactive pay due employee  salary  salary 
variable declaration modifi const express pay increase 
program allow calculation repeat user wish 
number month enter user 
negotiate consumer loan straightforward 
form loan discount installment loan  work follow 
suppose loan face value  interest rate  duration month 
interest compute multiply face value  yield 
figure multiply loan period year yield total interest owe 
amount deduct face value  leave consumer only 
repayment equal installment base face value 
loan payment will divide  
method calculation bad consumer need dollar  calculation bit complicated consumer need 
write program will take input  amount consumer need receive  interest rate  duration loan month 
program calculate face value require order consumer receive amount need 
calculate payment 
program allow calculation repeat user wish 
write program determine meeting room violation fire law regulation maximum room capacity 
program_will read maximum room capacity number people attend meeting 
number people equal maximum room capacity  program announce legal hold meeting tell additional people legally attend 
number people exceed maximum room capacity  program announce meeting hold plan due fire regulation tell people exclude order meet fire regulation 
hard version  write program allow calculation repeat user wish 
class exercise  ask instructor hard version 
programming project 
employee pay rate hour first hour work week 
hour pay overtime rate oneand half time
worker gross pay  withhold social security tax  withhold federal income tax  withhold state income tax  week withhold union due 
worker dependent  additional withhold cover extra cost health insurance employer pay 
write program will read number hour work week number dependent input will output worker gross pay  withholding amount  net take home pay week 
hard version  write program allow calculation repeat user wish 
class exercise  ask instructor hard version 
difficult budget span year  price stable 
company need pencil year  simply year price cost pencil year now 
inflation cost likely high today 
write program gauge expect cost item specified number year 
program ask cost item  number year now item will purchase  rate inflation 
program output estimate cost item specified period 
user enter inflation rate percentage  like percent 
program convert percent fraction  like  loop estimate price adjust inflation 
just purchase stereo system cost follow credit plan  payment  interest rate year month  payment 
payment pay interest leave pay part remain debt 
first month pay interest 
remain deduct debt  leave debt 
next month pay interest  
deduct amount owe 
write program will tell month will take pay loan  total amount interest pay life loan 
loop calculate amount interest size debt month 
want variable
last payment 
forget interest last payment 
basic payment will pay debt  will come close 
month interest only cent 
write program read whole number output sum number great zero  sum number zero will negative number zero  sum number  positive  negative  zero 
user enter number just once user enter order 
program ask user enter positive number negative number separately 
temperature air affect speed molecule  turn affect speed sound 
velocity sound dry air approximate formula  velocity + tc tc temperature air degree celsius velocity meter second 
write program allow user input starting end temperature 
temperature range  program output temperature corresponding velocity increment 
example  user enter start temperature end temperature  program output degree celsius velocity sound degree celsius velocity sound degree celsius velocity sound videonote solution programming project private water produce only gallon water minute 
way avoid run water low yield hold tank 
family will gallon water day 
natural  water hold tank casing hole
deep store water pump household
water will
write program allow user input radius casing inch typical will inch radius depth foot assume water will fill entire depth  programming project practice will true static water level will generally foot ground surface 
program output number gallon store casing 
reference  volume cylinder  radius height  cubic gallon water 
example  full water radius inch casing hold gallon water family need install separate hold tank 
harris benedict equation estimate number calorie body need maintain weight exercise 
call basal metabolic rate 
formula calorie need woman maintain weight + weight pound + height inch formula calorie need man maintain weight + weight pound + height inch typical chocolate bar will contain calorie 
write program allow user input weight pound  height inch  age year  character male female 
program output number chocolate bar consume maintain weight sex specify weight  height  age 
write program calculate total grade classroom exercise percentage 
user input value follow score total 
calculate percentage sum total point earn divide total point possible output percentage 
sample input output show
exercise input 
important effect thermal expansion build structure withstand change temperature 
example  metal beam will expand hot temperature 
additional stress cause structure
similarly  material will contract cold temperature 
linear change length material allow freely expand follow equation  here  initial length material meter  displacement meter  change temperature celsius  coefficient linear expansion 
write program input    calculate output linear displacement 
displacement positive output material will expand displacement meter 
flow control boolean expression evaluate boolean expression pitfall  boolean expression convert int value enumeration type optional multiway branch nest statement programming tip  brace nest statement multiway statement programming example  state income tax switch_statement pitfall  forget break switch_statement switch_statement menus block pitfall  inadvertent local_variable summary answer self test exercise loop statement statement review increment decrement operator revisit statement pitfall  extra semicolon statement kind loop pitfall  uninitialize variable infinite loop break_statement pitfall  break_statement nest loop design loop loop sum product end loop nest loop debugging loop practice program programming project come fork road  take
attribute yogi berra introduction order statement program perform call flow control 
statement  statement  dowhile statement specify flow control 
explore statement introduce statement call switch_statement statement  flow control 
action statement  statement  statement control boolean expression 
begin discuss boolean expression detail 
prerequisite material 
boolean expression test condition statement control expression loop  loop 
boolean expression independent identity statement loop statement
type bool ability declare variable carry value true false 
boolean expression evaluate way arithmetic expression evaluate 
only difference arithmetic expression operation +   produce number final result  boolean expression relational operation boolean operation  
first let review evaluate arithmetic expression  technique will work evaluate boolean expression 
follow arithmetic expression  assume variable value 
evaluate arithmetic expression  evaluate sum obtain number  combine number operator obtain final value 
notice perform evaluation  multiply expression 
multiply value expression 
computer evaluate boolean expression way 
subexpression evaluate obtain value  true false 
individual value true false combine accord rule table show display 
example  boolean expression control expression statement statement 
suppose value 
case  evaluate false evaluate true  boolean expression equivalent consult table label display 
consult table computer see evaluate false  conclude false value original boolean expression 
example construct fully parenthesize show exactly  
parenthesis require 
omit parenthese  default precedence follow  perform 
practice include parenthesis order expression easy understand 
place parenthese safely omit simple string mixture 
follow expression acceptable term compiler readability  
flow control display truth table 
parenthesis omit expression  computer group item accord rule know precedence rule 
precedence rule give display 
operation evaluate operation evaluate first high precedence 
binary operation equal precedence evaluate left right order 
unary operation equal precedence evaluate right leave order 
complete set precedence rule give appendix 
notice precedence rule include arithmetic_operator boolean operator 
expression combine arithmetic boolean operation  follow simple example  check precedence rule give display  will see expression equivalent high precedence 
omit parenthesis expression meaning  expression display precedence rule unary operator +     
high precedence binary arithmetic   binary arithmetic +      
advocate omit parenthesis  instructive see expression interpret precedence rule 
here expression parenthesis  + + precedence rule first apply unary  apply sign   finally  exactly fully parenthesize version
precede description expression evaluate basically correct   computer actually take occasional shortcut evaluate expression 
notice case need evaluate only first subexpression expression 
example  following  negative  false  see table display  subexpression expression false  whole expression false  matter expression true false 
know first expression false  need evaluate second expression 
similar happen expression 
first expression join operator true  know entire expression true  matter second expression true false 
language trouble evaluate second subexpression logical expression connect 
first evaluate leftmost expression join 
give determine final value expression independent value second expression  bother evaluate second expression 
method evaluation call short circuit evaluation 
flow control language   complete evaluation 
complete evaluation  expression join  subexpression evaluate truth table obtain value final expression 
short circuit evaluation complete evaluation give answer  care short circuit evaluation 
time need care 
long subexpression join value  method yield result 
second subexpression undefined  happy know short circuit evaluation 
let look example illustrate point 
follow statement   child   value zero  statement involve subtlety 
suppose value zero short circuit evaluation handle case 
expression evaluate false  need evaluate second expression 
short circuit evaluation  entire expression false  bother evaluate second expression 
prevent run time error  evaluate second expression involve divide zero 
integer value 
convert integer true convert integer false 
situation bit complicated simply true false 
compiler_will treat nonzero number value true will treat value false 
long mistake write expression  conversion cause problem need aware
debug  help know compiler happy combine integer operator   
pitfall expression convert int value suppose want expression statement  want true time run game process 
phrase bit precisely  suppose want expression statement want true value variable time type_int great value expression variable call limit 
write follow statement wrong want look like nonsense  intuitively nonsense 
value time example   possibly meaning 
equivalent   nonzero integer convert true convert false 
interpret true  evaluate false  turn convert back compare int 
want value boolean expression give
time value limit value  want displayed boolean expression evaluate true true time limit 
unfortunately  boolean expression evaluate follow  evaluate false  convert  entire boolean expression equivalent limit turn equivalent  value limit 
evaluate false 
logical expression evaluate false  want evaluate true 
way correct problem 
operator  sure include parenthese argument 
correct way write precede boolean expression follow  way correct problem completely avoid
example  following correct easy read  
just english undifficult read  operator 
need obsessive avoid
old version type bool  obtain
est exe rc ise determine value  true false  follow boolean expression  assume value variable count value variable limit 
give answer value true false 
name kind statement alter order action perform 
give example 
explain give correct boolean expression specify lie 
enumeration type like list declare constant 
define enumeration type  int value number constant define enumeration type 
example  follow enumeration type define constant length month  enum monthlength             example show  name constant enumeration type receive int value 
specify numeric_value  identifier enumerationtype definition assign consecutive value begin 
example  type definition enum     
form explicitly list int value normally
initialize only enumeration constant value  enum     take value  take next int value  take next value  take  take next value  
short  default first enumeration constant 
rest increase set enumeration constant 
introduce enumeration call strong enum enum_class avoid problem conventional enum 
example  want enum act integer 
additionally  enum global scope enum value twice 
define strong enum  add word class enum 
qualify enum value enum name follow colon follow value 
example  enum_class sun  mon  tue   
legal check   sun 
statement choose alternative 
section will discuss method choose alternative 
nest statement see  statement statement contain small statement
compound statement simple statement assignment statement small substatement  possibility 
statement subpart statement  statement  statement  statement 
illustrate display 
statement display level nesting  box 
statement nest statement  statement nest statement 
nest statement  normally indent level nest substatement 
display level nesting  display statement statement 
statement indent amount level nesting 
later will see specific case sense indenting pattern  rule contrary  indent level nesting illustrate display 
part program warn driver fuel low tell driver bypass pit fuel tank close full 
situation program give output distract driver 
design follow pseudocode  fuel gauge full  check fuel gauge full issue low fuel warning
fuel gauge full output statement tell driver
careful  implement pseudocode follow  read text see wrong
  implementation look fine  correctly form statement compiler_will accept will run error_message 
implement pseudocode 
notice statement occurrence only
compiler decide pair
nicely indent nest statement show pair first compiler care indent 
compiler  precede nest statement following  differ only indent   fuel low 
  unfortunately compiler_will second interpretation will pair second first
call dangle problem  illustrate program display 
compiler pair near previous pair
try work rule 
flow control display importance brace 
  indent nice  
enter fuel gauge reading  first brace  brace difference case  see dialogue 
fuel low 
now brace  fuel low 
sample dialogue enter fuel gauge reading  first brace  now brace  fuel 
output here  thank brace 
incorrect output version brace 
change rule 
tell compiler want compiler_will want 
tell compiler want 
brace nest statement like parenthesis arithmetic expression 
brace tell compiler group leave group accord default convention  want 
avoid problem program easy read  place brace   substatement statement  first statement display 
simple substatement  single assignment statement single statement  safely omit brace 
display  need   fuel 
  simple case  brace readability 
programmer advocate brace simple substatement occur statement  first statement display 
allow program choose possible action 
will want way branch program choose alternative action 
implement multiway branch nest statement 
way example  suppose design game play program user value number 
number variable_name number  variable_name 
wish give hint design follow pseudocode  output   number 
output   number 
output   number 
time branch action list mutually exclusive condition corresponding action  example  implement nest statement 
example  pseudocode translate follow code     
follow indent rule  produce like following  rule pair 
rare case follow general guideline indent nest statement 
reason line  line condition action pair layout program reflect reasoning 
reason deeply nest statement  quickly run space page 
condition mutually exclusive  last nest statement superfluous omit  comment follow     
form multiple branch statement condition mutually exclusive 
condition mutually exclusive computer will evaluate condition order find first condition true will execute action correspond condition 
condition true  action take 
statement end plain last statement execute condition false 
multiway statement syntax 
multiway branch 
boolean expression check order first true boolean expression encounter  correspond statement execute 
boolean expression true  execute 
programming example state income tax display contain program multiway statement 
program take taxpayer net income round whole number dollar compute state income tax due net income 
state compute tax accord follow rate schedule  
tax pay first net income 
tax percent assess dollar net income 
tax percent assess dollar net income 
program define display multiway statement action case 
condition second case actually complicated need
computer will second condition try first condition find false 
know computer try second condition  will know great 
replace line following  program_will perform exactly 
flow control display multiway statement 
sample dialogue enter net round whole dollar multiway branch est exerc ise 
output will produce follow code  embed complete program 
output self test exercise boolean expression change 
output will produce follow code  embed complete program 
assume first output  second output  output 
know value output 
write multiway statement classify value int variable follow category write message  give follow declaration output statement  assume
see statement construct multiway branch 
switch_statement kind statement implement multiway branch multiway branch 
sample switch_statement show display 
switch_statement regular branch fifth branch illegal input 
variable grade determine branch execute 
branch grade     
grade cause branch take  separate action  
value grade character        statement identifi default execute 
flow control sample dialogue enter midterm press return  excellent 
need take final 
end program 
sample dialogue enter midterm press return 
midterm now
end program 
sample dialogue enter midterm press return 
end program 
sample dialogue enter midterm press return  possible 
end program 
videonote switch_statement example syntax preferred indent pattern switch_statement show sample switch_statement display box entitle multiway branch notice constant follow colon 
note occurrence case constant value ambiguous instruction 
break_statement consist keyword break follow semicolon 
computer execute statement case label  continue reach break_statement 
computer encounter break_statement  switch_statement end 
omit break_statement  execute code case  computer will execute code next case 
note case label section code 
switch_statement display  action take value 
technique allow lowercase letter 
example  allow lowercase  uppercase  program display  replace case   following  case   case   course  letter 
case label constant match value control expression  statement follow default label execute 
need default section 
default section match find value control expression  happen switch_statement execute 
safe default section 
think case label list possible outcome  put error_message default section 
flow control case  break  
pitfall forget break switch_statement forget break switch_statement  compiler_will issue error_message 
will write syntactically correct switch_statement  will intend
switch_statement box entitle  switch  break_statement omit  arrow  variable value  case label case  multiway branch execute desire  computer execute next case 
produce puzzling output vehicle passenger car later bus  final value 
computer start execute case  encounter break end switch_statement 
example  switch_statement perfect implement menu 
flow control 
sample dialogue choose see next homework assignment 
choose grade last assignment 
choose assignment hint 
choose exit program 
enter press return  assignment hint  analyze problem 
write algorithm pseudocode 
translate pseudocode program 
choose see next homework assignment 
choose grade last assignment 
exact output will depend code insert switch_statement 
choose assignment hint 
choose exit program 
enter press return  end program 
menu restaurant present list alternative customer choose
menu computer program present list alternative screen user choose
display show outline program design give student homework assignment 
program menu let student choose want 
readable way implement menu action function 
function discuss 
previous programming tip  action branch function_call 
way subtask branch design  write  test separately 
hand  action branch simple just compound statement 
occasionally  want give compound statement local_variable 
example  program display 
calculate final bill specified number item give price 
sale wholesale transaction  sale tax charge presumably tax will pay item resold retail buyer 
sale retail transaction  sale tax add 
statement produce calculation wholesale retail purchase 
retail purchase  calculation temporary variable call subtotal  variable declare compound statement branch statement 
show display  variable subtotal declare compound statement 
want variable_name subtotal compound statement declare 
variable declare inside compound statement local compound statement 
local variable create compound statement execute destroy compound statement complete 
word  local_variable exist only compound statement declare 
compound statement  variable declare compound statement  local_variable declare inside compound statement 
flow control  enter number purchase    
sample dialogue enter  enter purchase  type wholesale purchase 
type retail purchase 
press return 
local block multiway branch compound statement declaration simple compound statement  special name 
compound statement contain variable declaration call block  variable declare block local block block scope 
code enclose brace will show define function 
body function definition block 
standard name block body function 
want talk kind block  let create name
let call block statement block body function body part program 
statement block nest statement block  basically rule local_variable name apply nest statement block discuss  apply rule tricky statement block nest 
rule nest statement block 
nest statement block program hard read 
feel need nest statement block  statement block function definition function_call nest statement block 
statement block kind sparingly 
situation  function_call preferable statement block 
completeness  scope rule nest block accompany summary box 
block block code enclose brace 
variable declare block local block variable_name block reuse name variable 
scope rule nest block identifier declare variable block  variable name 
variable exist only inner block access inner block 
variable exist only outer block access inner block 
variable distinct  change variable will effect variable 
flow control pitfall inadvertent local_variable declare variable pair brace   variable local_variable block enclose pair 
true want variable local
want variable brace  declare brace 
output will produce follow code  embed complete program 
output produce follow code  embed
urge program style  exercise nest block help understand scope rule 
give output code fragment produce embed complete  correct program 
vincent millay  letter arthur darison ficke  october  loop program construction repeat statement sequence statement time 
simple loop loop see example loop 
statement group statement repeat loop call body loop  repetition loop body call iteration loop 
design question construct loop loop body
time loop body iterate 
statement review syntax statement variant  statement  review display 
important difference type loop 
flow control involve control boolean expression check 
statement execute  boolean expression check loop body execute 
boolean expression evaluate false  body execute
statement  body loop execute first boolean expression check loop body execute 
statement execute loop body least once 
start loop loop behave
iteration loop body  boolean expression check  true  loop iterate
change true false  loop statement end 
display statement statement statement single statement body statement body statement multistatement body 
body statement single statement body statement  body 
statement multistatement body 
 loop statement first happen loop execute control boolean expression evaluate 
boolean expression evaluate false point  body loop execute 
pointless execute body loop zero time  desire action 
example  loop sum list number  list empty 
specific  checkbook balancing program loop sum value check write month take month vacation write check
case  zero number sum loop iterate zero time 
increment operator statement 
increment operator operator  just_like
expression like return value  arithmetic expression expression first return value variable  value increase 
example  following 
evaluate expression  value incremente  value incremente 
value produce expression  increment operator change value 
strange  just want 
see  want expression behave differently 
expression evaluate value variable value variable incremente 
reverse order place increment operator expression flow control front variable  order action reverse 
expression first increment value variable return 
code previous piece code variable  code produce follow output  notice increment operator effect variable  increase value 
expression evaluate value 
remember  variable  incrementing value return  variable  incrementing value return 
program display increment operator loop count time loop body repeat 
increment operator control iteration loop way similar display 
display increment operator expression 
sample dialogue item eat 
flow control return value decrement  hand  first decrement return value
expression    forth illegal 
est exe rc ise 
output follow embed complete program 
output follow embed complete 
output follow embed complete 
statement statement statement loop mechanism absolutely need 
statement alone
sort loop common include special statement
perform numeric calculation  common calculation    forth  last value reach 
example  add  loop statement want computer perform follow statement time  value equal first time increase subsequent time  +  
follow statement will neatly accomplish task   +  let look statement piece piece 
first  notice loop version loop version put piece  start assignment statement set variable equal 
case  assignment statement place loop statement begin 
loop statement piece 
statement simply compact way
possible  will only statement perform loop control variable 
example  variable 
equivalence previous loop guide let rule write statement 
statement begin keyword follow parenthesis tell computer control variable 
beginning statement look like following  first expression tell variable initialize  second give boolean expression check loop end  last expression tell loop control variable update iteration loop body 
example  loop begin 
flow control initialize 
succumb temptation place semicolon third expression 
notice statement  correspond statement  condition test first loop iteration 
possible loop body execute zero time 
output bottle beer shelf 
display show sample statement embed complete simple program 
declaration inside statement 
variable only statement  place declare variable 
variable statement  declare variable statement 
ansi standard require compiler claim compliance standard treat declaration loop initializer local body loop 
early compiler
determine compiler treat variable declare loop initializer 
interest portability  write code depend behavior 
ansi standard require variable declare initialization expression loop local block loop 
description statement bit general allow 
statement will only single variable expression 
statement display  body simple assignment statement +  declare variable statement flow control display statement 
loop body iteration int   variable local +  
number display loop multistatement body syntax 
body statement
body compound statement 
allow place statement body loop  show display 
see loop increase loop control variable loop iteration  see loop decrease loop control variable loop iteration 
possible kind variable update 
variable incremente decremente
variable type double  incremente decremente fractional amount 
follow legitimate loop  int   now equal  endl  
initialization need simply set variable equal constant 
initialize change loop control variable just way wish 
example  follow demonstrate way start loop   now equal  endl  pitfall extra semicolon statement 
notice semicolon  expect compiler issue error_message 
embed loop complete program  compiler_will complain 
run program  only hello will output hello 
answer question  need little background 
way create statement put semicolon
put semicolon  change expression possible update action 
semicolon statement  call empty statement null statement 
empty statement perform action  still statement 
following complete legitimate loop  body empty statement  int    loop iterate time  body empty statement  happen body iterate 
loop time 
now let back loop code label problem semicolon 
extra semicolon  code begin loop empty body  just discuss  loop accomplish
loop complete  follow statement execute write hello screen time     will eventually see loop empty body  stage  loop likely just careless mistake 
first design loop pseudocode  translate pseudocode code 
point will easy decide type loop statement
loop involve numeric calculation variable change equal amount time loop  loop 
loop numeric calculation  loop 
will suitable  clear easy loop numeric calculation 
case  loop loop  fairly easy decide
want insist loop body will execute least once  loop 
circumstance loop body execute loop 
common situation demand loop read input possibility datum
example  program read list exam score  case student who take exam  input loop face empty list 
call loop 
output follow embed complete program 
output follow embed complete 
follow situation  tell type loop work
sum series  + + + + 
pitfall uninitialized variable infinite loop first introduce simple loop  warn pitfall associate loop 
sure variable need value loop initialize give value loop execute 
obvious state abstract  practice easy concerned design loop forget initialize variable loop 
careful avoid infinite loop 
caution apply equally loop 
break_statement exit loop 
want exit loop end normal way 
example  loop contain check improper input improper input encounter  want simply end loop 
code display read list negative number compute sum value variable sum 
loop end normally user type negative number 
user forget minus sign  computation ruin loop end break_statement execute 
sample dialogue enter negative number  error  positive zero enter 
input end 
break_statement break_statement exit loop statement 
break_statement execute  loop statement end execution continue statement follow loop statement 
break_statement form loop loop  loop  loop 
pitfall break_statement nest loop break_statement end only innermost loop contain
loop loop break_statement inner loop  break_statement will end only inner loop 
output follow embed complete program 
output follow embed complete program 
traditional carnival barker call design loop  need design 
body loop 
initialize statement 
condition end loop begin section common loop task show design element task 
loop sum product common task involve read list number compute know number will task easily accomplish follow pseudocode 
value variable number add 
accumulate variable 
order determine correct initialize value think want happen loop iteration 
add first  value first time loop value + next equal next 
true  value initialize 
statement produce loop repeat loop body predetermined time 
pseudocode repeat follow time  equivalent statement example  hip  hip    form list number way similar form list number 
technique illustrate follow code  int  
variable give initial value 
assume variable initialize zero 
initialize  still zero loop finish 
code show early  correct initialize value 
see correct initial value  notice first time loop will leave equal first read want 
end loop commonly method terminate input loop 
will discuss order 
list head size 
ask iterate 
list end sentinel value run input program determine size input list loop read input exactly time  size list 
method call list head size 
second method end input loop simply ask user  loop iteration  loop iterate
read long list  tiresome user 
imagine typing list number way 
user likely progress happy sarcastic angry frustrated 
read long list  preferable include only stopping signal  method discuss next 
flow control nice way terminate loop read list value keyboard sentinel value 
sentinel value distinct possible value list read signal end list 
example  loop read list positive number  negative sentinel value end list 
loop following add list nonnegative number  
notice last list read add
add number    user append negative end list like final read add
sentinel value way  least value data_type question definitely will list input value sentinel value 
list consist integer value value leave serve sentinel value 
situation  method terminate loop 
read input file  sentinel value  common method simply check see input file read end loop input leave read 
method end input loop discuss programming tip section entitle  check end file  section entitle technique give end input loop special case general technique end loop kind 
general technique follow  
ask iterate 
exit flag condition loop loop determine iteration loop begin iterate loop body time 
list head size technique discuss input loop loop loop 
loop input loop  common technique processing input 
early section discuss input loop end sentinel value read 
example  program read nonnegative integer variable call 
receive negative value  end input  negative value sentinel value 
example general technique know exit flag condition 
variable change value event take place call flag 
example input loop  flag variable  negative  input list end 
end file input loop run input example exit flag technique 
case flag condition determine system 
system keep track input reading reach end file 
flag terminate loop input loop 
example  follow sample loop find tutor student 
student class number start 
loop check student see student receive high loop soon student high find 
example  high 
code call user define function 
case  function_will execute code will compute numeric_value correspond student 
numeric_value copy variable 
discuss function detail 
example  variable serve flag 
previous loop problem arise design loop 
happen student score
answer depend definition function 
define positive integer  infinite loop 
bad  define argument student  try tutor nonexistent student 
event  will wrong 
danger loop turn infinite loop danger iterate time sensible  include check see loop iterate time 
example  condition example loop follow  variable number set equal student class  
district vulture survive  conservationist annually perform count egg green necked vulture nest 
program display take report conservationist district calculate total egg contain nest observe 
conservationist report consist list number 
count egg observe green necked vulture nest 
program read report conservationist calculate total egg find conservationist 
list number conservationist negative add end list 
serve sentinel value 
program loop report calculate total egg find report 
body loop contain kind statement  possible loop nest loop egg nest nest 
program display contain loop loop 
nest loop display execute once value count report 
iteration outer loop complete execution inner loop 
will subroutine program display readable 
est exercise 
write loop will write word hello screen time embed complete program 
list end sentinel value 
decide sentinel value
predict output follow nest loop  int    times    endl  debug loop 
first  localize problem matter carefully program design  mistake will still occur 
case loop  pattern kind mistake programmer
loop error involve first last iteration loop 
find loop perform expect  check see loop iterate time 
loop iterate time error  error common loop bug 
sure confuse equal
sure initialize loop correctly 
remember loop need iterate zero time check loop handle possibility correctly 
infinite loop result mistake boolean expression control stopping loop 
check see reverse inequality  confuse great
common source infinite loop terminate loop test equality  involve great
value type double  testing equality give meaningful answer  quantity compare only approximate value 
value type_int  equality dangerous test end loop  only way satisfied 
check recheck loop find error  program still misbehave  will need sophisticated testing 
first  sure mistake loop 
just program perform incorrectly mean bug think
program divide function  easy determine approximate location bug bug 
once decide bug loop  watch loop change value variable program run 
way see loop see wrong 
watch value variable change program run call trace variable 
system debug utility allow easily trace variable change program 
system debug utility  worth effort learn
system debug utility  trace variable place temporary statement loop body  way value variable will write screen loop iteration 
comment end loop tell loop suppose test know give variable incorrect value 
need find wrong 
help debug loop  trace variable
debug utility 
debug facility  trace variable insert statement follow  int   
trace variable find first loop iteration  value 
clear multiply only number miss multiply 
least way fix bug 
easy fix initialize variable  
way  incremente first time loop  will receive value 
way fix loop place increment multiplication  follow  int   
let assume fix bug move statement
add fix 
test revise code 
test will see still give incorrect result 
trace variable  will discover loop multiply  multiply 
tell boolean expression now lessthan equal sign  sign 
correct code 
assume change will program correct 
just find correct mean find need correct 
illustrate example  change part program correct  change require change part program
test loop loop test input cause follow loop behavior possible zero iteration loop body  iteration loop body  maximum number iteration loop body  maximum number iteration loop body 
technique develop will help find bug find way design program 
amount debugging convert poorly design program reliable readable
program algorithm difficult understand perform poorly  try fix
throw away start
will result program easy read likely contain hidden error 
obvious throw poorly design code start will_produce work program fast try repair old code 
like waste effort throw code work hard efficient way proceed 
work discard code waste 
lesson learn write will help design program fast start experience 
bad code unlikely help
debug bad program program bad  try debug
throw start
summary est exerc ise 
mean trace variable 
trace variable 
loop error 
fence meter long 
fence post place foot 
fence post need 
presence problem programming book silly
problem programmer question address 
summary boolean expression evaluate similarly way arithmetic expression evaluate 
call function boolean expression statement boolean expression permit 
implement multiway statement 
variable declare block local block 
block action branch multiway branch statement  multiway statement 
once algorithm design  choice loop statement clear 
throw away start
answer self test exerci se 
note expression mean exactly
high precedence  easy read expression  mean
value first subexpression false  know entire expression false bother evaluate second subexpression 
matter value
call short circuit evaluation 
value first subexpression true  know entire expression true bother evaluate second subexpression 
matter value
call short circuit evaluation 
subexpression evaluate short circuit evaluation 
entire expression equivalent turn equivalent true true  equivalent  equivalent final value false 
answer self test exercise 
value first subexpression limit true  know entire expression true bother evaluate second subexpression 
second subexpression evaluate involve division zero notice computer 
short circuit evaluation 
value first subexpression limit false  know entire expression false bother evaluate second subexpression 
second subexpression evaluate involve division zero notice computer 
short circuit evaluation 
expression intuitive meaning  convert int value bool value evaluate
will evaluate mess 
recall  nonzero integer convert true  convert false 
will evaluate follow  expression  convert true 
 convert true  evaluate false  convert 
entire expression evaluate +  
final value 
will convert number true  answer little intuitive meaning true  just answer 
point study branch statement  iteration statement  function_call statement 
example branch statement study statement 
example iteration statement statement 
boolean  value true false  convert  true 
output true  regardless value
boolean false just assign 
short circuit evaluation  evaluate second truth value determine first 
first false  entire evaluate false evaluate second 
division zero 
start hello second
end start end 
start second output end 
statement second boolean 
output self test exercise 
start end 
follow correct     
constant increment 
unassigned constant increment previous value 
chocolate ice cream onion ice cream 
hello hello hello hello hello 
loop
require loop input list empty 
loop least test will perform 
second number base log first number 
  pitfall error 
infinite loop 
update expression 
change initial value  leave initial value  
break_statement exit loop statement terminate case switch_statement 
break legal program 
note loop nest  break_statement only terminate level loop 
answer self test exercise 
output long reproduce here 
pattern follow  
trace variable mean watch program variable change value program run 
special debug facility insert temporary output statement program 
loop iterate loop body error 
typical reasoning who think carefully foot fence foot course  will leave last foot fence post 
need post foot interval foot fence 
flow control practice program practice program generally solve short program directly apply programming principle present
write program score paper rock scissor game 
user type
program announce winner basis determine winner  paper cover rock  rock break scissor  scissor cut paper  win 
sure allow user lowercase uppercase letter 
program include loop let user play user
write program compute interest due  total amount due  minimum payment revolving credit account 
program accept account balance input  add interest total amount due 
rate schedule following  interest percent first percent amount
minimum payment total amount due percent total amount owe  large 
program include loop let user repeat calculation user
write astrology program 
user type birthday  program respond sign horoscope birthday 
month enter number 
enhance program birthday only day away adjacent sign  program announce birthday cusp  output horoscope near adjacent sign 
program_will long multiway branch 
horoscope sign 
program include loop let user repeat calculation user
horoscope sign date arie march april taurus april gemini june cancer june july leo july august virgo august september libra september october scorpio october november sagittarius november december capricorn december january aquarius january february pisce february march practice program 
horoscope sign element compatible 
element astrology  sign fire arie  leo  sagittarius  earth taurus  virgo  capricorn  air gemini  libra  aquarius  water cancer  scorpio  pisce 
accord astrologer  comfortable sign sign element 
example  arie comfortable arie fire sign  leo sagittarius 
modify program practice program display name sign will compatible birthday 
write program find print prime number 
prime number number only number evenly divide example        
way solve problem doubly nest loop 
outer loop iterate inner loop check see counter value outer loop prime 
way see number prime loop number evenly divide prime 
value evenly divide prime 
buoyancy ability object float 
archimede  principle state buoyant force equal weight fluid displace submerge object 
buoyant force compute buoyant force  volume submerge object  specific weight fluid 
great equal weight object  will float  will sink 
lb specific weight water 
volume sphere compute 
write program find temperature celsius
formula convert celsius + program create integer variable temperature celsius
initialize temperature degree celsius 
loop  decrement celsius value compute corresponding temperature value
flow control work integer_value  formula give exact result possible celsius temperature 
will affect solution problem 
programming project programming project require problem solve practice program solve way 
visit complete programming project online instant feedback 
write program compute cost long distance call 
cost call determine accord follow rate schedule  call start am pm  monday friday  bill rate minute 
input will consist day week  time call start  length call minute 
output will cost call 
time input hour notation  time pm input day week will read follow pair character value  store variable type char  mo tu 
su sure allow user uppercase lowercase letter combination
number minute will input value type_int 
root quadratic equation + bx + zero give formula programming project value discriminant determine nature root 
value discriminant zero  equation single real root 
value discriminant positive equation real root 
value discriminant negative  equation complex root 
program take value output root 
creative output complex root 
include loop allow user repeat calculation value user want end program 
write program accept year write digit arabic ordinary numeral output year write roman numeral 
important roman numeral      
recall number form kind subtraction roman  digit   example  iv produce minus xl  cm 
sample year  mcm  mcml  mcmlx  mcmxl  mcmlxxxix 
assume year 
program include loop let user repeat calculation user
write program score blackjack hand 
blackjack  player receive card 
card score point
face card jack  queen  king score point 
goal come close score possible 
score call   ace count  user 
example  ace score 
score  hand score 
ace score 
bust  score  hand score 
user ask card user respond integer    
user ask card value 
card value  jack  queen  king  ace 
way handle type char card  example  read character    number 
input value character    
input value  jack  queen  king  ace character         
read value  program convert character value numeric card score  take special care ace 
output number inclusive word bust 
likely long multiway branch switch_statement nest statement 
program include loop let user repeat calculation user
flow control interest loan pay decline balance  loan interest rate percent cost significantly percent balance 
write program take loan amount interest rate output monthly payment balance loan loan pay
assume monthly payment onetwentieth original loan amount  amount excess interest credit decrease balance due 
loan  payment month 
interest rate percent  month interest twelfth percent remain balance 
first month  percent   pay interest  remain decrease balance 
following month interest percent  forth 
program output total interest pay life loan 
finally  determine simple annualize percentage original loan balance pay interest 
example  pay interest loan take year pay annualize interest  percent loan amount 
program allow user repeat calculation desire 
fibonacci number fn define follow 
word  number sum previous number 
first fibonacci number      
place number occur population growth rate 
population death  series show size population time period 
take organism time period mature reproduce age  organism reproduce once time period 
formula apply straightforwardly asexual reproduction rate offspring time period 
assume green crud population grow rate time period day 
green crud population start pound crud  day still pound crud  day pound crud  day pound  day pound  forth 
write program take initial size green crud population pound number day output number pound green crud day 
assume population size day increase fifth day 
program allow user repeat calculation desire 
value approximate sum +
program output calculate predefine function exp 
function exp predefined function return approximation value
function exp library header_file cmath 
program repeat calculation user
variable type double store factorial likely produce integer overflow arrange calculation avoid direct calculation factorial 
output output format will fit screen 
example  output line line 
approximate value calculate series give + + 
program take determine number term approximation value output approximation 
include loop allow user repeat calculation user want end program 
follow problem call  monty hall game show  contestant game show win shot grand prize 
closed door 
door brand
door consolation prize 
location prize randomly select 
game show host ask select door  pick
reveal content door  game show host reveal door consolation prize 
point  game show host ask like stick original choice switch choice closed door 
choice optimize chance win
matter stick original choice switch door 
write simulation program solve game show problem 
program simulated run problem  randomly select location prize  count number time win stick original choice  count number time win switch door 
output estimate probability win strategy 
sure program exactly simulate process select door  reveal switch 
assumption actual solution example  simply assume chance prize 
appendix give library function generate random number 
detailed description 
videonote solution programming project flow control repeat programming project addition ask user
sedentary user answer  sedentary   increase calculate percent 
user answer  active   increase calculate percent 
user answer  active   increase videonote solution programming project 
keypad oven enter desire bake temperature arrange like digit phone  
word  digit   work 
recipe call temperature enter  like substitute temperature enter 
write program input desire temperature 
temperature degree 
desire temperature contain    output desire temperature 
compute next large next small temperature contain   output
example  desire temperature  program output 
similarly  desire temperature  program output 
game  player game begin pile toothpick 
player take turn  withdraw   toothpick time 
player withdraw last toothpick lose game 
write human vs
human move first 
computer turn  play accord follow rule  
toothpick leave  computer withdraw toothpick  number toothpick human withdraw previous turn 
toothpick leave  computer withdraw toothpick leave 
toothpick leave  computer take lose 
human player enter number toothpick withdraw  program perform input validation 
sure enter number player try withdraw toothpick exist pile 
holy digits batman 
riddler plan next caper pennsylvania avenue 
usual sporting fashion  leave address form puzzle 
address pennsylvania digit number 
digit digit thousand place time digit place number odd sum digits write program loop loop find address riddler plan strike 
jonathan swift  gulliver travel introduction program think consist subpart  obtain input datum  calculate output datum  display output datum 
 like programming_language  facility name code subpart separately 
present basic syntax kind function namely design compute single value 
discuss function program design 
begin discussion fundamental design principle 
prerequisite read least look read
note  set instruction call algorithm 
plan attack design algorithm break task accomplish subtask  decompose subtask small subtask  forth 
eventually  subtask small trivial implement 
call top design 
preserve top structure program program easy understand  easy change need will apparent  easy write  test  debug 
 like programming_language  facility include separate subpart inside program 
programming_language subpart call subprogram  procedure  method 
additionally  divide task allow people work subtask 
produce large program  compiler office management system  sort teamwork need program produce reasonable amount time 
will begin discussion function show function write
show define function  will first show function define
predefine function will sqrt function illustrate predefined function 
sqrt function calculate square root number 
value function start call argument 
value compute call value_return 
function argument  function value_return 
think function similar small program  argument analogous input value_return analogous output 
syntax function program simple 
set variable_name equal square root  follow assignment statement   expression call function_call want fancy call function invocation 
argument function_call constant   variable  complicated expression 
function_call expression like expression 
function_call legal expression type specify value_return function 
example  value_return sqrt type double 
following legal stingy  sale variable normally type double 
function_call single item  just enclose parenthesis 
assignment statement equivalent
program compute size large square dog house build amount money user willing spend 
program ask user amount money determine square foot floor space purchase amount money 
calculation yield area square foot floor area dog house 
function sqrt yield length side dog house floor 
notice program display  cmath function_call function_call expression consist function_name follow argument enclose parenthesis 
argument  argument separate comma 
function_call expression like expression type specify value_return function 
syntax comma separate list argument  
note  line call directive 
name inside angular bracket name file know header_file 
header_file library predefine function display function_call 
sample dialogue enter amount budget dog house  price build luxurious square dog house foot
enable linker find object code function library correctly link library program 
example  library iostream contain definition cin header_file iostream library call iostream 
math library contain definition function sqrt number mathematical function  header_file library cmath 
program predefined function library  contain directive name header_file library  following  
sure follow syntax illustrate example 
forget symbol  symbol great symbol 
space filename  filename 
compiler require directive space  safe place start line put space word 
directive normally place beginning file contain program 
note directive iostream 
definition name like cin give iostream  define name part std namespace 
directive standard_library cmath 
need multiple copy using_directive multiple directive 
need library place directive using_directive library file program 
work just directive using_directive  need worry
library system  need give additional instruction compiler explicitly run linker program link library 
early compiler automatically search library link 
detail vary system will check manual local expert see exactly
people will tell directive process compiler  process preprocessor 
right  difference word game need
compiler preprocessor call automatically compile program 
predefine function display  predefine function appendix 
notice absolute value_function ab lab library header_file cstdlib  program function contain follow directive  cstdlib 
notice absolute value_function 
want produce absolute value number type_int  ab  want produce absolute value number type long  lab  want produce absolute value number type double  fab 
complicate ab lab library header_file cstdlib  fab library header_file cmath 
recall number fraction decimal_point  number type double  call float point number 
example predefine function pow  library header_file cmath 
function pow exponentiation 
example  want set variable equal xy  following    display predefine function 
description type argument type value_return example value library header sqrt 
procedural abstraction function return value 
function pow return value type double  type_int 
notice function pow require argument 
function number argument 
argument position specify type argument function_call type 
case  argument wrong type  automatic type_conversion will 
result intend 
call function  argument type specify function 
exception caution automatic conversion argument type_int type double 
situation  include call function pow  safely argument type_int argument type double specify 
implementation pow restriction argument
implementation  first argument pow negative  second argument whole number 
worry learn program  easiest safe pow only first argument nonnegative 
random number generation random pseudorandom number game simulation program require generation random number 
predefined function generate pseudorandom number 
pseudorandom number random determine predictable formula 
example  here formula simple pseudorandom number generator specify ith random number base previously generate random number  videonote random number generation let set initial  seed   
first time fetch random  number compute formula  second time fetch random  number compute third time fetch random  number compute
call pseudorandom 
function pseudorandom number generator repeat number quickly 
random number generator varie depend library implementation basic idea simple generator enhancement achieve random uniform distribution 
sequence random number start seed value 
example  seed start 
seed initialize number change  time computer clock  will likely sequence random number time run program 
seed random number generator predefined method srand 
return value take input unsigned integer initial seed value 
seed random number generator value   vary random number sequence time program execute  seed random number generator time day 
invoke predefine function return number second elapse january  system 
time function require ctime library 
random number call function rand  will_return integer range 
constant define cstdlib guarantee high 
number desire  case random number scale modulus addition 
example  simulate roll sixside following  int rand +  random number modulo give number 
add result random integer range 
important seed random number generator only once 
common error invoke srand time random number generate 
srand rand place loop  likely sequence identical number  computer run quickly time value will change repeat call srand 
number second elapse january  know unix time 
procedural abstraction function return value type casting division require type double recall integer division evaluate  
want division produce answer type double include fractional part decimal_point  least number division type double 
example  evaluate 
number give constant  simply add decimal_point zero number  division will produce value include digit decimal_point 
operand division variable  following 
matter program  convert value variable value type double  result division will 
variable type double help 
value obtain division will convert value type double store variable  will late 
will convert final value will  
quantity division constant  add decimal_point zero convert constant type double  case quantity variable 
fortunately  way convert type_int type double constant variable 
tell computer convert value type_int value type double 
way write  convert value value type double  notation double kind predefine function convert value type   value type double  case 
expression call type cast 
variable expression place 
type_name double obtain type cast type double  will postpone topic later 
example  following type cast change type int double value set  double   
want convert value type double 
division involve only variable  type casting only sensible alternative 
type casting  rewrite early example variable receive correct value   order only change need replacement candy  show follow  int   double  program set value value 
matter program  notice placement parenthesis type casting code 
want type cast division division operator work value type double 
wait division complete  digit decimal_point lose 
mistakenly following last line previous code  value will  
function convert int double notation double predefined function will convert value type value type double 
example  return 
call type casting 
procedural abstraction function return value old form type cast double function double  discuss previous section  preferred way perform type cast 
old version notation type casting 
old notation simply type_name function_name  return 
variable type double  variable type_int  follow assignment statement equivalent   
pitfall integer division drop fractional part integer division  compute  easy forget give  
fractional part generate 
observe type double change division result 
variable receive value  
convert follow mathematical expression arithmetic expression  + xy + time + tide area + fudge 
write complete program compute output square root pi  pi approximately 
const double pi predefine cmath 
encourage predefine constant 
write compile short program test follow issue  compiler_will allow include iostream line  need flush left margin 
uncle  tailor previous section tell predefined function 
section tell define function 
function definition define function  file part program separate file function program 
definition case  now  will assume function definition will file part program 
display contain sample function definition complete program demonstrate call function 
function call 
function take argument price item number item purchase 
function_return total cost  include sale tax  item specified price 
function call way predefine function call 
description function  programmer write  bit complicated 
description function give part call function_declaration function definition 
function_declaration know function prototype function call 
require complete function definition 
procedural abstraction function return value display function definition 
sample dialogue enter number item purchase  enter price item  item
final  include tax  function_body function definition programmer define function function_declaration code function call 
function_declaration function color top display reproduce here  double  double  function_declaration tell need know order write call function 
tell name function  case 
tell argument function need type argument case  function take argument  first type_int second type double 
identifier call formal parameter 
formal parameter kind blank  place holder  stand argument 
write function_declaration  know argument will formal parameter place argument 
name formal parameter valid identifier  will end formal parameter name par will easy distinguish item program 
notice function_declaration end semicolon 
first word function_declaration specify type value_return function 
function  type value_return double 
see  function_call display satisfie requirement give function_declaration 
let take look 
function_call follow line   price  function_call expression right hand side equal sign 
function_name  argument  first argument type_int  second argument type double  variable type double  look like function_return value type double 
detail determine function_declaration 
compiler care comment function_declaration  comment explain value return function 
function declaration function_declaration tell need know write call function 
function_declaration require code prior call function definition
function declaration normally place part program 
 forget semicolon 
display function definition color bottom display 
function definition function compute value return 
think function small program program  function definition like code small program 
syntax definition function like syntax part program 
function definition consist function header follow function_body 
function header write way function_declaration  header semicolon end 
header bit repetitious  ok 
function_declaration tell need know write function_call  tell value will return 
value_return determine statement function_body 
function_body follow function header complete function definition 
function_body consist declaration executable statement enclose pair brace 
function_body just_like body part program 
function call  argument value plug formal parameter statement body execute 
value_return function determine function execute return_statement 
function definition display contain follow return_statement  return +  return_statement execute  value follow expression return value function_call  programmer define function 
consistency  programmer advocate parenthese simple expression 
function definition display  statement return_statement  execute 
return_statement execute  function_call end 
function like small program understand function  keep follow point mind  function definition like small program call function function formal parameter  cin  input 
argument function input plug formal parameter 
function_return value  like output  function 
function return_statement cout statement let see exactly happen follow function_call execute program show display   price  first  value argument number price plug formal parameter  value argument number price substitute 
sample dialogue  number receive value price receive value 
substitution process know call value mechanism  formal parameter refer call value formal parameter  simply call value parameter 
note substitution process  
value argument plug formal parameter 
argument variable  value variable  variable plug
first argument plug first formal parameter parameter list  second argument plug second formal parameter list  forth 
procedural abstraction function return value 
argument plug formal parameter instance  plug  argument plug instance formal parameter occur function_body instance  plug time function_body 
entire process involve function_call show display detail display 
display detail function_call 
function call  value variable number price set  cin statement see sample dialogue 
function_call execute value number  price  number plug value price  plug 
return_statement execute  value expression return evaluate return function 
value return function invoke 
result number  price replace return_value 
value left hand side equal sign set equal statement number  price  finally end 
function return boolean value function return bool value 
function boolean expression control statement control loop statement  boolean expression allow 
return_type function type bool 
call function return boolean value true false boolean expression allow 
program easy read 
mean function_declaration  associate complex boolean expression meaningful name name boolean expression statement boolean expression allow 
example  statement 
follow function_declaration equivalent  double  double  
will first form refer formal parameter comment accompany function_declaration 
will see second form manual need link program library function function_name sequence type formal parameter 
formal parameter name important only function definition 
program communicate programmer compiler 
frequently helpful understand function name programmer attach function datum 
procedural abstraction function return value alternate form apply only function_declaration 
function header list formal parameter name 
pitfall argument wrong order function call  computer substitute first argument first formal parameter  second argument second formal parameter  forth 
check reasonableness 
confuse order argument function_call  program_will want
order see wrong  program display 
programmer who write program carelessly reverse order argument call function grade 
function_call   only mistake program 
poor student mistakenly course careless mistake 
function grade simple expect mistake discover programmer program test 
grade complicated function  mistake easily unnoticed 
type argument match formal parameter  compiler give warn message 
unfortunately  compiler_will give warning message 
situation like 
sample dialogue enter score minimum need pass  receive score minimum pass sorry 
will enter record 
display  compiler_will complain ordering argument  function argument type will match formal parameter_type matter order argument
display give summary syntax function_declaration definition 
actually bit freedom display
declaration executable statement function definition intermix  videonote programmer define function example 
procedural abstraction function return value spacing line break long variable declare
rule intermix declaration executable statement function definition part program 
reason place declaration first  display 
function return value execute return_statement  function contain return_statement body function 
function definition contain return_statement 
example  body code contain statement  branch statement contain return_statement  illustrate display 
reasonable pattern space line break function definition will accept compiler 
rule indent lay function definition part program 
notice placement brace function definition display 
opening closing brace mark end function_body place line
placement function definition discuss function definition function_declaration normally place 
normal circumstance location function_declaration function definition 
compiler_will accept program function definition function_declaration location 
precise statement rule follow  display syntax function return value_function declaration  
programmer define function function_call precede function_declaration function definition function 
example  place function definition part program  need include function_declaration 
know general rule will help understand program see book  follow example program book 
style set stage learn build library function  style programmer
switch_statement statement difficult read 
look switch_statement display 
branch choice   single function_call 
layout switch_statement structure program clear 
place code branch switch_statement  function definition  switch_statement incomprehensible sea statement 
switch_statement fit screen 
procedural abstraction function return value 
write function_declaration function definition function take argument  type_int  return sum argument 
write function_declaration function definition function take argument type_int argument type double  return value type double average argument 
write function_declaration function definition function take argument type double 
function_return character value  argument positive return  argument zero negative 
carefully call value parameter mechanism 
list similarity difference predefine library function user define function 
write function definition function_call take argument type_int 
function_return true argument ascend order  return false 
example      return true    return false 
write function definition function_call take argument type_int return bool value 
function_return true argument number  return false 
write function definition function take argument type char return bool value 
function_return true argument decimal digit  return false 
write function definition function take argument type_int return bool value 
function_return true first argument square root second  return false 
ovid  metamorphose iv black box analogy person who program need know detail program code 
imagine miserable life procedural abstraction know remember code compiler
program job compile program check spelling word paper 
need know program job program  least need know program job 
function like small program similar way 
programmer who function program need know function calculate square root convert temperature degree fahrenheit degree celsius need know function accomplish task 
refer treat function like black box 
call black box figure speech intend convey image physical device know method operation enclose black box see inside box pry 
function design  programmer function black box 
programmer need know put argument black box  return_value will come black box 
design function black box call hide emphasize programmer act body function hide view 
display contain function_declaration definition function_name 
function_declaration comment explain  function calculate bank account simple interest add 
instance  account start  percent interest post account  
follow code will change value     matter implementation show display programmer
definition produce function return exactly value 
place black box body function definition programmer know implementation
order function  programmer need read function_declaration accompanying comment 
write function black box call procedural abstraction 
program sense call functional abstraction 
procedure general term 
procedural abstraction function return value display definition black box equivalent function_declaration 
term mean
call principle  important point design write function definition 
procedural abstraction apply function definition  principle procedural abstraction mean function write like black box 
mean programmer who function need look body function definition procedural abstraction see function work 
function_declaration accompanying comment programmer need know order function 
ensure function definition important property  strictly adhere follow rule  write black box function definition return function_declaration comment tell programmer condition require argument function value return function call argument 
large programming project  programmer assign write function 
programmer choose meaningful name find formal parameter 
argument will substitute formal parameter variable part program 
variable give meaningful name  choose programmer who write function definition 
likely argument will name formal parameter 
perfectly acceptable 
matter name choose variable will argument  name will produce confusion name formal parameter 
function_will only value argument 
variable function argument  function take only value variable disregard variable_name 
now know complete freedom choose formal parameter name  will place par  end formal parameter name 
example  display rewrite definition function display formal parameter name number price 
replace function_declaration definition function display version display  program_will perform exactly way  will formal parameter name number price will variable part program name number price 
procedural abstraction function return value display simple formal parameter name function_declaration 
function definition 
explicitly nest loop display compute total number green necked vulture egg count conservationist 
code readable move loop procedure call  show display 
version program total green necked vulture egg equivalent 
program produce dialogue user 
people find version display easy understand loop body function_call 
outer loop  think compute conservationist report single operation think loop 
way separate design loop body design rest program 
divide programming task small subtask 
procedural abstraction function return value 
sample dialogue program tally conservationist green necked vulture 
conservationist report consist list number 
egg observe green necked vulture nest 
program tally egg 
place negative integer end list 
place negative integer end list 
true buy pizza 
pizza size give diameter pizza inch 
quantity pizza determine area pizza  area proportional diameter 
people easily estimate difference area inch pizza inch pizza easily determine size buy size low price square inch 
case study will design program compare size pizza determine buy 
problem definition precise specification program input output follow  input input will consist diameter inch price size pizza 
output output will give cost square inch size pizza will tell buy  low cost square inch 
subtask  compute price square inch small pizza 
subtask  compute price square inch large pizza 
subtask  determine buy 
subtask  output result 
notice subtask 
important property  subtask 
procedural abstraction function return value 
exactly task 
only difference datum computation 
only change subtask subtask size pizza price 
result subtask result subtask single value  price square inch pizza 
define function subtask take value  number  return single value  natural implement subtask function 
subtask perform computation  implement function_call argument time
decide function_call unitprice compute price square inch pizza 
function_declaration explanatory comment function_will follow  double diameter  double price  price square inch pizza 
formal name diameter diameter pizza 
formal parameter name price price pizza 
subtask subtask subtask straightforward 
program_will simply ask input value store variable  will call    
subtask routine 
determine pizza buy  just compare cost square inch pizza operator 
subtask routine output result 
subtask implement call function unitprice 
next  design algorithm function 
hard part algorithm determine area pizza 
once know area  easily determine price square inch division  follow  price area area variable hold area pizza 
expression will value_return function unitprice 
still need formulate method compute area pizza 
pizza basically circle bread  cheese  sauce  forth 
area circle pizza œÄr  radius circle number call  pi   approximately equal 
radius half diameter 
algorithm function unitprice outline follow  algorithm outline function unitprice 
compute radius pizza 
compute area pizza formula œÄr 
return value expression price area 
will express detailed version algorithm pseudocode 
pseudocode mixture ordinary english 
pseudocode allow algorithm precise worry detail syntax 
easily translate pseudocode code 
pseudocode  will variable hold value name 
pseudocode function unitprice 
code code subtask routine  next subtask 
program implement subtasks follow call
benefit function definition multiple call function program 
trouble repeat code 
still write code function unitprice 
translate pseudocode code  obtain following body function unitprice  draft function_body unitprice 
write  line contain mistake 
want division produce pizza include fraction 
procedural abstraction function return value example  buy bad luck special   inch pizza  inch 
variable diameter type_int 
see  line perform integer division compute correct value  disregard half inch pizza 
likelihood  unnoticed  result million subscriber pizza consumer union waste money buy wrong size pizza 
likely produce major worldwide recession  program accomplish goal help consumer find buy 
important program  result simple mistake disastrous 
fix mistake 
want division regular division include fractional part answer 
form division require least argument division operator type double 
type cast convert constant value type double 
recall  call type casting  convert int value value type double 
replace  will change second argument division type_int type double  division will produce result want 
rewrite assignment statement  complete correct code function definition unitprice  rest program  show display 
type cast return value  constant place 
way  function unitprice will_return value 
 conspicuously obvious want version division include fractional part answer 
 revise copy code  easily mistake change  produce subtle problem 
need remark coding program 
see display  code task  combine task single section code consist sequence cout statement follow statement 
task simple closely sense combine single task 
program testing just program compile produce answer look right mean program correct 
order increase confidence program  test input value know correct answer mean  work answer paper pencil handheld calculator 
example  sense buy inch pizza  still procedural abstraction 
procedural abstraction function return value 
sample dialogue welcome pizza consumer union 
enter diameter small pizza inch enter price small pizza  enter diameter large pizza inch enter price large pizza  small pizza  inch square large pizza  inch square small buy 
easy test case easy compute answer hand 
let calculate cost square pizza sell 
diameter inch  
divide price  find price square  approximately 
course  absurd size pizza absurd price small pizza  easy determine value function unitprice return argument 
check program case  confidence still program correct 
incorrect program give correct answer  will give incorrect answer input 
procedural abstraction test incorrect program case program happen give correct output 
example  suppose catch mistake discover code function unitprice 
suppose mistakenly follow line  
long pizza diameter number  like     program give answer divide static cast 
unlikely occur sure check odd size pizza 
test program pizza size  chance test case will contain sample relevant kind datum 
pseudocode mixture programming_language ordinary english human language 
pseudocode allow state algorithm precisely worry detail syntax 
code step algorithm obvious  little point state english 
step difficult express  algorithm will clear step express english 
see example pseudocode previous case study  express algorithm function unitprice pseudocode 
purpose comment accompany function_declaration 
principle procedural abstraction apply function definition 
mean programmer who function able treat function like black box 
carefully process program testing 
procedural abstraction function return value 
possible definition function unitprice 
definition give display 
definition type cast replace constant  word  line  
possible function definition black box equivalent 
common saying last section advocate function black box 
order define function black box  need give function variable interfere rest program 
variable belong function call local_variable 
will see  variable simply conform scope rule nest block 
section take look scope emphasis local_variable
small program analogy look back program display 
include call predefine function sqrt 
need know detail function definition sqrt order function 
need know variable declare definition sqrt 
function define
variable declaration function definition write separate function definition predefine function 
variable declaration function definition variable declaration program 
declare variable function definition declare variable name part program body function definition  variable variable  name 
let look program variable function definition name variable program 
program display variable_name  declare function definition function  declare part program 
variable scope local_variable 
procedural abstraction function return value sample dialogue enter minimum maximum number pea enter number pod  enter average pea ounce min number pea max number pea average pea ounce estimate average ounce function definition variable part program variable 
function predefine function 
variable_name will interfere variable completely program
variable give value function_call  change value variable part program name 
variable define body program local part program part program scope 
kind variable local function part program  will variable 
variable will local function definition local part program 
variable local_variable mention function mention part program  mean variable local function definition 
local variable_variable declare body function definition local function function scope 
variable declare part program local part program part program scope 
variable local_variable mention function mention part scope local_variable program  mean variable local function definition 
variable local function  variable name declare part program function definition  will variable  name 
programming example experimental pea patch program display give estimate total small garden plot raise experimental variety pea 
function return estimate total number pea harvest 
function take argument 
argument number pea pod harvest 
argument estimate average number pea
pea pod contain differ number pea  argument function small large number pea find
function average number average estimate average number pea
global constant global_variable note  name constant value const modifier 
example  display follow declaration give name constant  const double  
work fine name constant only function 
easily happen function name constant 
case place declaration name constant beginning program  body function body part program 
name constant global name constant name constant function definition follow constant declaration 
display show program example global name constant 
program ask radius compute area 
procedural abstraction function return value area circle volume sphere 
programmer who write program look formula compute quantity find following  formula constant  approximately equal 
symbol greek letter call   previous program follow declaration produce name constant call convert formula code  const double  program display declaration place near beginning file define global name constant function_body 
compiler allow wide latitude place declaration global name constant  readability place directive global name constant declaration group  function_declaration
will follow standard practice place global name constant declaration directive function_declaration 
place name constant declaration start program readability name constant only function 
name constant need change future version program  will easy find beginning program 
example  place constant declaration sale tax rate beginning accounting program_will easy revise program tax rate increase 
possible declare ordinary variable  const modifier  global_variable  accessible function definition file 
way global name constant  videonote walkthrough function local_variable procedural abstraction function return value modifi const variable declaration 
seldom need global_variable 
global_variable program hard understand maintain  will global_variable 
once experience design program  choose occasionally global_variable 
call value formal parameter local_variable formal parameter just blank fill argument value function 
formal parameter actually variable local function definition  just_like local_variable declare function definition 
early call value mechanism handle argument function_call 
now define mechanism plug argument  detail 
function call  formal parameter function local_variable initialize value argument 
precise meaning phrase  plug formal parameter 
typically  formal parameter only kind blank  place holder  fill value corresponding argument  occasionally  formal parameter variable value change 
section will give example formal parameter local_variable 
program display billing program law office dewey  cheatham  howe 
notice law firm  firm dewey  cheatham  howe charge time quarter hour 
call  law office  work hour minute  only charge quarter hour  quarter hour firm pay only consultation 
sample dialogue welcome office dewey  cheatham  howe 
law office heart 
enter hour minute consultation  hour minute  notice formal parameter definition function fee 
variable value change follow line  occur function definition  +  formal parameter local_variable just like variable declare body function 
add variable add declaration formal parameter procedural abstraction function return value declaration formal parameter 
list formal parameter minute work function_declaration serve variable declaration 
follow wrong way start function definition fee declare twice  
block scope scope local_variable refer part program directly access variable refer local scope 
similarly  global identifier declare beginning program  body function  refer global scope 
difference  local global identifier example block scope 
block code enclose brace  exception global block   imply outermost block encompass code 
scope rule state identifier declare block local block accessible only point define end block 
block commonly nest 
example  brace function define block loop inside define nest block 
program outline display compute interesting illustrate scope identifier declare block 
example  constant global scope  function declare body function 
allow access 
function_declare variable local
scope extend end block 
similarly  function parameter param local_variable scope extend end 
variable directly accessible scope 
scope local_variable parameter rule block scope  case block refer function variable parameter declare 
loop display illustrate scope nest block 
variable declare inside loop only scope end loop block 
attempt reference scope  still inside example  line result compiler error 
think variable create scope begin destroy scope end 
example  local_variable display create initialize time call 
code line change value_store change scope local_variable display local  global  block scope block scope revisit 
block scope  variable scope line local scope variable scope line variable scope line 
local  variable param line variable line lose function exit variable destroy 
repeat call will recall previous value will create 
addition block namespace class 
class discuss namespace 
define function prototype  refer line parameter define function prototype 
finally  support function  label 
label remnant language goto statement 
generally shun result logic difficult follow  task perform loop understandable fashion 
constant line function line 
will allow namespace function definition  function definition file namespace meaning namespace 
place using_directive inside function definition analogous place variable declaration inside function definition 
place variable definition inside function definition  variable local function  meaning variable declaration confine function definition 
place using_directive inside function definition  using_directive local function definition  word  meaning using_directive confine function definition 
will time namespace std using_directive  will practice start place using_directive
display rewrite program display using_directive place 
program display will behave exactly display 
case  difference only style  start namespace  difference will affect program perform 
elf tes exerc ise 
variable function definition  declare variable 
function definition 
part program 
place convenient 
procedural abstraction function return value 
suppose function_name variable_name sam declare definition  function_name variable_name sam declare definition 
will program compile assume correct 
program_will compile  will run assume correct 
run  will generate error_message run assume correct 
run produce error_message run  will give correct output assume correct 
follow function suppose take argument length express foot return total number foot
example  suppose return  foot 
write function_declaration function definition function_call parameter return value type double 
function prompt user value type double read value local_variable 
function_return value read value great equal zero return zero value read negative 
programming example factorial function display contain function_declaration definition commonly mathematical function know factorial function 
mathematic text  factorial function write 
traditional mathematical notation  define 
note multiplication perform reverse order expect 
program multiplie   forth 
function definition 
function definition factorial local_variable   declare start function_body  formal parameter 
formal parameter local_variable  change value 
case change value formal parameter decrement operator 
function factorial call argument  first time loop body execute value  next time loop body execute value  next time value  loop end 
follow will set variable equal   notice local_variable initialize value variable declare 
see correct initial value note execute body loop first time  want value equal original value formal parameter  initialize  will happen 
formal parameter local_variable procedural abstraction function return value overload function_name  show hundred sixty day question  alice   word mean lewis carroll  look glass allow give definition function_name  mean reuse name strong intuitive appeal across variety situation 
example  function_call max  compute large number  compute large number  compute large number 
give function definition function_name  call overload function_name 
overloading require extra care define function will add greatly program readability 
overloading effective 
introduction overload suppose write program require compute average 
will work  programming_language choice like
fortunately  allow elegant solution 
simply name ave function  follow definition place definition  
display overload function_name 
average   average argument 
procedural abstraction function return value determine definition apply now definition 
example overload 
case overload
display embed definition complete sample program 
sure notice definition declaration 
overloading great idea 
program easy read  crazy try think just natural definition 
compiler know definition encounter call definition 
compiler read programmer mind 
order tell definition compiler check number argument type argument call 
program display  function_call argument argument 
tell definition compiler simply count number argument call 
argument  first definition 
argument  second definition 
give definition  definition specification argument  definition number formal parameter formal parameter type 
notice overload declaration definition differ formal parameter 
overload give definition differ only type value_return 
overload function_name definition  call overload 
overload  definition number formal parameter formal parameter type 
call  compiler definition number formal parameter type formal parameter match argument call 
see kind overload division operator
operand type_int   value_return result integer division  case 
hand  operand type double  value_return result regular division  example  return value 
definition division operator  overload function_name definition distinguish number operand  require operand type 
difference overload overload name compiler overloading program overloading function 
will see later overload_operator  
programming example revise pizza buy program pizza consumer union successful program write display 
now buy pizza buy 
disreputable pizza parlor money fool consumer buy expensive pizza  program put end evil practice 
owner wish continue despicable behavior come fool consumer 
now offer round pizza rectangular pizza 
know program write deal rectangularly shape pizza  hope confuse consumer 
need update program foil nefarious scheme 
want change program compare round pizza rectangular pizza 
change need pizza evaluation program clear  need change input output bit deal shape pizza 
need add compute cost square inch rectangular pizza 
follow definition program compute unit price rectangular pizza  double 
long long need put head line 
legal  nice unitprice  compute unit price round pizza compute unit price rectangular pizza 
allow overload name 
definition unitprice will pose problem compiler function_will number argument 
display show program obtain modify pizza evaluation program allow compare round pizza rectangular pizza 
procedural abstraction function return value round pizza rectangular pizza buy 
formal parameter name price price pizza 
sample dialogue welcome pizza consumer union 
enter diameter inch round pizza  enter price round pizza  enter length width inch rectangular pizza  enter price rectangular pizza  round pizza  inch square rectangular pizza  inch rectangular pizza  inch square round buy 
procedural abstraction function return value automatic type_conversion suppose follow function definition occur program overload function_name mpg only definition function_call 
follow will output mile gallon screen    mile gallon   interaction overloading type_conversion convert  perform division obtain value_return  
function require argument type double give argument type_int  will automatically convert int argument value type double 
useful natural give thought 
overload interfere automatic type_conversion 
let look example 
now  suppose foolishly overload function_name program contain follow definition previous 
find function definition  function definition 
convert int argument value type double only way find matching function definition 
example illustrate point overload 
function_name unrelated function 
careless function_name eventually produce confusion 
suppose function definition follow function 
suppose function definition function_declaration 
suppose function definition function_declaration 
question programming example  revise pizzabuye  suppose evil pizza parlor try fool customer introduce square pizza 
overload function unitprice compute price square square pizza price square round pizza 
look program display 
function contain using_directive  namespace std  
procedural abstraction function return value summary plan attack design algorithm program break task accomplish subtask  decompose subtask small subtask  forth subtask simple easily implement code 
approach call top design 
argument function serve input small program  value_return subtask program take value input produce single value only result  subtask implement function 
programmer who function need know detail function code 
programmer need know function_declaration accompanying comment value_return 
rule call principle procedural abstraction 
declaration global name constant normally place start program include directive function_declaration 
occasionally  useful formal parameter local_variable 
overload function_name  function definition number formal parameter formal parameter type 
answer self est exerci se 
suppose function define argument  
function call correspond argument 
value argument plug correspond formal parameter   
formal parameter function 
predefine library function require header_file 
programmer define function  programmer put code function file part program file compile link program 
comment explain value function_return give need know order function 
principle procedural abstraction function write like black box 
mean programmer who function need look body function definition see function work 
function_declaration accompanying comment programmer need know order function 
programmer who function able treat function like black box  mean programmer need look body function definition see function work 
function_declaration accompanying comment programmer need know order function 
order increase confidence program  test input value know correct answer 
calculate answer mean  pencil paper hand calculator 
yes  function value case  definition black box equivalent 
variable function definition  declare variable body function definition 
will fine 
program_will compile assume correct 
program_will run assume correct 
program_will generate error_message run assume correct 
program_will give correct output assume correct 
function_will work fine 
entire answer  here additional formal parameter inch call value parameter discuss text  local_variable 
value argument will change 
function_call only argument  function definition only formal parameter 
function_call argument type double  function correspond function_declaration argument type double first function_declaration 
second argument type_int first argument automatically convert type double need  function correspond function_declaration first argument type double second argument type_int second function_declaration 
second argument type double first argument automatically convert type double need  function correspond function_declaration argument type double first function_declaration 
least nice way 
natural way represent square round pizza
naturally represent diameter round pizza length side square pizza 
case function unitprice need formal parameter type double price formal parameter type_int size radius side 
function_declaration type formal parameter 
still defeat evil pizza parlor strategy define function  will need name 
definition unitprice input output library iostream 
need using_directive cin define iostream definition place cin std namespace 
practice program practice program generally solve short program directly apply programming principle present
liter gallon 
write program will read liter gasoline consume user car mile travel car will output mile gallon car deliver 
program allow user repeat calculation user wish 
define function compute mile gallon 
program globally define constant liter gallon 
modify program practice program will take input datum car output mile gallon deliver car 
program_will announce car fuel efficiency high mile gallon 
price stock give near eighth dollar  example  
write program compute value user holding stock 
program ask share stock whole dollar portion price  fraction portion 
fraction portion input int value  numerator denominator 
program output value user holding 
program allow user repeat calculation user wish will include function definition int argument consist whole dollar portion price integer fraction part 
function_return price share stock single type double 
estimate inflation rate difference price divide year ago price 
program allow user repeat calculation user wish 
define function compute rate inflation 
inflation rate value type double give rate percent  example percent 
procedural abstraction function return value 
enhance program previous practice program print estimate price item year time calculation 
increase cost year estimate inflation rate time price start year 
define second function determine estimate cost item year  give current price item inflation rate argument 
write function_declaration function compute interest credit card account balance 
function take argument initial balance  monthly interest rate  number month interest pay 
value_return interest due 
forget compound interest charge interest interest due 
interest due add balance due  interest next month compute large balance 
loop similar need identical show display 
embed function program read value interest rate  initial account balance  number month  output interest due 
embed function definition program let user compute interest due credit account balance 
program allow user repeat calculation user want end program 
videonote solution practice program 
gravitational attractive force body masse separate distance give universal gravitational constant  cm write function definition take argument masse body distance return gravitational force 
will precede formula  gravitational force will dyne 
dyne equal cm globally define constant universal gravitational constant 
embed function definition complete program compute gravitational force object give suitable input 
program allow user repeat calculation user wish 
bless  absolute value_function accident history 
library arrive  easily rewrite function overloading 
find absolute value_function rewrite programming project overload ab function_name 
minimum  int  long  float  double type represent 
write overloaded function max take parameter type double return large
programming project programming project require problem solve practice program solve way 
visit complete programming project online instant feedback 
write program compute annual tax cost first year ownership 
cost compute annual mortgage cost minus tax saving 
input price payment 
annual mortgage cost estimate percent initial loan balance credit pay loan principal plus percent initial loan balance interest 
initial loan balance price minus payment 
assume percent marginal tax rate assume interest payment tax deductible 
tax saving percent interest payment 
program least function definition allow user repeat calculation user wish 
write program ask user height  weight  age  compute clothing size accord formula  weight pound divide height multiply 
weight divide adjust add inch year age 
adjustment age  function calculation 
program allow user repeat calculation user wish 
modify program programming project calculate user jacket waist size year 
write program output lyric song  ninety bottle beer  program print number bottle english  number 
procedural abstraction function return value ninety bottle beer wall  ninety bottle beer  take pass ninety bottle beer wall 
zero bottle beer wall 
design program function take argument integer return string contain integer_value english 
function statement 
extract digit construct string 
need test specifically value  
maintain body weight  adult human need consume calorie daily meet basal metabolic rate energy breathe  maintain body temperature   account physical activity exercise  account energy digest food eat 
adult weigh pound  estimate caloric requirement follow formula 
basal metabolic rate 
physical activity  intensity minute here  minute number minute spend physical activity  intensity number estimate intensity activity 
here sample number range value  activity intensity 
energy digest food  calorie totalcaloriesconsume word  percent calorie consume digestion 
write function compute calorie basal metabolic rate  take input parameter person weight 
write compute calorie physical activity  take input parameter intensity  weight  minute spend exercise 
programming project function program input person weight  estimate intensity physical activity  number minute spend perform physical activity  number calorie serve favorite food 
program calculate output serving food eat day maintain person current weight specify activity level 
computation include energy digest food 
find estimate caloric content food web 
example  double cheeseburger approximately calorie 
invent vend machine capable deep frying twinkie 
write program simulate vend machine 
cost buy deep fry twinkie  machine only take coin denomination dollar  quarter  dime  nickel 
write code simulate person put money vend machine repeatedly prompt user next coin insert 
output total enter coin insert 
add  program output  enjoy deep fry twinkie  change return 
top design determine function program 
time machine capable forward time hour 
machine configure jump ahead minute 
enter proper number machine  like program calculate difference start future time 
time specify program variable  int   bool  
write program allow user enter start time future time 
include function_name computedifference take variable parameter represent start time future time 
function return  int  time difference
example  give start time am future time pm  program compute time difference 
give start time am future time program compute time difference 
procedural abstraction function return value need  am  pm  user input read character value 
example  variable type char   boolean expression evaluate true contain letter
videonote solution programming project 
programming project write function_name containsdigit determine number contain digit 
header look like  bool number  int digit  number contain digit  function return true 
function return false 
program function find close number enter keypad 
sport league follow lottery system select draft pick bad team league 
determine first pick draft ball select random 
team ball first pick 
ball put back urn 
determine second pick draft ball select random 
ball belong team first pick put back process repeat ball select belong first pick 
determine subsequent pick draft process repeat ball select belong team choose 
write function take input team grant pick  simulate select ball urn accord lottery rule  return team belong select ball 
choose design function perform action 
write function output draft order  possible order secondto last pick  last place pick  third last pick  fourth last pick 
change random seed order differ run program multiple time 
slightly hard version problem  allow user input name team 
program output team name draft order 
function subtask void function definition void function programming example  convert temperature return_statement void function call reference parameter first view call reference call reference detail programming example  function mixed parameter list programming tip  kind parameter pitfall  inadvertent local_variable summary answer self test exercise procedural abstraction function_call function precondition postcondition case study  supermarket pricing debug function stub driver debug technique keep open mind check common error localize error assert macro practice program programming project possible 
common maxim introduction top design strategy discuss effective way design algorithm program 
divide program task subtask implement algorithm subtask function 
see define function start value argument return single value result function_call 
subtask compute single value important kind subtask  only kind 
will complete description function present technique design function perform kind subtask 
prerequisite read read
function discuss return single value  form subtask 
subtask produce value produce value
 function return single value return value
will see later subtask produce value paradoxically implement function return value 
moment  let avoid complication focus subtask intuitively produce value let see subtask implement 
function return value call void function 
example  typical subtask program output result calculation 
subtask produce output screen  produce value rest program
kind subtask implement void function 
definition void function void function define way function return value 
example  following void function output result calculation convert temperature express fahrenheit void function degree temperature express celsius degree 
actual calculation program 
void function implement only subtask output result calculation 
now  need worry calculation will perform 
function definition illustrate  only difference function definition void function function definition discuss 
difference keyword void normally specify type value return 
tell compiler function_will return value 
name void way value return  second difference return_statement contain expression value return  value_return 
syntax summarize display 
void function_call executable statement 
example  function call follow    statement execute program  cause following screen  degree fahrenheit equivalent degree celsius 
notice function_call end semicolon  tell compiler function_call executable statement 
void function call  argument substitute formal parameter statement function_body execute 
example  call void function  give early section  will cause output write screen 
way think call void function imagine body function definition copy program place function_call 
function call  argument substitute formal parameter  just body function line program 
function definition function_call 
function subtask display syntax void function definition void function_declaration void  void function definition body 
function header intermix declaration executable statement include return_statement 
perfectly legal  useful  function argument 
case  simply formal parameter list function_declaration argument function call 
example  void function  define next  simply command screen  
next programming example show sample void function complete program 
fahrenheit temperature convert equivalent celsius temperature follow  function celsius show display formula temperature conversion 
case function return value  return_statement specify value_return 
case void function  return_statement simply end function_call 
see previous function return value end execute return_statement 
void function need contain return_statement 
contain return_statement  will end execute code function_body 
implicit return_statement just final closing brace end function_body 
example  function display perform exactly omit return_statement function definition 
implicit return_statement final closing brace function_body mean need return_statement void function 
example  function definition display part restaurant management program 
function output instruction divide give amount ice cream people table 
people table number equal  return_statement statement terminate function_call avoid division zero 
number  function_call end last statement execute end function_body 
now guess part program actually definition function_call
program run  function automatically call turn  call function 
return_statement part program optional  officially
technically  part program function return value type_int  require return_statement 
function void function 
treat part program function return integer sound void function return_statement part program function function subtask 
sample dialogue will convert fahrenheit temperature celsius 
enter temperature fahrenheit  degree fahrenheit equivalent degree celsius 
display return void function_function declaration 
function definition 
function subtask crazy  tradition 
continue think part program just  part program  worry minor el est exe rcis es 
require return_statement void function definition 
suppose omit return_statement function definition display 
effect program 
program compile 
program behave differently 
return_statement function standard omit return part  compiler still require
effect program omit return_statement definition 
return_statement function definition celsius program 
effect program omit return_statement definition celsius 
write definition void function argument type_int output screen product argument 
put definition complete program read number call function 
compiler allow void int 
warning issue int supply return  statement 
find write small test program ask instructor local guru 
call void function statement expression 
mechanism substitution process 
mechanism  know call value mechanism 
second mechanism substitute argument know call reference mechanism 
first view call reference call value mechanism now sufficient subtask 
example  common subtask obtain input value user 
look back program display 
task divide subtask  initialize screen  obtain fahrenheit temperature  compute corresponding celsius temperature  output result 
subtask implement function  celsius  
subtask obtain input implement follow line code function_call  enter temperature fahrenheit    cin  
function subtask function obtain input set value variable value type keyboard  function_call variable argument change value argument variable 
call value formal parameter now  argument function_call variable  function take only value variable change variable way 
callby value formal parameter only value argument substitute formal parameter 
input function  want variable value variable substitute formal parameter 
call reference mechanism work just way 
call reference formal parameter call simply reference parameter  corresponding argument function_call variable argument variable substitute formal parameter 
argument variable literally copy body function definition place formal parameter 
argument substitute code function_body execute code change value argument variable 
call reference parameter mark way compiler_will know call value parameter 
way call reference parameter attach ampersand sign   end type_name formal parameter list function_declaration header function definition 
example  follow function definition formal parameter   formal parameter call reference parameter  namespace std  
rewrite old  let look completely
display demonstrate call reference parameter 
just read number write number reverse order 
parameter function call reference parameter 
input perform function_call   call reference parameter display call reference parameter 
enter integer  reverse order number 
function subtask value variable set function_call 
follow function_call reverse value variable   next subsection call reference mechanism detail explain function display 
call reference detail situation  call reference mechanism work name give function argument literally substitute call reference formal parameter 
process bit subtle
situation  subtlety important  need examine detail call reference substitution process 
recall variable implement memory location 
compiler assign memory location
example  display compile  assign location  assign 
purpose example  variable store memory location 
word  execute line int   value will store memory location 
arrow diagram point memory location reference variable 
memory location value 
next  follow function_declaration display  void  int  
call reference formal parameter place holder 
corresponding argument call function constant expression 
function call  correspond argument value will substitute formal parameter 
change formal parameter function_body will argument function call 
exact detail substitution mechanism give text
example call reference parameter function_declaration void  double  
function_call execute  function give_value store
give memory location associate name 
example  location location assign argument variable order 
memory location associate formal parameter 
first memory location associate first formal parameter  second memory location associate second formal parameter  forth 
example first parameter  memory location
second parameter memory location
diagrammatically  correspondence memory location value 
function subtask function statement execute  function_body formal parameter actually memory location associate formal parameter 
case  instruction body function value store formal parameter cin statement  value store memory location happen variable store 
similarly  instruction body function value store formal parameter cin statement  value store variable memory location happen variable store 
function instruct computer actually variable example  user enter display  result memory location value 
mean long retrieve datum value variable 
datum still exist memory location accessible variable scope function 
detail call reference mechanism work function_call display 
extra level detail  least extra level verbiage 
variable memory location  insist variable memory location  simply  
extra level detail need argument formal parameter contain confusing coincidence name 
example  function formal parameter name 
suppose want change program display function argument name  suppose want obvious 
suppose want first number type store variable_name  second call reference parameter anatomy function_call display call reference argument variable assign follow memory address compiler  know address assign result will depend actual program display  follow function_call begin execute  
effect function definition rewrite follow legal code  clear meaning void int variable memory location  
effect following execute  
now  let suppose variable  declare part program  assign memory location 
function_call follow  int  input    
variable declare part program assign memory location  phrase  variable memory location  unambiguous 
let detail substitution mechanism case 
call argument correspond formal parameter variable  argument correspond formal parameter variable 
confusing produce problem computer  computer computer simply deal memory location 
computer substitute  variable memory location  formal parameter  variable memory location  formal parameter 
function function define display interchange value_store variable 
description function give
show display  definition function local call temp 
local need 
tempt think function definition simplify following  
value set equal value just
value set equal change value now original value
value change
local temp correct function definition
correct definition display 
correct version 
function subtask 
parameter argument term parameter argument confusing 
keep simple point mind  will able easily handle term 
formal parameter sort kind blank place holder fill function call 
write function_call  argument list parenthesis function_name 
function_call execute  argument plug formal parameter 
call value method  only value argument
call value mechanism  formal parameter local initialize value corresponding argument 
call reference mechanism  argument entire
call reference mechanism  argument substitute formal parameter change formal parameter actually argument 
mixed parameter list mix call byreference call value formal parameter call value parameter call reference parameter determine ampersand attach type specification 
ampersand present  formal parameter callby reference parameter 
ampersand associate formal parameter  call value parameter 
perfectly legitimate mix call value call reference formal parameter function 
example  first last formal parameter follow function_declaration call reference formal parameter middle call value parameter  void  int  double  
function return value 
function call reference parameter change value give argument return value 
parameter value assign value inside body function definition 
kind parameter  effect case 
function call follow   local initialize value 
local initialize ignore function 
see sample dialogue  formal parameter local set function_body value output screen 
value argument change 
show sample dialogue  retain value 
videonote call reference call value function subtask 
sample dialogue function function function function hand  reference parameter 
function call  variable argument just value substitute formal parameter 
follow code execute   
value variable change function_body execute  dialogue show  value change function 
keep mind lesson display  easy decide parameter mechanism
want function change value variable  correspond formal parameter reference formal parameter mark ampersand sign  
case  value formal parameter 
carelessly omit ampersand  function_will value parameter mean reference parameter  program run  will discover function change value corresponding argument 
formal parameter local_variable  value change function  local_variable  change effect function_body 
logic error difficult see look right 
result  formal parameter local_variable 
argument variable substitute  initialize value 
value interchanged  value leave unchanged 
omission ampersand program completely wrong  look identical correct program will compile run error_message 
function subtask 
output program display omit ampersand   first parameter function_declaration function heading 
ampersand remove second parameter 
output program display change function_declaration function following change function header match  formal parameter change value parameter  void  int  
write void function definition function_call reference parameter  variable type_int  set value variable 
write void function definition function_call 
function formal parameter   amount sale tax express percentage  cost  cost item tax 
function change value cost include sale tax 
function return value reference parameter 
function value reference parameter 
miguel de cervante saavedra  don quixote recall principle procedural abstraction function design black box 
programmer function effectively  programmer need know function_declaration accompanying comment function accomplish 
programmer need know detail contain function_body 
section discuss number topic deal principle detail 
function call_function function_body contain call function 
situation sort function_call exactly function_call occur function program  only restriction function_declaration function
set program will happen automatically  function_declaration come function function definition come function 
function_call definition function  place function body function definition 
display show enhanced version program show display 
program display reverse value variable 
program display reverse variable only time 
program display function order reorder value variable ensure condition true  variable 
great second num  function call interchange value variable 
testing order exchanging value take place body function order 
function call body function order 
present special problem 
principle procedural abstraction  think function perform action namely  interchange value variable  action matter occur 
function subtask 
enter integer  increase order number precondition postcondition way write function_declaration comment break kind call precondition postcondition 
precondition state assume true function call 
function expect perform correctly precondition hold 
postcondition effect function_call  postcondition tell will true function execute situation precondition hold 
function return value  postcondition will value_return function 
function change value argument variable  postcondition will change value argument 
example  function_declaration comment function swap value show display put format follow  
only postcondition description value_return  programmer omit word postcondition 
common acceptable alternative form previous function_declaration comment following   fahrenheit temperature express degree fahrenheit 
example precondition postcondition give
need know definition function order function  give only function_declaration accompany comment 
precondition postcondition way summarize function action 
first step design write function 
design program  specify function start design function_will
function_declaration comment function_declaration design write start design function_body 
later discover specification realize reasonable way  need back rethink function clearly specify think function will minimize design error waste time write code fit task hand 
programmer prefer word precondition postcondition function comment 
word function comment contain precondition postcondition
case study supermarket pricing case study solve simple programming task 
contain detail need simple task 
see design element context simple task  concentrate learn distraction side issue 
once learn procedural abstraction technique illustrate simple case study  apply technique complicated programming task 
problem definition commission quick shop supermarket chain write program will determine retail price item give suitable input 
pricing policy item expect sell week mark percent  item expect stay shelf week mark percent wholesale price 
sure notice low markup percent day day markup change percent 
important precise exactly program change form calculation
sure clear statement input require produce program 
input input will consist wholesale price item expect number day item sell 
output will give retail price item 
analysis problem like simple programming task  break subtask  
input datum 
compute retail price item 
output result 
subtask will implement function 
function function_declaration accompanying comment  give
note only item change function call reference parameter 
remain formal parameter call value parameter 
value turnover expect number day item sell 
write function_body idea function work  write code function 
mean principle procedural abstraction 
function treat like black box 
algorithm design implementation function straightforward 
simply consist cin cout statement 
algorithm function price give follow pseudocode  turnover day return cost cost 
code constant program  low markup figure percent  high markup figure percent  expect shelf stay day threshold high markup
constant need change update program company decide change pricing policy  declare global name constant start program number 
declaration const modifier following  
complete program show display 
value expect number day item sell 
function subtask 
sample dialogue program determine retail item quick shop supermarket store 
enter wholesale item  enter expect number day expect time day testing debugging function 
program test important technique test program test kind input 
precise definition mean kind  input  practice  easy decide kind input datum program deal
case supermarket program  kind input  input low markup percent input high markup percent 
test least case item expect remain shelf day least case item expect remain shelf day 
testing strategy test boundary value 
unfortunately  boundary value vague concept 
input test value boundary value value program change behavior 
example  supermarket program  program behavior change expect shelf stay day 
boundary value  program behave differently number day equal number day great 
test program least case item expect remain shelf exactly day 
normally  test input step away boundary value easily decide boundary
test program input item expect remain shelf day  item expect remain shelf day  item expect remain shelf day 
function definition inside body function definition 
function definition contain call function 
rewrite function_declaration comment function order show display express term precondition postcondition 
give precondition postcondition predefine function sqrt  return square root argument 
essence top design strategy 
treat function separate unit  transform big task series small  manageable task 
test function program intend 
write special program testing 
example  display show program test function  program display 
value turnover expect number day item sell 
sample dialogue enter wholesale cost item  enter expect number day sell  wholesale cost now day sell now test
driver program temporary tool minimal 
need fancy input routine 
need perform calculation final program_will perform 
need obtain reasonable value function argument simple way possible typically user execute function show result 
loop  program show display  will allow retest function argument rerun program 
test function separately  will find mistake program 
will find function contain mistake 
test only entire program  find mistake idea mistake
bad  think know mistake wrong 
once fully test function  driver program function 
function test program only untested function 
fine fully test function test function 
bug find  know bug untested function 
example  fully test function driver program display  input routine driver program test remain function 
function subtask impossible inconvenient test function function write test 
case  simplified version missing untested function 
simplify function call stub 
stub will necessarily perform correct calculation  will deliver value suffice testing  simple confidence performance 
example  program display design test function display basic layout program 
program function  
value turnover expect number day item sell 
enter wholesale item  enter expect number day expect time day 
function subtask fully test driver program show display 
program include function  assume test driver program bother show simple driver program 
test function  stub stand
notice program write function 
way test basic program layout fill detail function definition 
program outline stub allow test flesh basic program outline  write completely program test function 
reason  program outline stub efficient method testing 
common approach driver program test basic function  like input output function  program stub test remain function 
stub replace function time  stub replace complete function test  once function fully test  stub replace full function definition  forth final program produce 
fundamental rule testing function function test program function program fully test debug 
el est exe rcis es 
fundamental rule testing function 
way test function 
driver program 
write driver program function introduction show display 
write driver program function self test exercise 
write stub function function_declaration give next 
write whole program  only stub program 
examination code output test case insufficient track logic error 
case  number general debug technique employ 
keep open mind examine system whole assume bug occur place 
program give incorrect output value  examine source_code  test case input output value  logic algorithm
example  code determine supermarket example display 
wrong display  error simply input value expect test case  lead apparently incorrect program 
novice programmer will  randomly  change portion code hope will fix error 
avoid technique cost 
approach will work first simple program write 
will certainly large program will introduce error program 
sure understand logical impact change code will commit modification 
finally  allow instructor  show program
fresh set eye quickly pinpoint error miss 
take break return problem hour later next day help discover error 
check common error first mistake look common error easy textbook pitfall programming tip section 
example source common error include uninitialize variable  error  exceed data boundary  automatic type_conversion  
videonote debug 
function subtask localize error determine precise cause location bug first step fix error 
examine input output behavior test case way localize error 
technique add cout statement strategic location program print value critical variable 
cout statement serve show code program execute 
strategy trace variable loop  loop present code 
example  code display intend convert temperature fahrenheit celsius formula program execute input degree fahrenheit  output temperature celsius  
obviously incorrect  correct answer degree celsius 
track error print value critical variable 
case  wrong conversion formula  second step compute output value 
display temperature conversion program bug 
sample dialogue enter temperature
comment original line code place beginning line 
tell compiler ignore original line code still leave program reference 
wish restore code  simply remove type line delete 
examine result statement now identify precise location bug 
case  conversion factor compute correctly 
set conversion factor  display debug statement 
sample dialogue enter temperature
simple fix perform float point division integer division change operand float point type  example  double  once bug identify now remove comment
tedious add large number statement program 
output statement long difficult interpret  introduction debug code introduce
compiler integrate develop environment separate program  debugger  allow programmer execution program specific line code call breakpoint step execution code line time 
debugger step code  programmer inspect content variable manually change value_store variable 
statement view value critical variable 
interface  command  capability debugger vary compiler  check user manual check instructor help feature 
assert macro section discuss concept precondition postcondition subroutine 
assert macro tool ensure expect condition true location assert statement 
condition meet  program_will display error_message abort 
assert  first definition assert program follow statement  cassert assert  add follow line code location
example  subroutine newton method calculate square root number general debug technique 
subroutine implement algorithm require positive number number iteration will repeat calculation positive number 
guarantee condition add assert subroutine show approximate square root newton iteration 
try execute subroutine negative parameter  program_will abort display assertion
assert statement similar manner assertion like enforce excellent technique defensive programming 
distribute program  want executable program assert statement  user error_message understand 
add assert statement code  tedious remove
fortunately  disable assert macro add follow line beginning program  statement cassert follow  define ndebug cassert later change program need debug turn 
function subtask el est exe rcis es 
compute statement   assert macro avoid division zero 
general technique determine source error 
summary subtask program implement function  function return value void function 
method perform substitution  call value call reference 
call reference substitution mechanism  argument variable entire variable substitute corresponding argument 
argument correspond call reference parameter change function_call 
want function change value variable  call reference parameter 
precondition state assume true function call 
postcondition effect function_call  postcondition tell will true function execute situation precondition hold 
stub place function definition test possibly write rest program test 
answer self test exercise answe rs self est exer cise 
hello goodbye time  hello end program 
void function definition need contain return_statement 
void function definition contain return_statement  require 
omit return_statement function definition display absolutely effect program behave 
program_will compile  run  behave exactly
similarly  omit return_statement function definition will effect program behave 
omit return_statement function definition celsius  will error will keep program run 
difference function void function  celsius void function 
call void function follow semicolon statement 
call function return value expression 
enter integer  reverse order number function function function function 
division convert percent fraction 
yes  function return value reference parameter 
yes  function combination value reference parameter 
function definition inside body function definition 
yes  function definition contain function 
answer self test exercise 
fundamental rule testing function function test program function program fully test debug 
way test function follow rule  find bug  will know function contain bug 
driver program program write sole purpose test function 
debugger tool allow programmer set breakpoint  step code line line  inspect modify value variable 
keep open mind  add statement narrow cause error  debugger  search common error  devise variety test technique debug program 
practice program practice program generally solve short program directly apply programming principle present
write function compute average standard deviation score 
standard deviation define square root average value  si  average score    
function_will parameter will practice program function 
embed function driver program allow test function tell program finish 
write program read length foot inch output equivalent length meter centimeter 
least function  calculate  output 
include loop let user repeat computation value user want end program 
meter foot  centimeter meter  inch foot 
write program like previous exercise convert meter centimeter foot inch 
function subtask 
program ask user want convert foot inch meter centimeter meter centimeter foot inch 
program perform desire conversion 
user respond type integer type conversion conversion 
program read user answer execute statement 
branch statement will function 
function_call statement will function definition similar program previous practice program 
will function definition function function_body 
include loop let user repeat computation value user want end program 
write program read weight pound ounce output equivalent weight kilogram gram 
least function  calculate  output 
include loop let user repeat computation value user want end program 
pound kilogram  gram kilogram  ounce pound 
write program like previous exercise convert kilogram gram pound ounce 
function subtask 
program ask user want convert pound ounce kilogram gram kilogram gram pound ounce 
program perform desire conversion 
user respond type integer type conversion
program read user answer execute statement 
branch statement videonote solution practice program 
function subtask will function 
function_call statement will function definition similar program previous practice program 
will function definition function function_body 
include loop let user repeat computation value user want end program 
write program combine function practice program 
program ask user want convert length weight 
user choose length  program ask user want convert foot inch meter centimeter meter centimeter foot inch 
user choose weight  similar question pound  ounce  kilogram  gram ask 
program perform desire conversion 
user respond type integer type conversion
program read user answer execute statement 
branch statement will function_call 
function_call statement will function definition similar program practice program 
function_will function definition call function function_body  will easy write adapt program write practice program 
notice program_will statement embed inside statement  only indirect way 
outer statement will function_call branch 
function_call will turn statement  need think
just function_call detail black box create define function 
try create way branch  wrong track 
only need think way branch entire program ultimately branch case 
include loop let user repeat computation value user want end program 
arbitrary triangle compute formula length side  semiperimeter 
function parameter value parameter length edge reference parameter store compute programming project perimeter 
function robust 
note produce triangle 
function correct result legal datum reasonable result illegal combination 
programming project programming project require problem solve practice program solve way 
visit complete programming project online instant feedback 
write program convert hour notation hour notation 
example  convert pm 
give integer 
least function  conversion  output 
record am pm value type char   am pm 
function conversion will call reference formal parameter type char record include loop let user repeat computation value user want end program 
write program request current time wait time integer number hour number minute wait 
program output time will waiting period 
hour notation time 
include loop let user repeat calculation additional value user want end program 
modify program programming project hour notation  pm 
write program tell coin give amount change cent cent 
example  amount cent  output like following  cent give coin denomination cent quarter  cent dime  cent 
function subtask example  suppose value variable 
follow call  value number will value will take quarter cent  leave cent  number   include loop let user repeat computation value user want end program 
cold weather  meteorologist report index call windchill factor  take account wind speed temperature 
index measure chilling effect wind give air temperature 
windchill approximate formula  + + wind speed sec temperature degree  write function return windchill index 
code ensure restriction temperature violate 
look weather report back issue newspaper university library compare windchill index calculate result report newspaper 
videonote solution programming project 
land puzzlevania  aaron  bob  charlie argument great puzzler time 
end argument once agree duel death 
aaron poor shooter only hit target probability 
bob bit hit target probability 
charlie expert marksman miss 
hit mean kill person hit drop duel 
compensate inequity marksmanship skill  decide contestant fire turn start aaron  follow bob  charlie 
cycle repeat man stand 
man remember great puzzler time 
follow declaration  void targetalive  double accuracy  simulate shoot targetalive give 
programming project number accuracy  target hit targetalive set false 
illustrate generate random number 
example  bob shoot charlie  invoke    charliealive boolean variable charlie alive 
test function driver program move step
write second function_name startduel shoot function simulate entire duel strategy 
loop only contestant leave  invoke shoot function proper target probability hit target accord who shoot 
function return variable who win duel 
output probability contestant will win shooting accurate shooter leave alive 
shoot accurate shooter leave alive 
mean aaron guarantee live past first round  bob charlie will fire
modify program accommodate output probability win contestant 
write program input date example  july  output day week correspond date 
follow algorithm wiki 
implementation will require function 
here pseudocode determine leap  divisible divisible int  
function subtask 
first  extract last digit
example  extract 
next  factor leap year 
divide value previous step discard remainder 
add result return value 
example  extract 
remainder correspond sunday  correspond monday   programming project  correspond saturday 
example  date july  compute day month + getmonthvalue + getyearvalue + + + + 
fifth day week correspond friday 
program allow user enter date output corresponding day week english 
program include void function_name getinput prompt user date return month  day  pass reference parameter 
choose user enter date month number month name 
complete previous programming project create top level function_name dayofweek header  int month  int day  int  function encapsulate logic return day week specify date int   add validation code function test input invalid 
function return day week 
function write test driver check dayofweek return correct value 
set test case include least case invalid input 
leaf carry stream  stream end lake sea  output program carry stream know stream screen file 
introduction refer program input output 
input take keyboard file 
similarly  output screen file 
explain write program take input file output file 
input deliver program construct know stream  output program deliver output device stream 
stream first example object 
object special kind variable special purpose function sense  attach variable 
ability handle object language feature set early programming_language 
tell stream explain program
process explain stream  will introduce basic idea object object program 
prerequisite material 
forty year speak prose know
moli√®re  le bourgeois gentilhomme file store program 
file store input program receive output program 
file program kind file store program 
streams  discuss next  allow write program handle file input keyboard input unified way handle file output screen output unified way 
stream flow character kind datum 
flow program  stream call input stream 
flow program  stream call output_stream 
input stream basic file stream flow keyboard  program_will take input keyboard 
input stream flow file  program_will take input file 
similarly  output_stream screen file 
realize stream program 
cin input stream connect keyboard  cout output_stream connect screen 
stream automatically program  long include directive name header_file iostream 
define stream come file  once define program way stream cin cout 
example  suppose program define stream call come file 
similarly  program define output_stream name file  output value variable file 
follow will output string   follow content variable output file connect stream    endl  once stream connect desire file  program file way keyboard screen 
file
keyboard input screen output deal temporary datum 
program end  data_type keyboard datum leave screen away 
file way store datum permanently 
content file remain person program change file 
program output file  output file will remain program finish run 
input file program need type datum separately program 
input output file program kind file read write editor  editor write program 
mean create input file program read output file produce program convenient oppose reading write program run 
program take input large input file  program receive datum user typing 
file stream variable declare stream ifstream ofstream program take input file  read file  program output file  write file 
way read input file  method will read file beginning end program end 
method  program allow back read file second time 
exactly happen program take input keyboard  strange 
allow back change output previously write file 
exactly happen program output screen 
output screen  back change screen output 
way input file program output program file connect program file mean stream 
 stream special kind variable know object 
will discuss object next section  will first program stream object simple file
want stream input file give output file  declare stream connect stream file 
think file stream connect value stream 
disconnect stream file connect file  change value stream variable 
special function apply only stream order perform change 
stream variable assignment statement way variable type_int char 
stream variable  unusual sort variable 
streams cin cout declare want stream connect file  declare just declare variable 
type input file stream variable name ifstream input file stream  
type output file stream variable name ofstream output file stream  
declare input stream file output_stream file follow  ifstream  
call open file function_name open 
example  suppose want input stream connect file name 
program contain following read input file    like strange syntax function_call 
will peculiar syntax next section 
now  just notice couple detail call open write 
first  stream variable_name dot period place function_name open  file name give argument open 
notice file name give quote 
file name give argument name file want write editor 
input file directory program  simply give name file manner just
situation need specify directory contain file 
detail specify directory vary system
need specify directory  ask instructor local expert explain detail 
once declare input stream variable connect file open function  program take input file extraction operator 
example  following read input number file connect place variable number  int    
output file exist  member_function open will discard content file output file empty call open 
file connect stream call open  program output file insertion operator 
example  following write string content variable file connect stream example file name      notice program deal file  file name 
usual name file operating_system 
name call external file name 
sample code external file name 
external file name sense real name  file 
convention spell external file name vary system will need learn convention instructor local expert 
name example look like file name system 
name file follow convention system
external file name real name file  typically only once program 
external file name give argument function open  file open  file refer name stream connect file 
program  stream name serve second name file 
sample program display read number file write sum  text  file 
file name input output file program name 
external file name real name file  only call function open  connect file stream 
call open  stream name name file 
file close program finish input file output file 
close file disconnect stream file 
file close call function close 
follow line program display illustrate function close   
notice function close take argument 
program end normally close file  system will automatically close file
habit closing file least reason 
first  system will only close file program end normal fashion 
program end abnormally due error  file will close leave corrupted state 
program close file soon finish file corruption likely 
second reason close file want program output file later read output back program 
program close file finish write file  program connect file input stream function display simple file input output number file  sum number  write sum file 
stream introduction object class open 
object variable function datum associate
example  stream function_name open associate
sample call function  declaration object  give 
reason peculiar notation 
function_name open associate object function function_name open associate object 
function open file input  open file output 
course  function similar 
open  give function name  function intuitive similarity 
function_name open function  only slightly
compiler see call function_name open  decide function_name open mean 
compiler determine look name object precede dot  case  
function associate object call member_function 
example  open member_function object  function_name open member object 
just see  object member_function 
function name  true function_name open  completely name 
type object determine member_function object
object type  value  will member_function 
example  suppose declare follow stream object  ifstream   ofstream   function function 
similarly  function function 
type variable object ifstream ofstream call class 
member_function object completely determine class type  function call member_function class call member object 
example  class ifstream member_function call open  class ofstream stream basic file member_function call open 
class ofstream member_function name precision  class ifstream member_function name precision 
member_function precision stream cout  will discuss detail later 
call member_function program  specify object  write object name dot function_name  following example    reason name object function effect object 
precede example  call function open connect file stream  need know name stream 
function_call    dot call dot_operator object name dot refer call object 
way call object like additional argument function function change call object argument call object play large role function_call 
call object determine meaning function_name 
compiler type call object determine meaning function_name 
example  early call open  type object determine meaning function_name open 
call member_function syntax 
class object object variable function associate
function call member_function 
class type variable object 
object class type object determine member_function object
class ifstream ofstream member_function name close 
close file   close way file open manipulate way 
will discuss member_function class ifstream ofstream later
example  open input file file external name specify  call open will
happen  receive error_message program simply proceed unexpected 
follow call open test see call open successful end program take action call open unsuccessful 
member_function name test stream operation
member_function class ifstream ofstream 
function take argument return bool value 
call function stream name follow  boolean expression control loop statement 
place call call open  call open function will_return true boolean expression will satisfied 
example  follow call open program_will output error_message end  call succeed  function_return false  program_will continue 
course  call refer only call open form  call function open stream call object 
exit statement cause program end
exit function_return argument operating_system 
exit statement  program contain follow directive  cstdlib exit  program contain follow  normally 
convention  argument call exit due error  purpose  difference integer pay follow convention important advanced programming 
exit statement exit statement write  exit statement execute  program end
integer_value convention  call exit cause error  case 
exit statement call function exit  library header_file name cstdlib 
program exit statement contain follow directive  cstdlib namespace std  
place location similar directive unix window error success  operating_system reverse convention 
ask instructor value
stream introduction object class display contain program display rewrite test see input output file open successfully 
process file exactly way program display 
assume file exist content show display  program display will create file show display 
wrong call open program display end error_message screen 
example  file name  call program end  error_message write screen 
notice output error_message  want error_message screen  oppose file 
program output screen file  add directive header_file iostream 
programming style file screen keyboard 
read input keyboard  prompt input echo input  like 
program take input file  prompt line echo input  read respond prompt echo 
read input file  datum file exactly kind datum program expect 
program simply read input file assume datum need will request 
stream variable connect input file wish replace previous keyboard screen show input file connect  replace line follow line   number stream open input output 
single program take input keyboard take input file 
program output screen stream basic file file 
alternatively  program take input keyboard output screen file 
combination input output_stream allow 
example book will cin keyboard screen  easy modify program program take input file output file 
display file check open number file  sum number  
stream introduction object class summary file statement sample input come file directory name infile 
file exit choose stream name input stream example   declare variable type ifstream 
choose stream name output 
connect stream file member_function open external file name argument 
remember member_function test call open successful    
example  endl  
sel st exerc 
suppose write program stream call fin will connect input file  stream call fout will connect output file 
declare fin fout 
directive  need place program file 
suppose continue write program discuss previous exercise want take input file 
statement need place program order connect stream fin file connect stream fout file 
sure check sure opening successful 
suppose still write program discuss previous exercise reach point long need input file long need output file 
close file 
suppose want change program display output screen file 
directive need place program file program function exit 
continue self test exercise  argument 
suppose bla object  dobedo member_function object bla  dobedo take argument type_int 
write call member_function dobedo object bla argument 
characteristic file ordinary program variable share 
characteristic file ordinary variable program 
program read half line file 
program file enable read first line second time 
text file  name 
stream introduction object class output file  code first member_function open open file connect stream type ofstream 
way single argument file name give empty file 
file specify name exist  old content lose 
alternative way open file output program_will append file datum file 
append output file name  argument version open  illustrate follow  ofstream outstream     file exist  will create empty file name receive program output  file exist  output program_will append end file old datum file lose 
illustrate display 
screen output opening appending 
end append file 
second argument special constant define iostream require follow directive  iostream 
give file name argument call function open  following example    inconvenient 
example  program display read number file output sum file 
want perform calculation number file name write sum number file name  change file name call member_function open recompile program 
preferable alternative write program ask user type name input output file 
way program file time run 
stream introduction object class append file want append datum file exist content file  open file follow 
file name string will discuss string handle detail 
easy learn string write program accept file name input 
string just sequence character 
string value output statement following     string value argument member_function open 
write literal string  statement show  place string double quote 
order read file name program  need variable capable hold string 
discuss detail string  now will cover just store file name 
variable hold string value declare following example  char  declaration declare variable type char  variable_name follow integer square bracket specify maximum number character string store variable 
number great maximum number character string value 
example  variable contain string contain character 
name replace identifi keyword  number replace positive integer 
input string value string variable way input value type 
example  follow piece code  
example  following will connect stream name store variable will member_function check opening successful string variable argument
note string variable argument member_function open  quote 
display rewrite program display take input output file user specifie 
input output name read string variable name variable argument call member_function open 
notice declaration string variable 
number square bracket string variable_name  display 
string variable ordinary variable way ordinary variable 
assignment statement change value string variable 
richard brinsley sheridan  school scandal format output stream function layout program output call format output 
control format command determine detail number space item number digit decimal_point 
output format instruction learn formula output dollar amount money usual way warning 
stream introduction object class number specify user  sum number  
enter input file name maximum character enter output file name maximum character will read number file place sum file end program 
output amount 
now learn object notation stream  explain magic formula format command 
first note format command output_stream 
program output file connect output_stream call  command ensure number decimal_point will write way normally write amount money 
just insert follow program   
explain magic formula  will instruction reverse order 
output_stream member_function name precision 
program execute call precision previous stream  point program  number decimal_point output stream will write total significant figure  digit decimal_point  depend compiler write 
follow possible output compiler set significant digit  
call precision apply only stream name call 
program output_stream name  call affect output stream effect stream 
course  call precision stream  specify number digit number output stream  following   format instruction magic formula bit complicated member_function precision 
now discuss instruction 
follow call member_function setf stream call object    setf abbreviation set flag 
flag instruction possible way 
flag give argument setf  flag tell computer write output stream specific way 
cause stream depend flag 
previous example  call function setf  call set flag 
flag cause stream output number type double call fix point notation  fancy phrase way normally write number 
flag set call setf  floatingpoint number number type double output stream will write ordinary everyday notation  notation 
set flag set  decimal_point trail zero show float point number 
set  number zero decimal_point output decimal_point follow zero 
set flag set  plus sign output positive integer_value 
set flag set field width value give call member_function width  next item output will right end space specify width 
word  extra blank place item output 
word  extra blank place item output 
number output value  will output simply  output will include decimal_point digit decimal_point 
common flag action cause display 
useful flag 
flag set stream  positive number output stream will write plus sign front
want plus sign positive number  insert follow   
stream introduction object class 
width function tell stream space give item output 
case item namely  number occupy only space  width space  space blank 
output require space specify argument width  additional space need will
entire item output  matter argument give width 
call width applie only next item output 
want output number  space output number  call width time 
nuisance  prefer manipulator setw next subsection 
flag set unset 
unset flag  function unsetf 
example  follow will cause program include plus sign positive integer output stream   flag terminology argument setf   call flag 
mean strange notation io   
word flag turn
origin term apparently come phrase similar flag  term flag  apparently recall exact originating phrase programmer now flag set  conjure picture 
event  flag set argument setf  stream call setf function_will behave display  flag set give argument setf  signal stream behave display specifie flag 
explanation notation io   mundane exotic notation 
io meaning term fix showpoint meaning input output_stream 
notation   mean  meaning follow  context come   will  notation later book 
turn  manipulator function_call member_function 
manipulator place insertion operator  just manipulator function_call item output 
like traditional function  manipulator argument 
see manipulator  endl 
subsection will discuss manipulator call setprecision 
manipulator member_function width see exactly
call manipulator write insertion operator  output_stream  turn call member_function width 
example  follow output number    field width specify     
call write insertion operator  manner similar call manipulator 
example  follow output number list number digit decimal_point call 
manipulator follow directive program  iomanip 
stream introduction object class sel es exe rc 
output will produce follow line execute assume line embed complete correct program proper directive 
output will file follow line 
format output  follow flag constant stream member_function setf 
change output 
stream introduction object class stream argument function stream parameter call byreference stream argument function 
only restriction function formal parameter call reference 
stream parameter call value parameter 
example  function display stream parameter  type ifstream stream connect input file  type ofstream stream connect output file 
will discuss feature program display next subsection 
write program take input file  will want program read datum file 
example  file contain number  want program calculate average number file 
run program data file time  program assume know number file 
like write program keep read number file number leave read 
stream connect input file  algorithm compute average state follow  double next   
algorithm code  still express follow test  look correct first  way express aforementioned test following  previous algorithm rewrite follow code plus last line pseudocode issue here tool stream output format instruction 
stream introduction object class iostream  fstream  iomanip  
notice loop body identical pseudocode 
now boolean expression  long loop body 
loop look bit peculiar  way input number stream control boolean expression loop 
expression involve extraction operator simultaneously action boolean instruction take input number input stream  boolean expression satisfied
number input  number read boolean expression satisfied  body loop execute time 
number read input boolean expression satisfied  loop end 
example type input variable double  method check end file work way data_type  int char 
admirable goal  now problem function parameter_type namespace 
example need stream type_name namespace std 
need using_directive function definition body will understand parameter_type name  ifstream 
easy fix simply place using_directive start file include directive 
place single using_directive start file easy solution problem  expert solution  allow namespace name common  whole purpose namespace 
point technically  boolean condition work way  overloading operator input stream class function associate stream 
function name operator 
return_value operator function input stream reference istream ifstream 
function automatically convert stream reference bool value 
result value true stream able extract datum  false
stream introduction object class only namespace problem 
 will teach way problem parameter namespace 
approach will allow kind multiple namespace 
programmer prefer place using_directive start program file 
example  follow using_directive  namespace std  program book place using_directive start program file 
using_directive place start function definition need namespace std opening brace 
example show display 
example show display 
program book  program follow  behave exactly just using_directive namespace std using_directive place include directive  display 
namespace std  using_directive safely place start file case 
namespace  single using_directive will suffice  will see case time 
advocate place using_directive inside function definition inside small unit code interfere possible using_directive 
train namespace correctly preparation write complicated code later programming career 
meantime  violate rule follow rule burdensome issue discuss 
take course  instructor require 
latitude place using_directive 
program example clean file format program display take input file write output  neat format  screen file 
program copy number file file  format instruction write neat way 
number write line field width  mean number precede blank blank plus number occupy space 
number write ordinary notation  write notation 
number write digit decimal actually namespace  namespace std namespace call global namespace  namespace consist name namespace 
technical detail big issue now 
output screen output file  screen output extra line announce program end 
program function  name  formal parameter input file stream output file stream 
sel st exerc 
output will produce follow line execute  assume file contain datum show assume line embed complete correct program proper include directive 
file contain follow number 
write definition void function_call 
function formal parameter call  type ifstream 
precondition postcondition function follow   stream connect file call member_function open 
contain list integer 
hamlet  word  word  word 
william shakespeare  hamlet data input output character datum 
program output number  character    output 
similarly  user want type number  type character   follow character   
computer interpret character number depend program write 
program write  computer hardware read character     number 
conversion character number automatically need think detail 
automatic help way 
low level facility input output character datum 
low level facility automatic conversion 
allow bypass automatic facility output absolutely way want 
write input output function read write number roman numeral notation  want perverse 
member_function put function allow program read character input store variable type char 
input stream  inputfile stream stream cin  member_function 
will member_function stream cin  behave exactly way input file stream cin  apply input file stream stream cin 
now  cin extraction operator order read character input input  matter 
extraction operator  automatically  skipping blank 
want  example  skip blank  write code read discard blank 
argument receive input character read input stream 
example  follow read input character keyboard store variable  char   important note program read character way 
input character blank  code will skip blank  will read blank set value equal blank character 
character character    program just reach end input  call show early set value equal  
write symbol    just single character 
member_function character   input output just_like character 
example  suppose program contain follow code  read blank 
expect  value set value set 
code execute input show  value set   value set equal character 
variable set equal 
member_function program detect end
follow loop will read input pass character   
subsequent input will read beginning
first example  simply echo input  technique allow want input   enter input will echo   
loop will read input echo exactly  include blank 
following sample dialogue produce code  enter input will echo demonstration 
notice character   read output 
 output  string begin word 
member_function input stream member_function name read character input 
extraction operator  read next input character  matter character
read blank character   next input character 
function take argument  variable type char 
call  next input character read argument variable call value set equal input character 
wish read file  input file stream place stream cin 
example  input stream file  following read character input file place character char variable   input file stream  program first connect stream input file call open 
hand    string happen exactly character 
  type char store variable type char 
member_function put analogous member_function output input 
member_function put take argument  expression type char  constant variable type char 
value argument output stream function call 
example  follow output letter  screen    function allow method discuss previously  completeness 
program  just cin program follow directive  iostream similarly  program input file stream put
member_function put call  value argument call output output_stream 
wish put output file  output file stream place stream 
example  output_stream file  follow will output character  file connect    put output file stream   program first connect stream output file call member_function open 
directive  program following  namespace std  program need know next character input stream 
read next character  turn want process character like simply put back input stream 
example  want program read include first blank encounter input stream  program read first blank order know read blank long stream 
part program need read process blank 
number way deal sort situation  easy member_function putback 
function putback member input stream 
take argument type char place value argument back input stream 
argument expression evaluate value type char 
example  follow code will read character file connect input stream fin write file connect output_stream fout 
code read character include  first blank encounter 
notice code execute  blank read still input stream fin  code put back read
notice putback place character input stream  put place character output_stream 
character put back input stream member_function putback need last character read  character wish 
put back character last character read  text input file will change putback  program_will behave text input file change 
program example checking input user enter incorrect input  entire run program worthless 
ensure program hamper incorrect input  input function allow user reenter input input correct 
function display ask user input correct ask user input incorrect 
program display just driver program test function int  function  similar just kind program take input keyboard 
notice call function 
function read character remainder current line
amount discard remainder line 
user type program read first letter  call function  discard rest input line 
mean user type input line  show sample dialogue  program_will read number will attempt read letter word
program call function  item read line contain number follow line 
stream introduction object class 
sample dialogue enter input number  enter 
input correct  user suppose type variant  will cause iteration loop 
check see user type word start  loop check see first letter user response equal equal lowercase version 
long user mistake respond form yes check check yes
user respond way  check yes safe 
see safe  suppose user mistake enter input number 
computer echo number ask correct 
user type suppose user mistake type bo  unlikely right next keyboard 
equal  body loop will execute  user will give chance reenter input 
happen correct response yes user mistakenly enter begin letter 
case  loop iterate  iterate extra time 
mistake  nearly bad mistake discuss last paragraph 
mean user type input number extra time  waste entire run program 
check input  risk extra loop iteration risk proceed incorrect input 
common problem forget dispose  end input 
newline_character input stream read discard  program next expect read real  member_function will read character   
clear input stream leftover   character  function  define display 
let look concrete example 
legal mix form cin 
example  following legal  
expect value variable  will disappoint 
value give  
read number  next character input stream character     read next 
remember  skip break space 
once variable fill character    program proceed statement next program 
next statement output screen  screen will fill follow rewriting previous code will cause previous dialogue fill variable number fill variable  
input file stream  argument type istream  still declare type ifstream 
output file stream  argument type ostream  still declare type ofstream 
open close stream parameter type istream ostream 
open object pass function close call 
programming example function example stream function versatile  function display 
function work only input keyboard  input predefined stream cin 
function display argument 
rewrite function formal parameter type istream input stream  
program take input input stream call fin connect input file  following will discard input leave currently read input file   hand  program read input
thank overload  version function program  version 
stream introduction object class argument give display argument type istream just define 
program definition  follow call equivalent   
need version function 
argument type istream serve need 
programmer find convenient argument keyboard input  keyboard input frequently 
videonote default argument alternative version function default argument 
follow code  rewrite function third time  iostream  
facility argument type number argument 
parameter default argument formal parameter default argument end argument list 
default nondefault argument  call argument nondefault argument argument  number parameter 
argument will apply parameter default argument order  will apply parameter default argument number parameter 
output next     call supply nondefault argument first default argument  last argument default 
call give follow output  call     assign argument argument list give follow output  sel st exerc 
suppose variable type char 
difference follow statement 
stream introduction object class 
put back last input stream 
example  program read input stream  putback function put back  only put back 
follow code assume embed complete correct program run 
enter line input  
follow code assume embed
enter line input  abcdef gh character 
suppose program self test exercise run dialogue begin follow begin show self test exercise 
will line output 
enter line input  
follow code assume embed
enter line input  define function_call take argument input stream 
call  will read character input input stream give argument will write character screen 
able call function cin input file stream argument function 
call  read line input input stream give argument write line screen 
able call function cin input file stream argument function 
stream introduction object class input file stream  stream connect file function call  will open close example  first follow call will copy line file screen  second will copy line keyboard screen  
call  read line input keyboard output line output_stream give argument 
able call function outputfile stream argument function 
second technique present determine program read file 
letter eof stand end file  eof normally pronounce letter
function eof take argument  input stream call fin  call function eof write boolean expression control loop  dowhile loop  statement 
expression satisfied true program read past end input file  expression satisfied false 
want test end file  call member_function eof typically front
recall symbol 
example  follow statement  eof
statement will output following  program read end file  end file 
example eof member_function  suppose input stream connect input file call open 
entire content file write screen following loop   
end input loop eof function stream introduction object class loop read character input file char variable member_function write character screen 
program pass end file  value change false true 
change true false loop end 
notice true program attempt read character end file 
example  suppose file contain follow ab actually follow list character  ab character  decide test end input file loop read write screen  read write screen  read character   write screen  read write screen 
point loop will read character file 
will still false 
value will change false true program try read character 
loop end 
loop need read extra character order end loop 
special end file marker end file 
member_function eof change false true end file marker read 
example loop read character think last character file 
end file marker ordinary character manipulate like ordinary character 
read end file marker write
write end file marker  result unpredictable 
system automatically place end file marker end file
next programming example eof member_function determine program read entire input file 
now method detect end file 
eof member_function method programming tip entitle  check end  situation method  programmer method situation 
reason prefer method  follow general rule  eof member_function treat input text read input member_function  method process numeric datum 
suppose file input stream connect file member_function open 
suppose program just read last character file 
point  evaluate true false 
write definition void function_call formal parameter call type ifstream 
precondition postcondition function follow   stream connect file call member_function open 
programming example edit text file program discuss here simple example text editing apply file 
software firm update advertising literature 
firm market compiler programming_language recently introduce compiler 
program automatically generate advertising material exist advertising material 
program take input contain advertising copy write similar advertising copy
contain advertising copy call  receive advertising copy call 
program show display 
program simply read character copy character 
character copy unchanged  uppercase letter  read input  program write string   output 
program assume letter  occur input  name programming_language  change exactly need produce update advertising copy 
notice break preserve program read character input write character output 
character   treat just_like character 
read input member_function write output insertion operator 
stream introduction object class read input 
extraction operator read input  program skip whitespace  mean blank character   read input  copy output 
notice member_function eof detect end input end loop 
predefine character function text processing  want convert lowercase letter uppercase vice versa 
predefine function toupper convert lowercase letter uppercase letter 
example   return  
argument function toupper lowercase letter  return  
function tolower similar convert uppercase letter lowercase version 
function toupper tolower library header cctype  program function  function library  contain follow directive  cctype create call identical  occurrence replace  
language versatile fun
language versatile  fun
screen output begin edit file 
end edit file 
stream introduction object class display contain description commonly function library cctype 
function isspace return true argument whitespace character 
argument isspace whitespace character  isspace return false 
isspace  return true  return false 
example  follow code read sentence terminate period echo string whitespace character replace symbol    
character assign number  character store variable type char  number place computer memory 
value type char number example  place variable type_int 
store number type_int variable type char number large 
type char type character type small whole number 
need detail simply think value type char character worry number 
function cctype  detail important 
function toupper tolower actually return_value type_int value type char  return number correspond character think return  character
follow will output letter   will output number assign    
uppercase letter  return false 
return true lowercase letter  return false 
letter alphabet  return false 
return true digit     return false 
return true whitespace character  blank symbol  return false 
stream introduction object class order computer treat value_return toupper tolower value type char oppose value type_int  need want value type char 
way place value_return variable type char 
follow will output character   want  char    
follow code assume embed complete correct program run  enter   
enter input  will see am 
write code will read text echo uppercase letter delete 
summary stream type ifstream connect file call member_function open 
program take input file 
answer self test exercise object variable function associate
function call member_function 
class type variable object 
stream example object 
type ifstream ofstream example class 
example stream call object precision
output function work stream  connect screen  output_stream connect file 
member_function skip whitespace 
output_stream member_function name put write character output_stream 
member_function eof work text processing 
process numeric datum  prefer test end file method discuss
type ifstream input file stream  type ofstream output file stream 
ostream spell type output_stream parameter  argument correspond formal parameter stream output file stream type ofstream spell 
answe rs lf est exer cis 
need replace stream stream 
note need declare  need call open need close 
convention  operating_system indication error status indication success 
actually system dependent 
file program variable store_value value retrieve
program variable exist only program run  file exist program run continue exist program
short  file permanent  variable
file ability store large quantity datum  program variable large store 
see open  close  member_function point 
follow illustrate
start text beginning
file close open
action put read position start file  ready read
name external file name stream name 
external file name operating_system 
real name file  only call function open  connect file stream 
stream name stream variable typically type ifstream ofstream 
call open  program stream name name file 
notice call width call setw only last output item 
space contain exactly blank character 
stream introduction object class 
output file will exactly output give answer exercise 
set flag cause float point number display notation  scientific notation 
set flag unset 
set flag cause float point number display notation  scientific notation 
set flag unset 
set flag cause decimal_point trail zero display 
set flag cause plus sign output positive integer_value 
set flag cause subsequent output place right end field set width member_function 
extra blank put output 
set flag unset 
set flag cause subsequent output place left end field set width member_function 
extra blank put output 
set flag unset 
need replace outstream delete open close call outstream 
need declare  open  close fstream directive iostream member need screen harm  program clear  iostream 
statement equivalent 
statement output value variable c
character put back  input stream member_function putback need last character read 
program read input stream  putback function put back 
complete dialogue enter line input  end output 
complete dialogue enter line input  abcdef gh ace note output simply character input  note blank treat just_like character 
complete dialogue enter line input  sure note only  input string output 
read character  number  read input character     
code write echo only character   output 
 output  character  blank  output  blank output 
similarly  only  character output 
unclear  write input sheet paper small square blank character 
cross character  output show leave 
stream introduction object class 
code contain infinite loop will continue long user continue give input 
boolean expression   true fill statement cin  statement skip character   blank 
code will run user give additional input  dialogue will follow  enter input  notice code self test exercise  read character  character blank output character 
code self test exercise output character character blank 
hand  code self test exercise cin  skip blank only nonblank character case digit    
code output nonblank character 
 character output first character input first character input 
complete dialogue follow  enter input  will see am 
will see end output 
stream introduction object class note islower 
islower false contain character letter blank comma symbol 
practice program practice program generally solve short program directly apply programming principle present
write program will search file number type_int write large small number screen 
file contain number type_int separate blank break 
class assignment  obtain file name instructor 
write program take input file number type double output average number file screen 
file contain number type double separate blank break 
class assignment  obtain file name instructor 
median number number data element great number number 
purpose problem  assume datum sort increase order 
median middle element file odd number element  average middle element file number element 
will need open file  count element  close file calculate location middle file  open file recall start discussion  count file entry need  calculate middle 
instructor assign problem  ask datum file test program
construct file include number datum point  increase  odd number  increase 
find quartile datum file part 
recognize work find practice program 
write program take input file number type double 
program output screen average standard deviation number file 
file contain number type double separate blank break 
standard deviation list number    forth define square root average follow number     forth number average number    forth 
class assignment  obtain file name instructor 
write program give take advice program writing 
program start write piece advice screen ask user type piece advice 
program end 
person run program receive advice give person who last run program 
advice keep file  content file change run program 
editor enter initial piece advice file first person who run program receive advice 
allow user type advice length number line long 
user tell end advice press return key time 
program test see reach end input check see read consecutive occurrence character   
write program read text file write edited version text file 
edited version identical unedited version string consecutive blank replace single blank 
text edit remove extra blank character 
program define function call output file stream argument 
class assignment  obtain file name instructor 
write program merge number file write number third file 
program take input file write output third file 
input file contain list number type_int sorted order small large 
program run  output file will contain number input file long list sorted order small large 
program define function call input file stream output file stream argument 
class assignment  obtain file name instructor 
stream introduction object class programming project programming project require problem solve practice program solve way 
visit complete programming project online instant feedback 
write program generate personalized junk mail 
program take input input file keyboard 
input file contain text letter  name recipient character 
program ask user name write letter second file letter replace name 
letter string will occur exactly once letter 
encounter letter  output screen ask name keyboard 
able figure rest detail 
program define function call output file hard version material optional section  file name input  allow string occur number time file 
case  name store string variable 
version  assume first name last name middle name initial 
write program compute numeric grade course 
course record file will serve input file 
input file exactly following format  line contain student last name  space  student first name  space  quiz score line 
quiz score whole number separate space 
program_will take input file output second file 
datum output file will datum input file will additional number type double end line 
number will average student quiz score 
class assignment  obtain file name instructor 
least function file stream argument 
amount give student miss quiz 
programming project output file will contain line line beginning file explain output 
format instruction layout neat easy read 
least function file stream argument 
class assignment  obtain file name instructor 
write program will compute average word length average number character word file contain text 
word define string symbol precede follow follow end  blank  comma  period  beginning line  end line 
program define function call input file stream argument 
function work stream cin input stream  function_will call cin argument program 
class assignment  obtain file name instructor 
write program will correct program error operator   cin cout 
program replace incorrect occurrence cin correct version cin incorrect occurrence cout correct version cout easy version  assume exactly blank space occurrence cin follow  similarly assume exactly blank space occurrence cout follow 
hard version  allow possibility number blank  zero blank  cin cout 
hard case  replacement correct version only blank cin cout follow operator 
program correct file correct version output 
stream introduction object class second file 
program define function call output file stream argument 
class assignment  obtain file name instructor ask instructor easy version hard version 
write program allow user type line question answer question 
program_will pay attention question  will simply read question line discard read 
give follow answer  sure  think will find answer
question puzzle philosopher century 
just machine 
think answer will come
know answer question  forget
answer find secret place wood 
answer store file answer line  program simply read next answer file write answer question 
program read entire file  simply close file  reopen file  start list answer
program output first answer  replace symbol number include possibility 
order choose number  program initialize variable decrease variable value time output number number count backward 
variable reach value  program change value back 
give number name global name constant declaration const modifier 
project programming project  project program_will sophisticated method choose answer question 
program read question  count number character question store number variable_name count 
respond answer number count 
first answer file answer number  next answer number   forth 
assume answer list first file will follow  answer file change  sure  think will find answer
replace character number  number count +  count variable discuss global name constant define equal number book 
program number line find text file 
write program read text file output line screen file precede line number 
print line number start line right adjust field space 
follow line number colon  space  text line 
character time write code ignore lead blank line 
assume line short fit line screen 
allow default printer screen output behavior line long wrap truncate 
hard version determine number space need field line number count line process line file 
version program insert line last complete word will fit character line 
write program compute follow statistic file output statistic screen file  total number occurrence character file  total number nonwhitespace character file  total number occurrence letter file 
text file  include source_code book online book web site  contain list popular boy girl name united states year compile social security administration 
space delimit file entry rank list first  follow correspond boy name girl name 
popular name list first least popular name list last 
example  file begin jacob sophia mason emma ethan isabella 
stream introduction object class jacob popular boy name sophia popular girl name 
mason second popular boy name emma second popular girl name 
write program allow user input name 
program read file search matching name girl boy 
match find  output rank name 
program match 
example  user enter name  justice   program output  justice rank popularity boy 
justice rank popularity girl 
user enter name  walter   program output  walter rank popularity boy 
walter rank top girl name 
videonote solution programming project 
complete problem computer capable view scalable vector graphic svg file 
web browser able view file 
test see browser display svg file  type file see open web browser 
web browser view file  search web download free svg viewer 
graphic screen draw image coordinate system  locate upper left corner 
coordinate increase right  coordinate increase bottom 
coordinate  locate pixel directly right upper left corner  coordinate  locate pixel directly bottom upper left corner 
illustrate figure
svg format define graphic image xml 
specification image store text file display svg viewer 
here sample svg file draw rectangle line 
view text file  extension   open svg viewer 
programming project    
line begin rect  draw blue rectangle upper left corner coordinate  pixel pixel 
line begin rect  draw green rectangle rgb color value green upper left corner coordinate  pixel pixel 
finally  line tag draw purple line   
base example  write program input nonnegative integer_value create svg file display simple bar chart depict integer_value 
program scale value draw maximum pixel 
example  input value graph     generate svg file display follow  
refer programming project svg format 
show example illustrate draw circle  ellipsis  multiple line  
fill gold border green 
ellipse tag draw ellipse center  radius radius 
fill purple black border 
polyline tag draw red line     
set  polygon transparent 
base example present project  write program create svg image draw picture professor 
abstract simple 
wish draw fancy image  research svg picture format  additional tag draw filter  gradient  polygon 
write program prompt user input name text file output number word file 
word  text surround whitespace example  space  carriage return  newline border beginning end file 
following old word puzzle   name common word  tremendous  stupendous horrendous  end  think will come
solve puzzle read text file english word output word contain  dous  end 
text file   contain  english word  include word complete puzzle 
file online source_code book 
write program read word text file output only contain  dous  end solve puzzle 
array introduction array declare referencing array programming tip  loop array pitfall  array index start zero programming tip  define constant size array array memory pitfall  array index out_of_range initialize array programming tip  range base statement array function index variable function argument entire array function argument const parameter modifier pitfall  inconsistent const parameter function return array case study  production graph summary answer self test exercise programming array partially fill array programming tip  skimp formal parameter programming example  search array programming example  sort array programming example  bubble sort multidimensional array multidimensional array basic multidimensional array parameter programming example  dimensional grading program pitfall  comma array index practice program programming project capital mistake theorize datum 
introduction array process collection datum type  list temperature list name 
introduce basic define array present basic technique design algorithm program array 
prerequisite material 
instance  program compute high test score output amount score fall short high 
high score know score read
score retain storage high score compute score compare
retain score  will need equivalent variable type_int 
individual variable type_int  variable hard keep track later want change program handle score  certainly  variable impractical 
array perfect solution 
array behave like list variable uniform naming mechanism declare single_line simple code 
example  name individual variable need     
part change case  score name array 
part change integer square bracket  
declare referencing array  array consist variable type_int declare follow  int  declaration like declare follow variable type_int  introduction arrays     individual variable array refer variety way 
will call indexed variable  call subscripte variable element array 
number square bracket call index subscript 
 index number start  number 
number index variable array call declare size array  simply size array 
array declare  size array give square bracket array name 
indexed variable number square bracket  start end integer size array 
example  index variable type_int  array index variable type 
example  declare array index variable type double  simply type_name double int declaration array 
indexed variable array type 
type call base type array 
example array score  base type int 
declare array regular variable
example  following declare int variable next max addition array score  int next   max  indexed variable like anyplace ordinary variable type_int
confuse way square bracket array name 
declaration  int  number enclose square bracket specify indexed variable array
number enclose square bracket tell index variable mean 
example  index variable 
index inside square bracket need give integer constant 
expression square bracket long expression evaluate integer integer size array 
example  follow will set value equal  int  score +  look indexed variable code
identity indexed variable   determine value index  instance
write program 
array ith index variable   value compute program 
example  program display read score process way start
array index start zero index array start end integer size array 
only work class exactly student 
class exactly student 
way program versatile define constant size array 
example  program display rewrite follow define constant  const int  
course  place size array change 
change program still  program write way first place  program rewrite work number student simply change line define constant 
note compiler variable array size  following  
display program array 
sample dialogue enter score  high score score difference high 
array compiler_will allow specify array size variable way 
sake portability compiler permit
computer memory consist list numbered location call number byte know address 
simple variable implement portion memory consist number consecutive byte 
number byte determine type variable 
simple variable memory piece address memory give location first byte variable type variable  tell byte memory variable require 
speak address variable  address talk
program store value variable  happen value code place byte memory assign variable 
similarly  variable give call reference argument function  address variable actually give call_function 
now let move discuss array store memory 
array index variable represent memory way ordinary variable  array little story 
location array index variable place next memory 
example  follow  int  declare array  computer reserve memory hold variable type_int 
computer place variable memory 
computer remember address indexed variable  remember address indexed variable 
program need address indexed variable  computer calculate address indexed variable address 
example  start address count past memory variable type_int  will address 
obtain address  computer start address number 
computer add number byte need hold variable type_int number address 
result address 
implementation diagram display 
peculiarity array understand only term detail memory 
example  next pitfall section  detail explain happen program illegal array index 
array declaration  form show  will define indexed variable  namely  index variable 
index variable variable type type_name 
array consist index variable    type double 
array consist index variable      type double 
combine array declaration declaration simple variable variable show
pitfall array index out_of_range common programming error array attempt reference nonexistent array index 
example  follow array declaration  int  array index expression evaluate integer 
example  program contain indexed variable  evaluate integer      
evaluate error 
index expression evaluate value allow array declaration  index out_of_range simply illegal 
system  result illegal array index program_will wrong  possibly disastrously wrong  will give warning 
attacker exploit type error break software 
range programming error potentially compromise entire system  take great care avoid error 
 common weakness enumeration institute identify type error third dangerous programmer error 
videonote array walkthrough 
index variable  here 
example  suppose system typical  array declare show  program contain following   now  suppose value unfortunately  happen 
computer proceed legal indexed variable 
computer calculate address only  place value location memory 
indexed variable  memory receive belong variable  maybe variable_name 
value unintentionally change 
situation illustrate display 
array index out_of_range commonly first last iteration loop process array 
pay carefully check array processing loop begin end legal array index 
practice difficult  subtle unanticipated way change index variable 
example  follow code input number array  
program suffer error 
first  loop error 
start index continue include num loop will input number num number 
long value enter num notice problem 
program_will crash number will enter addition extra still fit array 
enter num eleventh will store index end array 
fix problem loop write problem lack input validation 
malicious mischievous user enter value enter  loop simply execute time input datum past end array program crash loop time number past end array cause mischief 
address problem validate user input valid range   number 
example  system sign short only store 
enter large value result overflow store negative value
loop will run zero negative program erroneously pass statement 
explore type error 
initialize array  value index variable enclose brace separate comma 
example  int    
list value index variable  value will initialize first index variable  remain index variable will initialize array base type 
situation  indexed variable initializer initialize 
array initializer variable declare function definition  include function program  initialize 
array index variable variable automatically initialize  count
initialize array declare  omit size array  array will automatically declare minimum size need initialization value 
example  follow declaration int    
syntax show varname successively set element array 
will output  define variable will iterate array modifier define parameter function 
example variable equivalent pass value 
change inside loop change array 
define pass reference change will array 
const variable change 
example increment element array output
auto datatype output loop automatically determine element inside array 
will output  
range base loop especially convenient iterate vector  introduce  iterate container  discuss 
difference meaning int mean 
meaning case 
array declaration double  state following 
array name base c
declare size array
range value index array index variable element array 
suppose expect element array order 
safe want program test array issue warn case turn element order 
follow code suppose output warning  contain bug 
write code will fill array value int read keyboard 
need write full program  just code give declaration array variable 
suppose follow array declaration program  int  suppose implementation  variable int byte memory 
run program  memory will array consume 
suppose run program  system assign memory address indexed variable 
will address indexed variable 
first discuss array index variable argument function 
indexed variable function argument indexed variable argument function exactly way variable argument 
example  suppose program contain follow declaration  int   
array index expression evaluate order determine exactly index variable give argument 
display contain example index variable function argument 
program show give additional vacation day employee small business 
program extremely simple  illustrate indexed variable argument function 
notice function 
function formal parameter call int 
body program  function call argument value number 
notice special formal parameter 
just ordinary formal parameter int  base array vacation 
display indexed variable call value argument 
remark apply call reference argument 
indexed variable call value argument call reference argument 
formal parameter entire array call value parameter call reference parameter  formal parameter refer array parameter 
let start example 
videonote pass array function array function define display array parameter   will replace entire array function call 
ordinary call value parameter size assume integer_value equal size array 
function fill array argument fill array indexed variable value type keyboard  function output message screen tell index last array index
formal parameter int array parameter 
square bracket  index expression inside  array parameter 
array parameter call reference parameter  practical purpose behave like call reference parameter 
let example detail see array argument work case 
example  following acceptable function_call  int     call will fill array score integer type keyboard 
notice formal parameter function_declaration heading function definition give square bracket  index expression 
function definition 
happen array argument score function_call 
loosely speak  argument score plug formal array parameter body function  function_body execute 
formal parameter parameter see now 
formal parameter merely placeholder argument score 
function call score array argument  computer behave replace corresponding argument score 
array argument function_call  action perform array parameter perform array argument  value indexed variable array argument change function 
formal parameter function_body change example  cin statement  array argument will change 
look like array parameter simply call reference parameter array 
close true  array parameter slightly call reference parameter 
help explain difference  let review detail array 
recall array store contiguous chunk memory 
example  follow declaration array score  int  declare array  computer reserve memory hold variable type_int  store computer memory 
computer remember address indexed variable  remember only address indexed variable 
example  program need  computer calculate address address 
computer know locate int variable past 
obtain address  computer take address add represent amount memory int variable  result address 
array memory 
array argument array argument plug array parameter first index variable  base type array determine memory index variable  array number indexed variable 
array array argument function  only first part give function 
array argument plug correspond formal parameter  plug address array first index variable 
base type array argument match base type formal parameter  function know base type array 
array argument tell function array 
code function_body execute  computer know array start memory memory index variable special provision know indexed variable array
critical int argument tell function array 
array parameter call reference parameter 
think array parameter weak form call reference parameter array tell function array parameter little strange  least nice property direct result seemingly strange definition 
advantage illustrate look example function give display 
function fill array long base type array int 
example  suppose follow array declaration  int   
const parameter modifier array argument function_call  function change value_store array 
complicated function definition  write code inadvertently change value_store array  array change
precaution  tell compiler hear pointer  will sound like pointer  array argument pass pass pointer first zeroth index variable 
will discuss 
learn pointer  safely ignore footnote 
tell compiler array argument change function  insert modifi const array parameter argument position 
array parameter modify const call constant array parameter 
example  follow function output value array change value array   declare array
argument know array argument 
array argument plug array parameter  give function address memory first index variable array argument index 
array argument tell function size array 
array parameter function  normally formal parameter type_int give size array example 
array argument like call reference argument following way  function_body change array parameter  function call  change actually array argument 
function change value array argument change value indexed variable 
array syntax function_declaration array parameter follow  syntax  array  
example  following version function contain mistake inadvertently change value array argument 
fortunately  version function definition include modifi const  error_message will tell array change 
error_message will help explain mistake   declared size array
const modifier function definition mistake show  function compile run error_message 
code contain infinite loop continually increment write screen 
problem incorrect version wrong item incremente loop 
indexed variable incremente  index incremente 
incorrect version  index start change 
indexed variable incremente  change array  include modifi const  computer will issue warning message 
error_message serve clue wrong 
normally function_declaration program addition function definition 
const modifier function definition  function_declaration function head function_declaration consistent 
pitfall inconsistent const parameter const parameter modifier proposition 
array parameter type  array parameter type change function 
definition function  give declaration function definition  double  int  element first 
code will generate error_message warn message compiler 
function change parameter
compiler process function definition show change parameter
translate function definition  compiler know function function_declaration compute  function_declaration contain const tell compiler parameter will change 
const parameter function  modifi const parameter function compute function_declaration follow  double int  int  function return array function return array way return type_int double 
way obtain 
array equivalent function return array 
return pointer array 
cover pointer 
will discuss return pointer array discuss interaction array pointer 
way write function return array 
case study production graph case study array top design program 
index variable entire array argument function subtask 
problem definition apex plastic spoon manufacture company commission write program will display bar graph show productivity manufacturing plant give week 
plant keep separate production figure department  teaspoon department  soup spoon department  plain cocktail spoon department  colored cocktail spoon department  forth 
plant number department 
example  only plant manufacture colored cocktail spoon 
input enter plant plant consist list give production department plant 
output will consist bar graph follow form  plant plant plant plant asterisk represent unit output 
decide read input separately department plant 
department produce negative number spoon  know production figure department will nonnegative 
negative number sentinel mark end production plant 
output unit  scale divide 
present problem computer display whole number asterisk 
display asterisk unit 
will round near 
will will_produce asterisk 
precise statement program input output follow 
input manufacturing plant number 
follow input give plant  list give production department plant 
list terminate negative number serve sentinel value 
asterisk bar graph equal unit 
production plant round near unit 
analysis problem will array call production  will hold total production plant 
 array index start 
plant number   will plant number array 
will place total production plant number indexed variable 
total output plant number will hold  figure plant will hold  forth 
output thousand unit  program_will scale value array_element 
total output plant number unit  value will initially set 
value will scale value change  asterisk will output graph represent output plant number 
task program divide follow subtasks   read input datum plant set value indexed variable equal total production plant  number plant 
entire array production will argument function carry subtask 
usual array parameter  mean additional formal parameter size array  case number plant 
will define constant number plant  constant will serve size array production 
part program  function_declaration function perform subtask define constant number plant  show display 
notice reason change array parameter function graph  array parameter constant parameter add const parameter modifier 
material display outline program  separate file  file compile check syntax_error outline define function correspond function_declaration show 
compile file show display  ready design implementation function subtask 
function  will design algorithm  write code function  test function design next function 
algorithm design function_declaration descriptive comment function input datum show display 
body part program show display  call  formal array parameter will replace array production  last plant number number plant  formal parameter will replace 
algorithm straightforward  equal   following  read datum plant number
sum number 
set production equal total 
code routine work function  still need design 
move discuss function  let observe function 
notice store figure plant number indexed variable index  array start index  plant number start 
notice indexed variable argument function 
function work function 
function input work plant 
read production figure plant  sum figure  store total indexed variable plant 
need know argument indexed variable 
function  indexed variable just_like variable type_int 
will ordinary call reference parameter type_int 
mean array function display outline graph program 
function read list number end sentinel value  sum number read set value argument  variable type_int  equal sum 
display show function definition 
function embed simple test program 
test function test program only untested function 
function include call function 
test driver program
once completely test  program  like display  test function 
test function  test possible kind production figure plant 
plant production figure plant display  test plant only production figure plant display  test plant production figure plant display 
test nonzero zero production figure  include input list plant display 
algorithm design scale function scale change value index variable array production show number asterisk print
asterisk unit production  value indexed variable divide 
whole number asterisk  number round near integer 
method scale value array size  function_declaration scale  show display repeat here  state term arbitrary array arbitrary size  void  int size  
code scale algorithm scale translate code give next  round function still need define 
function round take argument type double return type_int integer near argument  function round will round argument near whole number 
sample dialogue enter production datum plant enter unit produce department 
append negative end list 
append negative end list 
append negative end list 
append negative end list 
notice divide  decimal_point 
divide  perform integer division 
true want integer final answer round  want divide produce   round whole 
now turn definition function round  round argument near integer 
code function round  scale  give display 
code round require bit explanation 
function round predefine function floor library header_file cmath 
function floor return whole just argument 
great equal strictly  plus will  floor apply plus will_return 
round apply great equal strictly will_return 
array display function scale 
enter number scale  value scale array function 
great equal equal  plus will great 
round call great equal equal will_return 
round work correctly argument 
clearly  special argument 
similar argument apply nonnegative number 
round work correctly nonnegative argument 
testing scale display contain demonstration program function scale  testing program function round scale elaborate simple program 
allow retest test function time just once 
will give complete testing program  first test round scale driver program test scale driver program 
program test round test argument  argument round like  argument round like 
program test scale test similar variety value element array 
function graph complete program produce desire bar graph show display 
take step step design function graph straightforward 
sample dialogue program display graph show production plant company 
enter production datum plant enter unit produce department 
append negative end list 
append negative end list 
append negative end list 
append negative end list 
arrays el est exe rc es 
write function definition function_call  formal parameter array integer increase value array_element
add formal parameter need 
follow function definition  
write function_name take parameter array double int parameter name size return value type_int 
function_will test array order  mean array violate follow condition  
function_return element order  will_return first element array order 
example  declaration 
array sort  function return 
section discuss partially fill array give brief introduction sort search array 
section include language  include practice array parameter 
partially fill array exact size need array know program write  size vary run program
common easy way handle situation declare array large size program possibly need 
program free little array need 
partially fill array require care 
program keep track array reference indexed variable give value 
program display illustrate point 
program read list golf score show score differ average 
program_will work list short score  long score  length
score store array score  index variable  program only array need 
variable keep track element store array 
element score store position 
detail similar declared size array entire array
variable argument function manipulate partially fill array 
argument properly ensure function_will reference illegal array  eliminate need argument give declare size array 
example  function argument ensure only legal array index
function fill array need know maximum declare size array overfill array 
sample dialogue program read golf show differ
enter golf  enter nonnegative whole number 
mark end list negative number 
skimp formal parameter notice function display 
call  declare array size give argument  show follow function_call display     protest globally define constant definition need argument 
correct  program display  argument 
generally useful function want program 
function program display  discuss subsection 
program display  argument declare array size name global constant 
write global constant body function  able reuse function program display 
example  array contain student number student give course 
tell student enrol  array search see contain student number 
program display fill array search array value specify user 
real application program elaborate  show essential sequential search algorithm 
sequential search algorithm straightforward search algorithm imagine  program look array_element order first last see target number equal array_element 
display  function search search array 
search array  want know simply target value array 
target value array  want know indexed variable hold target value  serve guide additional target value 
design function search return give location target value array  target value array 
target value array  search return 
let look function search little detail 
function search loop check array_element see equal target value 
variable programming array 
sample dialogue enter nonnegative whole number 
mark end list negative number 
search follow return enter number search store array position 
search follow return enter number search list 
search follow return end program 
only program  still idea declare array size argument 
display declare size array argument remind function need critically important way 
section function_call sort sort partially fill array number order small large 
procedure sort array parameter
array will partially fill  additional formal parameter call  tell array position
declaration precondition function sort void  int   declare size array
function sort rearrange element array function_call complete element sort follow  
easy sort algorithm understand 
way design algorithm rely definition problem 
case problem sort array small large 
mean rearrange value small  next small  forth 
definition yield outline selection sort algorithm  place indexth small element way realize general approach 
detail develop array copy element array sorted order  array adequate economical 
function sort only array contain value sort 
function sort rearrange value array interchange pair value 
let concrete example see algorithm work 
array show display 
algorithm will place small value 
small value value 
algorithm interchange value 
algorithm look next small element 
value now small element next small element small remain element     
example display  next small element  algorithm interchange value 
positioning second small element illustrate fourth fifth array picture display 
algorithm position third small element  forth 
videonote selection sort walkthrough arrays display selection sort 
sorted portion array grow add element element unsorted end array 
notice algorithm need value last indexed variable  
once element position correctly  correct value 
correct value small value leave move  only value leave move value 
definition function sort  include demonstration program  give display 
function  show display  interchange value indexed variable 
example  follow call will interchange value    
sample dialogue program sort number low high 
enter nonnegative whole number 
mark end list negative number 
computer scientist devise score sort algorithm 
algorithm efficient work only type datum 
bubble sort simple general sort algorithm similar selection sort 
bubble sort sort array ascend order  large value successively  bubble  end array 
example  start unsorted array consist follow integer  initial array      
remain number beginning array need examine only number leave small 
design program base bubble sort note place large item  second large item  next 
correspond loop start array count array 
need include will contain small element 
way implement loop follow code  variable correspond target  bubble  part bubble sort happen inside iteration loop 
bubble step consist loop move large number array 
first  large number videonote bubble sort walkthrough array will bubble
start bubble procedure compare number number 
number large number value swap end large number 
number equal number happen 
start follow unsorted array  initial array      
second step will compare number  value 
large swap number result following  step      
end first iteration bubble sort algorithm 
bubble large number end array 
next iteration bubble second large number second last position  forth  variable represent target bubble number 
variable reference bubbled item loop code look like inside loop compare item 
large move 
complete algorithm show complete example display 
display bubble sort program 
arrays el est exe rc es 
write program will read nonnegative integer array call write integer back screen 
exercise need function 
just toy program minimal 
write program will read letter array write letter back screen reverse order 
example  input abcd 
call array 
exercise need function 
just toy program minimal 
follow declaration alternative version function search define display 
order alternative version search function  need rewrite program slightly  exercise need write function definition alternative version search 
find wall computer science department restroom allow declare array index 
section multidimensional array 
following declare array character call page 
array page index  first index range  second 
example    indexed variable array 
note index enclose set square bracket 
true dimensional array see  index variable multidimensional array variable base type 
array number index  common number index
dimensional array visualize dimensional display first index give row second index give column 
example  array index variable twodimensional array page visualize follow           
 dimensional array  page  actually array array 
example array page actually dimensional array size  base type dimensional array character size 
normally  need act array page actually array index array array  hard keep track 
least situation dimensional array look like array array  namely  function array parameter dimensional array  discuss next subsection 
multidimensional array parameter follow declaration dimensional array actually declare dimensional array size  base type dimensional array character size  multidimensional array array array array 
array declaration  form show  define index variable combination array index 
example  second sample declaration define follow indexed variable array matrix       char  view dimensional array array array will help understand handle parameter multidimensional array 
example  follow function take array argument  like page  print screen  
notice dimensional array parameter  size first dimension give  include int parameter give size first dimension 
number only comment  compiler ignore size second dimension dimension give array parameter  show parameter const char multidimensional array multidimensional array parameter multidimensional array parameter give function head function_declaration  size first dimension give  remain dimension size give square bracket 
first dimension size give  need additional parameter type_int give size first dimension 
example function_declaration dimensional array parameter void  int  realize multidimensional array array array  rule begin sense 
dimensional array parameter const char parameter array array  first dimension array treat just_like array ordinary  onedimensional array 
second dimension part description base type  array character size 
program example dimensional grading program display contain program dimensional array  name grade  store display grade record small class 
class student include quiz 
display illustrate array grade store datum 
first array designate student  second array designate quiz 
student quiz number start  subtract student number subtract quiz number obtain indexed variable store quiz score 
example  score student number receive quiz number record 
program ordinary dimensional array 
array will record average quiz score student 
example  program_will set equal average quiz score receive student  equal average quiz score receive student  forth 
array will record average score quiz 
example  program_will set equal average student score quiz  will record average 
array quiz score student dimensional array grade input code show display 
compute average score 
index variable  contain score student quiz 
contain average student 
contain average quiz number 
display illustrate relationship arrays grade   
display  show sample datum array grade 
data  turn  determine value program store 
display show value  program compute 
complete program fill array grade compute display student quiz show display 
program declare array dimension global name constant 
procedure program reuse globally define constant procedure body  parameter size array dimension 
routine  display show code fill array 
pitfall comma array index note display write indexed variable twodimensional array grade pair square bracket 
programming_language write pair bracket comma follow    incorrect 
 quiz num unlikely error_message  incorrect usage will cause program misbehave 
arrays elf er ise 
output produce follow code 
write code will fill array declare number type keyboard 
number will input line  line solution need depend input number divide line 
write function definition void function_call echo follow function_call will echo input self test exercise will echo format specify input line number line   summary array store manipulate collection datum type 
check first last iteration loop manipulate array sure illegally small illegally large 
array parameter similar call reference parameter change formal parameter body function_will array argument function call 
answer self test exercise index variable array store next computer memory array occupy contiguous portion memory 
array pass argument function  only address first index variable number give call_function 
function array parameter need formal parameter type_int give size array 
array parameter modify const call constant array parameter 
answer se lf test exer cis 
statement int  declaration  number array_element 
expression access array define previous statement 
access element  fifth last array_element 
array size 
array size 
index variable sample  piece code try fill 
equal  + equal  +   illegal 
loop iteration 
correct code  change first line loop
array will consume byte memory 
address index 
first illegal 
second index expression
entire array argument tripler  second call 
section  entire array function argument  discuss situation entire array argument 
loop step indexed variable  illegal array 
correct version code int      
desire  call acceptable 
follow function_call incorrect    first incorrect second argument large 
second incorrect miss final semicolon reason 
third incorrect indexed variable argument entire array 
parameter constant parameter value indexed variable change 
practice program practice program generally solve short program directly apply programming principle present
write function_name take input array integer integer specify entry array 
function return true array start end digit 
return false 
test function array length 
array digit beginning array  end array  middle array  miss array 
write function_name take input array integer integer specify entry array 
function return number array 
test function array length vary number 
write function_name swapfrontback take input array integer integer specify entry array 
function swap first element array last element array 
function check array empty prevent error 
test function array length vary front back number 
follow code create small phone book 
array store list array store phone number name 
example  michael myers  phone number ash williams  phone number 
write function lookupname code properly look return phone number input name 
programming project programming project require problem solve practice program solve way 
visit complete programming project online instant feedback 
project write elegantly structure class 
project mean write multidimensional array require structure class 
see define class structure 
version project 
version interactive 
write program read average monthly rainfall city month year read actual monthly rainfall previous month 
program print nicely format table show rainfall previous month average rainfall month 
average monthly rainfall give month january  february  forth  order 
obtain actual rainfall previous month  program first ask current month ask rainfall figure previous month 
output correctly label month 
variety way deal month 
straightforward method code month integer conversion output 
large switch_statement acceptable output function 
month input handle manner wish  long easy pleasant user 
complete program  produce enhance version output graph show average rainfall actual rainfall previous month 
graph similar show display  bar graph month label average rainfall rainfall recent month 
program ask user want see table bar graph display format request 
include loop allow user see format user wish user request program end 
arrays version combine interactive file output 
elaborate version  allow user request table graph output file 
file name enter user 
program version program add feature 
read file name  material present optional section videonote solution programming project 
write function_call partially fill array character formal parameter delete repeat letter array 
partially fill array require argument  function_will actually formal parameter  array parameter formal parameter type_int give number array position
letter delete  remain letter move forward fill gap 
will create empty position end array array
formal parameter partially fill array  second formal parameter type_int will tell array position fill 
second formal parameter will call reference parameter will change show array repeat letter delete 
example  follow code  
programming project long partially fill array long assume partially fill array contain only lowercase letter 
embed function suitable test program 
standard deviation list measure deviate average 
standard deviation small  cluster close average 
standard deviation large  scatter average 
standard deviation   list define follow  
define function take partially fill array argument return standard deviation partially fill array 
partially fill array require argument  function_will actually formal parameter  array parameter formal parameter type_int give number array position
array will type double 
embed function suitable test program 
write program read list integer array base type_int 
facility read array keyboard file  user option 
user choose file input  program request file name 
assume entry array 
program determine entry
output column list 
first column list distinct array_element  second column count number occurrence element 
list sort entry first column  large small 
example  input output count 
text discuss selection sort 
propose sort  routine  insertion sort 
routine sense opposite selection sort pick successive element array insert correct position sorted subarray end array sort 
array sort divide sorted subarray sorted subarray 
initially  sorted subarray empty 
element sort subarray pick insert correct position sorted subarray 
write function test program implement selection sort 
test program 
example hint  implementation involve loop select successive element sorted subarray nest loop insert element proper position sorted subarray 
initially  sorted subarray empty  sort subarray array  
inside loop first case 
array subarray look like sort sorted 
insert sorted subarray proper position 
order  inside loop swap value position position 
result follow  sort sorted 
programming project note sorted subarray grow entry 
repeat process first sort subarray entry   find place place subarray remain sorted 
place large large element sorted subarray inside loop
result follow  sort sorted 
time inside loop swap value value proper position 
involve swap  sorted 
array store large integer digit time 
example  integer store array set    
exercise find useful store digit backward  place    
exercise will write program read positive integer digit length output sum number 
program_will read digit value type char number read character           
read program  character change value type_int 
digit will read partially fill array  find useful reverse order element array array fill datum keyboard 
program_will perform addition implement usual paper pencil addition algorithm 
result addition store array size  result write screen 
result addition integer maximum number digit digit  program issue message encounter  integer  able change maximum length integer change only globally define constant 
include loop allow user continue addition user program end 
write program will read line text output list letter occur text number time letter occur line 
end line period serve sentinel value 
letter list follow order  frequently occur letter  next frequently occur letter  forth 
array  hold integer hold letter 
assume input lowercase letter 
example  input bo 
programming project program_will need sort array accord value integer array 
will require modify function sort give display 
sort solve problem change function 
class assignment  ask instructor input output keyboard screen file 
file  ask instructor instruction file name 
write program score card poker hand follow category  pair  pair  kind  straight order  gap  flush suit  example  spade  full house pair kind  kind  straight flush straight flush 
array  hold value card hold suit 
include loop allow user continue score hand user program end 
write program will allow user play tic tac toe 
program ask move alternately player player
program display game position follow  player enter move enter position number wish mark 
move  program display change board 
sample board configuration follow  
write program assign passenger seat airplane 
assume small airplane seat numbering follow  program display seat pattern  mark seat assign 
example  seat   take  display look like 
array display seat program prompt seat desire  user type seat  display seat update 
continue seat fill user signal program end 
user type seat assign  program seat occupy ask choice 
write program accept input like program display output bar graph like display program_will output bar vertically horizontally 
dimensional array useful 
define cell neighbor cell 
neighbor cell cell directly right  left  diagonally right leave  diagonally right leave 
occupy neighbor  die overcrowd 
dying reason help cause birth  newborn resurrect die  will death prevent death reduce local population 
note  configuration grow small starting configuration 
move across region 
recommend text output programming project rectangular array char column row store life world successive generation 
asterisk living  blank empty dead 
screen row mean whole screen 
suggestion  look stable configuration 
look community repeat pattern continually 
number configuration repetition call period 
configuration fix  continue change 
possible project find configuration 
hint  define void function_name generation take array call world  column row array char  contain initial configuration 
function scan array modify cell  mark cell birth death accord rule list early 
involve examine turn  kill let live  empty  decide bear 
function display accept array world display array screen 
sort time delay call generation display 
program generate display next generation press return 
liberty automate automation program 
program first load boy name girl name file separate array 
search target name array  directly file 
program hard code create bar chart exactly integer  able graph array integer 
scale graph appropriately horizontal vertical dimension bar chart fit pixel area 
impose constraint integer array nonnegative 
sentinel value end value draw bar chart 
array create bar chart value     program operate array  test program create bar chart value entry view result svg file ensure draw correctly 
common memory matching game play young child start deck card contain identical pair 
example  give card deck  label    label    label   card shuffle place face table 
player select card face turn face match leave face
card match  return original position face
game continue fashion card face
write program play memory matching game 
card lay square label pair number 
program allow player specify card like select coordinate system 
example  suppose card follow layout  card face pair  locate coordinate   
hide card temporarily place face output large number newline force old board screen 
write function shuffle  card array repeatedly select card random swap
random swim school swimming instructor  jeff anna 
current schedule show
denote hour time slot occupy lesson 
programming project jeff monday 
thursday
write program capable store schedule 
create menu allow user mark time slot busy free instructor 
add option output schedule screen 
next  add option output time slot individual lesson slot least instructor free 
finally  add option output time slot group lesson instructor free 
modify programming project add menu option load schedule file 
way combat problem randomized challenge response system 
system  user enter time base secret response randomly generate challenge 
follow scheme password consist digit pin number 
digit assign random number   
user enter random number correspond pin actual pin number 
example  actual pin number 
authenticate user present screen 
array pin  num  user enter 
divulge password attacker intercept entry correspond pin number  
next time user log sequence random number generate  pin  num  program simulate authentication process 
store actual pin number program 
program array assign random number digit 
output random digit screen  input response user  output user response correctly match pin number 
social security administration maintain actuarial life table contain probability person united states will die oact stat 
death probability table store file include website book 
value row  age  death probability male  death probability female 
example  first line year old female chance die 
write program read datum array file 
next  let user enter sex age 
program simulate age user will live start death probability user current age sex 
generate number  number equal death probability predict user will live current age 
number great death probability increase age repeat calculation number next probability value 
simulation reach age predict user will live 
program merely simulation will give result time run  assume change seed number generator 
string vector array type string stre value string variable  string function cstre  copy past end strcpy string input output string number conversion robust input standard introduction standard programming tip  version getline  mix cin variable  getline summary answer self test exercise string processing programming example  palindrome testing convert object string convert string number vector vector basic  square bracket vector size programming tip  vector assignment behave efficiency issue practice program programming project polonius  read lord 
hamlet  word  word  word 
william shakespeare  hamlet introduction discuss topic array array  string vector 
string vector closely relationship obvious  topic depend
topic string vector cover order 
section present type value represent string character  hello  
type  discuss section  just array base type char store string character array mark end null character   
old way represent string  inherit programming_language 
sort string call string 
string old way represent string  difficult sort processing least pass contact string 
example  quote string  hello   implement string 
ansi iso standard include modern stringhandling facility form class 
class second type will discuss cover section 
vector think array grow shrink length program run 
 once program create array  change length array 
vector serve purpose array change length program run 
prerequisite section  cover string  section cover vector  independent
wish cover vector string  fine 
section string material  section   
section class section material section   
section vector material section   
section way represent string character  inherit language 
section class modern way represent string 
type here bit  old fashioned   still widely integral part language 
stre value string variable way represent array base type char 
hello   handy represent array character indexed variable  letter hello  plus character    serve end marker 
character   call null character end marker distinct real  character 
end marker allow program read array character time know read read end marker   
store way array character terminate  call c
write   symbol write program  just_like character    character   only single character value 
like character value    store variable type char indexed variable array character 
null character    null character     mark end store array character 
array character way  array call variable 
null character   write symbol  single character fit variable type char indexed variable array character 
 literal  hello   store seldom need aware detail 
variable just array character 
follow array declaration variable capable store value character  char  letter plus null character   mark 
string vector variable partially fill array character 
like partially fill array  variable position start indexed variable need 
variable int variable keep track array currently
string variable place special symbol   array last character string 
contain string  hi  array_element fill show here  string variable vs
character   sentinel value mark end string 
read character string start indexed variable  proceed   forth  know encounter symbol    reach end string 
symbol   occupy element array  length long string array hold size array 
distinguish string variable ordinary array character stre variable contain null character   end string value 
distinction array distinction array
stre variable array character  way 
stre variable declaration stre variable array character  differently 
stre variable declare array character usual way 
syntax char +  
allow null character    terminate string store array 
example  stre variable example hold string character long 
initialize string variable initialize string variable declare illustrate follow example  
initialize string variable  omit array size 
will automatically size stre variable length quote string 
first possible initialization place null character   array character     
second put  array 
initialize string variable stre variable initialize declare  illustrate follow example  char   initialize way automatically place null character     array end string specify 
omit number inside square bracket   stre variable will give size character long length string 
example  follow declare null character   char   stre variable array  index variable
string vector string value string length consist character  
array lose value    will long behave like string variable 
example  follow will change array long contain string  char  dobedo     code execute  array will still contain letter stre  dobedo   will long contain null character   mark end string 
string manipulate function depend critically presence  mark end string value 
example  previous loop change character string variable 
loop change character encounter  
loop encounter   change large chunk memory unwanted value  program strange
safety feature  wise rewrite loop follow  null character   lose  loop will inadvertently change memory location end array  int  
stre variable assignment statement 
test string equality  will result expect 
reason problem string string variable array 
assign string value illegal 
equal sign assign value string variable variable declare  program 
technically  equal sign declaration  char  dobedo   initialization  assignment 
want assign value string variable 
number way assign value string variable 
easy way predefine function strcpy show  strcpy   hello   will set value equal hello  
unfortunately  version function strcpy check sure copying exceed size string variable first argument 
version safe version strcpy 
safe version spell strncpy 
function strncpy take third argument give maximum number character copy 
example  char     will copy string variable  matter long string
expression test string
string  test string equal 
test string equality  likely incorrect result  error test string predefine function strcmp 
example   string    string   note function strcmp work differently guess 
comparison true string match 
function strcmp compare character stre argument character time 
point numeric encoding character numeric encoding corresponding character  testing test string equality string vector negative number return 
character great character  positive number return 
ordering relationship compare character call lexicographic order 
important point note string uppercase lowercase  lexicographic order just alphabetic order 
see strcmp return negative value  positive value  zero  depend string compare lexicographically great  equal 
strcmp boolean expression loop statement test string equality  nonzero value will convert true string zero will convert false 
sure remember inverted logic testing stre equality 
compiler compliant standard safe version strcmp third argument give maximum number character compare 
function strcpy strcmp library header_file cstre  insert following near top file  cstre 
process string  inevitably will predefined string function library cstre 
string  will normally give follow directive near beginning file code  cstre function cstre display contain commonly function library header_file cstre 
insert follow near top file  cstre will see  definition strcpy strcmp  string function cstre  place global namespace  std namespace  directive require 
check sure large hold value 
limit choose carefully  safe twoargument version strcpy 
implement version 
check see large hold result concatenation 
return integer equal length 
return value 
return value great limit choose carefully  safe twoargument version strcat 
implement version 
equal  function_return  convert false 
note reverse expect return string equal 
order lexicographic 
limit choose carefully  safe argument version strcmp 
implement version 
function strlen easy understand
example   return character dobedo  
function strcat concatenate string  form long string place short string end end 
first argument string variable 
second argument evaluate string value  quote string 
result place string variable first argument 
example  follow  char  rain   strcat   spain   code will change value rainin spain  
example illustrate  need careful account blank concatenate string 
look table display  will see safe  threeargument version function strcpy  strcat  strcmp version 
note threeargument version spell add letter strncpy  strncat  strncmp 
stre argument parameter stre variable array  string parameter function simply array parameter 
array parameter  function change value string parameter  safe include additional int parameter give declare size string variable 
hand  function only value stre argument change value  need include parameter give declare size stre variable amount stre variable array fill 
null character   detect end string value store string variable 
dangerous strcpy function put bound datum copy 
will simply copy source string target string null character encounter 
source large target datum will copy past memory allocate target string 
here simple example problem  
open system attack malicious user 
problem compiler_will compile code strcpy override warning 
assume compiler allow strcpy  way fix problem only copy cstring character long 
follow attempt avoid exceed size cstring  
reasonable only create array size sign char store_value 
version will work fine small source string 
input source string character long 
cause overflow result negative value copy
result program enter statement erroneously copy source datum target array 
avoid problem int size return strlen  strncpy cap maximum copy  string class next section 
string vector self te st exe cis 
follow declaration equivalent 
assume code embed complete program include directive cstre program file 
suppose function strlen return string argument define
give function definition strlen 
note strlen only argument  string 
add additional argument  need 
maximum string place string variable declare follow declaration 
character follow character string constant 
character_string just array char  text caution confuse follow declaration initialization 
correct string variable  follow loop reassign position value   leave
assume code fragment embed complete correct program 
answer question follow code fragment  int  
string vector stre input output string output insertion operator 
quote string 
stre variable way  example     string variable 
possible fill stre variable input operator  keep mind 
type datum  whitespace blank  tab  line break skip string read way 
reading input next space line break 
example  follow code  
embed complete program  code produce dialogue like following  enter input  bedo
dobedo end output string variable receive only word input  receive string value  input character follow blank  receive  input character follow blank 
want program read entire line input  extraction operator read line word time 
tedious still will read blank line 
easy way read entire line input place result string string variable  just predefined member_function getline  member_function input stream cin file input stream 
function getline argument 
first argument stre variable receive input second integer typically declared size string variable 
second argument tell maximum number array_element string variable getline will allow fill character 
example  follow code  
output function  entire line read 
reading end line end  result string short maximum number character specify second argument 
getline execute  reading number character give second argument fill string array  end line reach 
example  follow code  
embed complete program  code produce dialogue like following  enter input  dobedowap dobeend output notice character read stre variable short string  second argument 
null character   fill array position 
string terminate null character store string variable  consume array position 
stre input output technique illustrate cin work way input output file 
input stream cin replace input stream connect file 
output_stream replace output_stream connect file 
syntax  +  line input read stream  result string place 
line max character long  only first line 
string vector read 
self te st exe cis 
follow code assume embed complete 
dialogue begin follow  will next line output 
enter input  time now 
follow code assume embed complete 
enter line input  hair toe grow long curly 
string number conversion robust input string   number
first sequence character  second number 
everyday life  array type string write way blur distinction  program distinction ignore 
want arithmetic  need   
want add comma numeral thousand hundred thirty want change string   string   
design numeric input  useful read input string character  edit string  convert string number 
example  want program read amount money  input begin dollar sign 
program read percentage  input percent sign end 
program read input string character  store string stre variable remove unwanted character  leave only string digit 
program need convert string digit number  easily predefine function atoi 
function atoi take argument string return return integer 
argument correspond int value  atoi return 
example   return  character   digit 
pronounce atoi  string number function function atoi  atol  atof convert string digit correspond numeric_value 
function atoi atoll convert string integer 
only difference atoi atol atoi return value type_int atol return value type long 
function atof convert string conversion function_return zero 
example int   
string vector abbreviation alphabetic  function atoi library header_file cstdlib  program contain follow directive  cstdlib number large value type_int  convert string value type long 
function atol perform conversion function atoi atol return_value type long accommodate large integer_value system 
display contain definition function_call read line input discard character digits    
function function atoi convert clean string digit integer_value 
demonstration program function read money amount will matter user include dollar sign
similarly  read percentage will matter user type percent sign
output look function clean simply remove symbol  happen 
value produce true int value program number  string character 
function show display will delete nondigit string type check remain digit will yield number user mind 
user give chance look final value see correct 
value correct  user give chance reenter input 
display function function_call  will accept user type will allow user reenter input satisfied number compute input string 
robust input procedure 
programming project end ask define function similar read number type double  oppose number type_int 
write function  nice predefine function convert string value number type double 
fortunately  predefine function atof  return value type double 
argument correspond number type double  atof return 
pronounce atof  abbreviation alphabetic float  recall number decimal_point call float point number way computer handle decimal_point store number memory 
string vector 
sample dialogue enter press return  string convert
discard symbol digit 
convert string set equal value
string vector standard string class try catch sentence  word quickly lock sentence word away literary storehouse come handy 
anton chekhov  seagull section  introduce string 
string simply array character terminate null character   
order manipulate string  need worry detail handling array 
example  want add character string room array  create array hold long string character 
short  string require programmer keep track low level detail string store memory 
extra work source programmer error 
late ansi iso standard specify now class string allow programmer treat string basic data_type need worry implementation detail 
section introduce string type 
introduction standard class string class string define library name string  definition place std namespace 
order class string  code contain follow equivalent stre namespace std  + operator concatenation class allow treat value expression like value simple type 
operator assign value variable  + sign concatenate string 
example  suppose   object type value 
set equal concatenation value follow value follow  +  danger small value 
sum length exceed capacity  space automatically allocate 
note early quote string string literally type 
automatic type casting quote string value type 
quote string literal value type  will refer quote string value type 
example   hello   set value variable object
class second constructor take argument standard quote 
second constructor initialize object value represent argument 
example  phrase    first line declare variable phrase initialize empty second line declare noun type initialize value equivalent  ant  
programmer talk loosely initialize ant    type_conversion here 
quote  ant  value type 
variable receive value character ant  order ant   value terminate null character   
theory least  know care value store array  oppose data_structure 
alternate notation declare variable invoke constructor 
follow line exactly equivalent   ant    ant   
follow line display   love  + adjective +   + +    work allow concatenate string simple natural fashion 
constant  love  object type constant like  love  store word  null terminate array character 
see  love  argument  find definition overloading apply value love  
overloading + operator leave right  reverse positioning 
version side + produce object value_return 
course  overload expect  type operand 
need overloading case 
overloading look constructor perform type_conversion convert  love  value apply 
case  constructor parameter perform just conversion 
extra overloading presumably efficient 
class think modern replacement string 
easily avoid string program class 
convert constant type string vector display program class 
love fry ant 
class class represent value string character 
class versatile representation string discuss section 
class define library name  definition place std namespace 
program class contain follow equivalent namespace std  class default constructor initialize object empty constructor take argument initialize object value represent give argument 
example     standard class class string insertion operator cout output string object just datum type 
illustrate display 
input class string bit subtle 
extraction operator cin work string object datum  remember extraction operator ignore initial whitespace read encounter whitespace 
hair toe grow long curly 
variable receive string  
extraction operator cin  only read word  read line string contain blank 
exactly want  want 
want program read entire input variable type string  function getline 
syntax getline string object bit string section 
 cin first argument version getline member 
embed complete program  code produce dialogue like following  enter input  bedo
bedo output lead trail blank part string value read getline 
version getline bit ironic  class string design modern objectoriented technique  notation getline old fashioned  object orient notation 
accident history 
getline function define iostream library designer little choice getline stand alone function 
string vector library 
stream object connect text file place cin input file getline 
cin read blank character 
want read character time   discuss 
function read value type char  type  helpful handle input 
display contain program illustrate getline input 
sample dialogue enter first last name  torre name record torre  record record 
suggest  record record dare
will record record dare
object insertion operator output object 
input extraction operator cin 
input  code read delimit whitespace 
function getline input entire text object 
enter input  joy
follow code assume embed
enter line input  joy
version read encounter end line marker   
version allow specify character signal 
example  follow will first question mark encounter  
sense getline void function  actually return reference first argument  cin code
follow will read line text nonwhitespace character      
first version function read character istream object give first argument cin  insert character variable instance delimiter character encounter 
delimiter character remove input discard 
second version  default_value delimiter  work
getline function_return first argument cin  void function 
code read follow input  expect value set value line set value represent  hello   hello hitchhiker 
set value  line set equal empty 
cin skip lead whitespace input  leave rest line  case just    next input 
statement like cin videonote example cin getline class string vector leave line follow getline read just  
case  getline see  read  getline read empty 
find program mysteriously ignore input datum  see mix kind input 
need function display function ignore library iostream 
example      argument  call ignore member_function will read discard entire rest line include  discard character find end line character 
baffling problem program cin getline 
problem come move compiler
want portability  resort character character input 
problem occur version getline discuss
access character string object way access array_element  string object advantage array character plus number advantage array automatically increase capacity 
name string object  give access ith character string represent 
array square bracket illustrate display 
display illustrate member_function length 
string object member_function name length take argument return length string represent string object 
only string object like array length member_function behave like partially fill array automatically keep track position occupy 
object class string  array square bracket check illegal index 
illegal index index great equal length string object  result unpredictable bind bad 
just strange behavior error_message tell problem illegal index value 
member_function name check illegal index value 
member_function behave basically square bracket  point  function notation standard string class display string object behave like array 
sample dialogue enter first last name  john crichton last name spell  john   member_function check see evaluate illegal index 
value illegal index  run time error_message tell wrong 
follow example code fragment  attempt access out_of_range  first will produce error_message  will access nonexistent indexed variable  string  mary   
string vector 
change single character string assign char value indexed variable  
example  change third character string object  follow code fragment    
ordinary array character  character position object type string index start  third character string index position 
display give partial list member_function class string 
way  object class string behave string introduce section 
operator object class return result correspond intuitive notion string equal namely  return true string contain character order  return false
similarly  comparison    compare object lexicographic ordering 
string consist letter uppercase lowercase letter  case lexicographic ordering example remark 
lexicographical comparison 
return index first occurrence
palindrome test palindrome read front back back front 
program display test input see palindrome 
palindrome test will disregard space punctuation will lowercase version letter decide palindrome 
palindrome example follow  able see elba 
love vol 
madam  adam 
man  plan  canal  panama 
rat live evil star 
member_function substr extract substring call object  give position length desire substre 
string vector 
sample dialogue enter candidate palindrome test follow press return 
madam  adam 
sample dialogue enter candidate palindrome test follow press return 
radar  radar  palindrome 
sample dialogue enter candidate palindrome test follow press return 
string substring length character position  extract 
character_string punct string  onecharacter string concatenate string return 
misbehave string  discuss section self te st xer cis
enter line input  hello friend 
convert string object string see will perform automatic type_conversion allow store string variable type string 
example  follow will work fine  
obtain string correspond string object  perform explicit conversion 
note early assignment_operator work string 
just case think follow work  point illegal 
stof  stod  stoi  stol convert string float  double  int  long 
convert numeric type string 
function illustrate following example  
 once program create array  change length array 
vector serve purpose array change length program run 
vector part standard library know stl standard template library  cover detail 
need read previous section cover section 
vector basic like array  base type  like array  store collection value base type 
syntax type variable declaration syntax array 
declare variable base type_int follow  int notation template class  mean plug type will_produce class vector base type 
think specify base type sense specify base type array 
type  include class type  base type
vector element index start  array 
example  follow change value ith element   answer   restriction square bracket notation vector notation array 
change value ith element 
initialize ith element  only change element give value 
add element index position first time  normally member_function 
declare variable string vector add element order position  first position  position   forth 
example  following give initial value element    
number element call size
member_function size determine element
example  previously show code execute  return 
write element currently follow  endl  function size return value type unsigned int  value type_int 
want safe  apply type cast convert return unsigned int int case like loop  loop control variable type unsigned int follow  endl  
constructor take integer argument will initialize number position give argument 
example  declare follow  int  first element initialize  return 
set value ith element value equal 
following follow declaration   vector display vector 
sample dialogue enter list positive number 
place negative number end 
constructor integer argument  vector number initialize zero number type 
base type class type  default constructor initialization 
string vector definition give library  place std namespace 
file vector follow
square bracket vector size great equal  element exist need create add 
need capacity store element  capacity automatically increase 
vector define library  place std namespace 
file vector following similar namespace std  
element add member_function  illustrate  once element position receive first element  constructor initialization  element position access square bracket notation  just_like array_element 
vector assignment behave assignment_operator vector element element assignment left hand side assignment_operator increase capacity need reset left hand side assignment_operator 
assignment_operator base type independent copy element base type  assignment_operator will independent copy 
note assignment_operator produce totally independent copy right hand side assignment_operator require assignment_operator base type completely independent assignment_operator base type 
confuse capacity
number element capacity number element memory allocate 
typically  capacity large capacity great equal
run capacity need room additional member  capacity automatically increase 
exact amount increase implementation dependent allow capacity need 
commonly implementation scheme capacity double need increase 
increase capacity complex task  approach reallocating capacity large chunk efficient allocate numerous small chunk 
size capacity number element
capacity number element currently memory allocate 
capacity recover member_function 
completely ignore capacity will effect program
efficiency issue  want manage capacity simply accept default behavior double capacity need 
member_function reserve explicitly increase capacity
note rely increase capacity necessarily decrease capacity argument small current capacity 
change member_function resize 
example  following resize   previous  initialize constructor integer argument 
previous great  first lose 
capacity automatically increase need
resize reserve  shrink capacity long need capacity 
self te st exe cis
answer self test exercise summary stre variable array character  slightly way 
string variable null character   mark end string store array 
assign string value stre variable equal   compare value string variable operator 
special string function perform task 
assignment equal   intuitive meaning object class string 
answe rs lf est exerci se 
follow equivalent equivalent
string vector 
strlen define follow definition   str contain string value terminate 
maximum number character sixth position need null terminator   
first place null character   array character      
second only assign successive position      put 
protect memory end array  change condition show 
string   long 
chunk memory belong array will overwrite 
practice program 
enter input  time now 
timeend output 
complete dialogue follow  enter line input  hair toe grow long curly 
end output 
end output 
string joy output 
complete dialogue enter line input  hello friend 
equal remember  cin read reach whitespace character blank 
hello jello 
program legal 
output note change change 
true independent assignment  
size number element capacity number element memory allocate 
typically  capacity large size 
practice program practice program generally solve short program directly apply programming principle present
create cstre variable contain name  age  title 
field separate space 
example  string contain  bob programmer  name age title format 
assume name  age  title space
write program only function cstre class string extract name  age  title separate variable 
test program variety name  age  title 
string vector 
repeat practice program class string extract field  cstre function 
write program input first last name  separate space  string variable 
string function output first last initial 
embed code loop 
end loop ask user like repeat program 
input user choice char cin 
character repeat program  exit 
beware pitfall newline cin mix getline 
write function_name take input vector integer 
function return true vector start end digit 
return false 
test function vector length digit beginning vector  end vector  middle vector  miss vector 
write function_name swapfrontback take input vector integer 
function swap first element vector last element vector 
function check vector empty prevent error 
test function vector length vary front back number 
practice program change program vector string array string 
write program input variable  first last  user enter name 
first  convert string lowercase 
program create contain full name pig latin first letter capitalize first last name 
rule convert word pig latin follow  first letter consonant  move end add  ay  end 
first letter vowel  add  way  end 
example  user input  erin  first name jones  last name  program create text  erinway onesjay  print
programming project programming project require problem solve practice program solve way 
visit complete programming project online instant feedback 
videonote solution programming project 
write program read sentence character output sentence spacing correct letter correct programming project capitalization 
word  output sentence  string blank compress single blank 
sentence start uppercase letter contain uppercase letter 
worry proper name  first letter change lowercase  acceptable 
treat line break blank  sense line break number blank compress single blank 
assume sentence end period contain period 
example  input answer life  universe  
write program will read line text output number word line number occurrence letter 
define word letter delimit end whitespace  period  comma  beginning end line 
assume input consist entirely letter  whitespace  commas  period 
output number letter occur line  sure count lowercase version letter letter 
output letter alphabetical order list only letter occur input line 
example  input line hi 
give function definition function follow function 
assume user type input normal everyday notation   notation type number 
model definition definition function give display function read input character  edit character  convert result number type double 
will need define function like 
string vector sophisticated display  cope decimal_point 
fairly easy project 
difficult project  allow user enter number normal everyday notation  discuss notation 
function decide input notation read input  ask user will notation 
write program read person name following format  first name  middle name initial  last name 
program output name following format   
example  input mary average user produce output  user  mary
input mary
user produce output  user  mary
program work place period middle initial input contain period 
program allow user who give middle name middle initial 
case  output  course  contain middle name initial 
example  input mary user produce output user  mary string  assume name character long 
alternatively  class 
write program read line text replace letter word word  love  
example  input string hate dodo 
programming project produce output love love 
course  output will sense 
example  input string john will run home 
letter word start capital letter  replace love   love  
need check capitalization  first letter word 
word string consist letter alphabet delimit end blank  end line  character letter 
program repeat action user quit 
write program read line text output line digit integer number replace 
example  input  userid digit pin secret 
output  userid digit pin xxxx secret 
note digit part word  digit change 
example  note change johnxx 
include loop allow user repeat calculation user want end program 
write program train user sexist language suggest alternative version sentence give user 
program_will ask sentence  read sentence string variable  replace occurrence masculine pronoun gender neutral pronoun 
example  will replace  
input sentence see adviser  talk listen
sure preserve uppercase letter first word sentence 
pronoun  replace   program need 
string vector decide 
allow user repeat sentence user
will long program require deal patience 
program replace string  occur inside word  here  
word string consist letter alphabet delimit end blank  end line  character letter 
allow sentence character long 
write sort function similar display argument vector int array 
function_will need parameter like display  vector determine number member_function size 
sort function_will only parameter  will vector type 
selection sort algorithm display 
redo programming project  time vector array 
programming project
will need write similar sort code project sort function programming project change 
country war enemy secret code communicate
manage intercept message read follow   message obviously encrypt enemy secret code 
just learn encryption method base ascii code 
appendix show ascii character set 
individual character string encode system 
example  letter  encode number encode number 
enemy secret code take letter message encrypt follow  originalchar + example  enemy message  hey  encrypt programming project character ascii code 
ascii code unencrypted message limit visible ascii character 
only know key number 
program try decode message possible key 
try valid key  message will sense 
key  message will gibberish 
write program input time console 
time format  hh  mm hh  mm pm  
hour digit  example   pm  
program include function take string parameter contain time 
function convert time digit military time base hour clock 
example   am  output  hour    pm  output  hour   am  output  hour  
function write time console return string write console function 
xml extensible markup language common format structure store datum web 
following small sample xml file store name address book 
type text editor file name find accompanying website 
string vector city state contact name paris
elm city beverly state contact name wendy boundary city state sample file contain contact 
tag denote start field tag denote end field 
write program read file output name address palmdale 
program output tag just address content 
write program read address 
assume contact address file structure field 
solution able handle input file number contact assume field contact order 
give follow header  videonote solution programming project stre target  string delimiter  
programming project return string      mi    fa      la    ti   
write function determine string anagram 
function case sensitive disregard punctuation space 
string anagram letter rearrange form
example   eleven plus anagram twelve plus string contain    
test function string anagram non anagram 
string class style string 
race competitor wear rfid tag shoe bib 
racer cross sensor computer log racer number current time 
sensor place course accurately calculate racer finish time pace verify racer cross key checkpoint 
system half marathon running race  mile 
problem only sensor  mile point  finish line 
here sample datum racer 
first line gun time hour time format hh mm ss 
gun time race begin 
subsequent line record sensor contain sensor   finish follow racer number follow time stamp 
time gun time take racer little starting line large pack 
write program read log datum 
program allow user enter racer number output racer finish place  race split time minute mile split 
challenging version modify program work arbitrary number sensor place location course just location 
will need specify mile marker sensor 
string vector 
base log file programming project write program detect cheating 
racer miss sensor  sign racer take shortcut 
race split suspiciously fast  sign racer hop vehicle 
case  race split fast mile suspicious 
output list suspect cheater reason suspicion 
pointer dynamic array pointer pointer variable basic memory management pitfall  dangle pointer static variable automatic variable programming tip  define pointer type dynamic array array variable pointer variable create dynamic array pointer arithmetic optional summary answer self test exercise practice program programming project memory operation reason 
blaise pascal  pens√©es introduction pointer construct give control computer memory 
show pointer array introduce form array call dynamic array 
dynamic array array size determine program run  fix program write 
prerequisite section  cover basic pointer  material 
require material 
section  cover dynamic array  material section  
require material 
zen pointer memory address variable 
recall computer memory divide numbered memory location call byte variable implement sequence adjacent memory location 
recall system memory address name variable 
variable implement memory location  address first memory location name variable 
example  variable call byreference argument  address  identifi name variable  pass call_function 
address name variable way give address memory variable start call pointer pointer pointer number situation 
note previous paragraph  variable call reference argument function_call  function give argument variable form pointer variable 
important powerful pointer  automatically system 
show write program manipulate pointer way want  rely system manipulate pointer
pointer variable pointer store variable 
pointer memory address memory address number  store pointer variable type_int double type casting 
variable hold pointer declare pointer type 
example  following declare pointer variable hold pointer point variable type double  double variable hold pointer variable type double  normally contain pointer variable type  int char 
variable_type require pointer type 
general  declare variable hold pointer variable specific type  declare pointer variable just declare ordinary variable type  place asterisk front variable_name 
example  following declare variable hold pointer variable type_int  declare ordinary variable   type_int  int     asterisk pointer variable 
omit second asterisk previous declaration  will pointer variable  will ordinary variable type_int 
asterisk symbol multiplication  context totally meaning 
discuss pointer pointer variable  speak pointing address 
pointer variable   contain address variable   pointer variable point variable pointer variable 
pointer variable  like declare early  contain pointer variable like 
operator determine address variable  assign address pointer variable 
example  following will set variable equal pointer point variable   declare pointer 
address number pointer address  address integer  pointer integer 
insist pointer address number 
pointer value type_int numeric type 
normally store pointer variable type_int 
try  compiler_will give error_message warning message 
perform normal arithmetic operation pointer 
asterisk declare  now meaning 
asterisk way  call dereferencing operator  pointer variable dereference 
put piece produce surprising result 
follow code  
set equal  set equal 
symbol obtain address variable symbol function_declaration specify call byreference parameter 
recall callby reference argument implement give address argument call_function 
usage slightly will closely usage symbol 
operator operator front pointer variable produce variable point
way  operator call dereferencing operator 
operator front ordinary variable produce address variable  produce pointer point variable 
operator call address operator 
example  declaration double   follow set value point variable   produce variable point assignment refer variable 
example  follow set value  name explicitly  assign value pointer variable pointer variable 
copy address pointer variable pointer variable 
example  still point  follow will set point   
add asterisk  deal pointer  variable pointer point
illustrate display 
pointer refer program manipulate variable variable identifier name
operator create variable identifier serve name 
variable refer pointer 
example  following create type set pointer equal address point  refer pointed 
example  following read type keyboard  add output  
specify type write type_name
variable create call dynamic variable create destroy program run 
program display demonstrate simple operation pointer dynamic variable 
display illustrate working program display 
display  variable represent box write inside box 
show actual numeric address pointer variable 
actual number important 
important number address
actual number address  merely address arrow point address 
example  illustration display  contain address question mark write
pointer dynamic array sample dialogue hope point example 
pointer variable pointer variable  statement 
operator create specify type return pointer point
example  following create type leave pointer point    
possible catch  exception install  topic cover 
unfortunate misinterpretation occur follow declaration 
give least 
basic memory management special area memory  call freestore  reserve variable 
create program consume memory program create variable  consume memory freestore 
happen  additional call
size freestore vary computer implementation 
typically large  modest program likely memory freestore 
modest program practice recycle freestore memory long need 
delete eliminate return memory occupy freestore memory reuse 
suppose pointer point
follow destroy pointed return memory freestore  delete  call delete  value undefined treat like uninitialized 
delete_operator delete eliminate return memory occupy freestore 
memory reuse create variable 
example  follow eliminate pointed pointer  delete  call delete  value pointer  like undefined 
point  value pointer undefined  mean know point  value point 
pointer point destroy  pointer undefined 
undefined pointer variable call dangle pointer 
dangle pointer program apply dereferencing produce expression  result unpredictable disastrous 
apply dereferencing operator pointer variable  pointer variable point variable 
pointer dynamic array static variable automatic variable_variable create call variable  create destroy program run 
compare variable  ordinary variable static  terminology programmer bit involved ordinary variable call static variable 
ordinary variable previous static 
variable local function  variable create system function call destroy function_call complete 
part program just function_call true variable declare part program 
call variable ordinary variable  book call automatic variable 
category variable  namely  global_variable 
global variable variable declare function definition include 
discuss global_variable briefly 
turn need global_variable
example  follow define type call intptr  type pointer variable contain pointer variable  typedef intptr  
example  follow define type_name kilometer mean type_name double  typedef double kilometer  
kilometer distance  rename exist type way occasionally useful 
typedef define type pointer variable 
advantage define pointer type_name  intptr define early 
first  avoid mistake omit asterisk 
remember  intend pointer  following mistake    omit  variable just ordinary int variable  pointer variable 
confused place int  problem difficult notice 
allow place type_name  int  following legal  int   line legal  mislead 
look like pointer variable  only pointer variable  ordinary int variable 
compiler attach identifi int attach identifi 
correct way declare pointer variable int   
intptr   second advantage define pointer type  intptr  see define function call reference parameter pointer variable 
define pointer type_name  need include function_declaration function  detail confusing 
type_name pointer type  call reference parameter pointer type involve complication 
define call reference parameter define pointer type just_like define call reference parameter 
here sample  void  
pointer dynamic array type definition assign name type definition type_name declare variable 
keyword typedef 
type definition normally place body part program body function 
will type definition define name pointer type  show example
write definition type call numberptr will type pointer variable hold pointer variable type_int 
write declaration pointer variable call type numberptr 
will find write program array 
array array size specify write program  determine program run 
array variable pointer variable array keep memory 
point learn pointer  discuss array term memory address 
memory address pointer 
array variable actually pointer variable point first index variable array 
give follow variable declaration  kind variable  
kind variable illustrate display 
pointer point variable type_int namely variable  value assign pointer variable follow  assignment  point memory location point
  refer index variable   
square bracket notation array apply pointer variable long pointer variable point array memory 
assignment  treat identifi array identifier 
treat identifi pointer variable  important reservation 
change pointer value array variable 
tempt think following legal  intptr  give pointer value 
assign address
display illustrate working program display 
display  variable represent box value variable write inside box 
arrow pointer reference memory location  case  first element array 
pointer dynamic array display array pointer variable 
note change array 
example  array hold list student identification number  size class time program run 
kind array estimate large possible size need dynamic array 
intptr  int  
pointer dynamic array create dynamic array array hope size large
first  estimate low  program_will work situation 
second  array unused position  waste computer memory 
dynamic array avoid problem 
program dynamic array student identification number  size class enter input program dynamic array create exactly size 
dynamic array create
creation dynamic array surprisingly simple 
array variable pointer variable  create dynamic variable array treat dynamic array variable ordinary array 
example  following create dynamic array variable array_element type  
obtain dynamic array element type  simply replace desire type 
obtain dynamic array variable size  simply replace desire size 
number obvious notice example 
first  pointer type pointer dynamic array pointer type single element array 
instance  pointer type array element type pointer type simple variable type 
pointer array actually pointer first index variable array 
previous example  entire array index variable create pointer leave point first index variable 
notice call  size dynamic array give square bracket type  example type 
tell computer storage reserve dynamic array 
omit square bracket  computer will allocate storage only variable type  array index variable type 
illustrate display  int variable place constant size dynamic array read program 
program display sort list number 
program work list size dynamic array hold number 
size array determine program run 
user ask number will create dynamic array size 
size dynamic array give variable array size 
notice delete statement  destroy dynamic array variable display 
program end anyway  need delete statement  program dynamic array 
pointer dynamic array 
require additional function definition 
implementation need know sort will call dynamic array 
example  implementation display suitable adjustment parameter dynamic variable  want delete statement memory dynamic array return freestore 
delete statement dynamic array similar delete statement see early  dynamic array empty pair square bracket  like delete  square bracket tell dynamic array variable eliminate  system check array remove indexed variable 
omit square bracket  tell computer eliminate only variable type 
example  delete  legal  error detect compiler 
ansi standard happen  mean author compiler convenient convenient compiler writer 
useful  guarantee next version compiler compiler compile code will
moral simple  delete  
create dynamic array call pointer  pointer display 
call assign pointer value pointer variable  confuse system memory dynamic array return freestore call delete 
example  dynamic array array double  following  typedef double doublearrayptr  declare pointer variable  declare pointer variable define type 
pointer variable will point dynamic array memory will serve name dynamic array 
give variable expression 
example variable type value determine program run 
example  index variable write usual way    forth 
pointer variable pointer value assign like array variable 
example  delete  dynamic array create pointer variable 
program finish dynamic array  return array memory freestore call delete 
dynamic array just_like array 
est exerc ise 
write type definition pointer variable will point dynamic array 
array_element type char 
call type chararray 
write code fill array number type keyboard 
suppose program contain code create array selft exercise  suppose pointer variable pointer value change 
write code destroy array return memory freestore 
output follow code fragment 
code assume embed correct complete program 
output follow code fragment 
code assume embed correct complete program 
kind arithmetic perform pointer  arithmetic address  arithmetic number 
example  suppose program contain follow code  
expression + evaluate address  + address  forth 
notice value address address number  simply add number
variable type require byte memory location contain address  evaluate memory address 
course  type replace type pointer addition move unit variable type 
pointer arithmetic give alternative way manipulate array 
example  size array point follow will output content array  +    
perform multiplication division pointer 
add integer pointer  subtract integer pointer  subtract pointer type 
subtract pointer  result number index variable address 
remember  subtraction pointer value  value point array 
little sense subtract pointer point array pointer point array 
increment decrement operator
example  will advance value contain address next indexed variable  will change contain address previous indexed variable 
est exerc ise exercise apply optional section pointer arithmetic 
output follow code fragment 
code assume embed correct complete program 
dynamic array pointer arithmetic pointer dynamic array 
output follow code fragment 
code assume embed correct complete program 
multidimensional array 
just need remember multidimensional array array array  array array array  forth 
example  create dimensional array  remember array array 
create twodimensional array integer  first create dimensional array pointer type  type dimensional array int 
create array int index variable array pointer 
type definition help keep straight 
following variable_type ordinary dimensional array int  typedef  
simple program illustrate give display 
sure notice delete display 
array array array  array create loop return freestore manager call delete  
call delete call create array 
pointer dynamic array sample dialogue enter row column dimension array  enter row integer echo dimensional array  summary pointer memory address  pointer way indirectly name variable name address variable computer memory 
program finish dynamic variable  memory dynamic variable return freestore reuse  delete statement 
dynamic array implement dynamic variable array type 
answer self test exerci se 
pointer memory address variable 
unwary  neophyte  look like object type pointer 
unfortunately  bind identifi  type 
result declaration declare pointer  just ordinary variable 
take type argument 
return pointer memory pointer dynamic variable  memory freestore 
memory freestore  program end 
programming_language pass reference syntax pass variable reference function 
variable pass pointer just confusing  pass pointer refer pass reference 
practice program ask 
complete function add integer reference ptrnum 
write function integer variable define  give initial value  call addone  output variable 
write program ask user input integer name numdouble 
create dynamic array store numdouble double loop allow user enter double array entry 
loop array  calculate average  output
delete memory allocate dynamic array exiting 
practice program require read optional section pointer arithmetic 
complete function ispalindrome return false
function cstre library 
programming project programming project require problem solve practice program solve way 
visit complete programming project online instant feedback 
programming project array 
version problem  array store digit large programming project integer 
allow arbitrary number digit cap number digit 
programming project 
version problem  return array repeat letter delete modify partially fill array 
forget free memory allocate return array data long need 
programming project array array 
version  program_will ask user row plane will handle row assume plane row programming project 
write function take string input parameter reverse string 
function pointer  rear 
pointer initially reference first character string  rear pointer initially reference last character string 
reverse string swap character reference rear  increment point next character decrement rear point precede character  entire string reverse 
write program test function string odd length 
run computer lab 
lab contain computer station number show table lab number computer station number 
user log user  lab number  computer station number transmit system 
example  user log station lab  system receive   input datum 
similarly  user log station  system receive lab number computer station number 
write computer program track  lab  user log computer 
example  user log station lab user log station lab  system display following  lab number computer station  empty  empty  empty  empty  empty    empty     empty  empty  empty empty  empty  empty  empty empty  empty empty 
pointer dynamic array create menu allow administrator simulate transmission manually type login logoff datum 
log display update 
write search option administrator type user system will output lab station number user log user log computer station 
fix array length lab 
array entry point array store user login respective computer station 
structure show figure
structure call ragged array column unequal length 
lab array videonote solution programming project dynamic array computer station 
problem array once array create size change 
example  want add delete entry array vector 
project ask create function array emulate behavior vector 
first  write program create string 
store name choice
next  complete follow function  string string dynamicarray  int size  string newentry  function create element large dynamicarray  copy element dynamicarray add end increment size  delete dynamicarray  return
programming project return 
find  create element small dynamicarray 
copy element entrytodelete delete dynamicarray  decrement size  return
test function add delete name output content
will assign return addentry deleteentry back variable function 
build facility dimensional array 
possible emulate wrapper function onedimensional 
basic idea show
follow dimensional  int  visualize table  
create dimensional emulate twodimensional return pointer dimensional 
return value  pointer dimensional large hold dimensional size row column 
note int  create
store val emulated dimensional position  
function print error_message exit desire index invalid 
function print error_message exit desire index invalid 
create suitable test program invoke function 
write program output histogram student grade assignment 
program input student grade integer programming project store grade vector cover 
grade enter user enter grade 
program scan vector compute histogram 
compute histogram  minimum value grade program determine maximum value enter user 
dynamic array store histogram 
output histogram console 
example  input output number  number  number  
define class structure structure diverse datum pitfall  forget semicolon structure definition structure function argument programming tip  hierarchical structure initialize structure class defining class member_function public private member programming tip  member variable private programming tip  define accessor mutator function programming tip  assignment_operator object summary answer self test exercise programming example  bankaccount class summary property class constructor initialization programming tip  include default constructor pitfall  constructor argument member initializer constructor delegation abstract data_type class produce abstract data_type programming example  alternative implementation introduction inheritance derived_class define derived_class practice program programming project  time come   walrus  talk shoe ship seal wax introduction learn class object  define class 
will show define class 
class define way predefine data_type  int  char  ifstream 
define class right way  will behave predefine data_type 
spend deal time explain class definition give technique help define class way consistent modern programming practice 
introduce class  will first present structure know struct 
way present here  structure kind simplified class structure will prove stepping stone understand class 
prerequisite material 
definition class data_type definition kind value variable hold member_function
will approach class definition step 
will first tell give type definition structure 
structure kind discuss here think object member_function 
learn structure  will natural extension define class 
structure diverse datum useful collection value type treat collection single item 
example  bank certificate deposit  call cd 
cd bank account allow withdrawal specified number month 
cd naturally structure piece datum associate account balance  interest rate account  term  number month maturity 
first item represent value type double  number month represent value type_int 
display show definition structure call cdaccount kind account 
definition embed complete program demonstrate structure type definition 
see sample dialogue  bank specialize short term cd  term will month 
let look sample structure define
structure definition follow  struct cdaccount 
keyword struct announce structure type definition 
identifi cdaccount name structure type 
name structure type call structure tag 
tag legal identifier keyword 
convention require language  structure tag spell mix uppercase lowercase letter  begin uppercase letter 
identifier declare inside brace   call member name 
illustrate example  structure type definition end brace   semicolon 
structure definition place function definition way globally define constant declaration place function definition 
structure type code follow structure definition 
once structure type definition give  structure type just_like predefine type_int  char  forth 
example  following will declare variable  name  type cdaccount  cdaccount   structure variable hold value just_like variable hold value 
structure value collection small value call member value 
member value member name declare structure definition 
example  value type cdaccount collection member value  type double type_int 
member value structure value store member variable  discuss next 
structure type specify list member name 
display structure cdaccount member name balance   place structure definition define class demonstrate cdaccount structure type 
member name pick small variable part large structure variable 
small variable call member variable 
member variable specify give name structure variable follow dot follow period member name 
example  account structure variable type cdaccount declare display  structure variable account follow member variable  account 
first member variable type double  last type_int 
member variable just_like variable type 
example  member variable give_value follow assignment statement  
result statement diagram display 
member variable way ordinary variable
example  follow line program display will add value contain member variable account 
only difference case structure  member variable function 
define class display member value 
cdaccount account  
reuse member name 
example  perfectly legal follow type definition program  struct fertilizerstock 
dot_operator structure variable specify quantity mean instance 
structure value view collection member value 
view way  structure value value 
structure value view single complex value just happen member value 
structure value view single value  structure value structure variable way simple value simple variable predefined type int 
assign structure value equal sign 
example  orange structure variable type cropyield define early  following perfectly legal  orange  
forget semicolon structure definition add final brace   structure definition  feel like structure definition finish 
place semicolon final brace 
reason reason feature will occasion
structure definition definition 
declare structure variable 
allow list structure variable_name final brace final semicolon 
example  follow define structure call weatherdata declare structure variable   type weatherdata  struct weatherdata 
will separate structure definition declaration variable structure type  structure definition will semicolon final brace 
define class dot_operator dot_operator specify member variable structure variable 
structure function argument function return structure function call value parameter structure type callby reference parameter structure type 
program display  example  include function_name call reference parameter structure type cdaccount 
structure type type value_return function 
example  follow define function take argument return value type cdaccount  cdaccount  
hierarchical structure sense structure member small structure 
example  structure type call personinfo  store person height  weight  birth date  define follow  struct date 
structure variable value set record person 
start left end  structure variable type personinfo 
obtain member variable name birthday  dot_operator follow  member variable structure variable type date 
member variable member variable
member variable structure variable obtain add dot member variable_name  year  produce expression show previously 
name structure type 
syntax struct 
will feature  combine member name type single list separate comma 
example  following equivalent previous structure definition  struct automobile 
automobile   member variable specify dot_operator 
give structure variable value  follow equal sign list member value enclose brace 
example  follow definition structure type date give previous subsection  struct 
example  receive first initializing value  receive second value  receive third value 
error initializer struct member 
initializer value struct member  value initialize datum_member  order 
data member initializer initialize zero value type variable 
st exerc 
give follow structure structure variable declaration  
error follow structure definition 
message compiler give error 
state error word 
initialize member  value 
here initialization structure type 
tell happen initialization 
note problem initialization 
write definition structure type record consist person wage rate  accrue vacation whole number day  status hourly salaried 
represent status char value   
call type employeerecord 
give function definition correspond follow function void  value read keyboard 
give function definition correspond follow function shoetype  structure argument  reduce 
give structure definition type_name stockrecord member variable  name type shoetype give self test exercise name type give self test exercise 
define class class care belong club will accept member 
groucho marx  groucho letter define class member_function member_function class data_type variable object 
object variable member_function ability hold data program  definition class data_type definition kind value variable hold member_function
structure definition
structure define type allow define value structure type define member variable 
obtain class structure  need add member_function 
sample class definition give program show display 
type dayofyear define class definition object value date  january july 
value record holiday  birthday  special date 
definition dayofyear  month record int value  stand january  stand february  forth 
day month record second int member variable 
class dayofyear member_function call output  argument output month day value screen 
let look definition class dayofyear detail 
definition class dayofyear show near top display 
moment  ignore line contain keyword public 
line simply member variable function restriction
will explain line later
rest definition class dayofyear like structure definition  keyword class struct list member_function output member variable month day 
notice member_function output list give only function_declaration 
definition member_function give
object actually value variable variable variable name value hold  simplify discussion ignore nicety talk variable value
define class sample dialogue enter today date  enter number  enter enter birthday  enter number  enter today date  birthday  happy unbirthday 
call member_function member function class define call way predefine class 
example  program display declare object type dayofyear following way  dayofyear today  birthday  
encapsulation combine number item  variable function  single package  object class  call encapsulation 
define member_function member_function define  definition class_name class member_function name 
display only class definition  situation class definition  class member_function call output 
definition member_function output class dayofyear show display 
definition similar ordinary function definition  difference 
heading function definition member_function output follow  class operator   call scope resolution operator  serve purpose similar dot_operator 
dot_operator scope resolution operator tell member_function member
scope resolution operator   class_name  dot_operator object class variable 
scope resolution operator consist colon space
class_name precede scope resolution operator call type qualifi  specialize  qualifie  function_name type 
look definition member_function give display 
notice function definition  member name first give object dot_operator 
strange first
point simply define member_function output 
definition output will apply object type dayofyear  point know name object type dayofyear will give name 
member_function call   member name function definition specialize name 
member function definition member_function define way function class_name scope resolution operator   give function head 
class definition example class dayofyear give display  define name member variable class dayofyear 
note precede object name dot 
dot_operator scope resolution operator dot_operator scope resolution operator member name specify member
example  suppose declare class_call dayofyear declare object call today follow  dayofyear today  dot_operator specify member object today 
example  output member_function class dayofyear define display  follow function_call will output datum value_store object today   scope resolution operator   specify class_name give function definition member_function 
example  heading function definition member_function output follow  remember  scope resolution operator   class_name  dot_operator object class 
redefine class dayofyear display now additional member_function call input 
write definition member_function input 
public private member predefine type double implement class  people who write compiler design way represent value type double computer 
possible implement type double way 
version implement type double slightly way  move program computer implementation type double  program still work correctly 
class type define  type define behave predefine type 
build library class type definition type predefine type 
example  place class definition separate file copy program type 
ideal realize  ideal world realize  least simple program  realize imperfect world live
define class class definition separate rule class detail class implementation strong way predefine type 
change implementation class example  change detail definition member_function order function_call run fast  need change part program 
order realize ideal  need feature class definition 
look back definition type dayofyear give display 
type dayofyear design hold value represent date birthday holiday 
choose represent date integer 
later decide change representation variable type_int variable type char 
change version  character abbreviation name 
example  char value     represent january 
single member variable type_int record member variable type char implementation detail need programmer who type dayofyear 
course  change way class dayofyear represent change implementation member_function output need change 
need change part program class definition dayofyear 
unfortunately  program display meet ideal 
example  replace member variable_name member variable type char  will member variable_name  change part program perform input change statement 
ideal class definition  able change detail class implement only need change program class definition member_function 
order realize ideal  member_function need access member variable directly  access only member_function 
change member variable  need change only definition member_function match change member variable  program need change 
display redefine class dayofyear member_function want program program need directly reference member variable 
look carefully program display  will see only place member variable_name definition member_function 
program display design ensure programmer who class dayofyear will class 
define class 
definition member_function input ask user reenter date user enter incorrect date 
sample dialogue enter today date  enter number  enter today date 
bach birthday  happy birthday johann sebastian 
notice line definition class dayofyear contain keyword private 
member variable_name list line private member  mean directly access program definition member_function 
try access member variable part program definition function member_function class  compiler_will give error_message 
insert keyword private colon list member variable member_function  member follow label private  will private member 
variable follow label private  will private member variable  function follow will private member_function 
member variable class dayofyear define display private member 
private member variable member_function 
example  change class dayofyear  follow assignment long permit part program  
reference private variable illegal member_function 
private member variable  follow illegal part program declare today type dayofyear  
once member variable private member variable  way change value reference member variable way member_function 
severe restriction  wise restriction impose 
programmer find code easy understand easy update member variable private 
program display disallow direct access private member variable  change member_function  value discover member_function true program display  true change implementation represent date 
example  suppose change type dayofyear following  
example  function start follow   return   return    
approach tedious  difficult 
notice member_function check sure member variable set legal value 
member variable public private  member variable set value  include illegal value 
member variable private manipulate only member_function  ensure member variable set illegal meaningless value 
like private member variable  private member_function member_function  part program class type 
example  member_function display private member_function 
normal practice member_function private only expect member_function help function definition member_function 
keyword public public member way keyword private private member 
example  class dayofyear define display  member_function public member member variable private member 
public member body program function  nonmember function 
number occurrence public private class time insert label public  list member change private public 
time insert label private  list member change back private member 
example  member_function member variable follow structure private member  member public  class sampleclass public  
list member start class insert public  private  first member  will private member 
idea explicitly label group member public private 
object member variable member_function 
syntax class follow 
syntax class class_name public  
member variable private define class  normal practice member variable private 
mean member variable only access change member_function 
dedicate explain define class way 
unfortunately  predefine automatically apply object 
will show apply object class define 
will able equality object structure 
produce complication 
define class  preferred style member variable private 
order test object see represent value  need way access value member variable equivalent value member variable 
allow test equality test value pair correspond member variable 
display  member_function statement 
member function   allow find value private member variable call accessor function 
give technique learn date  important include complete set accessor function class definition test object equality 
will develop elegant method test object equality  learn technique  will still handy accessor function 
member function  set display  allow change value private member variable call mutator function 
important include mutator function class definition change datum store object 
accessor mutator function_member function allow find value private member variable class call accessor function 
require language  name accessor function normally include word
define class_member function allow change value private member variable class call mutator function 
require language  name mutator function normally include word set 
important include accessor mutator function class definition change datum store object 
redefine member_function end program find illegal date 
allow february contain day  account leap year 
suppose program contain follow class definition  class automobile 
suppose change self test exercise definition class automobile omit line contain keyword private 
change answer question self test exercise 
explain just public  difficulty access 
private  section require class 
example  suppose class dayofyear define show display private member variable_name suppose object tomorrow declare follow  dayofyear  tomorrow  
true member variable_name private member class dayofyear 
define class programming example bankaccount class display contain class definition bank account illustrate point class definition see
type bank account allow withdraw money time  term type cdaccount see early 
important difference class bankaccount member_function operation expect program 
object class bankaccount private member variable  record account balance record interest rate 
let discuss feature class bankaccount 
first  notice class bankaccount private member_function call fraction 
fraction private member_function  call body body function member_function class bankaccount 
function fraction only call definition member_function class bankaccount 
only reason private member_function define member_function class 
definition class bankaccount  include member_function fraction definition function update 
function fraction take argument percentage figure  like  convert fraction  like 
allow compute amount interest account give percentage 
account contain interest rate  interest equal time  
call public member_function  update  body program  include object name dot  follow line display   member_function call call private member_function member_function definition member_function  only member_function name call object dot 
example  follow definition member_function include call show display 
example  meaning  
member_function set overload 
sample dialogue start test  initial statement  account interest account interest update  account interest  account interest 
define class input output_stream argument like class discuss early  class bankaccount member_function output data store object 
program output screen 
want write class definition copy program unchanged program 
program want output file  give member_function output formal parameter type ostream function output call argument stream file output_stream 
sample program want output screen  first function_call member_function output form  call output argument  output screen 
want output file first connect file output_stream  discuss 
file output_stream call fout connect file  follow write datum object file screen   overload member_function value object type bankaccount represent bank account pay interest 
interest set member_function set 
notice overload member_function name set version set 
version formal parameter  only formal parameter 
version formal parameter type double interest  version set formal parameter set account 
version formal parameter set dollar cent account 
version only single formal parameter  give number dollar account assume number cent zero 
second version set handy  people open account amount money  cent 
notice overloading
summary property class_class property structure plus property associate member_function 
following list point keep mind class 
class member variable member_function 
normally  member variable class label private member 
name member_function class overload just_like name ordinary function 
structure private member variable public private member_function 
notational difference  structure st exerc 
give definition function follow function_declaration 
class bankaccount define display 
give definition function follow function_declaration 
class bankaccount define display 
give definition function follow function_declaration 
class bankaccount define display 
bankaccount   previously give value member variable give_value 
example  function define  program contain
account balance interest rate constructor initialization want initialize member variable object declare object 
will see later book  initialize action want take  initialize member variable common sort initialization 
include special provision initialization 
define class  define special kind member_function know constructor 
define constructor way define member_function  point  
example  class name bankaccount  constructor class name bankaccount 
return_type  void  give start function_declaration function header 
class definition follow 
notice constructor name bankaccount  name class 
notice function_declaration constructor bankaccount start void type_name 
finally  notice constructor place public section class definition 
normally  constructor public member_function 
constructor private member  able declare object class type  class completely useless 
redefined class bankaccount  object type bankaccount declare initialize follow  bankaccount       assume definition constructor perform initialize action promise  previous declaration will declare object  set value  set value rate 
object initialize represent bank balance interest rate 
similarly  initialize represent bank balance interest rate 
happen object declare constructor bankaccount call argument   
similarly  declare constructor bankaccount call argument   
result conceptually equivalent following write way 
comment place line program 
first line acceptable  call constructor bankaccount illegal 
constructor call way ordinary member_function call 
still  clear want happen write line  happen automatically declare object follow  bankaccount       definition constructor give way member_function 
example  revise definition class bankaccount add constructor just need add follow definition constructor  
class constructor function name  name bankaccount occur twice function head  bankaccount scope resolution operator   name class  bankaccount scope resolution operator name constructor function 
notice return_type specify heading constructor definition  type void 
point  constructor define way ordinary member_function 
overload constructor name like  just overload member_function name  display 
constructor overload object initialize way 
example  display redefine class bankaccount version constructor 
redefinition overload constructor name bankaccount argument just discuss  argument  argument 
example  suppose give only argument declare object type bankaccount  following example  bankaccount   
hand  argument give  follow example   initialize represent interest rate 
notice constructor argument  include parenthesis declaration 
follow incorrect   
case  omit mutator member_function set once set constructor definition 
overloaded constructor display create value choice 
invoke constructor will create want change exist member variable mutator function 
define class  year simple interest add account 
notice parenthesis 
screen output initialize follow  account interest rate initialize follow  account interest rate reset following  account interest rate constructor constructor member_function class name class 
constructor call automatically object class declare 
constructor initialize object 
constructor name class member 
constructor parameter display deserve extra discussion contain see
reference  reproduce defining constructor parameter  
show first line  part start single colon 
part constructor definition call initialization section 
example show  initialization section parenthesis end parameter list opening brace function_body 
initialization section consist colon follow list member variable separate comma 
member variable follow initialize value parenthesis 
constructor definition completely equivalent follow way write definition  
notice initialize value give term constructor parameter 
constructor initialization section member variable class optionally initialize constructor initialization section constructor definition 
constructor initialization section parenthesis end parameter list opening brace function_body 
initialization section consist colon follow list member variable separate comma 
member variable follow initialize value parenthesis 
example give constructor initialization section equivalent threeparameter constructor give display 
call constructor constructor call automatically object declare  give argument constructor declare object 
constructor call explicitly order create object class variable 
syntax object declaration class_name  
constructor name class member 
syntax description class_name identifier 
initializer specify object create dynamic variable 
define class constructor call automatically declare object class type  call object declare 
allow conveniently set member object 
technical detail follow 
call constructor create anonymous object
anonymous object object name variable 
anonymous assign name class variable 
example  follow line code call constructor create anonymous interest rate 
anonymous assign represent interest rate     guess notation  constructor behave like function return class type 
call constructor create call set member_function merely change exist member variable  call set efficient way change member variable call constructor 
efficiency reason need change member variable create wish set member_function constructor class definition 
give constructor  compiler_will generate default constructor
constructor will call class object declare 
hand  give least constructor definition class  compiler_will generate constructor 
time declare type  will look constructor definition
declare argument constructor  will look default constructor  define default constructor  will find 
example  suppose define class follow  class sampleclass constructor require argument public  
sampleclass call constructor class  
compiler interpret declaration include call constructor argument  definition constructor zero argument 
add argument declaration add constructor definition constructor argument 
constructor call argument call default constructor  apply default case declare specify argument 
likely will want declare give constructor argument  include default constructor 
follow redefine version sampleclass include default constructor  class sampleclass public  
redefine class sampleclass manner  previous declaration legal 
want default constructor initialize member variable  simply give empty body implement
follow constructor definition perfectly legal 
call compiler happy  
define class 
call function argument  include pair empty parenthesis 
wrong constructor 
produce error_message  unintended meaning 
compiler_will think code function_declaration function_call take argument return value type 
include parenthesis declare want constructor argument 
correct way declare constructor argument follow   explicitly call constructor assignment statement  parenthesis 
definition declaration display  following will set balance set interest rate   constructor argument declare want constructor zero argument call  include parenthesis 
example  declare pass argument constructor  following    
feature allow set default_value member variable 
create member variable automatically initialize specify value 
follow definition implementation coordinate class  class coordinate 
create coordinate  member variable will set member variable will set default 
value overridden invoke constructor explicitly set variable 
snippet default_value set  default_value only set explicitly set input argument  
feature support constructor delegation 
simply put  allow constructor call constructor 
example  modify implementation default constructor invoke constructor parameter  videonote default initialization member variable 
es exe rc 
suppose program contain follow class definition definition member_function class yourclass 
follow legal 
yourclass yourclass yourclass 
change definition class dayofyear display version overloaded constructor 
version int formal parameter month day set private member variable represent month day 
formal parameter set date represent january 
constructor initialization section constructor 
virginia woolf  monday tuesday abstract data_type data_type  type_int  specify value      forth 
tend think data_type value  operation value just important value 
operation  interest value 
operation type_int consist      operator predefine library function 
think data_type simply collection value 
data_type consist collection value set basic operation define value 
data_type call abstract data_type abbreviate adt programmer who type access detail value operation implement 
predefine type  int  abstract data_type adts 
know operation   implement type_int 
know  program 
programmer define type  structure type class type  automatically adts 
define care  programmerdefine type unintuitive way program difficult understand difficult modify 
way avoid problem sure data_type define adts 
way class  class adt 
adt define class way  topic next subsection 
class produce abstract data_type class type define  oppose type  int char  define
value class type set value member variable 
example  value type bankaccount display consist number type double 
easy reference  repeat class definition omit only comment class bankaccount 
define class programmer who type bankaccount need know implement definition member_function 
function definition member_function follow  
programmer who class bankaccount need implementation update implementation effect 
similarly  programmer who class bankaccount need concerned value class implement 
choose implement value value type double 
object type bankaccount  value consist value type double store follow member variable  
want think value single entry account interest rate implementation write class value format 
choose implement bankaccount value double value + implementation detail 
implement bankaccount value int value dollar cent part single value type double 
value simply convert fraction  useful way implement percentage figure 
order compute interest account convert percentage just fraction 
alternative implementation class bankaccount  public member remain unchanged private member change following  abstract data_type class bankaccount public  
need change member_function definition match change  easy
example  function definition version constructor change following  
similarly  member_function redefine accommodate store account interest rate 
notice user think account single number  mean implementation single number type double 
just see example  number type_int 
programmer who type bankaccount need know detail value type bankaccount implement 
comment type bankaccount illustrate basic technique define class will abstract data_type 
order define class abstract data_type  need separate specification type programmer detail type implement 
separation complete change implementation class need change program class adt 
ensure separation follow rule  write adt 
define class 
member variable private member class 
basic operation programmer need public member_function class  fully specify public member_function 
help function private member_function 
separate interface implementation videonote separate interface implementation will learn alternative approach define adts  rule common ensure class abstract data_type 
interface adt tell adt program 
define adt class  interface consist public member_function class comment tell public member_function 
interface adt need know order adt program 
implementation adt tell interface realize code 
implementation adt consist private member class definition public private member_function 
need implementation order run program adt  need know implementation order write rest program adt  need know implementation order write part program write nonmember function part program 
situation similar advocate ordinary function definition 
implementation adt  like implementation ordinary function  think black box see inside 
will learn place interface implementation adt file separate separate program adt 
programmer who adt literally see implementation 
will place detail adt class file part program  still think interface give public section class definition implementation private section class definition member_function definition separate part adt 
will strive write adts user adt need only know interface adt need know implementation 
sure define adts simply sure change implementation adt  program_will still work needing change part program 
illustrate next programming example 
obvious benefit derive class adts change implementation need change part program 
adts benefit
class adts  divide work programmer  abstract data_type programmer design write adt programmer adt 
only programmer work project  divide large task small task  program easy design easy debug 
programming example lternative implementation class display contain alternative implementation adt class bankaccount discuss previous subsection 
version  datum bank account implement member value  dollar part account balance  cent part account balance  interest rate 
notice display display member variable call interest rate  value_store slightly implementation 
account pay interest rate  display basically display  value 
display  value 
alternative  show display  store interest rate fraction percentage figure 
basic difference interest rate set  function fraction convert interest rate fraction 
private member_function fraction definition constructor  need definition member_function update value member variable convert fraction 
old show display display  situation just reverse 
old  private member_function fraction definition constructor  definition update 
change private member class bankaccount  change public section class definition 
public member_function function_declaration behave exactly old version adt class give display 
example  store percentage fraction  member_function still return value  just old display 
similarly  member_function return single value type double  give balance number decimal_point  just old display 
true balance now store member variable type_int  single member variable type double old version 
public interface change define class alternative class bankaccount 
notice public member
bankaccount look behave bank account  exactly display class bankaccount 
body identical display  screen output identical display 
implementation  cent  fraction definition
define class 
notice important difference treat public member_function treat private member_function 
want preserve interface adt class program need change change class member_function  leave public member_function declaration unchanged 
free add  delete  change private member_function 
example  add additional private function_call percent  inverse function fraction 
function fraction convert percentage fraction  function_return  return 
hiding discuss hide introduce function 
hiding  apply function  mean write function black box  programmer who function need know detail function implement 
principle mean programmer who function need know function_declaration accompanying comment explain function 
private member variable private member_function definition abstract data_type way implement hiding  now apply principle datum value function 
change private member_function define class st er es 
define adt class  member variable public private 
member_function public private 
define adt class  item part interface adt 
item part implementation adt 
suppose friend define adt class way section 
give task write program adt 
write part program nonmember function part program 
adt long time write program 
part adt need read part safely ignore 
word inheritance just name topic derived_class 
class derive class  mean derived_class obtain class add feature 
example  suppose define class vehicle member variable record vehicle number wheel maximum number occupant 
class accessor mutator function 
imagine define class automobile member variable function just_like class vehicle 
addition  automobile class add member variable amount fuel fuel tank license plate number add member_function 
repeat member variable function class vehicle class automobile  inheritance mechanism let automobile class inherit member variable function class vehicle 
inheritance allow define general class later define specialized class add exist general class 
work specialized  derive  class inherit property general class programmer  need only program
section will first introduce notion inheritance derived_class briefly create derive introduction inheritance class 
detail inheritance leave 
take completely comfortable idea derived_class  easily learn derived_class start simple  useful  way 
derive class bankaccount class define display 
class keep track amount interest rate bank account fairly generic apply interest bear account 
like implement specific type bank account  natural hierarchy group account type 
display depict part hierarchical arrangement bank account  check account  money market account  saving account  certificate deposit cd account 
hierarchy  bankaccount general type account  specific type account show
arrow point specific account type general account type 
addition represent type bank account  box correspond class implement 
example  check account bank account store amount interest rate addition allow customer deposit write check 
similarly  savings account bank account addition allow customer deposit withdrawal 
check account  savings account allow customer write check 
check account saving account type bank account show display directly bankaccount class 
class derived_class class mean class class add 
convention relationship diagram draw unfilled arrow specific general class 
example  display checkingaccount savingsaccount class derived_class bankaccount class 
display class hierarchy bank account check account saving account money market account cd account 
define class  class derived_class class turn derived_class class
example  cd account similar saving account fund accrue interest withdraw maturity  date 
fund withdraw prior maturity date  penalty 
due restriction  cd account normally accrue interest high rate saving account 
hierarchy  show derive cdaccount savingsaccount 
similarly  money market account special type check account customer normally limit number check write  high minimum balance  pay high interest rate 
hierarchy  show derive moneymarketaccount checkingaccount 
derive class discuss metaphor inheritance family relationship 
class derived_class class class call child class class call parent class
parent class refer base_class 
derived_class inherit member_function parent class 
example  convertible inherit wheel class automobile 
topic derived_class call inheritance 
define derived_class want create class represent saving account  start copy bankaccount class rename savingsaccount 
need add member_function deposit withdraw fund 
approach work  inefficient  savingsaccount class duplicate functionality bankaccount class 
only waste memory space  difficult modification 
example  later decide change update function accrue interest daily annually  place change  savingsaccount class bankaccount class 
problem solve define savingsaccount class derived_class bankaccount class 
savingsaccount class share member variable function define bankaccount class 
specify relationship define derived_class add colon follow keyword name parent base_class  colon separate class savingsaccount  bankaccount derived_class  saving account  parent class  bankaccount  
need redefine variable function bank account store interest rate  dollar  cent  define update function member will inherit bankaccount class automatically create construct savingsaccount object 
example  create savingsaccount object  invoke follow function  invoke function
invoke function parent class  bankaccount example  inheritance allow reuse code define parent class context derived_class 
later change bankaccount function update code automatically will context derived_class program recompile link 
implementation savingsaccount class function test deposit withdraw function give display 
simplicity  leave verification deposit withdraw function  example  check negative amount  able add easily statement 
once savingsaccount class define step derive specialized class savingsaccount 
example  define cd account class need member variable store day maturity define function access variable  class cdaccount  savingsaccount  dollar  int cent  double rate  int  constructor normally here 
once only define function datum specifically cd account  case  store manipulate number day maturity 
need redefine variable function bank account saving account member will inherit parent class 
example  once function cdaccount class implement  invoke follow function cdaccount  savingsaccount  bankaccount class give cdaccount object  
define class display insert here class savingsaccount  bankaccount  colon class savingsaccount derive
note precede colon 
screen output account interest rate 
account interest rate 
account interest rate 
cdaccount invoke function bankaccount short example only scratch surface possible inheritance 
additional detail 
take effort learn effectively design class inheritance  effort will pay long run 
will end write code easy understand maintain code inheritance 
define class es exe rc 
inheritance support code reuse code easy maintain 
derived_class directly access name private variable parent class 
suppose class sportscar derived_class class automobile 
suppose class automobile public function_name accelerate addgas 
will object class sportscar function_name accelerate addgas 
summary structure combine datum type single compound datum value 
public  class 
private  only definition member_function class 
constructor name class member 
child derived_class inherit member parent class 
answer self test exercise answe rs lf est exer cise 
compiler give poor error_message 
surprisingly  error_message informative 
member variable initializer initialize zero type 
author code only digit date initializer 
digit program digit date way vary amuse disastrous turn century 
dot_operator scope resolution operator member name specify class struct member name member 
class dayofyear define display today object class dayofyear  member access dot_operator  
give definition member_function  scope resolution operator tell compiler function declare class name give scope resolution operator 
restrict change private variable function class author 
class author control change private datum  prevent inadvertent corruption class datum 
compiler warn public  member class struct matter 
define class c
class  section default private  section 
struct  section default public  section 
yourclass yourclass 
mean declaration object call  wrong 
correct function_declaration function_call take zero argument return value type yourclass  intend meaning 
practical matter  illegal 
correct way declare object call answer self test exercise will initialize default 
modify class definition follow  
notice omit member_function set  constructor set unnecessary 
add follow function definition delete function definition 
member variable private 
member_function part interface adt member_function operation adt public 
auxiliary helping function only definition member_function 
auxiliary function private 
declaration private member variable part implementation 
function_declaration private member_function part implementation 
member_function definition function public private part implementation 
need read only interface part 
need read only function_declaration public member class list class definition explanatory comment function_declaration 
need read function_declaration private member_function  declaration private member variable  definition public member_function  definition private member_function 
dollar  int cent  double rate    interest
function datum define parent class derived_class  eliminate need redefine function datum derived_class 
enhance maintainability now duplication code multiple class only single location code subject change 
additionally  inheritance clean way isolate code only applicable derived_class 
code only definition derived_class  easy read 
derived_class indirectly access private member variable parent class public function 
yes  derived_class will access function 
will discuss function object class sportscar object class automobile 
practice program practice program generally solve short program directly apply programming principle present
member variable display private 
include member_function following  return initial balance  return balance maturity  return interest rate  return term 
include constructor set member variable specified value  default constructor 
embed class definition test program 
way similar second class bankaccount give display 
class cdaccount will record balance value type_int  dollar cent 
member variable interest rate will store interest rate fraction percentage 
example  interest rate will store value type double 
store term way display 
define class type call countertype 
object type count record count nonnegative whole number 
include default constructor set counter zero constructor videonote solution practice program 
define class argument set counter value specify argument 
include member_function increase count decrease count 
sure member_function allow value counter negative 
include member_function return current count value output count stream 
member_function output will formal parameter type ostream output_stream receive output 
embed class definition test program 
programming project programming project require problem solve practice program solve complete programming project online instant feedback 
write grade program class follow grading policy 
quiz  grade basis point 
midterm exam final exam  grade basis point 
final exam count percent grade  midterm count percent  quiz count total percent 
grade grade grade grade grade
program_will read student score output student record  consist quiz exam score student average numeric score entire course final letter grade 
define structure student record 
class assignment  ask instructor input output keyboard screen file 
file  ask instructor instruction file name 
student record class member variable input datum program project member variable student weighted average numeric score entire course member function  member_function retrieve datum programming project member variable  void function calculate student weighted average numeric score entire course set corresponding member variable  void function calculate student final letter grade set corresponding member variable 
define class_call month abstract data_type month 
class_will member variable type_int represent month january  february  forth 
include follow member_function  constructor set month first letter name month argument  constructor set month integer argument january  february  forth  default constructor  input function read month integer  input function read month first letter name month  output function output month integer  output function output month first letter name month  member_function return next month value type month 
input output function_will formal parameter stream 
embed class definition test program 
time month implement member variable type char store first letter name month 
embed definition test program 
modify program output screen output file 
mean output statement will occur twice  once argument cout once output stream argument 
class  obtain file name instructor 
input will still come keyboard 
only output will file 
mother take little red counter grocery store 
counter keep tally amount money spend visit store  buy item basket 
digit display  increment button digit  reset button 
overflow indicator come red money write implement member_function class counter simulate slightly generalize behavior grocery store 
account carry increment require action add number private datum_member 
member_function bool overflow  detect overflow 
display integer  simulation  rightmost low order digit think cent cent  next digit dollar  fourth digit dollar 
key cent  dime  dollar  dollar 
unfortunately  choice key mnemonic 
choice key asdfo  cent  follow digit  dime  follow digit  dollar  follow digit  dollar  follow digit 
entry asdf follow follow press return key 
overflow report operation 
overflow request press key 
write rational number class 
problem will revisit  operator overloading will problem easy 
now will member_function add  sub  mul  div  carry operation +     
example  + will write  will write 
programming project member_function add  sub  mul  div return rational value 
function return bool value 
function operation suggest name 
member_function neg parameter return negative call object 
function test class implementation 
follow formula will useful define function 
define class_call odometer will track fuel mileage automotive vehicle 
include private member variable track mile drive fuel efficiency vehicle mile gallon 
class constructor initialize value zero 
include member_function reset odometer zero mile  member_function set fuel efficiency  member_function accept mile drive trip add odometer total  member_function return number gallon gasoline vehicle consume odometer last reset 
class test program create trip fuel efficiency 
private member variable store day  month  year constructor member_function set datum 
create public function return day week 
helper function declare private 
embed class definition suitable test program 
united states postal service print bar code envelope represent digit zip code format call postnet format deprecate favor onecode  
bar code consist long short bar show  
define class program  will represent bar code string digit 
digit represent long bar  digit represent short bar 
bar code represent program first last digit bar code 
remove leave digit 
digit split group digit 
will exactly group digit 
digit stand number 
left right  digit encode value     
multiply corresponding value digit compute sum final encoded digit zip code 
table show encoding 
bar code digit 
zip + + + + repeat group digit concatenate complete zip code 
special value 
sum group digit  represent digit digit group possible represent zero 
zip code sample bar code decode 
postnet scheme unnecessarily complex  design allow machine detect error scan zip code 
write zip code class encode decode digit bar code united states postal service envelope 
class constructor 
first constructor input zip code integer  second constructor input zip code bar code string consist 
way input zip code  internally  class store zip code only format choose store bar code string zip code number 
class least public member_function  return zip code integer  return zip code bar code format string 
helper function programming project declare private 
embed class definition suitable test program 
program print error_message invalid bar code pass constructor 
class movie contain movie 
class following attribute  movie name 
implement class accessor mutator function movie name mpaa rating 
write function addrating take integer input parameter 
function verify parameter number  increment number people rate movie match input parameter 
example  input parameter  number people rate movie incremente 
write function  getaverage  return average value movie rating 
finally  add constructor allow programmer create object specify name mpaa rating 
number people rate movie set constructor 
test class write function create least movie object  add least rating movie  output movie name  mpaa rating  average rating movie object 
winston churchill  radio broadcast  february  introduction teach technique define function operator class  include overload common operator   class define way predefine type int double 
prerequisite material 
common advice now implement class operation  input  output  accessor function  forth  member_function class  operation  natural implement operation ordinary nonmember function 
section  discuss technique define operation object nonmember function 
begin simple example 
programming example equality function  develop class_call dayofyear record date  january july  holiday birthday annual event 
give progressively version class 
final version produce self test exercise 
display  repeat final version class dayofyear enhance class time add function_call equal test object type dayofyear see value represent date 
friend  overload_operator  array class  
omit function constructor definition  self test exercise  detail need here 
bach birthday  happy birthday johann sebastian 
suppose today object type dayofyear give_value represent date 
test see represent date follow boolean expression  call function equal return true today represent date 
display boolean expression control statement 
definition function equal straight forward 
date equal represent
definition equal accessor function compare month day represent object 
notice function equal member_function 
possible equal member_function class dayofyear  equal compare object type dayofyear 
equal member_function  decide call object first date second date 
arbitrarily choose date call object  treat date way 
equal ordinary nonmember function take date argument 
el est exerc ise 
write function definition function_call take argument type dayofyear  define display 
function_return bool value return true first argument represent date come date represent second argument  function_return false  example  january come february 
friend  overload_operator  array class friend_function class full set accessor function  accessor function define function test equality kind computing depend private member variable 
give access private member variable  give efficient access
look definition function equal give display 
read call accessor function 
read call accessor function 
work  code simple efficient just access member variable 
simple efficient definition function equal give display follow  
illegal member variable private member class dayofyear 
private member variable private member_function normally reference body function function member_function  equal member_function class dayofyear 
way give nonmember function access privilege member_function 
function equal friend class dayofyear  previous definition equal will legal 
friend_function class member_function class  friend_function access private member class just member_function
friend_function directly read value member variable directly change value member variable  example  assignment statement private member variable side assignment_operator 
function friend_function  name friend class definition 
example  display rewrite definition class dayofyear function equal friend class 
function friend class list function_declaration definition class place keyword friend front function_declaration 
friend_function add class definition list function_declaration  just list declaration member_function  precede function_declaration keyword friend 
friend member_function  ordinary function extraordinary access datum_member class 
friend define call exactly like ordinary function
function definition equal show display friend_function display equality function friend 
note private member variable access name 
friend  overload_operator  array class qualifi dayofyear   function head 
equal function call dot_operator 
function equal take object type dayofyear argument way nonmember function take argument type 
friend_function definition access private member variable private member_function class name  access privilege member_function 
friend_function access private member variable need accessor mutator function 
entirely wrong 
true function world friend class  need accessor mutator function 
function friend practical 
order see still need accessor function  example class dayofyear give display 
class program  program want part dayofyear object 
example  program want calculate month remain year 
specifically  part program contain following  
just see definitely need accessor function class 
case require mutator function 
think need accessor mutator function  need friend 
sense  true 
notice define function friend accessor function display 
situation  only reason function friend definition function simple efficient  reason
function friend class  list function_declaration friend_function class definition 
function_declaration precede keyword friend 
function_declaration place private section public section  will public function case  clear list public section 
private   need list friend_function first 
inter mix order function_declaration 
example class fueltank public  friend double tank  
friend_function define call way ordinary function 
dot_operator call friend_function type qualifi definition friend_function 
clear function friend class member_function class 
case  function member_function friend perform task way 
place member_function place friend_function plain old function friend  like version equal display 
simple rule help decide member_function nonmember function following  member_function task perform function involve only object 
example  function equal display display involve object  nonmember friend function 
nonmember function friend_function accessor mutator function matter efficiency personal taste 
long accessor mutator function  approach will work 
choice member nonmember function simple rule 
experience  will discover situation pay violate rule 
accurate hard understand rule member_function task intimately single object  nonmember function task involve object object symmetrically 
accurate rule clear cut  simple rule give will serve reliable guide sophisticated handling object 
value implement single integer_value represent amount money convert penny 
example  store value 
integer represent amount money  amount represent exact quantity 
value type double value type double store approximate value want money amount exact quantity 
integer amount money express cent store member variable_name 
int type friend_function member variable  compiler severely limit amount money represent 
implementation  only byte store int result byte implementation large value type_int only slightly large  cent represent only  fairly small amount money 
want deal amount money large  long type member variable 
compiler implement int type byte implement type long byte 
value type long integer just_like value type_int  byte long implementation enable large allowable value type long large large allowable value type_int 
system large allowable value type long billion large 
name long class money operation friend_function  equal add define display 
function add return money object value sum value argument 
function_call form  return true object value represent equal amount money 
notice class money read write amount money normally write amount money  
first  member_function input define display 
function first read single character  dollar sign   minus sign   
first character minus sign  function remember amount negative set value variable negative true 
read additional character  dollar sign 
hand  first symbol   negative set equal false 
point negative sign dollar sign read 
function input read number dollar value type long place number dollar local_variable name dollar 
read dollar part input  function input read remainder input value type char  read character  decimal_point digit 
way compiler treat lead zero 
explain pitfall section entitle  lead zero number constant   compiler still read number lead zero like amount like read incorrectly code read see detail 
display description data_type recent compiler implement
friend  overload_operator  array class 
amount negative  dollar cent negative 
dollar  object value represent 
money  object value represent 
amount money  include dollar sign  input stream
notation negative amount 
friend  overload_operator  array class 
sample dialogue enter amount money  amount amount rich 
friend  overload_operator  array class follow assignment statement convert digit part input amount single integer  store local_variable  +  assignment statement execute  value number input amount 
help function take argument digit    convert corresponding int value  
need help function member_function input read digit number value type char  store local_variable 
once digit read computer  want number 
function convert digit  number 
definition function give display 
simply take faith definition suppose treat function black box 
need know  return   return  forth 
difficult see function work  want read optional section follow
explain implementation 
once local_variable set number number input amount  easy set member variable 
follow assignment statement set correct number +  set positive amount 
amount money value change positive
follow statement   member_function output display calculate number number value member variable compute number number integer division 
example  value  number   number  
value output value 
definition member_function output need special provision output amount money 
result integer division number standard definition vary implementation
avoid problem  take absolute value number perform friend_function division 
compute absolute value predefine function lab 
function lab return absolute value argument  just_like function ab  lab take argument type long return value type long 
function lab library header_file cstdlib  just_like function ab 
implementation include lab  easily define definition function display reproduce 
first glance  formula value_return bit strange  detail complicated 
digit convert example   parameter return_value will turn correspond int value example  
point  value type char implement number 
unfortunately  number implement digit    example  number 
type cast produce number implement character convert number type_int 
change type char number type_int unfortunately  number want 
example    number 
need convert number correspond example    
let see adjust number want 
know digit order 
 + equal    + equal    + equal static cast   forth 
know digit order
lead zero number constant 
will cause problem 
mathematic  numeral represent number 
compiler lead zero signal kind numeral  constant necessarily number 
compiler  lead zero mean number write base base 
base numeral digit  constant sense 
constant work correctly  mean base base  system contexts will trouble 
ansi standard input default interpret decimal  regardless lead 
gnu project compiler   microsoft compiler comply standard  problem lead zero 
compiler vendor track ansi standard compliant ansi standard  problem lead zero eventually away 
write small program test compiler 
difference friend_function class member_function class 
suppose wish add friend_function class dayofyear define display 
friend_function will name will take argument type dayofyear 
function_return true first argument represent date come date represent second argument  function_return false 
example  february come january 
need add definition class dayofyear display 
suppose wish add friend_function subtraction class money define display 
need add description class money give display 
subtraction function take argument type money return value type money value value first argument minus value second argument 
order write value type money screen  call output cout argument 
example  purse object type money  output amount money purse screen  write following program   nice list stream cout output screen 
rewrite class definition type money give display 
only change rewrite version overload function_name output version output 
version just_like show display  version output take argument output screen 
rewrite version type money  follow call equivalent   
note will version function output  still output file 
output file stream connect file  follow will output money object purse file connect  notice definition member_function input class money give display 
user enter kind incorrect input  function issue error_message end program 
example  user omit dollar sign  function issue error_message 
check give catch kind incorrect input 
example  negative amount money suppose enter form  user mistakenly enter amount form  input will issue error_message value money object will set incorrect value 
amount will member_function input read user mistakenly enter 
add additional check catch error cause misplaced minus sign 
friend  overload_operator  array class 
pitfall section entitle  lead zero number constant  suggest write short program test lead will cause compiler interpret input number numeral 
write program 
const parameter modifier call reference parameter efficient call value parameter 
call value parameter local_variable initialize value argument  function call copy argument 
call reference parameter  parameter just placeholder replace argument  only copy argument 
parameter simple type  int double  difference efficiency negligible  class parameter difference efficiency important 
sense call reference parameter call value parameter class  function change parameter 
call reference parameter function change value parameter  mark parameter compiler know parameter change 
place modifi const parameter_type 
parameter call constant parameter 
example  class money define display 
money parameter friend_function add constant parameter follow  class money public  friend money money  const money  
constant parameter  modifi const function_declaration heading function definition  change class definition function definition add begin follow  
remainder function definition display 
constant parameter form automatic error checking 
function definition contain mistake cause inadvertent change constant parameter  computer will issue error_message 
parameter modifier const kind parameter  normally only call reference parameter class occasionally parameter corresponding argument large 
call member_function  call object behave like call reference parameter 
call member_function  function_call change value call object 
example  following  class money display  const
object declare  member variable initialize 
call member_function input change member variable determine user type
call change just call reference argument 
modifi const apply call object way apply parameter 
member_function change call object  mark function const modifier  computer will issue error_message function code inadvertently change call object 
case member_function  const end function_declaration  just final semicolon  show here  class money public  
modifi const function_declaration function definition  function definition output begin follow  void const 
inconsistent const const modifier proposition 
const parameter type  parameter type change function_call  type class type  const modifier member_function change call object 
example  follow definition function guarantee  videonote const confusion 
member_function change call object price 
compiler process function definition guarantee  will think least change price 
translate function definition guarantee  compiler know member_function function_declaration function_declaration contain const  tell compiler call object will change  compiler assume call object will change 
modifi const parameter type money  const money member_function change call object 
function_declaration member_function include const 
display rewrite definition class money give display  time const modifier
definition member friend_function display  modifi const function heading heading match function_declaration show display 
mistake definition function change constant parameter  computer will give error_message 
parameter class type change function ordinarily constant call reference parameter  call parameter 
mistake definition function change call object function mark const  computer will give error_message 
const place end function_declaration  just final semicolon 
heading function definition const match function_declaration 
example class sample 
const modifier proposition 
const modifier class parameter member_function class 
const time class  class 
friend  overload_operator  array class object value represent amount cent give argument 
amount negative  dollar cent negative 
amount money  include dollar sign  input stream
notation negative amount 
give complete definition member_function definition give display 
incorrect add modifi const  show here  function_declaration member_function input class give display 
difference similarity call value parameter call const reference parameter 
function declaration illustrate
promise case 
early show function add friend class add object type display 
function add adequate add object  nice simply usual + operator add value type  last line follow code  
recall operator   just function syntax slightly ordinary function 
ordinary function_call  argument place parenthesis function_name  following  binary operator  argument place side operator  show here  cost + tax 
friend  overload_operator  array class function overload take argument type 
operator function  operator overload 
way overload operator   basically way overload function_name 
section show overload_operator 
overload operator overload operator + operator will accept argument class type 
difference overload + operator define function add give display involve only slight change syntax 
definition overloaded operator + basically definition function add 
only difference name + name add precede + keyword operator 
display rewrite type include overloaded operator + embed definition small demonstration program 
class  define display  overload compare object type 
object type money  want expression return value follow boolean expression  
show display  value_return overloaded 
overload operator 
need friend class  will want friend 
check box entitle  rule overload_operator  technical detail overload
operator overload binary      forth  simply function call syntax list argument 
argument list  function  argument list parenthesis function_name 
write similarly function  include reserve word name 
predefine operator  forth  overload give class type 
friend class require 
example overload + friend give display 
comment display omit space book  include real program 
friend  overload_operator  array class 
change need member_function definition 
body member_function definition identical display output normal 
el est exe rc ise 
difference binary function 
suppose wish overload apply type money define display 
need add description money give display 
suppose wish overload apply type money define display 
need add description money give display 
possible overload change behavior integer 
rule overload_operator overload least argument result overloaded class type 
example  change binary unary overload  change unary binary overload
overloaded precedence ordinary version
example  mean  object operator + overload class 
operator  include arrow_operator  overload way
operator arrow_operator discuss later book 
constructor automatic type_conversion class definition contain constructor  system will perform type_conversion automatically 
example  program contain definition class money give display  following program  
expression + type 
display only overload + value type money 
overload + value type money integer 
constant integer type money 
constant type_int type long  value type money class definition tell system convert integer value type money 
only way system know mean include constructor take single argument type long 
system see expression + first check see + overload combination value type money integer 
overloading  system next look see constructor take single argument integer 
find constructor take single integer argument  constructor convert integer value type money 
constructor argument type long tell system convert integer   value type money 
argument constructor convert object type money member variable equal  word  constructor convert object type money represent 
example  type money display constructor take argument type double  follow illegal produce error_message put program declare type money  +  + legal  change definition class money add constructor 
function_declaration constructor need add follow  class money public  
write definition self test exercise 
automatic type_conversion produce constructor common compelling overloaded numeric operator
automatic conversion apply exactly way argument ordinary function  argument member_function  argument overloaded operator 
el est exerc ise 
give definition discuss end previous section 
add class money display 
definition begin follow  unary operator addition binary operator  unary operator  mean negation 
follow statement  unary set value variable equal negative value variable  increment decrement operator example unary operator 
overload unary operator binary operator 
example  redefine type money give display unary binary version subtraction negation 
redone class definition give display 
suppose program contain class definition follow code  money    
overload definition will apply prefix position 
postfix version   handle manner  will discuss postfix version 
example  following  
overload operator  first operand output_stream  second operand string value  hello  
change operand 
fout output_stream type ofstream fout connect file call open  replace fout string will write file connect fout 
course  replace string  hello  string  variable  number 
insertion operator operator  able overload just overload_operator 
true  detail worry overload input output operator 
previous definition class money  member_function output output value type money display 
adequate  nice simply insertion operator output value type money following  money  
improved version class money class money give display 
friend  overload_operator  array class operand expression evaluate expression cause value write screen 
like +  expression return value 
expression operand  +  return_value 
obtain answer question  need look complicated expression involve 
let follow expression  involve evaluate chain expression       
first evaluate subexpression  work subexpression return computation continue follow     continue work return computation continue follow     return stream illustrate display 
return first argument  stream type ostream 
declaration overloaded class money follow  class money public  
once overload insertion output  will long need member_function output delete output overload_operator display operator 
operator  process end 
definition overloaded similar member_function output 
outline form  definition overloaded follow  part body give display replace return 
friend  overload_operator  array class return reference return reference leave explain previous function_declaration definition overloaded 
meaning return_type ostream 
easy answer function return stream  add end name return_type 
simple rule will allow overload operator 
working rule will allow write class definition program  satisfying 
need know mean  explain will remove mystery rule tell add 
add name return_type  function return reference 
function operator see return_value 
return_type stream  simply return value stream 
case stream  value stream entire file keyboard screen  sense return
want return only stream value stream 
add name return_type  function return reference  mean return object oppose value object 
extraction overload way analogous  second argument will object receive input value  second parameter ordinary call reference parameter 
outline form  definition overloaded extraction follow  part body give display replace return complete definition overloaded operator give display  rewrite class money
time rewrite class operator overload allow operator value type money 
overloading input output operator overload just_like operator 
type value_return symbol add end type_name 
function_declaration beginning function definition show next page 
see display example 
definition istream istream  
improved version class money give display 
omit comment display 
friend  overload_operator  array class 
friend  overload_operator  array class 
see display    copy file 
screen output copy file 
object type pair situation order pair need 
task write implementation overloaded overloaded object class pair input output form 
need implement constructor member  need input format check 
follow definition class_call percent 
object type percent represent percentage 
give definition overload operators input output object class percent 
assume input consist integer follow character    
percentage whole number store int member variable_name value 
need define overloaded operator need define constructor 
only define overload operators 
percent  input value type 
section discuss simple example give idea possibility 
array class base type array type  include type define  structure class type 
want index variable contain item type  array array structure 
example  suppose want array hold weather datum point  data point wind velocity wind direction north  south  east  west 
follow type definition array declaration  struct windinfo 
way read expression leave right carefully 
first  array 
ith index variable array 
indexed variable array type windinfo  structure member variable_name velocity direction 
member variable_name velocity ith array_element 
formally  wind velocity ith data point 
similarly  wind direction ith data point 
datum point array write screen following loop   direction  endl  display contain definition class_call money 
object class money represent amount money united states currency 
definition member_function  member operation  friend_function class find display answer self test exercise 
array base type type money 
simple example give display 
program read list amount money compute amount differ large amount 
notice array base type class treat basically array 
program display similar program display  display base type class 
array class declare  default constructor call initialize index variable  important default constructor class will base type array 
array class manipulate just_like array simple base type like int double 
example  difference amount large amount store array name difference  follow  money  
friend  overload_operator  array class definition class money 
amount negative  dollar cent negative 
dollar  object value represent 
money  object value represent 
precede output value type money dollar sign 
sample dialogue enter amount money  high amount amount difference large 
friend  overload_operator  array class el est exe rc ise 
give type definition structure call score member variable call opponent 
member variable type_int 
declare array call game array element type score 
array game record score game sport team 
write program read amount money  double amount  write double value screen 
array money base type 
example  suppose speed swimmer want program keep track practice time distance 
structure type datum give next record distance meter time second practice try swim distance  struct datum 
structure  declare member variable  name  variable type_int record  name time  array value type double hold time practice try specified 
set equal meter  following  
expression read leave right  structure  member variable_name time 
array  sense add index 
expression ith index variable array 
class structure type  array manipulation member_function avoid confusing expression 
illustrate follow programming example 
object type temperaturelist program weather analysis 
list temperature keep member variable list  array 
array will typically only partially fill  second member variable  call size  keep track array
value size number indexed variable array list store_value 
type temperaturelist declare like type 
example  following declare type temperaturelist  temperaturelist  declaration call default constructor  initialize member variable size value  empty list 
once declare  add item list temperature member array list call member_function follow   only way add temperature list  array list private member variable 
notice add item call member_function  function_call first test see array list full add value only array full 
class temperaturelist specialized 
only class temperaturelist initialize list empty  add item list  check list full  output list 
output temperature store declare previously  call follow   class temperaturelist delete temperature
define similar class list pressure list distance list datum express value type double 
trouble define class  define single class represent arbitrary list value type double specify value represent 
friend  overload_operator  array class definition class 
value type list fahrenheit temperature 
temperature output line 
el est exerc ise 
change class temperaturelist give display add member_function call  take argument return number temperature list 
change type temperaturelist give display add member_function call  take int argument integer great equal strictly
function_return value type double  temperature position list 
argument  return first temperature  argument  return second temperature  forth 
assume temperature will call argument specify location list currently contain temperature 
william shakespeare  king henry iv  part iii dynamic array base type class 
class member variable dynamic array 
combine technique 
friend  overload_operator  array class learn class technique learn dynamic array just way 
worry class dynamic array  basic technique
let start example 
program example string variable class constructor size string value show define array variable hold string 
previous section learn define dynamic array array determine program run 
example will define class_call stringvar object string variable 
object class stringvar will implement dynamic array determine program run 
object type stringvar will advantage dynamic array  will additional feature 
will define stringvar member_function try assign string long object type stringvar  will error_message 
version define here only small collection operation manipulate string object 
programming project ask enhance class definition add member_function overloaded operator 
standard class string  discuss  need class stringvar  will exercise design code
definition type stringvar give display 
constructor class stringvar take single argument type_int 
argument determine maximum allowable length string value_store object 
default constructor create object maximum allowable length 
constructor take array argument contain string kind discuss 
note mean argument constructor quote string 
constructor initialize object hold string length equal length argument  initialize object string value copy value argument 
moment  ignore constructor label copy_constructor 
ignore member_function name 
look like constructor 
will discuss member_function late subsection 
meaning remain member_function class stringvar straight forward 
simple demonstration program give display 
object   declare definition function conversation 
object contain string character long 
object initialize string value  borg  value change string length
object declare follow 
set value object equal empty string 
stringvar  object accept string value length
set value object equal empty string 
char   array contain character terminate  
sufficient room  will fit copy 
friend  overload_operator  array class private  char value  dynamic array hold string value 
sample dialogue name 
kathryn janeway borg will meet kathryn janeway end demonstration class dynamic array beginning subsection  class stringvar implement dynamic array 
implementation show display 
object type stringvar declare  constructor call initialize object 
constructor create dynamic array character member variable value 
string value store array value ordinary string value   mark end string 
notice size array determine object declare  point constructor call argument constructor determine size dynamic array 
illustrate display  argument variable type_int 
look declaration object definition function conversation 
argument constructor call value parameter 
recall call value parameter local_variable  variable 
int variable argument constructor way 
implementation member_function length   overloaded output straightforward 
next subsection discuss function constructor label copy_constructor 
away program suitable call delete 
dynamic variable create local pointer variable local pointer variable away end function_call  dynamic variable will remain call delete 
eliminate dynamic variable call delete  will continue occupy memory space  cause program abort memory freestore 
dynamic variable embed implementation class  programmer who class know dynamic variable expect perform call delete 
data member normally private member  programmer normally access need pointer variable call delete pointer variable 
handle problem  special kind member_function call destructor 
destructor member_function call automatically object class pass scope 
mean program contain local_variable object destructor  function_call end  destructor call automatically 
destructor define correctly  destructor call delete eliminate dynamic variable create object 
single call delete require call delete 
want destructor perform cleanup detail return memory freestore job destructor 
videonote array class dynamic array friend  overload_operator  array class member_function destructor class stringvar show display 
like constructor  destructor name class member destructor tilde  beginning name tell destructor constructor 
like constructor  destructor type value_return  type void 
destructor parameter 
class only destructor  overload destructor class 
destructor define just_like member_function 
notice definition destructor give display 
look function conversation sample program show display 
local_variable name create dynamic array 
class destructor  call conversation end  dynamic array still occupy memory  useless program 
problem here sample program end soon call conversation complete  write program repeat call function like conversation  class stringvar suitable destructor  function_call consume memory freestore program end abnormally 
destructor destructor member_function class call automatically object class scope 
mean object class type local_variable function  destructor automatically call last action function_call end 
destructor eliminate dynamic variable create object memory occupy dynamic variable return freestore 
destructor perform cleanup task
name destructor consist tilde  follow name class 
pointer call value parameter call parameter pointer type  behavior subtle troublesome 
function_call show display 
parameter temp function sneaky call parameter  local_variable 
function call  temp set argument function_body execute 
temp local_variable  change temp function sneaky 
pointer variable change 
sample dialogue look pointer variable change 
call function sneaky   call sneaky 
sample dialogue look change  change function_call sneaky 
pointer associate pointer store point 
now  pointer memory address 
call sneaky  variable contain pointer memory address 
call sneaky change variable point change
parameter_type class structure type member variable pointer type  kind surprising change occur call byvalue argument class type 
class type  avoid control surprise change define copy_constructor  next subsection 
parameter call reference parameter  normally parameter precede const parameter modifier  constant parameter 
copy_constructor define way constructor just_like constructor 
display function_call sneaky  
call sneaky  
value plug 
call sneaky  
friend  overload_operator  array class_call object declare example  program class stringvar define
constructor initialize object type stringvar determine type argument give parenthesis object name 
object line initialize constructor parameter type  object motto initialize constructor parameter type const char 
similarly  object initialize constructor argument type const stringvar 
way  copy_constructor just_like constructor 
copy_constructor define object initialize complete  independent copy argument 
declaration stringvar line  call value parameter copy_constructor need member variable simply set value line 
definition copy_constructor show display 
note definition copy_constructor  array create content array copy array 
previous declaration  initialize string value equal string value line  separate array 
change effect line 
see  copy_constructor just_like constructor 
copy_constructor call automatically situation 
roughly speak  need copy object  automatically call copy_constructor 
copy_constructor call automatically circumstance  class function_return value class type  argument class type plug call value parameter 
see need copy_constructor  let see happen define copy_constructor class stringvar 
suppose include copy_constructor definition class stringvar suppose call value parameter function definition  example  
assume copy_constructor  proceed follow  function execute  value copy local_variable  set equal 
pointer variable  function  point array  follow  function end  destructor stringvar call return memory freestore 
definition destructor contain follow statement  delete value  
undefined program reach statement   endl  statement undefined 
statement chance give output want  soon later undefined will_produce problem 
major problem occur object local_variable function 
case destructor will call function end 
destructor will equivalent delete  
friend  overload_operator  array class just see  array point delete once  now system try delete second time 
call delete twice delete array variable create produce system error cause program crash 
fortunately  include copy_constructor definition class stringvar  copy_constructor call automatically follow function execute  stringvar  hello    
destructor call call destructor delete array 
function_return value class type  copy_constructor call automatically copy value specify return_statement 
copy_constructor  problem similar value parameter will occur 
class definition involve pointer dynamically allocate_memory  need include copy_constructor 
class involve pointer dynamically allocate_memory need copy_constructor 
contrary expect  copy_constructor call set equal assignment like default assignment redefine assignment way subsection careful distinction initialization case copy_constructor call assignment 
initialization copy_constructor create  assignment take exist modifie identical copy location right hand side assignment 
parameter reference parameter 
normally  parameter constant parameter  precede const parameter modifier 
copy_constructor class call automatically function_return value class type 
copy_constructor call automatically argument plug parameter class type 
copy_constructor way constructor 
class pointer copy_constructor 
big copy_constructor   destructor call big expert need define need define
miss  compiler_will create behave want 
pay define
copy_constructor compiler generate will work fine member variable predefine type int double  misbehave class class pointer member variable 
class pointer  safe define copy_constructor   destructor 
el est exerc ise 
class name myclass constructor  constructor name 
myclass destructor  destructor name 
suppose change definition destructor display follow 
sample dialogue display change 
friend  overload_operator  array class 
following first line copy_constructor definition class stringvar 
identifi stringvar occur time mean slightly time 
mean case 
answer question destructor 
destructor name destructor
destructor call 
destructor actually
assignment operator suppose declare follow  videonote class stringvar   
cause problem cause problem 
member variable contain pointer  assignment statement set pointer equal value 
point place memory 
change value  will change value 
change value  will change value 
short  predefine assignment statement like assignment statement object type stringvar 
predefine version assignment class stringvar only cause problem 
way fix overload assignment want object class stringvar 
assignment way operator  + 
overload assignment  member class  friend class 
add version assignment class stringvar  definition stringvar change follow  class dynamic array class stringvar 
display assignment just assignment example  follow   call  call argument
notice length right side assignment check 
long fit object leave side assignment call object  only character will fit copy object receive 
suppose want lose character copying process 
fit character  create dynamic array object left hand side assignment 
try redefine assignment follow  
friend  overload_operator  array class 
delete pointer 
assignment corrupt object  run program ruin 
way fix bug first check sufficient room dynamic array member object left hand side assignment delete array only extra space need 
final definition assignment just check  
class  obvious definition overload assignment work correctly object side assignment 
check case careful write definition overloaded assignment work case 
el est exe rc ise 
part destructor 
answer self test exercise summary friend_function class ordinary function access private member class  just_like member_function
structure class array member variable 
destructor call automatically object class pass scope 
reason destructor return memory freestore memory reuse 
define copy_constructor  will call automatically function_return class type argument plug call parameter class type 
class pointer copy_constructor 
overload member class  overload friend 
class pointer overload assignment class 
friend  overload_operator  array class previous boolean expression  month month month day day 
friend_function member_function alike member class public private function definition 
friend_function define just_like ordinary function  dot call friend_function  type qualifi define friend_function 
member_function  hand  call object name dot 
member_function definition include type qualifier consist class_name scope resolution   
modified definition class dayofyear show
part color
modified definition class money show here 
part color
answer self test exercise class money 
course  combine enhancement enhancement previous self test exercise produce highly improve class money 
user enter  function input will read  value value  value    value 
mean will set equal equal answer self test exercise set amount equal value represent plus  
way catch problem test value negative value absolute value 
rewrite error_message portion follow      
code still will give error_message incorrect input zero 
material learn test case  certainly possible  significantly complicate code hard read 
compiler interpret input lead numeral  input datum  output 
output compiler interpret datum lead base 
only change version give display modifi const add function head  definition
member_function input change value call object  compiler_will issue error_message add const modifier 
similarity  parameter call protect caller argument change 
difference  call value copy caller argument  memory call constant reference 
const int  declaration  const keyword promise compiler code write author will change value
friend  overload_operator  array class int const  declaration  const keyword promise compiler code write author implement function will change call object 
int  declaration  const keyword promise compiler code write class author will change argument plug
function_call  argument give parenthesis function_name 
argument give
reserved word declaration definition overloaded 
modified definition class money show here 
part color
modified definition class money show here 
part color omit comment space  comment show display include definition 
add follow definition definition give previous exercise bool const money  
actually  requirement prevent change effect build type 
definition simply discard amount cent 
example  convert integer  represent amount 
possible define constructor fraction cent 
see answer 
answer combine answer previous self test exercise 
class definition change following 
constructor name myclass  name name class 
destructor name 
dialogue change following  name 
kathryn janeway borg will meet kathryn janeway bye cruel world 
short life dynamic array end 
bye cruel world 
short life dynamic array end 
end demonstration practice program 
stringvar  name class 
stringvar right  name member_function 
destructor name begin tilde   follow class_name 
destructor call class object scope 
destructor actually class author program
destructor cleanup task 
case assignment copy_constructor  only build type datum  default copy mechanism exactly want  default work fine 
case destructor  dynamic_memory allocation pointer  default action want 
practice program practice program generally solve short program directly apply programming principle present
modify definition class money show display follow add     apply follow member_function add class definition 
friend  overload_operator  array class 
self test exercise ask overload class pair 
complete test exercise 
implement default constructor constructor int parameter 
overload binary + add pair accord rule overload analogously 
overload pair int accord rule write program test member_function overload class definition 
self test exercise ask overload class percent 
complete test exercise 
implement default constructor constructor int parameter 
overload add subtract percent 
overload allow multiplication percent integer 
write program test member_function overload class definition 
programming project programming project require problem solve practice program solve way 
visit complete programming project online instant feedback 
discuss vector  like array grow size 
suppose vector define 
define class_call vectordouble like class vector base type double 
class vectordouble will private member variable array double 
will member variable type_int  call size array double  call count number array position currently hold value 
programming project class following  constructor  default constructor create array element  constructor int argument number element initial array  copy_constructor 
equal  value count count array_element equal  value need equal 
enforce suitable restriction argument 
work square bracket  cover 
define class rational number 
rational number number represent quotient integer 
example     forth rational number 
call class rational 
include constructor argument set member variable object legitimate value 
include constructor only single parameter type_int  call single parameter define constructor object will initialize rational number 
include default constructor initialize object 
overload input output 
number input output form    forth 
note numerator  denominator  contain minus sign    possible input 
overload follow operator correctly apply type       +   
write test program test class 
friend  overload_operator  array class hint  rational number equal equal
positive rational number 
include function normalize value_store normalization  denominator positive numerator denominator small possible 
example  normalization represent 
write test program test 
define class complex number 
complex number number form purpose  number type double  number represent quantity 
represent complex number value type double 
name member variable real imaginary 
include constructor parameter type double set member variable object value 
include constructor only single parameter type double  call parameter define constructor object will initialize 
include default constructor initialize object + 
overload follow operator correctly apply type   +     
write test program test class 
product complex number give follow formula  + + + interface file  define constant follow  
enhance definition class stringvar give display
write suitable test program test class definition 
define class_call text object store list word 
class text will just_like class stringvar class text will dynamic array base type stringvar base type char will mark end array stringvar object consist single blank   end marker 
intuitively  object class text represent text consist word separate blank 
enforce restriction array_element type stringvar contain blank end marker element type stringvar 
class text will member_function correspond member_function stringvar 
constructor argument type const char will initialize text object way 
stre argument contain symbol    error end program error_message 
member_function will read blank separated string store string element dynamic array base type stringvar 
multiple blank space treat single blank space 
output object class text  insert blank value type stringvar 
assume tab symbol treat tab symbol blank  class assignment  ask instructor treat tab symbol 
add enhancement programming project 
overloaded version extraction operator will fill only element dynamic array 
dynamic array  implement polynomial class polynomial addition  subtraction  multiplication 
discussion  variable polynomial little act placeholder coefficient 
only interesting 
friend  overload_operator  array class polynomial array coefficient correspond exponent 
think polynomial + simple way implement polynomial class array double store coefficient 
index array exponent correspond term 
term previous example 
term miss  simply zero coefficient 
technique represent polynomial high degree missing term 
call sparse polynomial technique 
know technique  learn quickly 
default constructor  copy_constructor  parameterized constructor enable arbitrary polynomial construct 
supply overloaded destructor 
operation  polynomial + polynomial 
supply function evaluate polynomial value type double 
decide implement function member  friend  stand alone function 
write checkbook balancing program 
program_will read follow check cash last time balance checkbook  number check  amount check  cash 
array class base type 
class class check 
member variable record check number  check amount  check cash 
class check will member variable type money define display record check amount 
will class programming project class 
class check accessor mutator function constructor function input output check 
addition check  program read deposit  old
want array hold deposit 
old plus deposit  minus check cash 
program output total check cash  total deposit  figure differ bank
output list check  check cash last time balance checkbook check still cash 
display list check sorted order low high check number 
class assignment  ask instructor input output keyboard screen file 
file  ask instructor instruction file name 
define class_call list hold list value type double 
model class definition class temperaturelist give display  class list will reference temperature output value 
value represent sort datum item long type double 
include additional feature specify self test exercise 
change member_function name refer temperature 
add member_function call take argument return last item list 
member_function change list  call list empty 
add member_function call delete last element list 
member_function void function 
note last element delete  member variable size adjust 
call empty list call object  function_call effect 
design program test definition class list 
define class_call stringset will store set stl string 
array vector store string 
create constructor take input parameter array string initial value set 
write member_function add string set  remove string set  clear entire set  return number string set  output string set 
overload return union stringset object 
overload return intersection stringset object 
write program test member_function overloaded operator class 
friend  overload_operator  array class 
programming project require complete programming project first 
field retrieval find relevant electronic document base query 
example  give group display sort relevance query 
technology require way compare document query see relevant query 
simple way comparison compute binary cosine coefficient 
coefficient value  query similar document query keyword common document 
approach treat document set word 
example  give follow sample document  document parse keyword case ignore punctuation discard turn set contain word chocolate  ice  cream  milk  bar  delicious 
identical process perform query turn set string 
once query represent set word document represent set word  similarity compute modify stringset programming project add additional member_function compute similarity current stringset input parameter type stringset 
sqrt function cmath library 
create text file disk name 
write text content choice file  sure file contain content 
next  write program allow user input keyboard set string represent query 
program compare query text file disk output similarity binary cosine coefficient 
test program query see similarity metric work correctly 
class public member_function addentry deleteentry 
array size variable private 
will require programming project dde function set specific item array return current size array 
add destructor free memory allocate dynamic array 
add copy_constructor overload assignment_operator dynamic array properly copy object right hand side assignment object left hand side 
embed class suitable test program 
combat election fraud  city institute procedure 
ballot letter associate selection voter
sample ballot show 
vote mayor
pincher  penny
dover  skip c
perman  sue 
proposition
measure
measure
submit ballot  voter receive receipt unique number record selection 
example  voter who submit ballot sue perman  yes proposition  measure  yes measure receive receipt  cdgh next day city post vote web page sort number 
allow voter confirm submission allow count vote total
sample list sample ballot show 
adfh videonote solution programming project friend  overload_operator  array class write program read post list file output percent vote cast ballot item 
assume file header line 
first line will contain voter string represent vote 
define class_name voter store individual record 
class constructor take input string vote example   cdgh   voter accessor return person vote specific question 
store voter instance array vector 
program iterate array compute output percent vote cast candidate  proposition  measure 
prompt user enter voter iterate list find object print vote 
change internal class function test class run identically old class class array member variable 
next  modify function create separate variable object  array least object create sample datum 
loop array output name  mpaa rating  average rating movie 
programming project racer class store race participant 
class store racer name  bib number  finish position  split time record rfid sensor 
choose structure store
include function access change racer constructor 
array vector racer object store entire race result 
racer name come separate text file 
file collect race participant register event 
list sample file  rodger short benoit separate compilation namespace separate compilation adts review case study  digitaltime class compile separately ifndef programming tip  define library namespace namespace using_directive create namespace summary answer self test exercise qualifying name subtle point namespace optional unnamed namespace programming tip  choose name namespace pitfall  confuse global namespace unnamed namespace practice program programming project mine library volume prize dukedom 
william shakespeare  temp introduction cover topic organize program separate part 
section separate compilation discuss program distribute across number file part program change  only part need recompile 
separate part easily reuse application 
section discuss namespace  introduce briefly 
namespace way allow reuse name class  function  item qualify name
namespace divide code section section reuse name differ meaning 
namespace allow kind local meaning name general local_variable 
prerequisite material 
place definition class associate function definition file separate program class 
way build library class program class 
compile class once program  just_like predefine library header_file iostream cstdlib 
define class file specification class separate class implement 
class define follow guideline give change only implementation class  need only recompile file class implementation 
file  include file program class  need change recompile 
section  tell carry separate compilation class 
class definition adts 
order define class adt  need separate specification class programmer detail class implement 
separation complete change implementation need change program class way 
way ensure separation summarize rule  
member variable private member class 
basic operation adt class public member_function class  friend_function  ordinary function  overloaded operator 
group class definition function operator declaration
group  accompany comment  call interface adt 
fully specify function operator comment give class function operator declaration 
implementation basic operation unavailable programmer who abstract data_type 
implementation consist function definition overloaded operator definition help function additional item definition require 
 way ensure follow rule place interface implementation adt class separate file 
guess  file contain interface call interface file  file contain implementation call implementation file 
exact detail set compile  file will vary slightly version basic scheme version 
detail file system 
only vary command compile link file 
detail file illustrate next case study 
adt class private member variable 
private member variable private member_function present problem basic philosophy place interface implementation adt separate file 
public part class definition adt part interface adt  private part part implementation 
problem will allow split class definition across file 
sort compromise need 
only sensible compromise  place entire class definition interface file 
programmer who adt class private member class  private member will  effect  still hide programmer 
private member part implementation 
class define adts 
adt class class define follow programming practice separate interface implementation class 
digitaltime class value time day  
only public member class part interface 
private member part implementation  interface file 
label private  warn private member part public interface 
programmer need know order adt digitaltime explain comment start file comment public section class definition 
interface tell programmer version member_function name advance  constructor  overloaded   
member_function name advance  overloaded  assignment statement only way programmer manipulate object value class 
note comment top interface file  adt class hour notation  instance  pm input output 
detail know order effectively class digitaltime include comment give member_function 
place interface file name suffix header_file 
interface file header_file end suffix 
program class digitaltime contain include directive like following  name file  write include directive  header_file predefine header_file header_file write 
header_file predefine  write header_file name angular bracket  like iostream 
header_file write  write header_file name quote  like   
distinction tell compiler look header_file 
header_file name separate compilation display interface file digitaltime file  interface class digitaltime 
value input output
header_file name quote  compiler look current directory programmer define header_file keep system 
program digitaltime class contain previous directive name header_file 
separate compilation namespace allow compile program allow run program 
order run program  write compile definition member_function overloaded 
place function definition file  call implementation file 
require compiler  traditional give interface file implementation file name 
file end suffix 
place interface adt class file name implementation adt class file name 
suffix implementation file depend version 
suffix implementation file normally file contain program 
program file end  place 
program file end  implementation file will end 
compiler accept suffix source_code file 
implementation file digitaltime adt class give display 
explain file adt interact will_return display discuss detail definition implementation file 
order adt class digitaltime program  program contain directive compile run program notice implementation file program file contain directive name interface file 
file contain program file contain part program call application file driver file 
display contain application file simple program demonstrate digitaltime adt class 
exact detail run complete program  contain file  depend system
basic detail system 
compile implementation file  compile application file contain part program 
compile interface file  example file give display 
need compile interface file compiler think content interface file contain file 
recall implementation file application file contain directive compile program automatically invoke preprocessor read directive replace text file 
compiler see content  file need compile separately 
separate compilation namespace 
separate compilation namespace display application file digitaltime file system require suffix 
sample dialogue enter time notation  minute later time will hour minute time will only conceptual copying 
compiler act content copy file directive 
look file compile  will only find directive  will find content file 
once implementation file application file compile  still need connect file work
call separate compilation link file separate utility call linker 
detail call linker depend system
file link  run program 
system  detail quickly routine 
display   contain complete program divide piece place file 
combine content file file compile run file fuss directive link separate file 
bother separate file 
advantage divide program separate file 
definition implementation class digitaltime file separate application file  class program need rewrite definition class program 
need compile implementation file only once  matter program class digitaltime 
separate interface implementation digitaltime adt class  change implementation file will need change program adt 
will need recompile program 
change implementation file  only need recompile implementation file relink file 
bit recompile time nice  big advantage rewrite code 
adt class program write class code program 
change implementation adt class need rewrite part program class 
define class separate file  summary define class place definition class implementation member_function separate file 
compile class separately program class  class number program 
class program class place file follow  
put definition class header_file call interface file 
name header_file end 
interface file contain declaration function overloaded operator define basic operation class list class definition 
include comment explain function operator
separate file 
separate compilation namespace 
definition function overloaded operator mention step member friend place file call implementation file 
file contain directive name interface file
directive quote file name  following example  interface file implementation file traditionally name  end suffix 
interface file end 
implementation file end suffix file contain complete program 
implementation file compile separately program 
want class program  place part program additional function definition  constant declaration  file call application file 
file contain directive name interface file  following example  application file compile separately implementation file 
write number application file pair interface implementation file 
run entire program  first link object code produce compile application file object code produce compile implementation file 
implementation detail straightforward  merit comment 
notice member_function name advance overload function definition 
notice definition overloaded extraction input operator help function  call help function third help function_call digit 
let discuss point 
class digitaltime display member_function call advance 
version take single argument  integer give number minute advance time 
version take argument  number hour number minute  advance time number hour plus number minute 
notice definition argument version advance include call argument version advance 
look definition argument version give display 
first time separate compilation advance hour  single argument version advance advance time additional minute 
first strange  perfectly legal 
function_name advance function compiler coincidentally happen name 
situation version overloaded function advance call 
now let discuss help function 
help function read input character time convert input integer_value place member variable hour minute 
function read hour minute digit time  read value type char 
complicated read input int value  allow perform error check see input correctly form issue error_message input form 
help function read hour help function_name  function definition class money display 
function convert digit    number  
reusable component adt class develop code separate file software component number program 
reusability  reusability adt class  important goal strive design software component 
reusable component effort need redesign  recode  reteste application 
reusable component likely reliable component only once reason 
first  afford spend time effort component will time 
second  component test
software component test component 
software component time variety contexts way discover remain bug software 
ifndef give method place program file  interface implementation class  application part program 
program keep file 
example  program class  class keep separate pair file 
videonote avoid multiple definition 
separate compilation namespace 
easily lead situation file  effect  contain definition once 
allow define class once  repeat definition identical 
header_file project  close impossible keep track include class definition once 
avoid problem  way mark section code include stuff once include  way intuitive  notation look bit weird
will example  explain detail
follow directive  define   define mean compiler preprocessor put list see 
define word define mean merely put list 
important point directive test define test section code process 
nonkeyword identifi place  will see standard convention identifi
follow directive test see define  ifndef define  directive first occurrence follow directive skip  endif equivalent way state clarify way directive spell  following  define  compiler process next endif 
lead wonder ifdef directive ifndef directive 
obvious meaning  will occasion ifdef 
now follow code  ifndef define class definition endif separate compilation 
include directive process second time  directive ifndef skip endif class define
display rewrite header_file show display  time directive prevent multiple definition 
version show display  file contain following include directive once  class digitaltime will still define only once  display avoid multiple definition class file  interface class digitaltime 
value input output hour notation  am pm 
separate compilation namespace identifier place  normal convention name file write uppercase letter underscore place period 
follow convention easily read code remember flag name 
way flag name determine automatically arbitrary remember 
directive skip code file header_file  will occasion directive header_file 
collection function want library design  place function_declaration accompany comment header_file function definition implementation file  just outline adt class 
library program way class place separate file 
suppose define adt class class program 
want separate class program part separate file
specify follow place interface file  implementation file  application file 
class definition declaration function serve adt operation  member friend class declaration overloaded operator serve adt operation  member friend class definition function serve adt operation  member friend class definition friend_function serve adt operation
definition member_function definition overloaded operator serve adt operation  member friend class definition overloaded operator serve adt operation friend class
part program namespace 
follow file name end  interface file class  implementation file class  application file class 
define class separate file  interface file file 
file need compile 
suppose define class separate file class program 
now suppose change class file 
follow file  need recompile  interface file  file  application file 
suppose want change class digitaltime give display 
specifically  want change way time record 
private variable hour minute  want single private int variable  will call minute 
private variable minute will record time number minute time midnight 
record minute  minute past midnight 
need change interface file show display 
need write file entirety  just item need change general way  change
difference adt define class define 
call rose name smell sweet 
william shakespeare  romeo juliet program class function write programmer  possibility programmer will name
namespace way deal problem 
namespace collection name definition  class definition variable declaration 
namespace using_directive namespace name std 
std namespace contain name define standard_library file 
separate compilation namespace 
program know name std namespace specify std namespace 
only way know specify std namespace namespace follow sort using_directive  namespace std  way see want using_directive think want
using_directive namespace std  define cin cout meaning standard meaning 
bit code write namespace 
place code specific namespace  code namespace know global namespace 
place code write namespace  code global namespace 
global namespace using_directive global namespace 
implicit automatic using_directive global namespace 
note namespace time 
example  global namespace std namespace 
happen name define namespace namespace 
result error compiler error run time error  depend exact detail 
name define namespace  true  only namespace mean namespace program 
time program 
example  suppose namespace  suppose void function argument define namespace define way namespace 
follow legal  will see later way namespace time contain name  subtle point
first invocation definition give namespace  second invocation definition function give namespace 
recall block list statement  declaration  possibly code  enclose brace 
using_directive start block apply only block 
first using_directive apply only first block  second using_directive apply only second block 
usual way phrase scope namespace first block  scope namespace second block 
note scope rule  able conflicting namespace program program contain block discuss previous paragraph 
using_directive block  typically block consist body function definition 
place using_directive start file  using_directive apply entire file 
using_directive normally place near start file start block 
scope rule using_directive scope using_directive block precisely  location using_directive end block 
using_directive block  apply file follow using_directive 
create namespace order place code namespace  simply place namespace group follow form  namespace 
grouping code  place 
separate compilation namespace 
look display  see definition function greeting place namespace 
follow additional namespace grouping  namespace 
note number namespace grouping single namespace 
display  namespace grouping namespace grouping namespace 
name define namespace inside namespace grouping  name code namespace 
function_declaration function definition namespace using_directive  namespace illustrate display 
name block definition namespace  std  global namespace 
name block definition namespace  std  global namespace 
name here only definition namespace std global namespace 
sample dialogue greeting namespace 
hello namespace 
big global hello 
separate compilation namespace sel es exe cis 
program show display 
name greeting place 
self test exercise  see add definition follow function global namespace void greeting  
namespace namespace grouping 
qualify name suppose face follow situation  namespace  
want function define function define namespace 
complication define function 
need way namespace namespace namespace 
follow call declaration  answer    
note see scope resolution operator    
example  display follow function definition  
case  mean define function advance class digitaltime  oppose function_name advance class 
similarly   mean function_name define namespace  oppose definition namespace 
now suppose intend name define namespace  intend only time small number time 
name function item name namespace scope resolution operator following   form specify parameter_type 
function  parameter type istream  istream define std namespace 
type_name istream only name need std namespace name need similarly qualified std   need namespace std  
difference follow  declaration like std   only name namespace code  using_directive like namespace std name namespace
using_directive only potentially introduce name namespace 
point pretty obvious 
point subtlety 
example  suppose namespace definition name conflict 
follow will_produce problem  
sel es exe cis 
write function_declaration void function_name wow 
function wow parameter  first type speed define speedway namespace second type speed define namespace 
follow function_declaration definition class money display 
unnamed namespace definition class digitaltime display help function    
help function part implementation adt class digitaltime  place definition implementation file display 
hide function 
like function local implementation file class digitaltime 
define function name application program class digitaltime 
violate principle hiding 
truly hide help function local implementation file digitaltime  need place special namespace call unnamed namespace 
compilation unit unnamed namespace 
namespace group unnamed namespace write way namespace  name give  following example  namespace 
example  display show rewrite final version interface implementation file class digitaltime 
note help function  read minute  unnamed namespace local compilation unit 
illustrate display  name unnamed namespace reuse compilation unit 
display function_name reuse function application program 
display place class namespace header_file file  interface class digitaltime 
value input output hour notation  am pm 
grouping namespace dtimesavitch implementation file 
separate compilation namespace file system require
look implementation file display  will see help function   unnamed namespace namespace qualifier 
name define unnamed namespace qualification compilation unit 
unnamed namespace compilation unit 
easily possible compilation unit overlap 
example  implementation file class application program class normally header_file interface file class 
header_file compilation unit participate unnamed namespace 
dangerous sound  will normally produce problem long compilation unit namespace sense
example  name define unnamed namespace header_file  define unnamed namespace implementation file application file 
name conflict avoid 
function implementation file show display 
let pretend hour just change 
write midnight  will write 
enter hour number minute later time will hour minute time will programming tip choose name namespace idea last name unique string name namespace reduce chance will namespace name
multiple programmer write code project  important namespace mean distinct distinct name 
easily multiple definition name scope 
include name savitch namespace dtimesavitch display 
compilation unit unnamed namespace 
identifier define unnamed namespace local compilation unit 
place definition unnamed namespace place namespace group namespace name  show follow  namespace 
name unnamed namespace qualifi anyplace 
pitfall onfuse global namespace unnamed namespace confuse global namespace unnamed namespace 
put name definition namespace grouping  global namespace 
put name definition unnamed namespace  put namespace group start follow  name  namespace name global namespace name unnamed namespace access qualifier 
name global namespace global scope program file  name unnamed namespace local compilation unit 
confusion global namespace unnamed namespace arise writing code  tendency think name global namespace namespace   technically correct 
confusion easily arise discuss code 
program display behave differently replace using_directive namespace dtimesavitch  
display grouping unnamed namespace  help function_declaration help function definition 
eliminate grouping help function_declaration 
summary  abstract data_type adts implement class member variable private operation implement public member nonmember function overloaded operator 
compile adt class separately program adt class number program 
separate compilation namespace answe rs self est exer cise part   interface file  part implementation file 
name interface file end 
only implementation file need compile 
interface file need compile 
only implementation file need recompile 
need relink file 
need delete private member variable hour minute interface file show display replace member variable minute 
need change interface file 
implementation file  need change definition constructor member_function  definition overloaded operator  work way recording time 
need change application file program class 
interface file change implementation file  will need recompile application file  course will need recompile implementation file 
short answer adt simply class define follow programming practice separate interface implementation 
class adt  nonmember basic operation overloaded operator part adt  technically speak part class 
answer self test exercise 
replace greeting  will definition name greeting global namespace 
part program name definition namespace name definition global namespace simultaneously
part program  distinct definition void greeting  
yes  additional definition cause problem 
overloading allow 
example  namespace global namespace function_name greeting overload 
problem self test exercise definition function_name greet parameter list 
yes  namespace number grouping 
example  follow grouping namespace display  namespace 
program behave exactly
hello unnamed 
hello sally 
hello unnamed 
yes  eliminate grouping help function_declaration  long grouping help function definition occur help function
example  remove namespace help function_declaration move grouping help function definition just namespace group namespace dtimesavitch 
separate compilation namespace practice program practice program generally solve short program directly apply programming principle present
value type digitaltime object call member_function  value type digitaltime give first argument 
example  follow code  digitaltime     int hour    hour   
allow time give first argument later day time call object 
case  time give first argument assume previous day 
write program test revise adt class 
self test exercise full detail 
write complete adt class  include interface implementation file 
write program test adt class 
videonote solution practice program redo practice program  time define money adt class separate file interface implementation implementation compile separately application 
practice program 
practice program explore unnamed namespace work 
list snippet program perform input validation password 
code input validate file separate code input validate password 
file  namespace authenticate 
define variable isvalid function unnamed namespace code will compile 
isvalid function return true contain exactly letter 
generate header_file code 
repeat step file  place password variable isvalid function unnamed namespace 
case  isvalid function return true input password least character include least file  namespace authenticate 
separate compilation namespace point function_name isvalid  unnamed namespace 
place follow function
test program invalid password 
programming project programming project require problem solve practice program solve way 
visit complete programming project online instant feedback 
define adt class separate file compile separately 
define adt class separate file compile separately 
define adt class separate file compile separately 
put function file separate adt file 
pointer link list node link list node nullptr link list insert node head list pitfall  lose node search link list pointer iterator insert remove node inside list pitfall  assignment_operator dynamic data_structure variation link list link list class summary answer self test exercise practice program programming project stack queue stack programming example  stack queue programming example  queue chance who love manner true heart point point
gilbert sullivan  ruddigore introduction link list list construct pointer 
link list fix size  grow shrink program run 
show define manipulate link list  will serve introduce pointer 
prerequisite material 
see dynamic variable array type useful 
dynamic variable struct class type useful 
dynamic variable struct class normally member variable pointer variable connect dynamic variable 
example  structure  happen contain shopping list  diagram display 
nod structure like show display consist item draw box connect arrow 
box call node arrow represent pointer 
node display contain string  integer  pointer point node type 
note pointer point entire node  individual item roll  inside node 
node implement struct class 
example  struct type definition node type show display  type definition pointer node  follow  struct listnode 
order type definition important 
definition listnode come first  definition listnodeptr 
box label head display node  pointer variable point node 
pointer variable head declare follow  listnodeptr head  order type definition avoid illegal form circularity  definition struct type listnode still blatantly circular 
definition type_name listnode define member variable link 
wrong circularity  allow 
indication definition logically inconsistent draw picture  like display  represent structure 
now pointer inside struct pointer point struct contain pointer  forth 
situation syntax involve  case syntax follow rule pointer struct 
illustration  suppose declaration situation 
pointer link list diagram display  want change number first node 
accomplish follow statement  head 
variable head pointer variable 
expression contain  roll  integer 
node  refer head  struct  member variable struct  contain value type_int  call  head 
parenthesis head optional 
want dereferencing operator perform dot_operator 
dot_operator high precedence dereferencing operator  parenthesis  dot_operator perform first produce error 
next paragraph  will shortcut notation avoid worry parenthesis 
operator pointer simplify notation specify member struct class 
arrow_operator arrow_operator combine action dereferencing operator dot_operator specify member dynamic struct object point give pointer 
example  assignment statement change number first node write simply  assignment statement previous mean form normally
look pointer member last node list show display 
last node word null write pointer 
display fill position phrase  end marker   end marker  expression 
program constant null end marker signal end link list 
null special define constant part language part required library 
null typically coincide purpose 
give value pointer variable value 
prevent inadvertent reference memory  null node link list 
null address memory location 
second category end marker 
program step list node show display  program reach node contain null  know come end list 
constant null actually number  prefer think spell null 
clear mean specialpurpose value assign pointer variable 
definition identifi null number standard_library  iostream cstddef  include directive iostream cstddef suitable library null 
using_directive need order null program code 
require namespace std   code likely require like namespace detail follow  definition null handle preprocessor  replace null 
compiler actually see  null  namespace issue  using_directive need 
pointer link list arrow_operator arrow_operator arrow_operator arrow_operator specify member struct member class object point pointer variable 
syntax follow  refer member struct object point 
member refer give 
example  suppose follow definition  
null  double null  constant null assign pointer variable pointer type 
null null special constant value give value pointer variable value 
null assign pointer variable type 
identifi null define number library  include library header_file cstddef library header_file iostream 
constant null actually number  prefer think spell null 
null number  equally valid 
resolve problem introduce nullptr 
nullptr null pointer 
example  write  double nullptr  nullptr nullptr special value way null  only assign pointer 
nullptr differentiate null pointer number 
el est exerc ise 
suppose program contain follow type definition  
pointer link list 
suppose program contain type definition code give self test exercise 
code create node contain string  sally  
code add order set value member variable next node equal null 
suppose program contain type definition code give self test exercise 
assume value pointer variable change  destroy variable point return memory freestore reuse create variable 
give follow structure definition  struct 
link list list show display call link list 
link list list node node member variable pointer point next node list 
first node link list call pointer variable point first node name 
note pointer name list only point list 
last node special  special property 
last node null value member pointer variable 
test see node last node  need only test see pointer variable node equal null 
goal section write basic function manipulate link list 
variety  simplify notation  will simple type node display 
node will contain only integer pointer 
node pointer type definition will follow  struct node 
warm exercise  let see construct start link list node type 
first declare pointer variable  call  will point link list  nodeptr  
notice pointer member set equal null 
last list first list 
stage  link list look like null list build purely ad hoc way 
large link list  program able add node systematic way 
next simple way insert node link list 
insert head list subsection assume link list contain node  develop function add
first parameter insertion function_will call reference parameter pointer variable point link list  pointer variable point first link list 
parameter will give store
function_declaration insertion function follow  void  int  link list argument keep pointer variable pointing link list 
pointer variable way link list 
write function take link list argument  pointer point link list link list argument 
pointer link list insert link list  function_will new_operator create
data copy insert list 
insert nod way  will first list last 
variable name  local pointer variable point
call local pointer variable  refer 
complete process summarize follow  pseudocode function 
create variable point 
place datum
link member point first original link list 
pointer variable_name point
display contain diagram algorithm 
step diagram express assignment statement    complete function definition give display 
null display function add head link list function_declaration 
function definition 
pointer link list will want allow possibility list contain
example  shopping list buy week 
list call empty list 
link list name name pointer point list  empty list
specify empty list  pointer null 
pointer variable suppose point link list want list empty  set value follow  null  design function manipulate link list  check see work empty list 
able add special case empty list 
design function apply empty list  program design handle empty list way avoid completely 
fortunately  empty list treat just_like list 
example  function display design nonempty list model  check will show work empty list
pitfall lose node tempt write function definition display pointer variable construct local pointer variable 
try  start function follow   point construct  contain correct  point pointer  suppose
leave attach rest list set pointer member give point first list  display show situation value 
illustration reveal problem 
proceed way  point contain 
name pointer pointing chain pointer end  way program reference
program pointer point node  access node  node 
simply way refer node 
situation tie memory duration program 
program lose node memory  significant memory leak result program run memory  cause abnormal termination 
bad  memory leak lose node node link list display lose node 
avoid lost node  program keep pointer pointing list  pointer pointer variable like 
search link list next will design function search link list order locate
will type  call  previous subsection 
function_will return pointer point first contain integer 
contain integer  function_will return pointer null 
way  program test see integer list check see function_return pointer value equal null 
function_declaration header comment function follow  nodeptr  int target   pointer point link list 
pointer variable last null 
list empty  null 
contain target  function_return null 
will local pointer variable  call here  move list look target 
only way move link list  structure node pointer  follow pointer 
will start here point first move pointer follow pointer
pointer link list diagram display 
empty list present minor problem clutter discussion  will first assume link list contain least
later will come back sure algorithm work empty list
search technique yield follow algorithm  pseudocode search function link list 
next point pointer member currently point
pointer member currently point give expression move next  want change point point name pointer member variable 
follow will move pointer next list   put piece yield follow refinement algorithm pseudocode  preliminary version code search function  target 
test see point last test see member variable link equal null 
null still back take care empty list 
check code  find problem empty list 
list empty  equal null follow expression undefined  
pointer link list null  point node  member name datum member name link 
special case empty list 
complete function definition give display 
display function locate node link list function_declaration 
pointer variable last node null 
list empty  head null 
node contain target  function_return null 
function definition 
iterator object iterator class simple  array index pointer 
pointer simple example iterator 
pointer prototypical example iterator 
basic idea easily see context link list 
pointer iterator move link list node time start head list cycling node list 
general outline follow   want node point head pointer head node link list link name member variable node point next node list 
example  output datum node link list kind discuss  node  
definition node give display 
insert remove node inside list next design function insert specified place link list 
want node order  numeric order alphabetical order  simply insert beginning end list 
will design function insert specify link list 
assume function program part correctly place pointer call pointing link list 
want place point  illustrate display 
technique work node kind datum  concrete  type node previous subsection 
type definition give display 
function_declaration function want define void insert  int   point link list 
set way function display 
difference function now wish insert head list  inserting middle list pointer link list display insert middle link list head point 
way insertion show display express follow code  link list   link list  
insertion end comparison array remove order assignment statement critical 
first assignment want pointer value change 
complete function give display 
code function insert  will see work correctly point last list 
insert will work insert beginning link list 
function give display insert beginning list 
function insert maintain link list numerical order alphabetical order ordering 
squeeze  correct position simply adjust pointer 
true matter long link list list want
array  extreme case array copy order room correct spot 
overhead involve position pointer  insert link list frequently efficient insert array 
remove link list easy 
display illustrate method 
once pointer discard node link list display function add node middle link list function_declaration 
function definition 
pointer link list display remove 
osition pointer discard point delete  position pointer point delete 
change link list point  will change link list point  link list 
point link list want point second  identical copy link list  assignment statement will work 
copy entire link list
alternatively  overload assignment mean want mean 
write type definition node pointer link list 
call type nodetype call pointer type pointertype 
link list will list letter 
link list normally give give pointer point first list  empty list first 
pointer normally represent empty list 
suppose program contain follow type definition pointer variable declaration  struct 
suppose point type link list 
write code will point next link list 
suppose program contain type definition pointer variable declaration self test exercise 
suppose point type link list last list 
write code will delete point 
code execute  link list will link list 
choose answer explain
large array large list hold type object  insert know location middle link list compare insertion array
efficient
efficient c
dependent size list 
pointer link list variation link list subsection give hint data_structure create node pointer 
briefly additional data_structure  doubly link list binary tree 
ordinary link list allow move list only direction follow link 
doubly link list link  link point next point previous 
diagrammatically  doubly link list look like sample list display 
node class doubly link list follow  struct 
single pointer node  doubly link list normally pointer end node 
call pointer front back  choice front back arbitrary 
definition constructor function doubly link list class_will change singly link case accommodate extra link 
tree data_structure structure show display 
tree reach node top root node path follow link 
note cycle tree 
follow link  eventually  note node link point display doubly link list front back node link list display binary tree root
null node value null 
sort tree call binary tree  node exactly link 
kind tree number link node  binary tree common case 
tree form link list  link pointer way similar link list 
definition node type binary tree essentially doubly link list  link name form word leave right 
following node type construct binary tree  struct treenode 
display  pointer name root point root node  top node  
root node serve purpose similar head node ordinary link list display 
node tree reach root node follow link 
term tree like misnomer 
root top tree branching structure look like root branching structure tree branching structure 
secret terminology turn picture display upside
picture resemble branching structure tree root node tree root begin 
pointer link list nod end branch link instance variable set null know leaf node  terminology now sense 
room pursue topic book  binary tree efficiently store retrieve datum 
link list class videonote walkthrough link list class precede example create link list struct hold content node list 
possible create data_structure class struct 
logic identical syntax define class substitute place struct 
display illustrate define node class 
datum variable declare private principle hiding  public method create access data value next node link 
display create short list node insert node display interface file node class header_file 
interface node class behave similarly struct define display namespace linkedlistofclasse 
pointer link list 
function logically identical function define display constructor define class set
matthew link list application 
section give sample
link list give implementation structure know stack queue 
section regular link list doubly link list 
stack stack structure retrieve reverse order store 
suppose place letter     stack 
take letter stack  will remove order     
stack diagram display 
show display stack
pointer link list think stack hole ground 
order stack  first remove item top want 
reason stack call last first lifo data_structure 
stack language processing task 
will discuss computer system stack keep track function_call 
here will only simple application 
goal example show link list technique implement specific data_structure  stack simple example link list 
need read understand example 
programming example stack interface stack class give display 
stack store datum type char 
define similar stack store datum type 
basic operation perform stack  add item stack remove item stack 
add item call push item stack  call member_function header_file 
interface class stack  class stack symbol 
remove item stack call pop item stack  call member_function pop 
name push pop derive way visualize stack 
stack analogous mechanism hold plate cafeteria 
mechanism store plate hole countertop 
spring plate tension adjust only top protrude countertop 
sort mechanism stack data_structure  datum write plate violate health law  still analogy 
add stack  put top plate  weight push spring 
remove pop view 
display show simple program illustrate stack class
program read word letter time place letter stack 
program remove letter write application program 
pointer link list 
discard input remain current input line character return enter 
discard return   end sample dialogue enter word  straw write backward wart enter word  write backward 
implementation screen 
datum remove stack reverse order enter stack  output show word write backward 
show display  stack class implement link list head list serve top stack 
member variable top pointer point head link list 
pointer link list 
write definition member_function push self test exercise 
give algorithm task 
code push member_function essentially function show display  member_function push pointer name place pointer name head 
empty stack just empty link list  empty stack implement set pointer equal null 
once realize null represent empty stack  implementation default constructor member_function empty obvious 
definition copy_constructor bit complicated technique discuss 
detail leave selftest exercise 
pop member_function first check see stack empty 
stack empty  proceed remove character stack 
set local_variable equal symbol stack 
follow  char  symbol node variable  pointer 
pointer move follow statement   pointer move  temporary pointer  call 
node remove follow call delete  delete  node remove link list member_function pop destroy call delete 
destructor need remove item stack call pop 
node will memory return freestore 
give definition member_function push class stack display 
give definition copy_constructor class stack display 
queue stack last first data_structure 
common data_structure queue  handle datum first first fifo fashion 
queue behave exactly line people wait bank teller service 
people serve order enter line queue 
operation queue diagram display 
queue implement link list manner similar implementation stack class 
queue need pointer head list end link list  action take place location 
easy remove node head link list end link list 
implementation will remove node head list will now call front list will add node end list  will now call back list back queue 
queue queue first first data_structure  datum item remove queue order add queue 
display queue
pointer link list programming example queue interface queue class give display 
queue store datum type char 
define similar queue store datum type 
basic operation perform queue  add item end queue remove item front queue 
display interface file queue header_file 
interface class queue  class queue symbol 
return false
item add end 
display show simple program illustrate queue class
program read word letter time place letter queue 
program remove letter write screen 
datum remove queue order enter queue  output show letter word order user enter
contrast application queue similar application stack give display 
discard input remain current input line character return enter 
discard return   end pointer link list sample dialogue enter word  straw enter  straw enter word  enter  
implementation show display  queue class implement link list head list serve front queue 
member variable front pointer point head link list 
node remove head link list 
member variable back pointer point node end link list 
node add end link list 
empty queue just empty link list  empty queue implement set pointer front back equal null 
rest detail implementation similar see
pointer link list 
el est exe rc ise 
give definition copy_constructor class queue display 
give definition destructor class queue display 
summary node struct class object member variable pointer variable 
node connect member pointer variable produce data_structure grow shrink size program run 
stack implement link list 
queue implement link list 
answer self test exerci se 
sally sally answer self test exercise note mean
similarly  mean 
sufficient delete node link list 
insert list  operation  pointer assignment  regardless list size 
insert array  average move half array entry insert data 
small list  answer 
practice program practice program generally solve short program directly apply programming principle present
follow program create link list name  iostream 
add code function
output order name list 
delete node joule  output modify list 
delete list 
class member_function set name link node list 
add constructor set name link 
programming project programming project require problem solve practice program solve way 
visit complete programming project online instant feedback 
write void function take link list integer reverse order
function_will call reference parameter pointer head list 
function call  pointer will point head link list original list  reverse order original list 
note function_will create destroy
will simply rearrange 
place function suitable test program 
write function_call take call reference argument pointer variable point head list value type_int 
list assume sort number head small number  number node programming project small  forth 
function_return pointer head list contain original list 
long list sort small large value 
note function_will create destroy
function_call end  pointer variable argument value null 
design implement class object represent polynomial 
polynomial anxn + + 
node will contain int value power int value corresponding coefficient 
class operation addition  subtraction  multiplication  evaluation polynomial 
overload operator +   addition  subtraction  multiplication 
evaluation polynomial implement member_function argument type_int 
evaluation member_function return value obtain plug argument perform operation 
include constructor  default constructor  copy_constructor  constructor single argument type_int produce polynomial only constant term equal constructor argument  constructor argument type_int produce term polynomial coefficient exponent give argument 
include member_function input output polynomial 
user input polynomial  user type following  + + 
example  polynomial + + input + + input + + + + 
pointer link list coefficient negative  minus sign place plus sign  follow example  + + + minus sign polynomial  second example  apply only first coefficient  negate entire polynomial 
polynomial output format 
case output  term zero coefficient output 
simplify input  assume polynomial enter line will constant term 
constant term  user enter constant term  following  + + project will redo programming project list array 
note list double item 
imply change member_function 
member follow  default constructor  member_function name add double list  test full list boolean value_function name full  friend_function overload insertion operator 
hard version programming project write class_name list  similar project  follow member_function  default constructor  list  double list    return first item list double list    return last item list double   return current  item return  current return first item list  double   insert list increment private  variable count 
will need follow struct list class list nod  struct node 
incremental development essential project size  exception 
write definition list class  implement member
place class definition file 
include   file contain int file 
will find syntax_error typographical error cause untold difficulty attempt implement member check 
implement compile member time  write test code function 
follow procedure determine suitor marry 
first  suitor line assign number 
first suitor number  second number  last suitor  number
start first suitor count suitor line letter name third suitor eliminate win hand remove line 
eve continue  count suitor  eliminate third suitor 
reach end line continue count beginning 
example  suitor elimination process proceed follow  initial list suitor  start count suitor eliminate  continue count suitor eliminate  continue count suitor eliminate  continue count suitor eliminate  continue count suitor eliminate  lucky winner write program create circular link list node determine position stand marry princess suitor 
circular link list link list link field last node list refer node head list 
program simulate elimination process delete node correspond suitor eliminate step process 
possibility need delete head  node list 
videonote solution programming project pointer link list redo first time programming project 
dynamic array store list user ids computer station  link list 
node list contain station number user person log station 
log computer station  entry exist link list computer station 
modify rewrite queue class display simulate arrival department motor vehicle dmv counter 
customer arrive  give ticket number start incremente
service agent free  next ticket number call 
system result fifo queue customer order ticket number 
write program implement queue simulate customer enter leave queue 
input queue ticket number timestamp ticket enter queue 
ticket corresponding timestamp remove service agent handle next 
program length time last customer spend wait queue 
time ticket remove queue  update time output average last customer estimate long will take next handle 
queue  output line empty 
code compute timestamp base computer clock give
function_return number january   implementation  ctime 
sample execution show here  line empty 
enter   simulate arrival    help next   quit 
enter   simulate arrival    help next   quit 
enter   simulate arrival    help next   quit 
enter   simulate arrival    help next   quit 
estimate wait 
enter   simulate arrival    help next   quit 
estimate wait 
enter   simulate arrival    help next   quit 
enter   simulate arrival    help next   quit 
estimate wait 
follow figure call graph 
circle call node  line call edge 
edge connect node 
interpret graph maze room passage 
node think room  edge connect room
note node edge graph 
north start
finish videonote solution programming project pointer link list write program implement maze node pointer 
node graph will correspond node code implement form class struct 
edge correspond bidirectional link point node
start user node
user goal reach finish node
program output possible move north  south  east  west direction 
sample execution show here 
room maze twisty little passage  alike 
rpn  operator come operand normal format operator operand call infix notation 
start empty stack  rpn calculator implement follow rule  number input  push stack 
modify stack implement rpn calculator 
output error_message operand stack give operator 
here sample input output equivalent +  + programming project top stack 
complete programming project attempt
write program convert fully parenthesize mathematical infix expression equivalent postfix expression evaluate postfix expression 
fully parenthesize expression parenthese surround operator operand 
start empty stack string store operator empty queue string store postfix expression  conversion implement follow rule  input  ignore
final operator pop stack  queue contain equivalent postfix expression 
solution programming project evaluate
will need convert string object integer 
function convert string string  atoi function convert string integer 
refer detail 
sample output show + translate postfix expression +  expression evaluate 
recursion function task case study  vertical number close look recursion pitfall  infinite recursion stack recursion pitfall  stack overflow recursion iteration think recursively recursive design technique case study  binary search example recursive think programming example  recursive member_function function value general form recursive function return value programming example  power function summary answer self test exercise practice program programming project lecture cosmology structure solar system  william james accost little old lady 
james  wrong 
theory   little old lady 
wish demolish absurd little theory bring bear masse scientific evidence command  james decide gently dissuade opponent see inadequacy position 
little old lady crow triumphantly 
ross  constraint variable syntax introduction encounter case circular definition work satisfactorily 
prominent example definition statement 
example  definition statement contain small statement 
possibility small statement statement  kind circularity definition 
definition statement  write complete detail  will contain reference statement 
mathematic  kind circular definition call recursive definition 
 function define term way 
put precisely  function definition contain call
case  function recursive 
discuss recursion generally discuss recursion programming problem solve technique 
prerequisite section material only 
section material 
jorge luis borge  garden fork path write function solve task  basic design technique break task subtasks 
turn least subtasks small example task 
example  task search array value  divide subtask search first half array subtask search second version original task 
subtask small version original task accomplish  solve original task recursive function 
take little training easily decompose problem way  once learn technique  quick way design algorithm  ultimately  function 
begin simple case study illustrate technique 
recursion  function definition contain call function define 
case  function recursive 
case study vertical number case study design recursive void function write number screen digit write vertically  example  write problem definition 
algorithm design case simple 
number write only digit long  just write number 
simple case still important  let keep track
simple case   write number screen 
now let typical case number write consist digit 
suppose want write number vertically result way decompose task subtask following  output digit last digit like output last digit  example 
subtask small version original task  implement subtask recursive call 
subtask just simple case list early 
outline algorithm function parameter give follow pseudocode  endl  recursive subtask 
order convert pseudocode code function  need translate follow piece pseudocode expression  number last digit remove last digit recursive function task expression easily translate expression integer division operator follow  number last digit remove last digit example  evaluate  evaluate 
factor influence selection subtask algorithm 
easily compute argument recursive call show color pseudocode 
number last digit remove easily compute 
alternative  tempt divide subtask follow  output first digit
perfectly valid decomposition task subtasks  implement recursively 
difficult calculate result remove first digit number  easy calculate result remove last digit number 
reason choose sort decomposition subcase involve recursive call 
successful definition recursive function include least case involve recursive call case involve least recursive call 
aspect recursive algorithm discuss subsection follow case study 
code now put piece produce recursive function show display 
next subsection will explain detail recursion work example 
argument substitute parameter function definition  body function execute 
substitution code execute follow  recursive function task 
 logical expression statement false  part execute 
part begin follow function_call   
execution reach recursive call  current function computation place suspend animation recursive call execute 
recursive call finish  execution suspend computation will_return point  suspend computation will continue point 
recursive call  handle just_like function_call 
argument substitute parameter body function execute 
substitute computation  suspend active  follow  endl  
see  part begin recursive call 
argument recursive call  
point suspend computation wait resume computer begin execute call  handle just_like previous call 
argument substitute parameter  body function execute 
point  computation look like following  endl  digits endl  long  
body function execute time  happen 
 boolean expression statement true  statement execute 
statement simply statement write argument screen  call write write screen end call 
call end  suspend computation wait end resume suspend computation leave show following  endl  
end computation  suspend computation wait resume 
last suspend computation resume  situation follow  output digit 
sure digit   write screen line  order 
output digit close look recursion definition function recursion 
evaluate function_call write 
treat just_like function_call see previous
just substitute argument parameter execute code body function definition 
reach call  simply repeat process time 
computer keep track call following way 
begin execute code 
encounter call  temporarily computation 
know result call proceed 
need continue computation later proceed evaluate call 
call complete  computer return finish outer computation 
language place restriction call function definition 
order function definition useful  design call function ultimately terminate piece code depend recursion 
function call call call function
recursion work recursion end recursion process repeat number time 
process will terminate eventually call depend recursion 
general outline successful recursive function definition follow  
case function accomplish task recursive call accomplish small version task 
case function accomplish task recursive call 
case recursive call call base case case 
statement determine case will execute 
typical scenario original function_call execute case include recursive call 
recursive call turn execute case require recursive call 
number time recursive call produce recursive call  eventually case apply 
call function eventually lead stopping case  function_call will end infinite chain recursive call 
design function display 
function call  call produce recursive call small argument 
continue recursive call produce recursive call argument 
argument  function_call end produce recursive call process work way back original call end 
general form recursive function definition general outline successful recursive function definition follow  case include recursive call function define 
recursive call solve  small  version task perform function define 
case recursive call call base case case 
infinite recursion example function discuss previous subsection  series recursive call eventually reach call function involve recursion stopping case reach 
hand  recursive call produce recursive call  call function_will  theory  run
call infinite recursion 
practice  function_will typically run computer run resource program terminate abnormally 
phrase way  recursive definition recursive way  like lady explanation universe give start call function_will end  frustration 
example infinite recursion hard come
following syntactically correct function definition  result attempt define alternative version function  
embed definition program call function  compiler_will translate function definition machine code execute machine code 
definition reasonableness
output argument vertical  first output last digit output last digit 
call  function_will produce infinite sequence recursive call 
call  execution will execute recursive call  equivalent 
execution recursive call will  turn  execute recursive call  
definition stopping case  process will proceed computer run resource 
write recursive void function parameter positive integer write number asterisk   screen line 
write recursive void function parameter  positive integer 
call  function write argument screen backward 
argument  output following screen  
write recursive void function take single int argument write integer   
write recursive void function take single int argument write integer   
stack specialized kind memory structure analogous stack paper 
recursive function task analogy inexhaustible supply extra blank sheet paper 
place stack  write sheet paper place top stack paper 
place stack  clean paper take  write paper place top stack 
straightforward way  place stack 
stack accomplish simple procedure 
top paper read  long need  throw away 
complication  only top paper accessible 
order read  third top  top sheet throw away 
last put stack first take stack  stack call last first lifo memory structure 
stack  computer easily keep track recursion 
function call  paper take 
function definition copy paper  argument plug function_parameter 
computer start execute body function definition 
encounter call  computation order compute call 
compute call  finally complete call  continue computation 
write paper place stack 
paper call 
computer write second copy function definition paper  plug argument function_parameter  start execute call 
call recursively call copy  repeat process stack paper call 
process illustrate early subsection entitle  trace recursive  call stack section  illustration computation place top demonstrate action stack 
process continue call function complete computation produce call 
happen  computer turn attention top paper stack 
contain partially complete computation wait computation just end 
possible proceed suspend computation 
suspend computation end  computer discard paper  suspend computation stack computation top stack 
computer turn attention suspend computation now top stack  forth 
process continue computation bottom complete 
depend call function definition write  stack grow shrink fashion 
notice sheet stack only access last first fashion  exactly need keep track call 
suspend version wait completion version directly stack 
just analogy 
computer portion memory piece paper 
content portion memory  sheet paper  call activation frame 
activation frame handle last first manner just discuss 
activation frame contain allow computer act frame contain stack stack last first memory structure 
first item reference remove stack last item enter stack 
stack computer keep track recursion purpose 
pitfall stack overflow limit size stack 
long chain function call call result call  call produce call  forth  call chain will cause activation frame place stack 
chain long  stack will attempt grow limit 
error condition know stack overflow 
receive error_message stack overflow  likely function_call produce excessively long chain call 
common cause stack overflow infinite recursion 
function recurse infinitely  will eventually try stack exceed stack size limit 
task accomplish recursion way recursion 
example  display contain nonrecursive version function give display 
nonrecursive version function typically loop loop sort place recursion 
reason  nonrecursive version refer iterative version 
definition function write vertical give display replace version give display  output will
true case  version function simple iterative version 
recursively write function_will run slow storage equivalent iterative version 
iterative version write vertical give display look like storage computing recursive version display  version actually comparable storage comparable amount computing 
recursive version storage run slow  computer deal work manipulate stack order keep track recursion 
system automatically  recursion job programmer easy produce code easy understand 
will see example self test exercise programming project  recursive definition simple clear  time  iterative definition simple clear 
el est exe cis es 
program produce error_message stack overflow  likely source error 
write iterative version function cheer define self test exercise 
write iterative version function define self test exercise 
write iterative version function define self test exercise 
trace recursive solution self test exercise 
trace recursive solution self test exercise 
anonymous general form recursive function return value recursive function see void function  recursion limit void function 
recursive function return value type 
technique design recursive function return value basically void function 
outline successful recursive function definition return value follow 
case void function  argument recursive call program example power function introduce predefine pow compute power 
example  return  follow set variable equal  double   pow take argument type double return value type double 
display contain recursive definition similar work type_int double 
call power 
example  follow will set value equal   int   recursive function value display recursive function power 
sample dialogue power power power power reason define power simple example recursive  situation power preferable pow 
pow return_value type double  only approximate quantity 
power return_value type_int  exact quantity 
situation  need additional accuracy power 
recursion definition power base follow formula  equal value expression power  definition power give display return value power   
case equal stopping case 
 power  simply return 
let see happen power call sample value 
first follow simple expression  call  value set equal  value set equal  code body definition execute 
value legal value  statement execute 
value great  return_statement call return 
following set value equal  int   
call  value set equal  value set equal  code body definition execute 
value great  follow return_statement determine value_return  return power   
point computation suspend  copy suspend computation place stack  computer start call compute value 
see  value 
determine value  computer replace expression value resume suspend computation 
resume computation determine final value return_statement follow    
value  calculate follow      
calculate value_return stopping case  resume recently suspend computation determine value 
computer complete suspend computation  value compute value plug suspend computation  reach complete computation original call  
detail entire computation illustrate display 
sequence recursive call final value compute 
redefine power work negative exponent 
order will change type value_return double 
declaration header comment redefined version power follow  double int  
anonymous recursive design technique define recursive function want continually aware stack suspend computation 
power recursion come ignore detail let computer bookkeeping
example power display 
way think definition power follow   return power equal correct value return  computation will reach case will correctly compute stopping case 
check recursive part definition correct  need check chain recursive call will reach stopping case stopping case return correct value 
design recursive  need trace entire sequence recursive call instance program 
return value  need confirm follow property satisfied  
infinite recursion 
case return correct value case 
case involve recursion  recursive call return correct value  final value_return function correct value 
example  function power display  
infinite recursion  second argument  decrease recursive call  chain recursive call eventually reach case  stopping case 
infinite recursion 
criterion function return value recursion 
case return correct value case  only case 
call form return  correct value 
stopping case return correct value 
case involve recursion recursive call return correct value  final value_return function correct value  only case involve recursion 
  return 
need check order sure definition power correct 
need give criterion check correctness recursive function return value 
basically  rule apply recursive void function 
show recursive void function definition satisfie follow criterion  will know void function perform correctly  criterion void function 
infinite recursion 
case perform correct action case 
case involve recursion  recursive call perform action correctly  entire case perform correctly 
case study search example recursive thinking case study develop recursive function search array find contain specify value 
example  array contain list number credit card long valid 
store clerk need search list see customer card valid invalid 
display discuss simple method search array simply check array_element 
section will develop method fast search sorted array 
index array integer 
order task search array easy  assume array sort 
know following  
example  search credit card number  array index serve record number 
array index index hold phone number report suspicious card 
seek value array  will want function tell value array 
problem definition will design function call reference parameter return outcome search 
parameter  call  will type bool 
value will set true 
value parameter  call  will set index value key denote value search task accomplish formulate precisely follow  precondition  sort increase order 
postcondition  key value final index  false  key true 
algorithm design now let proceed produce algorithm solve task 
will help visualize problem concrete term 
suppose list number long take book list
invalid credit card number distribute store access computer 
clerk hand credit card  check see list invalid 
open book middle see number
small middle number  work backward beginning book 
number large middle number  work way end book 
idea produce first draft algorithm  false 
searching short list small version task design algorithm perform  algorithm naturally lend algorithm first version recursion recursion 
small list search recursive call algorithm
pseudocode bit imprecise easily translate code 
problem recursive call 
recursive call show  search  search +  parameter algorithm first refinement stopping case algorithm final version implement recursive call  need parameter 
recursive call specifie subrange array search 
case element index 
case element index 
extra parameter will specify first last index search  will call first parameter low high index   express pseudocode precisely follow  search first last following  false 
recursive call will value first last 
example  first recursive call set first equal last equal calculate value 
recursive algorithm  ensure algorithm end produce infinite recursion 
seek number list  recursive call process terminate  need way detect number list 
recursive call  value first increase value last decrease 
pass first actually large last  will know index leave check number array 
add test pseudocode  obtain complete solution show display 
code now routinely translate pseudocode code 
result show display 
function search implementation recursive algorithm give display 
diagram function perform sample array give display 
display pseudocode binary search int  
locate value  
recursion portion program contain code fill sort array
exact detail irrelevant 
display execution function search 
recursion solve general problem notice function search solve general problem original task 
goal design function search entire 
function_will let search interval specify index bound
common design recursive function 
frequently  solve general problem order able express recursive algorithm 
case  only want answer case set equal 
recursive call will set value 
check recursion subsection entitle  recursive design technique   give criterion check ensure recursive void function definition correct 
let check function search give display 
infinite recursion  recursive call  value increase value decrease 
case perform correct action case  case  
let case 
case correct 
case involve recursion  recursive call perform action correctly  entire case perform correctly  case recursive call  
need check case 
first suppose 
case  array sorted  know array  element 
function need only search element  exactly recursive call search      
recursive call correct  entire action correct 
next  suppose 
case  array sorted  know array  element 
function need search only element  exactly recursive call thinking recursively 
recursive call correct  entire action correct 
case function perform correct action assume recursive call perform correct action 
function search pass test  recursive function definition 
efficiency binary search algorithm extremely fast compare algorithm simply try array_element order 
binary search  eliminate half array consideration right start 
eliminate quarter  eighth array  forth 
saving add dramatically fast algorithm 
array element  binary search will need compare element
simple serial search compare array_element average will compare array_element
large array dramatic saving will
array element  binary search will need compare only array_element value  compare average simple serial search algorithm 
iterative version function search give display 
system  iterative version will run efficiently recursive version 
algorithm iterative version derive mirror recursive version 
iterative version  local_variable mirror role parameter recursive version  name
example illustrate  sense derive recursive algorithm expect later convert iterative algorithm 
iterative version function_declaration 
function definition void int  int  int  
programming example recursive member_function member_function class recursive 
member function recursion way ordinary function
display contain example recursive member_function 
class bankaccount display class_name bankaccount define display  overload member_function name update 
update argument post year simple interest bank account balance 
update take int argument number year 
member_function update account post interest year 
update parameter  call year  follow algorithm  number year  case  call function_name update argument 
number year great  case  recursive call post worth interest  call function_call update argument post year worth interest 
function name void   file output_stream 
infinite recursion  recursive call reduce number number eventually  stopping case 
infinite recursion 
case perform correct action case  case 
case produce correct action  simply call overloaded member_function call update  check correctness function 
case involve recursion  recursive call perform correctly  entire case perform correctly  recursive case work correctly  recursive call correctly post worth interest  need post additional year worth interest call overloaded zero argument version update will correctly post year worth interest 
recursive call perform correct action  entire action case will correct 
example  overload update function_name update  take argument take single argument 
confuse call function_name update 
function compiler just coincidentally happen name 
definition function update argument include call version update take argument  recursive call 
only call version update exact function_declaration recursive call 
see involve here  note name version update take argument  name update  definition recursive version update read follow  
recursion overloading confuse recursion overloading 
overload function_name  give function name 
definition function include call recursion 
recursive function definition  definition function include call exact function exact definition  function coincidentally name 
error confuse overloading recursion  legal 
simply question terminology straight communicate clearly programmer understand underlie process 
write recursive function definition follow function  
write iterative version argument member_function display 
summary problem reduce small instance problem  recursive solution likely easy find implement 
require allow proper recursive call  small problem exactly problem give task 
example  binary search problem  task search entire array  recursive solution algorithm search portion array part 
answer self test exerci se 
error_message stack overflow tell computer attempt place activation frame stack allow system 
likely cause error_message infinite recursion 
recursion unwind  output obtain recursion wind 
trace exercise   code execute
function factorial function  write 
practice program practice program generally solve short program directly apply programming principle present
write recursive function definition function parameter type_int return nth fibonacci number 
see programming project definition fibonacci number 
embed function program test
write recursive version function sort program display 
embed function program test
write recursive version search function display 
people room  integer great equal 
person shake hand once person 
total number handshake room 
write recursive function solve problem  follow header  return total number handshake people 
will define suitable condition 
test function palindrome nonpalindrome 
programming project programming project require problem solve practice program solve way 
visit complete programming project online instant feedback 
formula compute number way choose set follow  videonote solution practice program 
recursion factorial function 
embed function program test
write recursive function argument array character argument bound array index 
function reverse order entry array index bound 
example  array bound  function run array_element embed function program test
fully debug function  define function take single argument array contain string value reverse spelling string value array argument 
function_will call recursive definition first part project 
embed second function program test
write iterative version recursive function programming project 
embed program test
videonote solution practice program 
write recursive function sort array integer ascend order follow idea  place small element first position  sort rest array recursive call 
recursive version selection sort algorithm discuss 
function sort 
tower hanoi  story buddhist monk who play puzzle stone disk 
story claim monk finish move disk post second third post  time will end 
task move disk time first post second 
disk move post post  subject rule place large disk small disk 
spare third post solution possible 
task write recursive function instruction solution programming project problem 
graphic output sequence instruction will solve problem 
technique move disk third post second post  first disk spare 
puzzle solve 
only decide nonrecursive case recursive case output instruction 
game jump consist board positive integer row  first column  contain 
number represent cost enter column 
here sample game board  
number column represent cost enter column 
start game first column type move 
move adjacent column jump adjacent column land column
cost game sum cost column visit 
board show way end 
start first column  cost 
jump  jump  move total cost + + 
cheap path move  jump  jump  total cost + + 
write recursive solution problem compute low cost game output value arbitrarily large game board represent array 
program output actual sequence jump  only low cost sequence 
sure solution work small array  test board large large value feel scalability efficiency solution 
suppose buy chocolate bar vend machine
inside chocolate bar coupon 
redeem coupon chocolate bar machine 
like know chocolate bar eat  include redeem coupon  dollar 
example   initially buy chocolate bar 
give coupon 
redeem coupon additional chocolate bar 
additional chocolate bar coupon  
recursion now total coupon add leave original purchase 
give redeem final chocolate bar 
result now chocolate bar leftover coupon 
write recursive solution problem input user number dollar spend chocolate bar output chocolate bar collect spend money redeem coupon possible 
recursive function_will base number coupon
set item    
example  give set   permutation              write recursive function generate permutation set number 
general outline solution give here  implementation
program_will require store set permutation number implement way example  link list node  link list vector  array  program call recursive function set size  print result set permutation
solution first leave th item set 
recursively find permutation set item 
insert nth item position permutation  set permutation include th item 
base case only item set  case solution simply permutation single item 
example  find permutation   
leave recursively find permutation set  
consist permutation  
next insert position permutation 
first permutation  insert front   
second permutation  insert front    
programming project 
word ladder game invent lewis carroll 
idea begin start word change letter time arrive end word 
word way english word 
example  start fish word ladder mast follow ladder  fish  wish  wash  mash  mast write program recursion find word ladder give start word end word  determine word ladder exist 
file online source_code book dictionary valid word 
file contain word 
program need find short word ladder word  word ladder will exist 
inheritance inheritance basic derived_class constructor derived_class pitfall  private member variable base pitfall  private member_function effectively inherit protect qualifi redefinition member_function redefining overload access redefined base function polymorphism late bind virtual_function virtual_function extended type compatibility pitfall  slicing problem pitfall  virtual member_function pitfall  attempt compile definition definition virtual member_function programming tip  destructor virtual inheritance detail function inherit assignment_operator copy_constructor derived_class destructor derived_class summary answer self test exercise practice program programming project appliance mean boot 
william shakespeare  king henry iv  part iii introduction object orient programming popular powerful programming technique 
abstraction know inheritance 
mean general form class define compile 
later  specialized version class define inherit property previous class 
facility inheritance version 
prerequisite section material 
section material addition   section 
carl gustav jung  integration personality powerful feature inheritance derive
inheritance process know derive create call base 
derive automatically member variable function base additional member_function additional member variable 
 note derive mean feature extra  add feature
derive base derive 
child parent author speak subclass superclass derive base
find term derive base confusing 
only mention effort help read text 
like control interrogate status device  door open  thermostat set degree computer 
easy accomplish consistent interface disparate device 
inheritance let way organize code duplication 
first  general concept device home automation system 
device model serial number 
device way query status 
model device variable model serial number  function status 
idea contain function property common possible device 
second  garage door 
specific type device automation system 
addition model  serial number  way query status like device  garage door device specific function open close door 
model garage door doordevice 
will need add openclose function
doordevice know return status device 
level generic device need return status specific device level know kind device work
need add function doordevice status close door  nice duplicate variable code manipulate model serial number write device 
similarly  thermostat device will model  serial number  way query status addition function set temperature 
define thermostatdevice function set temperature return status device  nice duplicate variable code manipulate model serial number write device 
solve problem inheritance 
case  doordevice  device thermostatdevice  device 
define doordevice thermostatdevice derived_class device  class programmer specify access model serial number define device need write code device deal variable 
time add specific code unique derived_class 
relationship class illustrate display 
once inheritance relationship define  create object type doordevice thermostatdevice will access function variable define device 
example  thermostat variable type thermostatdevice access model 
display example inheritance hierarchy home automation base parent device string model 
inherits model serialnumber device derive child thermostatdevice object type doordevice thermostatdevice include function variable define device  model serialnumber 
status function overridden 
doordevice object treat like device object  call status will invoke doordevice status function  device status function 
device know return status only derived_class return
work redefine code variable device 
specify status function behave bit differently 
define function base derive classse will see later option  redefine function override function 
case want override function 
object thermostat type thermostatdevice  treat thermostat like type device example  pass thermostat function parameter define type device  invoke status will call definition associate thermostatdevice definition associate device 
behavior important case device class know return status 
topic explore detail section 
discuss cd account specialized version saving account 
derive class cdaccount savingsaccount  automatically inherit savingsaccount public function variable create cdaccount object 
inheritance predefine class
stream file predefine class ifstream derive predefine class istream add member_function open close 
stream cin belong class input stream class istream  belong class input file stream belong ifstream  partly lack member_function open close derived_class ifstream 
derive class suppose design record keep program record salaried employee hourly employee 
natural hierarchy group class 
class people who share property employee 
employee who pay hourly wage subset employee 
subset consist employee who pay fix wage month week 
program need type correspond set employee  think term general concept employee useful 
example  employee name social security number  member_function set change name social security number will salaried hourly employee 
define class_call employee include employee  salaried hourly  class define class hourly employee salary employee 
display show possible definition class employee 
undifferentiated employee object  reason define class employee define derived_class kind employee 
function will definition change derived_class kind employee kind check 
reflect definition function class employee display 
little sense print check undifferentiated employee 
know employee salary detail 
implement function class employee program error_message call base_class employee object 
will see  derived_class will redefine function produce meaningful employee check 
class derive class employee will automatically member variable class employee name  ssn  
class derive class employee will member_function class employee     
inheritance display interface base_class employee header_file 
express derived_class inherit member variable member_function 
interface file class definition derived_class class employee give display hourlyemployee salariedemployee 
place class employee derived_class namespace 
require namespace  class  sense put
will first discuss derived_class hourlyemployee give display 
note definition derived_class begin like class definition add colon  reserved word public  name inheritance basic file  
only list declaration inherit member_function want change definition function 
display interface derived_class salariedemployee header_file 
inheritance base_class first line class definition  follow display class  public automatically receive public member variable member_function base_class employee 
add additional member variable member_function derived_class 
definition class mention member variable_name  ssn   object class member variable_name name  ssn  
member variable inherit class employee 
class declare additional member variable_name hour 
object class member variable_name name  ssn  net pay   hour 
note definition derived_class only list add variable 
variable define base_class mention 
just inherit variable class employee  class inherit function class employee 
class inherit function  ssn      class employee 
addition inherit variable function  derived_class add variable function 
variable declaration function list class definition 
example  derived_class add variable hour  add function_name    
show display 
note give declaration inherit function definition want change  reason list only function base_class employee 
now  worry detail constructor definition derived_class 
will discuss constructor next subsection 
implementation file derived_class  tion display  give definition add function 
note give definition inherit function definition function change derived_class  point discuss next 
definition inherit function change definition derived_class meaning derived_class base_class 
call redefine inherit function 
example  function redefine definition derived_class 
redefine
inheritance display derived_class hourlyemployee 
note allow drop const function redefine derived_class 
salariedemployee example derived_class class parent child class discuss derived_class  common terminology derive family relationship 
base_class call parent class 
derived_class call child class 
language inheritance smooth 
example  child class inherit member variable member_function parent class 
analogy carry step
class parent iteration call ancestor class 
class ancestor class class call descendant class
inherit member_function inherit member variable exception  mention derived_class  automatically derived_class 
explain text  mention inherit member_function derived_class want change inherit member_function 
interface class salariedemployee give display 
object declare type salariedemployee member_function member variable employee give class salariedemployee 
true class salariedemployee list inherit variable only list function class employee  namely  function print check  will change salariedemployee 
class salariedemployee  nonetheless  member variable_name  ssn   member variable salary 
notice declare member variable member_function class employee  name  order salariedemployee
class salariedemployee inherit automatically programmer
note class employee code common class hourlyemployee salariedemployee 
trouble write identical code time  once class hourlyemployee once class salariedemployee 
inheritance allow reuse code class employee 
constructor derived_class constructor base_class inherit derived_class  invoke constructor base_class derived_class constructor  need normally want 
constructor derived_class constructor base_class special way 
constructor base_class initialize datum inherit base_class 
constructor derived_class begin invocation constructor base_class 
special syntax invoke base_class constructor 
inheritance illustrate constructor definition class hourlyemployee give display 
follow reproduce minor change line break fit text column constructor definition class hourlyemployee take display   string  double  
portion colon initialization section constructor constructor 
part  invocation argument constructor base_class employee 
note syntax invoke base_class constructor analogous syntax set member variable  entry set value member variable invoke base_class constructor employee argument 
work initialization section  body constructor empty 
here reproduce constructor class hourlyemployee display  
constructor default zero argument version base_class constructor call initialize inherit member variable 
include invocation base_class constructor initialization section derived_class constructor 
constructor derived_class include version base_class constructor will invoke automatically 
follow default constructor class hourlyemployee employee omit equivalent version just discuss  
sort hold 
hourlyemployee derived_class class employee  object class hourlyemployee object class employee
argument type hourlyemployee function require argument type employee 
assign object class hourlyemployee variable type employee 
employee necessarily course  remark apply base_class derived_class 
object derived_class object base_class allow 
generally  object class type object ancestor class
class child derive class ancestor class grandchild derive class child  object class grandchild object class child object class grandchild object class ancestor
derived_class object member variable base_class 
derived_class constructor call  member variable need allocate_memory initialize 
allocation memory inherit member variable constructor base_class  base_class constructor convenient place initialize inherit member variable 
include call base_class constructor define constructor derived_class 
include call base_class constructor initialization section definition derived_class constructor  default zero argument constructor base_class call automatically 
class derive class class derive class object class create  first constructor class call  constructor call  finally remain action constructor take 
inheritance constructor derived_class derived_class inherit constructor base_class 
define constructor derived_class  include call constructor base_class initialization section constructor definition 
include call constructor base_class  default zero argument constructor base_class will automatically call derived_class constructor call 
pitfall private member variable base_class object class hourlyemployee display inherit member variable call name class employee display 
example  follow code set value member variable_name object joe josephine  
bit careful manipulate inherit member variable name 
member variable_name class hourlyemployee inherit class employee  member variable_name private member variable definition class employee 
mean name directly access only definition member private base_class accessible name definition member_function class  member_function definition derived_class 
class hourlyemployee member variable_name name inherit base_class employee  illegal directly access member variable_name definition member_function class definition hourlyemployee 
example  follow first line body member_function take display 
wonder need member_function set set value member variable 
comment will work 
member variable private member variable class employee  derived_class like hourlyemployee inherit variable  access directly 
public member_function access member variable correct way accomplish definition class hourlyemployee way display part display early 
name inherit variable private base_class explain need accessor function definition check simply variable_name name
mention private inherit member variable name 
public accessor mutator member_function define base_class 
accessor mutator function cover private member variable base_class access definition member_function derived_class wrong people 
hourly employee want change name   sorry name private member variable class  hourly employee  employee 
java  true  object class hourlyemployee object class employee 
law private member variable member_function privacy compromise 
private member variable class accessible member_function definition derived_class  anytime want access private member variable  simply create derived_class access member_function class  mean private member variable accessible who want put little extra effort 
adversarial scenario illustrate problem  big problem unintentional error  intentional subversion 
private member variable class accessible member_function definition derived_class  member variable change mistake inappropriate way 
inheritance will discuss possible way restriction private member variable base_class subsection entitle  protect qualifier  bit later
note private member_function just_like private variable term directly
case member_function  restriction dramatic 
private variable access indirectly accessor mutator member_function 
private member_function simply
just private member_function inherit 
private member_function just help function  limit class define 
want member_function help member_function number inherit class  just help function  member_function public 
classification member variable function allow access name derived_class anyplace class derived_class 
qualifier protect  private public  member variable member_function class  class function derived_class  effect member variable label private  derived_class variable access name 
example  class hourlyemployee derive base_class employee 
require accessor mutator member_function manipulate inherit member variable definition 
private member variable class employee label keyword protect private  definition derived_class employee simplify following  
derived_class hourlyemployee  inherit member variable   access mark protect oppose private base_class employee 
class derive class employee  member variable treat mark private 
member variable protect base_class act mark protect derived_class 
example  suppose define derived_class parttimehourlyemployee class hourlyemployee 
class parttimehourlyemployee inherit member variable class hourlyemployee  include member variable hourlyemployee inherit class employee 
class parttimehourlyemployee will member variable  
member variable mark protect class employee  definition function class parttimehourlyemployee 
derived_class derived_class derived_class   member variable mark protect treat mark private 
include discussion protect member variable primarily will see familiar
programming authority bad style protect member variable 
compromise principle hide class implementation member variable mark private 
member variable mark private  inherit member variable access derived_class function definition 
bad sound 
inherit private member variable access indirectly invoke inherit function read change private inherit variable 
authority differ  will decision protect member 
protect member qualifier protect  private public  member variable class  class function derived_class derived_class derived_class   
inheritance situation member variable label private 
definition member_function derived_class  variable access
similarly  qualifier protect member_function class  class function derived_class derived_class derived_class   member_function label private 
definition member_function derived_class protect function
inherit protect member inherit derived_class mark protect derived_class 
word  member mark protect base_class  access definition descendant class  just class directly derive base_class 
est exe rc es 
follow program legal assume include
class additional data field  crazy  type bool  additional member take argument return value type bool  suitable constructor 
need give implementation  just class definition 
follow legal definition member derived_class smartbut discuss self test exercise 
explain answer 
redefinition member_function definition derived_class hourlyemployee display  give declaration function    
give declaration only function inherit class employee 
inherit function declaration give set inherit unchanged 
class hourlyemployee base_class employee 
define derived_class like hourlyemployee  list only declaration inherit function definition want change derived_class 
look implementation class hourlyemployee  give display  will see redefine inherit 
class salariedemployee give  show display 
class give definition
inheritance redefine inherit function derived_class inherit function variable belong base_class 
derived_class require implementation inherit  redefine derived_class 
redefine  list declaration derived_class declaration base_class 
wish redefine inherit base_class  list derived_class 
display derived_class salariedemployee file 
display give demonstration program illustrate derived_class hourlyemployee salariedemployee 
function     inherit unchanged class employee 
function redefine 
function add derived_class hourlyemployee 
sample dialogue check mighty joe hour 
hour work  rate  pay  check mr 
big shot pay order mr 
big shoot sum dollar check stub negotiable employee  salary employee 
regular pay  redefining overloading confuse redefine definition derived_class overload name 
redefine definition  definition give derived_class number inheritance basic type parameter 
hand  derived_class number parameter parameter type base_class  derived_class function 
example  suppose add follow declaration definition class hourlyemployee  void  string  
overload name 
hand  class employee class hourlyemployee define follow declaration  void  case  class hourlyemployee only name  definition class hourlyemployee definition class employee 
case  redefine 
redefine overloading confuse  consolation 
important learn learn distinguish
nonetheless  learn difference 
signature signature name sequence type parameter list  include const keyword include ampersand 
overload name  definition name signature definition name derived_class base_class signature  overload  redefinition 
compiler allow overload basis const const  count
reason  definition const modifier  cloudy issue avoid expert 
inheritance access redefined base function videonote inheritance example suppose redefine definition derived_class base_class 
definition give base_class completely lose derived_class object 
want invoke version give base_class object derived_class  need way definition give base_class object derive  way scope resolution operator name base_class 
example clarify detail 
base_class employee display derived_class hourlyemployee display 
suppose want invoke version give definition base_class employee derived_class object call object 
follow   course  unlikely want version give class employee  class function  occasionally want definition base_class derived_class object 
example give self test exercise 
est exe rc es 
class salariedemployee inherit function base_class employee  only declaration give definition class salariedemployee 
declaration give definition salariedemployee 
give definition class titledemployee derived_class base_class salariedemployee give display 
class inheritance detail titledemployee additional member variable type string call title 
additional member_function   take argument return string   void take argument type string 
redefine member 
need give implementation  just class definition 
give need include directive namespace directive 
place class titledemployee namespace employeessavitch 
give definition constructor class titledemployee give answer self test exercise 
give redefinition member 
insert title name 
bother include directive namespace detail 
common section present subtle detail inheritance 
topic relevant only class dynamic array pointer dynamic datum 
function inherit general rule derive derived_class base_class base  normal  function class base inherit member class derive 
special function practical purpose  inherit 
see practical matter  constructor inherit private member_function inherit 
destructor effectively inherit 
case copy_constructor  inherit  define copy_constructor derived_class class matter  will automatically generate copy_constructor
default copy_constructor simply copy content member variable work correctly class pointer dynamic datum member variable 
class_member variable involve pointer  dynamic array  dynamic datum  define copy_constructor class 
apply class derived_class 
assignment inherit 
base_class base define assignment  derived_class derive assignment  class derive will assignment  will default assignment create 
inheritance  will base_class assignment define base 
natural constructor  destructor  assignment inherit 
correctly perform task  need base_class possess 
correctly perform function  need know variable introduce derived_class 
assignment operator copy_constructor derived_class overload assignment_operator constructor inherit 
case definition overloaded assignment_operator copy_constructor derived_class 
overload assignment derived_class  normally overloaded assignment base_class 
will present outline code write 
help understand code outline  remember overloaded assignment define function class 
class derive definition overloaded assignment class typically begin like following  
first line code body definition call overloaded assignment class 
take care inherit variable datum 
definition overloaded assignment set variable introduce definition class 
similar situation hold define copy_constructor derived_class 
class derive definition copy_constructor class typically copy_constructor class set inherit variable datum 
code typically begin like following  
invocation base_class copy constructor set inherit variable class create 
note type  type  legal argument copy_constructor class 
course  technique work correctly functioning assignment correctly function copy_constructor inheritance detail base_class 
mean base_class definition include copy_constructor default automatically create assignment work correctly base_class base_class suitable overloaded definition assignment 
destructor class base_class correctly functioning destructor  easy correctly functioning destructor class derive base_class 
destructor derived_class invoke  automatically invoke destructor base_class  need explicit writing call base_class destructor  happen automatically 
derived_class destructor need only worry delete variable datum point add derived_class 
job base_class destructor invoke delete inherit variable 
class derive class class derive class class scope  first destructor class call  destructor class call  finally destructor class call 
note order destructor call reverse order constructor call 
est exerc es 
know overloaded assignment copy_constructor inherit 
mean overloaded assignment copy_constructor derived_class  derived_class will assignment copy_constructor 
suppose child class derive class parent  class grandchild class derive class child 
question constructor destructor class parent  child  grandchild 
constructor class grandchild invoke  constructor invoke order 
destructor class grandchild invoke  destructor invoke order 
give definition function  copy_constructor  overloaded assignment  destructor following class 
class intend class partially fill array 
variable contain number array position currently fill 
constructor definition give help start 
tend agree 
protect practice assignment  experience 
define class_call partfilledarraywmax derived_class class partfilledarray 
class partfilledarraywmax additional variable_name hold maximum value_store array 
define accessor function_name return maximum value_store array 
redefine function constructor  int argument maximum number entry array 
copy_constructor  overloaded assignment  destructor 
henry adams  education henry adams polymorphism refer ability associate multiple meaning function_name 
come today  polymorphism refer way associate multiple meaning single function polymorphism name 
polymorphism refer ability associate multiple meaning function_name mean special mechanism know late binding 
polymorphism key component programming philosophy know programming 
late binding  polymorphism  topic section 
late bind virtual_function sense  define 
example  graphic program kind figure  rectangle  circle  oval  forth 
figure class 
example  rectangle class variable height  width  center point  circle class variable center point radius 
design programming project  descendant single parent class_call  example  figure 
now  suppose want function draw figure screen 
draw circle  need instruction need draw rectangle 
class need function draw kind figure 
function belong class  call draw 
rectangle circle object  function implement code 
news  now move function define parent class figure 
now  parent class figure function apply figure 
example  function_call center move figure center screen erase redrawe center screen 
function draw redraw figure center screen 
think inherit function center figure class rectangle circle  begin see complication here 
point clear dramatic  let suppose class figure write later time add class brandnew kind figure  class triangle 
now  triangle derived_class class figure  function center will inherit class figure  function center apply perform correctly triangle 
function center draw  function draw type figure 
inherit function center special will definition function draw give class figure  function draw work correctly triangle 
want inherit function center function function 
class triangle  function  write function center define class figure write compile 
function center possibly work correctly triangle 
compiler know 
inheritance time center compile 
answer apply draw function 
function  tell compiler   know function implement 
wait program  implementation object  technique wait run time determine implementation procedure call late binding dynamic binding 
virtual function way late binding 
need example come alive teach function program 
order explain detail function  will simplify example application area draw figure 
virtual function suppose design record keep program automobile part store 
want program versatile  sure account possible situation 
example  want keep track sale  anticipate type sale 
first  will only regular sale retail customer who store buy part 
later want add sale discount  mail order sale shipping charge 
sale will item basic price ultimately will_produce bill 
simple sale  bill just basic price  later add discount  kind bill will depend size discount 
program_will need compute daily gross sale  intuitively just sum individual sale bill 
want calculate large small sale day average sale day 
calculate individual bill  function compute bill will add later  decide type sale will deal
accommodate function compute bill function 
type sale will derived_class class sale 
class sale correspond simple sale single item add discount charge 
notice reserved word function_declaration function bill display 
notice display member_function saving overloaded operator function bill 
bill declare function  later define derived_class class sale define version function bill  definition member_function saving overloaded operator  give class sale  will version function bill correspond object derived_class 
example  display show derived_class 
notice class require definition version function 
nonetheless  member_function saving overloaded object class  will version function definition give interface class 
function_call object class 
definition function saving object class give implementation file base_class  compile think class function_call  line call function know definition function give class 
order write program  just assume happen magic  real explanation give introduction section 
label function virtual  tell environment   wait function program  display give sample program illustrate virtual_function function work complete program 
discount item cheap 
saving number technical detail need know order virtual_function 
list here  
function_will definition derived_class base_class want virtual_function  add keyword virtual function_declaration base_class 
need add reserved word virtual function_declaration derived_class 
function virtual base_class  automatically virtual derived_class 
reserved word virtual add function_declaration function definition 
virtual_function benefit virtual_function keyword virtual 
virtual_function great  member_function virtual 
only reason virtual_function polymorphism efficiency 
compiler run time environment need work virtual_function  label member_function virtual need program_will efficient 
override virtual_function definition change derived_class  programmer function definition overridden 
literature  distinction term redefine overridden 
term refer change definition function derived_class 
function virtual_function  call override 
function virtual_function  call redefine 
like silly distinction programmer  case  case treat differently compiler 
polymorphism term polymorphism refer ability associate multiple meaning function_name mean late binding 
polymorphism  late binding  virtual_function topic 
est exerc 
suppose modify definition class sale display delete reserved word virtual 
change output program display 
virtual function extended type compatibility will discuss consequence declare class_member function virtual example feature 
fairly strongly type language 
mean type item check error_message issue type mismatch  
inheritance type mismatch argument formal parameter conversion automatically invoke 
mean normally value assign variable match type variable  define case will perform automatic type cast call coercion assign value type variable type 
example  allow assign value type char int variable type double 
allow assign value type double float variable integer type char  short  int  long 
important strong typing  strong type checking interfere idea inheritance object orient programming 
suppose define class class define object type class class
assign object type 
example  suppose program unit contain follow type declaration  class pet 
now concentrate datum_member 
real application  dog pet 
sense allow program value type dog value type pet  follow allow  
allow sort assignment 
assign value  value vdog  variable parent type  allow perform reverse assignment 
assignment allow  value assign variable lose polymorphism field 
call slicing problem 
follow attempt access will_produce error_message    class pet member name argue sense  once dog move variable type pet treat like pet property peculiar dog 
lively philosophical debate  just nuisance programming 
dog name tiny still great dane like refer treat pet someplace line 
fortunately  offer way treat pet throw away
pointer dynamic object instance 
suppose add follow declaration  pet   
sample dialogue  tiny  great dane  tiny  great dane pitfall slicing problem legal assign derived_class object base_class variable  assign derived_class object base_class object slice datum 
data member derived_class object base_class will lose assignment  member_function define base_class similarly unavailable result base_class object 
follow declaration assignment  
inheritance pitfall virtual member_function order benefit extended type compatibility discuss early  virtual member_function 
example  suppose member_function example display 
suppose place  
reason expression type determine pointer type
pointer type type pet  type pet field name 
print declare virtual base_class  pet 
compiler see call  
object orient programming dynamic variable way view programming 
bewilder first 
will help keep simple rule mind  
domain type pointer base_class domain type pointer  follow assignment pointer allow   data member member_function dynamic variable point will lose 
extra field dynamic variable will need virtual member_function access
mean code little  test little  code little test little forth 
try compile class virtual member_function implement member  run hard understand error_message  call undefined member_function 
virtual member_function implement compile  compilation error_message similar  undefined reference class_name virtual  derived_class only virtual member  kind message still occur function definition 
error_message hard decipher definition function_declare virtual  error_message complain undefined reference default constructor  constructor define 
follow code  class destructor virtual  
now  let see happen destructor mark virtual 
easy way destructor interact virtual_function mechanism destructor treat destructor 
example  suppose derived_class class suppose destructor class mark virtual 
now follow code  
delete invoke destructor call 
inheritance  destructor class call turn call destructor class 
destructor class declare virtual  only destructor class call 
point keep mind destructor mark virtual  destructor derived_class automatically virtual mark virtual 
behavior destructor 
now ready explain destructor virtual 
suppose class member variable pb pointer type  constructor class create dynamic variable point pb  destructor class delete dynamic variable point pb 
suppose destructor class mark virtual 
suppose class derive member variable pd pointer type  constructor class create dynamic variable point pd  destructor class delete dynamic variable point pd 
follow code  
will_return freestore memory dynamic variable point pb  memory dynamic variable point pd will return freestore program end 
hand  destructor base_class mark virtual  delete apply destructor class invoke object point type 
destructor class derive delete dynamic variable point pd automatically invoke destructor base_class  delete dynamic variable point pb 
base_class destructor mark virtual  memory return freestore 
prepare eventuality mark destructor virtual 
assign base_class object derived_class variable 
problem legal assignment derived_class object base_class variable 
suppose base_class derived_class member_function signature 
pointer base_class object answer self test exercise call function_member pointer  discuss determine function actually call base_class member function derive class_function 
summary inheritance tool code reuse derive class add feature derived_class 
virtual function achieve late binding 
polymorphism  late binding  virtual_function topic 
plug object derived_class parameter base_class type 
hourlyemployee employee 
salariedemployee employee 
legal mark protect base_class smart access name derived_class 
mark private  illegal 
declaration function give definition salariedemployee redefine class employee 
inherit unchanged base_class employee 
define overloaded assignment_operator copy_constructor derived_class  default assignment_operator default copy_constructor will define derived_class 
class involve pointer  dynamic array  dynamic datum  default assignment_operator default copy_constructor will behave want
constructor call follow order  first parent  child  finally grandchild 
destructor call reverse order  first grandchild  child  finally parent 
discount item cheap 
member assign derived_class add member 
legal assign derived_class object base_class variable  discard part derived_class object member base_class 
situation know slicing problem 
base_class function carry virtual modifier  type object pointer initialize determine member_function call 
base_class member function virtual modifier  type pointer determine member_function call 
practice program practice program generally solve short program directly apply programming principle present
write program class salariedemployee display 
program define class_call administrator  derive class salariedemployee 
allow change base_class protect 
supply follow additional datum function_member  member variable type string contain administrator title director vice president 
inheritance member variable type string contain company area responsibility production  accounting  personnel 
member variable type string contain name dministrator supervisor 
protect  member variable type hold administrator annual salary 
possible exist salary member change recommend early 
member_function call  change supervisor name 
member_function read administrator datum keyboard 
member_function call print  output object data screen 
overloading member_function notation check 
add temporary  administrative  permanent  classification employee hierarchy display   
implement test hierarchy 
user interface menu nice touch test program 
videonote solution practice program 
list definition class inheritance  code implementation  function 
put code file include statement preprocessor statement program compile run 
output  circle radius area  
inheritance retrieve appropriately define function calculate rectangle 
follow code add output  rectangle  
programming project programming project require problem solve practice program solve way 
visit complete programming project online instant feedback 
videonote solution programming project 
give definition class_name doctor object record clinic doctor 
class_will derived_class class employee give display 
doctor record doctor specialty pediatrician    obstetrician    general practitioner    type string office visit fee type 
sure class reasonable complement constructor  accessor  mutator member_function  overloaded assignment  copy_constructor 
write driver program test function 
create base_class call vehicle manufacturer type string  number cylinder engine type_int  owner type person  give 
create class_call truck derive vehicle additional property  load capacity ton type contain fractional part tow capacity pound type_int 
sure class reasonable complement constructor  accessor  mutator member_function  overloaded assignment  copy_constructor 
write driver program test member_function 
definition class follow 
implementation class part programming project 
define car class derive vehicle class give programming project 
define class_call sportscar derive car class 
creative choose member variable function 
give definition class  patient billing  object record clinic 
patient will derive class give programming project 
patient record patient class primary physician  type doctor define programming project 
billing object will contain patient object  doctor object  amount due type double 
sure class reasonable complement constructor  accessor  mutator member_function  overloaded assignment  copy_constructor 
first write driver program test member_function  write test program create least patient  least doctor  least billing record  print total income billing record 
graphic system class figure rectangle  square  triangle  circle 
example  rectangle datum_member  center point  square circle only center point edge length
design system  derive common class  figure 
implement system 
class figure base_class 
add only rectangle triangle class derive figure 
class stub member_function erase draw 
member_function output message tell function call class call object
just stub  output message 
member_function center call erase draw function erase redraw figure center 
will call member_function erase draw 
add output message member_function center announce center call 
member_function take argument 
part project 
write class definition virtual_function 
compile test 
compile test 
inheritance real example  replace definition member_function code actual drawing 
will ask programming project 
follow function testing  
flesh programming project 
give constructor member_function       draw function actually draw figure screen place character   suitable location 
erase function  simply clear screen output blank line sophisticated 
detail problem  will decision
bank type account  rule fee associate transaction withdrawal 
customer allow transfer fund account incur fee associate withdrawal fund account 
write program base_class bank account derived_class represent account rule withdraw fund 
write function transfer fund account type
transfer withdrawal account deposit
transfer time type account  withdraw function class programming project virtual 
write program create account class test transfer function 
class  create base_class call bankaccount name owner account string balance account double datum_member 
include member_function deposit withdraw double amount argument accessor function getname getbalance 
deposit will add amount balance assume amount nonnegative withdraw will subtract amount balance assume amount nonnegative equal balance 
create class_call moneymarketaccount derive bankaccount 
moneymarketaccount user free withdrawal give period time worry time problem 
free withdrawal withdrawal fee deduct balance withdrawal 
class data member keep track number withdrawal 
override withdraw definition 
finally  create cdaccount class model certificate deposit derive bankaccount addition name balance interest rate 
cds incur penalty early withdrawal fund 
assume withdrawal fund amount incur penalty annual interest earn account 
assume amount withdraw plus penalty deduct account balance 
withdraw function override base_class 
class  withdraw function return integer status ok insufficient fund withdrawal take place 
purpose exercise  worry function property account interest pay 
behave like wireless barcode wirelessly broadcast identification number receiver 
application rfid chip logistic ship freight 
shipping container full item 
rfid chip  human manually inventory item container verify content 
rfid chip attach shipping container  rfid chip electronically broadcast human exact content shipping container human intervention 
model application  write base_class call shippingcontainer container number integer 
include member_function set access number 
add virtual_function call getmanifest return empty string 
purpose function return content shipping container 
inheritance create derive call manualshippingcontainer represent manual method inventory container 
method  human simply attach textual description content container 
example  description crate apple 
add function_call setmanif set string 
override getmanif function return string 
create second derive call rfidshippingcontainer represent rfid method inventory container 
simulate rfid chip compute  create add function simulate add item quantity data_structure choice 
example  add function invoke time follow  pear   add crate pear apple   add crate apple pear   add crate pear point  data_structure store list item  crate apple crate pear 
quantity apple quantity pear 
override getmanif function return string item build traverse list item 
example programming project ant behave accord follow model  move 
time step  randomly try move leave  right 
neighboring cell select direction occupy move grid  stay current cell 
survive time step  end time step move will breed 
simulate create adjacent leave  right cell empty 
empty cell breeding occur 
once offspring produce  produce offspring time step elapse 
doodlebug behave accord follow model  move 
time step  adjacent leave  right  will move cell eat
move accord rule
note eat doodlebug 
survive time step  end time step will spawn manner
eat last time step  end third time step will starve die 
remove grid cell 
turn  doodlebug move ant
write program implement simulation draw world ascii character
create name organism encapsulate basic datum common ant doodlebug 
virtual_function name move define derived_class ant doodlebug 
need additional data_structure keep track critter move 
initialize world doodlebug ant 
time step  prompt user press enter move next time step 
see cyclical pattern population predator prey  random perturbation lead elimination specie 
list code play guess game 
game player number 
task extend program object function require include cstdlib see appendix 
solution programming project 
implementation simply return 
next  define name humanplayer derive player 
implementation prompt user enter number return value enter keyboard 
next  define name computerplayer derive player 
implementation randomly select number see appendix random number generation 
finally  construct function invoke  player instance humanplayer human human  instance humanplayer computerplayer human computer  instance computerplayer computer computer 
computer player programming project play number guess game  only random guess 
modify program computer play informed game 
strategy add function player omputerplayer class  player programming project function result back computer player 
word  computer tell last tell opponent  last
computer revise next 
add function allow computer player play multiple consecutive game 
start definition queue class give section modify store integer character 
special type queue priority queue 
priority queue behave like regular queue remove function extract item small value item high priority 
create priorityqueue class derive queue class constructor 
redefine remove function priorityqueue class extract item small value 
test priorityqueue class add number riorityqueue object  remove print remove number remove queue 
following attempt create class represent pet  class pet 
rewrite code inheritance 
pet class subclass dog  cat  bird 
variable associate class  define private function access variable 
rewrite printdescription function virtual_function 
long need switch_statement type_variable 
write function create vector array pet include least bird  dog  cat  loop output description
exception handle exception handle basic toy example exception_handle define exception class multiple throw catch pitfall  catch specific exception first programming tip  exception class trivial throw exception function exception specification pitfall  exception specification derived_class technique exception_handle throw exception pitfall  uncaught exception pitfall  nest try catch block pitfall  overuse exception exception class testing memory rethrowe exception summary answer self test exercise practice program programming project exception prove rule 
introduction way write program first assume unusual incorrect will happen 
example  program take entry list  assume list empty 
once program work core situation plan  add code take care exceptional case 
 way reflect approach code 
basically  write code unusual happen 
exception handle facility add code unusual case 
exception handling commonly handle error situation  way view exception way handle  exceptional  code correctly handle error   long error 
important exception deal function special case handle differently depend function
function_will program  will handle special case way will handle way 
example  division zero function  turn invocation function  program end  invocation function happen 
will see function define throw exception special case occur  exception will allow special case handle function 
way  special case handle differently invocation function 
 exception_handling proceed follow  library software code mechanism signal unusual happen 
call throw exception 
place program  place code deal exceptional case 
call handle exception 
method programming clean code 
course  still need explain detail 
prerequisite exception subsection skip  section material only 
pitfall subsection section entitle  exception specification derived_class  material 
pitfall subsection skip loss continuity 
subsection section entitle  testing memory  material 
subsection skip loss continuity 
know work case 
computer science student  appeal grade exception_handling mean sparingly situation involved reasonable include simple introductory example 
will teach exception handle detail mean simple example normally exception_handling 
sense learn exception_handling  forget first example toy example  practice  exception_handle simple 
toy example exception_handle example  suppose milk important food culture people run still like program accommodate unlikely situation run milk 
basic code  assume run milk  follow  
take care special situation run milk  add test unusual situation 
complete program add test special situation show display 
program display exception_handling 
now  let see program rewrite exception handle facility 
exception_handle display handle special case exception_handle include iostream namespace std  
sample dialogue enter number donut  enter number glass donut  milk 
end program 
display  rewrite program display exception 
only toy example  exception case 
give simple example 
program whole simple  least part word try catch clean  hint advantage exception 
look exception handle basic 
sample dialogue enter number donut  enter number glass donut 
donut glass
exception_handle sample dialogue enter number donut  enter number glass donut  milk 
code basically code display  big statement show color display follow small statement plus simple nonbranching statement throw donut  statement exceptional 
exceptional give word catch 
idea normal situation handle code follow word try  code follow word catch only exceptional circumstance 
separate normal case exceptional case 
toy example  separation buy situation will prove helpful 
let look detail 
basic way handle exception consist try throwcatch threesome 
try block syntax try try block contain code basic algorithm tell computer smoothly 
call try block percent sure will smoothly  want give now wrong  want throw exception  way wrong 
basic outline  add throw  follow  try exception handle basic following example try block throw statement include 
value throw  case donut  call exception  execution throw statement call throw exception 
throw value type 
case  int value throw 
try block follow suitable catch block  flow control transfer catch block 
throw statement embed branch statement  anif statement 
value throw type 
example throw donut  
exception_handling name suggest  throw   place place 
 place flow control value throw 
exception throw  code surround try block execute portion code  know catch block  begin execution 
executing catch block call catch exception handle exception 
display  catch block follow try block 
repeat catch block here  
catch block look like function definition parameter type_int 
function definition  way  catch block like function 
separate piece code execute encounter execute follow precede try block throw  throw statement similar function_call  call function  call catch block execute code catch block 
catch block refer exception handler  term suggest catch block function like nature 
identifi follow line catch block 
identifi look like parameter act like parameter 
will call catch block parameter 
catch block parameter precede type_name specify kind throw value catch block catch 
catch block parameter give name throw value catch  write code catch block throw value catch 
will discuss function catch block parameter reverse order 
subsection  will discuss catch block parameter name value throw catch 
subsection entitle  multiple throw catch   later will discuss catch block exception handler will process value throw 
exception handle basic current example only catch block 
common name catch block parameter legal identifier place
let see catch block display work 
value throw  execution code try block end control pass catch block block place right try block 
catch block display reproduce here  
value throw  throw value type_int order catch block apply 
display  value throw give variable donut  donut type_int  catch block catch value throw 
suppose value donut value  second sample dialogue display 
value positive  throw statement statement execute 
case  value variable donut throw 
catch block display catch value donut  value donut plug catch block parameter code catch block execute  produce follow output  donut  milk 
value donut positive  throw statement execute 
case  entire try block execute 
last statement try block execute  statement catch block execute 
note exception throw  catch block ignore 
sound like try throw catch setup equivalent ifelse statement 
equivalent  value throw 
trythrow catch setup similar statement add ability message branch 
sound statement  turn big difference practice 
summarize formal tone  try block contain code assume include throw statement 
throw statement normally execute only exceptional circumstance  execute  throw value type 
exception value like donut display throw  end try block 
rest code try block ignore control pass suitable catch block 
catch block apply only precede try block 
exception throw  exception object plug catch block parameter  statement catch block execute 
example  look dialogue display  will see soon user 
exception_handle catch parameter catch block parameter identifier heading catch block serve placeholder exception value throw 
suitable value throw precede try block  value plug catch block parameter 
legal nonreserved word identifi catch block parameter 
now  will assume try block follow catch block 
will later discuss happen catch block 
next  summarize happen exception throw try block 
exception value throw try block  try block complete  program execution continue code catch block 
word  exception throw  catch block ignore 
time program execute  throw statement will execute  case  code try block will run completion code catch block will ignore completely 
throw statement throw exception value 
catch block catch exception value 
exception throw  try block end code catch block execute 
catch block complete  code catch execute catch block end program perform special action 
exception throw try block  try block complete  program execution continue code catch 
syntax try code throw statement function invocation throw exception 
se te st ercis 
output produce follow code 
code give self test exercise  throw statement 
happen throw statement execute 
general question 
tell happen general  simply happen code self test question sample code 
code give self test exercise  try 
code give self test exercise  catch 
code give self test exercise  parameter 
define exception class throw statement throw value type 
common define class object carry precise kind want throw catch 
important reason define specialized exception class type identify possible kind exceptional situation 
exception class just class 
exception class
still  pay take care choose exception class name detail 
display contain example program programmer define exception class 
just toy program illustrate detail exception_handling 
machinery simple task  unclutter example detail 
notice throw statement  reproduce follow  throw  part invocation constructor class nomilk 
constructor take int argument case donut create multiple throw catch try potentially throw number exception value  differ type 
execution try  only exception will throw throw exception end execution try  type exception value throw occasion try execute 
catch only catch value type  catch exception value differ type place catch try 
example  program display catch block try 
note parameter catch dividebyzero 
need parameter  simply list type parameter 
take example typical exception_handling 
here  exception class interface implementation file put namespace 
toy example 
sample dialogue enter number jemhadar warrior  klingon warrior
end program sample dialogue enter number jemhadar warrior  negative number jemhadar end program 
sample dialogue enter number jemhadar warrior  klingon warrior
end program 
exception_handle case discuss bit programming tip section entitle pitfall catch specific exception first catch multiple exception  order catch block important 
exception value throw try block  follow catch block try order  first match type exception throw execute 
example  following special kind catch block will catch throw value type  
dot stand omit 
actually type dot program 
default catch block place catch block 
example  add catch block display follow  
second ordering  exception throw value type negativenumber will catch negativenumber catch block 
value type dividebyzero throw  catch block start 
dividebyzero catch block reach 
fortunately  compiler tell sort mistake 
name  useful
throw object class dividebyzero activate catch block  display 
trivial exception class  normally exception throw value once catch block 
exception just catch block 
omit catch block parameter 
example  function code throw exception attempt divide zero  want catch exception function 
program function simply end exception throw  program function
know exception catch inside function 
case  sense catch exception function definition  program code function place function invocation try block catch exception catch block follow try block 
look program display 
try block  throw statement visible try block 
statement throwing program throw dividebyzero  
sample dialogue enter numerator  enter denominator  error  division zero 
statement visible try block 
try block term program execution  definition function invocation try block 
exception specification function catch exception  least warn programmer invocation function possibly throw exception 
exception throw  catch  function definition  exception type list exception specification  illustrate follow function_declaration display  double top  int throw dividebyzero  illustrate display  exception specification function_declaration function definition 
function function_declaration  function_declaration identical exception specification 
exception specification function call throw list 
possible exception throw function definition  exception type separate comma  illustrate here  void throw dividebyzero  otherexception  
exception_handle exception type list exception specification treat normally 
exception treat normally  mean treat subsection 
place function invocation try block follow catch block catch type exception  function throw exception catch inside function  catch block follow try block will catch exception 
exception specification throw list empty  possible exception type list exception specification  exception throw treat normally 
happen exception throw function list exception specification catch inside function 
case  program end 
notice exception throw function list exception specification catch inside function  will catch catch block  program_will end 
remember  specification list empty exception list specification list  throw exception will end program way paragraph 
keep mind exception specification exception function 
function  belong exception specification 
function  belong exception specification matter originate 
exception throw try block inside function definition catch catch block inside function definition  type need list exception specification 
function definition include invocation function function throw exception catch  type exception place exception specification 
function throw exception catch inside function  empty exception specification like void throw  way summary  void throw dividebyzero  otherexception  type dividebyzero otherexception normally 
exception end program catch function_body 
derived_class class exception specification  throw object class will treat normally  object class exception specification 
double exception specification  account throw int value 
need int double exception specification 
final warning  compiler treat exception specification suppose
compiler essentially treat exception specification comment  compiler  exception specification effect code 
reason place exception throw function exception specification 
way compiler_will treat exception way 
course  compiler consistency exception specification program document extra error checking compiler specification 
compiler process exception specification  program_will terminate soon throw exception anticipate 
put way  redefine override function definition  add exception exception specification delete exception want 
sense  object derived_class anyplace object base_class redefined overwritten function fit code write object base_class 
warren peace  lieutenant tool show code explain exception_handle work  show example program realistic exception_handling 
now know mechanic exception_handling  section explain exception handling technique 
throw exception give simple code order illustrate basic concept exception_handling 
example unrealistically simple 
complicated guideline separate throw exception programming technique exception_handle catch exception separate function 
case  throw statement function definition  list exception exception specification function  place catch clause function 
preferred try throw catch triad illustrate here  void 
easily handle problem way  throw exception 
reserve throw statement situation way exceptional condition handle depend function
way exceptional condition handle depend function invoke  
exception_handle throw exception part  throw statement function list exception specification function 
reserve situation way exceptional condition handle depend function
way exceptional condition handle depend function invoke  let programmer who invoke function handle exception 
situation  preferable avoid throw exception 
situation  preferable avoid throw exception 
pitfall uncaught exception exception throw code catch someplace code 
exception throw catch program_will end 
rare case  useful  tempt suspect nice way organize program 
place inner try catch block inside function definition place invocation function outer try catch block maybe just eliminate try block completely 
place try block follow catch block inside large try block  exception throw inner try block catch inner try catch block  exception throw outer try block processing catch
throw exception allow transfer flow control programming technique exception_handle anyplace program anyplace program 
early day programming  sort unrestricted flow control allow construct know goto 
programming expert now agree unrestricted flow control poor programming style 
exception allow revert bad old day unrestricted flow control 
exception sparingly only way 
rule following  tempt include throw statement  think write program class definition throw statement 
think alternative produce reasonable code  want include throw statement 
example  arithmeticerror exception class define exception class dividebyzeroerror derived_class arithmeticerror 
dividebyzeroerror arithmeticerror  catch block arithmeticerror will catch dividebyzeroerror 
list arithmeticerror exception specification  effect  add dividebyzeroerror exception specification  list dividebyzeroerror name exception specification 
test memory  create variable code following  struct 
work fine long sufficient memory create
happen sufficient memory 
sufficient memory create exception throw 
type part language 
need define
throw exception memory create check run memory follow  try 
rethrowe exception legal throw exception catch block 
rare case  want catch exception depend detail  decide throw exception handle chain exception handling block 
se te rc ise 
happen exception catch 
nest try block inside try block 
summary exception_handling allow design code normal case program separately code handle exceptional situation 
alternatively  exception throw function definition include try block include catch block catch type exception 
case  invocation function place try block 
case  list catch block specific exception class catch block general exception class 
answer self test exer cis 
try block enter 
exception throw equal catch block 
answer self test exercise 
try block enter 
leave try block 
catch block 
throw statement execute  end enclosing try block 
statement try block execute  control pass follow catch 
control pass follow catch block  mean value throw plug catchblock parameter  code catch block execute 
end program 
try call 
end program 
exception catch program end 
yes  try block correspond catch block inside large try block 
place inner try catch block function definition place invocation function large try block 
exception_handle practice program practice program generally solve short program directly apply programming principle present
videonote solution practice program 
function return special error code implement throw exception
way  error code ignore mistake valid datum 
follow class maintain account 
write test code attempt withdraw deposit invalid amount catch exception throw 
programming project 
standard template library include class_name exception parent class exception throw stl function 
exception catch class 
follow code set try catch block stl exception  
modify code exception try block 
try access invalid index string member_function 
programming project programming project require problem solve practice program solve way 
visit complete programming project online instant feedback 
write program convert hour time hour time 
following sample dialogue  enter time hour notation  pm enter time hour notation 
exception_handle enter time hour notation  time try enter time hour notation  pm end program will define exception class_call timeformatmistake 
user enter illegal time  like gibberish like  program_will throw catch timeformatmistake 
write program convert date numerical month day format alphabetic month day example  correspond january 
dialogue similar programming project 
will define exception class  call montherror call dayerror 
user enter legal month number integer  program_will throw catch montherror 
similarly  user enter valid day number integer    depend month  program_will throw catch dayerror 
keep simple  allow day february 
videonote solution programming project 
write program input numeric_value output textual histogram value  count number occurrence value 
program first ask user number enter 
user enter value consist digit number range  exception catch 
throw exception 
convert string str integer  follow code   atoi function here sample dialogue  number enter 
enter number  enter number  try
programming project enter number  enter number  number 
enter number  enter number  try
here histogram value            
define class_name checkedarray 
object class like regular array range checking 
object class checkedarray illegal index  will cause program throw exception object class arrayoutofrangeerror 
define class arrayoutofrangeerror part project 
note checkedarray class suitable overloading operator  discuss appendix 
stack introduce 
define stack class store stack element type char 
stack object fix size  size parameter constructor create stack object 
program  object stack class_will throw exception follow situation  stackoverflowexception application program try push datum stack full stackemptyexception application program try pop datum empty stack define class stackoverflowexception stackemptyexception part project 
write suitable test program 
give function argument specify level 
exception_handling throw exception 
function prompt receive input specify call depth level exception will throw 
function call first function 
function catch exception display level exception throw 
forget case depth  throw catch exception 
compact code  function call function call recursively 
suppose restriction call depth
programming project technique emulate dimensional array wrapper function dimensional array 
index desire entry dimensional array throw arrayoutofrangeerror exception row column index invalid 
program define arrayoutofrangeerror exception class 
template algorithm abstraction function pitfall  compiler complication programming example  generic sort function programming tip  define pitfall  template inappropriate type datum abstraction syntax programming example  array summary answer self test exercise practice program programming project man mortal 
aristotle man 
aristotle mortal 
cat mischievous 
garfield cat 
garfield mischievous 
short lesson syllogism introduction discuss template 
will allow design function argument type define class general see
prerequisite section material section   
material class 
section material 
example  function  first discuss 
reference  now repeat function definition  
notice function apply only variable type_int 
algorithm give function_body just swap value variable type char 
want function algorithm abstraction variable type char  overload function_name 
inefficient unsatisfye definition function  identical 
only difference definition type_int place type char place 
proceed way  want function apply pair variable type double  write third identical function definition 
want apply still type  number identical function definition large 
require deal type clutter code definition look identical 
able follow function definition apply variable type  void  
syntax next subsection 
function template allow swap value variable  type  long variable type 
definition function_declaration begin line template class call template prefix  tell compiler definition function_declaration follow template 
type parameter 
context  word class actually mean will see  type parameter replace type  type class
body function definition  type parameter just_like type 
function template definition effect  large collection function definition 
function template show display  effect  function definition possible type_name 
definition obtain replace type parameter type_name 
example  function definition follow obtain replace type_name double  
definition obtain replace type parameter char 
function template show display overload function_name slightly function definition possible type 
compiler_will literally produce definition possible type function_name  will behave exactly produce function definition 
separate definition will produce type template  type
only definition generate single type regardless number time template type 
notice function call twice display  time argument type_int time argument type char 
follow function_call display    compiler function_call  notice type argument case int template produce function definition type parameter replace type_name int 
similarly  compiler see function_call   ansi standard keyword typename class template prefix 
agree typename sense class  class firmly establish tradition  class sake consistency programmer author 
output original value swap value original character value swap character value notice type argument case char template produce function definition type parameter replace type_name char 
notice need special call function define function template  call just call function template 
template function 
compiler work produce function definition function template 
notice display place function template part program  template function 
able place function_declaration definition function template location place function_declaration definition ordinary function 
compiler support template function_declaration support separate compilation template function 
support  detail messy vary compiler
safe strategy template function_declaration sure function template definition file function template
function template definition file file template function file file invocation template function 
function template definition directive 
give function template definition file file file template function 
clean safe general strategy 
work compiler 
work  consult local expert 
will template function_declaration code  will give example benefit reader compiler support function_declaration 
function template display  letter parameter type 
traditional require language 
type parameter identifi keyword 
name type parameter  name work
example  function template give display equivalent follow  template class variabletype void  
example  function template type parameter name begin follow  template class  class template algorithm abstraction function template require only type parameter 
unused template parameter  template parameter template function 
pitfall compiler complication compiler allow separate compilation template  need include template definition code
usual  least function_declaration precede template function 
safe strategy template function_declaration sure function template definition file function template call 
function template definition include directive 
give function template definition file include file file template function 
common technique put definition implementation  header_file 
technique  only header file implementation file 
finally  alternate approach include implementation file template class header_file 
compiler additional special requirement template 
trouble compile template  check manual check local expert 
need set special option rearrange way order template definition item file 
example  following function_declaration function template  template class void    
videonote issue compile program template 
type_name substitute type parameter example 
instance  follow function_call     function_call execute  compiler function definition obtain replace type_name double 
separate definition will produce type template type
only definition generate specific type regardless number time template 
elf tes exe rc ise 
write function template name maximum 
function take value type argument return large argument value equal 
give function_declaration function definition template 
will operator definition 
function template will apply only type define 
write comment function_declaration explain restriction 
kind absolute value_function  ab  lab  fab 
function differ only type argument 
function template absolute value_function 
give function template absolute value_function call absolute 
template will apply only type define  unary negation operator define  constant comparison value type 
function absolute call number type  int  long  double 
give function_declaration function definition template 
define characterize template facility 
template prefix template class kind parameter
only type build language 
algorithm abstraction see discussion function  general algorithm interchange value variable  general algorithm apply variable type 
function template  able express general algorithm 
simple example algorithm abstraction 
algorithm abstraction  mean express algorithm general way ignore incidental detail concentrate substantive part algorithm 
function template feature support algorithm abstraction 
program example generic sort function give simple sorting algorithm sort array value type_int 
algorithm realize code function sort  give display 
here repeat definition function sort  
study definition function sort  will see base type array significant way 
replace base type array function header type double  obtain sort function apply array value type double 
help function course  adjust help function apply array element type double 
let help function call inside body function sort 
help function swap value 
see apply variable type  define function template display 
let see depend significant way base type array sort 
definition repeat next study detail 
function depend significant way base type array 
replace highlighted instance type_int type double  will change function apply array base type double 
change function sort sort array base type double  only need replace instance type_name int type_name double 
special type double 
similar replacement type 
only need know type operator define type 
perfect situation function template 
replace instance type_name int function sort small type parameter  function sort sort array value type value type compare operator 
display write just function template 
notice function template sort show display array value number 
demonstration program display  function template sort call sort array character 
character compare operator 
exact meaning operator apply character value vary template algorithm abstraction 
apply uppercase letter  operator test see first come second alphabetic order 
apply lowercase letter  operator test see first come second alphabetic order 
mix uppercase lowercase letter  situation behave  program show display deal only uppercase letter 
program  array template 
output unsorted integer  sorted order integer unsorted double  sorted order double unsorted character  sorted order character uppercase letter sort alphabetical order call function sort 
create replace base type array type parameter
general strategy write template 
want write function  first write version just ordinary function 
completely debug ordinary function convert ordinary 
template function replace type_name type parameter 
advantage method 
first  define ordinary function deal concrete case  problem easy visualize 
second  detail check stage  worry algorithm need syntax rule 
code function sense behave way 
example  display type parameter replace type assignment_operator
display show function_call search  search array specify integer 
give function version search search array element type 
give function_declaration function definition
practice program ask overload ab function name ab work build type study time 
compare contrast function overloading ab function template purpose self test exercise 
example pitfall section array 
cover array  skip pitfall section return cover array 
edward bellamy  look backward  see previous section  function definition general template 
section  will see template class definition general 
syntax class_template syntax class_template basically function template 
following place template definition  template class type parameter class definition just_like type 
function template  type parameter represent type type type parameter replace class type 
function template  nonkeyword identifi
example  following class_template 
object class_contain pair value type int  object value pair integer  char  object value pair character 
type parameter pair value type template class class pair 
only difference member_function definition template 
example  follow definition member_function constructor argument  iostream cstdlib  template class 
notice class_name scope resolution operator  simply 
name class_template type function_parameter 
example  following possible declaration function parameter pair integer  int int  sum integer 
example  following beginning class_template definition  template class class 
member function overloaded operator define function template 
example  definition function definition sample class_template begin follow  template class 
note specify type  case int  fill type parameter
class_template function template 
example  define specialized function give define function template follow function apply kind number  template class   operator + define value type
template type definition specialize template give type argument name  following example  int specialized name  like int  just_like name 
declare object specify type formal parameter 
define type_name meaning specialized template name  int 
syntax define type_name follow  typedef  
pairofint   type_name pairofint specify type
programming example array class display contain interface template object list 
definition template  list list item type
object list value type_int  list value type double  list object type string  list item type 
display contain demonstration program template 
program illustrate template
once understand syntax detail  template program need list value 
display give implementation template 
operator friend
order parameter type expression genericlist itemtype parameter_type 
type parameter replace example  type_int  list parameter will type genericlist int 
note implementation overloaded insertion operator place header_file implementation file 
unusual  common friend_function operator template 
define like member genericlist  recall friend_function exist part namespace 
compiler_will easy time find implementation way include file 
object type list item type operator define 
list hold max item type type_name declare follow   ifndef define 
template bool full const  true list full 
commonly overloaded friend template 
output display 
safe solution compilation code template class definition template function definition
case  only file display need compile 
sure ifndef define endif mechanism prevent multiple file inclusion file 
note implementation overloaded insertion operator place header_file implementation file 
unusual  common friend_function operator template 
define like member recall friend_function exist class part namespace 
compiler_will easy time find implementation way class include file 
want separate implementation overloaded friend insertion operator header  require little bit extra work 
forward declaration operator turn require forward declaration class 
display illustrate require change display illustrate change  simply additional implementation 
display class version move implementation overloaded file  require add forward declaration 
define here member class 
template display class class rest class identical display overload implementation code additional 
display implementation overloaded operator implementation file  implementation class_template name 
answer self test exercise elf tes exerc ise give definition member_function class give definition constructor zero argument class give definition template class_call heterogeneouspair like heterogeneouspair first second position store_value type 
type parameter  item first position will type  item second position will type 
single mutator function template class pair replace mutator function_call template class heterogeneouspair 
similarly  single accessor function template class pair replace accessor function_call template class heterogeneouspair 
follow true false 
friend exactly template nontemplate class 
summary function template  define function parameter type 
answer elf test exerci se 
function declaration  template class first  second   define type
definition  template class 
type  primitive type type define user class struct type  enum type  define array type  int  float  double  
function_declaration function definition give here 
basically identical version give display instance int change basetype parameter list 
function declaration  template class basetype int basetype  int  basetype target  
definition  template class basetype int basetype  int  answer self test exercise 
function overload only work type overloading
overloading work type automatically convert type overloading expect 
template solution will work type define time invocation  requirement definition satisfied 
natural candidate default initialization value  object give constructor argument 
practice program practice program generally solve short program directly apply programming principle present
write function template function parameter partially fill array value base type array 
value partially fill array  function_return indexed variable contain value 
value array  function_return 
base type array type parameter 
notice need parameter give partially fill array  array number index variable
write suitable test program test function template 
write template version iterative binary search display 
specify discuss requirement template parameter_type 
write template version recursive binary search display 
specify discuss requirement template parameter_type 
programming project programming project require problem solve practice program solve way 
visit complete programming project online instant feedback 
general version add feature step item list order 
item current item 
ask current item  change current item next item  change current item previous item  start beginning list item list current item  ask nth item list 
will add follow member  additional member variable record list current item  member_function return current item value  member_function next item current item  member_function previous item current item  member_function item 
template list current item  member_function return nth item list give argument 
example  empty list item  item last item list 
sure test empty list handle appropriately 
sure test beginning end list handle case appropriately 
write suitable test program test class_template 
write template function parameter list item possible item list 
item list  function_return occurrence item 
item list  function_return 
list  next  forth 
type item list type parameter 
class_template genericlist define project 
write suitable program test function template 
help nontemplate version  word  help programming project 
display give template function sort array selection sort algorithm 
write similar template function sort array  time insertion sort algorithm programming project 
idea nontemplate version  word  idea programming project 
stack cover  dynamic array cover write template version stack class 
type parameter type datum store stack 
dynamic array allow stack grow hold number item 
write template version class implement priority queue 
queue discuss priority queue discuss 
summarize  priority queue essentially list item programming project order priority 
item add list require associated priority value 
problem  priority integer high priority large value low priority 
remove item queue remove item high priority 
add function priority queue take generic type integer priority 
follow example  generic type char add item queue  
test queue datum priority order example  ascend  descending  mixed 
implement priority queue store item choice example  vector  array  link list  genericlist perform linear search low integer_value remove function 
future course study data_structure call heap afford efficient way implement priority queue 
write template base_class implement set item 
set collection item occur once 
internally  represent set data_structure choice example  list  vector  array  
class externally support follow function  set 
set happen 
determine member set 
caller function responsible deallocate memory 
test class create set data_type example  string  integer  class 
add object set  need overload operator object class template base set class properly determine membership 
videonote solution programming project template 
project require complete programming project programming project 
programming project ask write program find permutation set 
modify program generate permutation give instance template base set class define programming project 
wish template base set class help simplify implementation permutation algorithm
algorithm require store set list 
allow create set list template base set class 
example  myset vector will define set contain vector type
careful place space last  compiler confuse 
code myset vector space will likely produce compiler error high 
program print permutation set size comprise type datum example  set integer  set string  set double 
only single template class type parameter 
allow specify multiple type parameter 
example  follow code specifie class accept type parameter  template class class class 
data_type key value specify separately type parameter 
map form basis simple database 
example  map employee number employee name  integer data_type key string data_type name 
class function 
add pair map 
set exist pair give 
delete pair map give 
check pair exist map give retrieve pair give data_type wish implement map 
write function test class exercise function sample datum 
standard template library iterator declaration iterator basic programming tip  auto simplify variable declarationss pitfall  compiler problem kind iterator constant mutable iterator reverse iterator kind iterator container sequential container pitfall  iterator remove element programming tip  type definition container summary answer self test exercise container adapter stack queue associative container set map programming tip  initialization  range auto container efficiency generic algorithm run time big notation container access run time nonmodifye sequence algorithm container modifying algorithm set algorithm sort algorithm practice program programming project library grow 
augustine birrell introduction large collection standard data_structure hold datum 
standard sense standard portable implementation
standard template library stl include library data_structure 
include stl implementation stack  queue  standard data_structure 
discuss context stl  data_structure call container class hold collection datum 
present preview stl vector template class  container class stl 
will present overview basic class include stl 
room give comprehensive treatment stl here  will present start basic stl container class 
stl develop alexander stepanov meng lee hewlettpackard base research stepanov  lee  david musser 
collection library write language 
stl part core language  part standard implementation conform standard include stl 
practical matter  stl part language 
name suggest  class stl template class 
typical container class stl type parameter type datum store container class 
stl container class extensive iterator  object facilitate cycle datum container 
introduction concept iterator give section  discuss pointer iterator 
will find helpful read section read
read section  cover vector template class stl 
stl include implementation important generic algorithm  search sort algorithm 
algorithm implement template function 
discuss container class  will algorithm implementation 
stl differ library  iostream example  class algorithm generic  way template class template function 
iterator generalization pointer 
container template class  introduce section  iterator way 
learn iterator section will apply across wide range container apply solely vector 
reflect basic tenet stl philosophy  semantic  naming  syntax iterator usage uniform across container type 
begin review discussion declaration  will extensively discuss iterator stl 
suppose function define namespace 
follow declaration allow identifi mean version define namespace   scope declaration expression mean  scope declaration identifi version define  oppose definition define namespace 
discuss iterator will apply  operator level 
will see expression following   
standard template library 
type iterator 
define definition class int 
class int 
define namespace std 
point only explain object big
class int define namespace namespace std 
true  class_name int define namespace now future 
object hear define type class 
cover definition  possible common stl 
know type  define type 
summary  using_directive  scope using_directive identifi iterator mean type_name iterator define class int  turn define std namespace 
iterator basic iterator generalization pointer  typically implement pointer  abstraction iterator design spare detail implementation give uniform interface iterator across container class 
container class iterator type  just_like data_type pointer type 
just pointer type behave essentially dynamic variable data_type  iterator type behave iterator only container class 
iterator pointer  will wrong think pointer 
like pointer variable  iterator variable locate  point data entry container 
manipulate iterator follow overloaded apply iterator object  
prefix postfix increment   advance iterator next datum item 
prefix postfix decrement   move iterator previous data item 
equal unequal   test iterator point data location 
dereferencing operator   variable  give access datum locate  point
access read only  write only  allow read change datum  depend container class 
template class example container iterator
container class member_function process start 
variable locate  point datum container 
container class  include template class  follow member_function return object value point special data element data_structure  datum item container c
completely analogous null test pointer pass last node link list kind discuss 
locate datum item  kind end marker sentinel 
container class  tool allow write loop cycle element container object follow  variable type container object c
big picture 
now let look detail concrete setting template container class 
display illustrate iterator template class 
keep mind container type stl type  basic way 
iterator want int type   container class list template class 
iterator list int type int   program display  specialize type_name apply iterator vector int 
type_name want display define template class specialize template class int want type int  want type    
standard template library display iterator vector 
sample dialogue here container  set entry  container now contain  definition place name std namespace  entire declaration    
recall container type int 
think linear arrangement datum element 
first data element  second data element  forth 
object locate element 
locate  move locate 
allow move first element last element  need find first element need know see last element 
tell location 
pointing first  last  element  test see locate first  last  element 
iterator  comparison true only locate element 
pointer  true point  just negation true locate element 
member_function begin position iterator first element container 
vector  container class  member_function begin return iterator locate first element 
member_function end return sentinel value check 
value special value serve sentinel value 
ordinary iterator  compare iterator
value analogous value null mark end link list kind discuss 
follow loop display exact technique name container  
dereferencing overload stl container iterator produce element location 
container  produce element locate iterator 
statement output element locate iterator entire loop output element container 
dereferencing produce element locate iterator 
situation  produce read only access  allow change element 
situation  give access element will let change element 
vector  will allow change element locate illustrate following loop display   
declare iterator verbose   
compiler problem compiler problem iterator declaration 
declare iterator way 
example  following  
iterator generalization notion pointer     behave iterator pointer 
basic outline iterator cycle element container   type data_type item store 
member_function begin return iterator locate first element 
member_function end return value serve sentinel value location past last element container 
alternatively  code only single type iterator  following  
compiler accept alternative 
find compiler_will accept only
form work compiler  try
stl container class  produce read only access  allow change element 
stl container class  give access element will let change element 
est exe cis es 
iterator object 
suppose int 
write loop output element first element 
kind iterator container kind iterator 
iterator classify accord kind operation work
vector iterator general form  operation work iterator 
will container illustrate iterator 
case illustrate iterator decrement random access 
display show program object name container iterator 
sample dialogue third entry third entry third entry back 
expect  move iterator previous location 
decrement operator increment operator  move iterator opposite direction 
increment decrement operator prefix postfix notation 
addition change  return
detail return completely analogous happen increment decrement operator int variable 
prefix notation  first variable change change return 
postfix notation  return variable change 
prefer increment decrement operator expression return only change variable 
standard template library follow line display illustrate iterator random access element  third entry  third entry  third entry 
random access mean step directly element 
form random access
simply square bracket operator standard array vector 
square bracket notation iterator 
expression way obtain access element index 
expression + completely equivalent 
analogy pointer arithmetic see  + name location place third index location 
expression + return iterator 
expression + dereference iterator 
course  replace nonnegative integer obtain pointer pointing element 
sure note + change iterator iterator variable 
expression + return iterator location  leave
note meaning + depend location iterator
example  + mean location location
example  suppose previously discuss code display replace following note add   third entry  third entry 
output cout long third entry third entry third entry third entry third entry third entry move location location + now iterator location  location 
follow kind iterator  forward iterator  work iterator 
bidirectional iterator  work iterator 
random access iterator    random access work iterator 
now know iterator sense iterator classify 
kind iterator forward iterator  work iterator 
bidirectional iterator  work iterator 
random access iterator    random access work iterator 
note increasingly strong category  random access iterator bidirectional iterator  bidirectional iterator forward iterator 
will see  template class kind iterator 
iterator template class random access iterator 
note name forward iterator  bidirectional iterator  random access iterator refer kind iterator  type_name 
actual type_name will like  case happen random access iterator 
self exer cis 
suppose contain letter      
standard template library constant mutable iterator category forward iterator  bidirectional iterator  random access iterator subdivide category  constant mutable  depend dereferencing operator behave iterator 
constant iterator dereferencing operator produce read only version element 
constant iterator   example  assign variable output screen  change element example  assign 
mutable iterator  assign value will change corresponding element iterator mutable  show follow line display  
only constant iterator  obtain mutable iterator
mutable iterator want constant iterator
want constant iterator kind error check intend code change element
example  following will_produce constant iterator name   
iterator type_name const iterator will constant iterator 
reverse iterator want cycle element reverse order 
fortunately  easy way want 
member_function rbegin return iterator locate last element 
member_function rend return sentinel mark end  element reverse order 
note iterator type reverse iterator  increment operator move backward element 
word  meaning interchanged 
program display demonstrate reverse iterator 
reverse iterator reverse iterator cycle element bidirectional iterator 
general scheme follow  
standard template library display reverse iterator demonstrate reverse iterator 
sample dialogue forward  reverse  type constant version  name 
kind iterator kind iterator will cover book 
briefly  kind iterator encounter input iterator  essentially forward iterator input stream  container output iterator  essentially forward iterator output_stream 
detail  will need consult advanced reference 
est exer cis es 
suppose contain letter      
mark twain  head wilson container class stl kind data_structure hold datum  list  queue  stack 
template class parameter type datum store 
example  specify list list int  double  string  class struct type wish 
container template class specialize accessor mutator function add datum remove datum container 
container class kind iterator 
example  container class bidirectional iterator container class only forward iterator 
meaning stl container class 
standard template library display kind list slist  singly link list 
sequential container sequential container arrange datum item list first element  next element  forth last element 
link list discuss example kind list 
list discuss call singly link list only link location
stl container correspond singly link list  implementation offer implementation typically name slist 
simple list part stl doubly link list  template class_name list 
difference kind list illustrate display 
list display contain integer_value   order 
type list slist int list int 
display location iterator begin end 
tell enter integer list 
display draw singly doubly link list node pointer form discuss 
stl class list nonstandard class slist implement way 
simply think term location datum node iterator pointer 
think arrow display direction display 
want present template class slist help give context sequential container 
correspond discuss  first come mind programmer mention link list 
template class slist standard  will discuss
implementation offer template class slist want detail similar will list  decrement operator prefix postfix define slist 
simple program stl template class list give display 
function add element end list 
notice list template class  dereferencing operator give access datum reading change datum 
notice list template class template class iterator stl  definition place std namespace 
standard template library 
sample dialogue list contain  set entry  list now contain  note display compile run exactly replace int vector vector int 
uniformity usage key stl syntax 
difference vector container 
difference vector container random access iterator only bidirectional iterator 
example  start display  random access  replace occurrence vector vector char char  compile program  will compiler error 
sample member_function give display 
container  stack queue  obtain technique discuss subsection entitle  container adapter stack  sequence template class destructor return storage recycling 
deque  pronounce  queue  deck   stand doubly end  deque kind super queue 
queue add datum end data sequence remove datum end 
deque container display stl basic sequential container template iterator type_name kind iterator library header_file slist slist 
depend implementation
member slist 
member slist 
member slist 
member vector 
destructor return storage recycling behave assignment add datum end remove datum end 
template class deque template class deque parameter type datum store 
sequential container sequential container arrange datum item list first element  next element  forth last element 
sequential container template class discuss slist  list  vector  deque 
pitfall iterator remove element add remove element container  affect iterator 
general  guarantee iterator will locate element addition deletion 
container guarantee iterator will move addition deletion  course iterator locate element remove 
template class vector deque guarantee 
see stl container class contain type_name iterator    contain type definition scene 
typically type definition
template class discuss define type 
type type element store container 
example  list name int 
define type  unsigned integer type return_type member_function 
note  vector template class unsigned int  compiler_will happy think type just plain int 
major difference vector list 
template class slist  list  vector  deque member_function 
template class slist  list  vector  deque random access iterator 
template class slist  list  vector  deque mutable iterator 
container adapter stack queue container adapter template class implement top class 
example  stack template class default implement top deque template class  mean bury implementation stack deque  datum reside 
shield implementation detail see stack simple last first data_structure 
warn container adapter class queue template class 
stack queue discuss 
priority queue like queue additional property entry give priority add queue 
entry priority  entry remove priority queue manner remove queue 
item priority  high priority item remove low priority item 
will discuss priority queue detail  mention who familiar concept 
adapter template class default container class top build  choose specify underlie container  efficiency reason depend application 
example  sequential container serve underlying container stack sequential container vector serve underlying container queue 
default underlie data_structure deque stack queue 
priority queue  default underlie container vector 
happy default underlie container type  container adapter look like template container class
example  type_name stack template class default underlie container stack int stack int 
wish specify underlying container vector template class  stack int  vector int type_name 
will default underlie container 
specify underlie container  warn compiler prior compile code symbol type expression space
stack int  vector int  space last 
stack int  vector int 
compiler need space symbol 
member_function detail stack template class give display 
queue template class detail give display 
simple example stack template class give display 
stack adapter template detail type_name stack stack stack element type
library header  stack  place definition std namespace 
define type   
note pop void function 
return element remove 
stack template class default constructor  copy_constructor  constructor take object sequential container class initialize stack element sequence 
destructor return storage recycling behave assignment_operator 
queue adapter template detail type_name queue queue queue element type
efficiency reason  vector type 
library header  queue place definition std namespace 
define type   
sample member_function member function 
note pop void function 
return element remove 
queue template class default constructor  copy_constructor  constructor take object sequential container class initialize stack element sequence 
destructor return storage recycling behave assignment_operator 
member_function pop remove element  return element 
need top read element remove 
sample dialogue enter line text  straw write backward wart est exer cise 
kind iterator forward  bidirectional  random access template adapter class
kind iterator forward  bidirectional  random access queue template adapter class
char  type return_value 
associative container set map associative container basically simple database 
store datum  struct type datum 
datum item associated value know key 
example  data struct employee  record  key employee  social security number 
item retrieve basis key 
key type type datum store need relationship
simple case datum item key 
example  set element key 
set template class sense  simple container imagine 
store element repetition 
first insertion place element set 
additional insertion first effect  element once 
element key  basically  
standard template library just add delete element ask element
like stl class  template class write efficiency goal 
order work efficiently  object store value sorted order 
specify order store element follow  order order behave order relation take argument type return bool type element store 
ordering specify  ordering assume relational operator 
basic detail template class give display 
simple example show member_function template class give display 
essentially function give order pair 
value first pair  value second pair first  second
template class implement object stl 
example  want assign unique number string name  declare object follow  string  int  string value know key  object associate unique int value 
alternate way think associative array 
traditional array map numerical index value 
example  store number index 
associative array allow define index data_type choice 
example  numbermap   associate integer string   
convenience  square bracket operator define allow array like notation access  insert find method want 
like object  object store element sorted order key value 
specify ordering key third entry angular bracket 
specify ordering  default ordering
restriction ordering ordering allow template class 
note ordering key value only 
second type type need ordering 
object  sorting store entry object reason efficiency 
ordering strict weak ordering 
typical ordering implement operator strict weak ordering 
who want detail  strict 
ordering sort element storage 
ordering give  ordering binary operator 
library header   place definition std namespace 
define type   
iterator  iterator    
iterator bidirectional include const mutable 
add delete element affect iterator  iterator locate element remove 
sample member_function member function mean copy element
element effect 
element effect 
element return 
template class default constructor  copy_constructor  specialized constructor mention here 
destructor return storage recycling behave assignment_operator 
standard template library display program template class 
sample dialogue contain  remove c
easy way add retrieve datum map operator 
give map object expression will_return reference data element associate
exist map will create default_value datum element 
object type string  default_value empty string 
operator add map replace existing 
example  statement newdata  will create association newdata 
note care take ensure map entry create mistake 
example  execute statement  intention retrieve value associate mistakenly enter value map  will default_value assign
basic detail map template class give display 
order understand detail  first need know pair template class 
stl template class pair object pair value first element type second type 
apair object type pair  first element  type  second element  type 
member variable first second public member variable  accessor mutator function need 
header_file pair template utility 
pair template class  need following  like file  utility std    
case  access iterator  will refer   will refer data value 
simple example show member_function template class give display 
will mention associative container  will give detail
template class multiset multimap essentially multiset allow repetition element multimap allow multiple value associate value 
standard template library display template class_template class detail type_name keytype  keytype  order associate  map  element type keytype element type
ordering sort element value efficient storage 
ordering give  ordering binary operator 
library header  place definition std namespace 
define type  type value  type value map 
iterator bidirectional 
iterator include const constant mutable 
example  type iterator  change value value type
least first  treat iterator constant 
add delete element affect iterator  iterator locate element remove 
sample member_function member function meaning element
element type keytype  
return value type iterator  bool 
remove element 
return element 
contain object  default object type insert return 
template class default constructor  copy_constructor  specialized constructor mention here 
destructor return storage recycling behave assignment_operator 
sample dialogue entry hot planet
iterator will output order sort key 
case output will list alphabetically planet 
iterate home 
standard template library large planet solar system red planet hot planet mile hour wind dwarf planet ring tilt side atmosphere sulfuric acid program tip initialization  range auto videonote container container feature introduce easy work collection 
initialize container object uniform initializer list format  consist initial datum curly brace 
auto range loop easily iterate container 
follow initialized collection object  
iterate container conveniently range loop auto  auto auto 
stl implementation strive optimally efficient 
example  element store sorted order algorithm search element efficient 
member_function template class maximum running time 
maximum running time call big notation  discuss section 
subsection entitle  container access run  advanced reference later will tell guarantee maximum running time function 
est exer cis es 
element will follow code
value return
give comprehensive description here  will present large sample give feel contain stl give sufficient detail start template function 
template function call generic algorithm 
term algorithm reason 
recall algorithm just instruction perform task 
algorithm present language  include programming_language like 
word algorithm  programmer typically mind formal presentation give english pseudocode 
think abstraction code define function 
give important detail fine detail coding 
stl specify detail algorithm underlie stl template function call generic algorithm 
stl function template just deliver value way implementer wish 
function template stl come minimum requirement satisfied implementation satisfy standard 
case  implement guarantee running time 
add entirely idea function interface 
stl  interface only tell programmer function function  interface tell rapidly task will
case  standard specify 
standard template library algorithm exact detail coding 
specify algorithm  know efficiency algorithm 
key specification efficiency guarantee code 
will term generic algorithm  generic function  stl function template mean
order terminology discuss efficiency template function generic algorithm  present background efficiency algorithm measure 
run time big notation ask programmer fast program expect answer like   speed program give single number 
program_will typically take long amount time large input will small input 
expect program sort number take time sort number sort thousand number 
take second sort number  second sort thousand number 
run time second number 
need true 
take time list sort sorted 
case  define time take hard  list  time take list number program run long 
call bad case running time 
will mean bad case run time give run time algorithm code 
time take program algorithm give formula  +  +  
run time +  input size program_will run + time unit 
follow code search array element determine value target array  int  bool false  
like estimate depend computer know computer will computer run program time 
possibility count number step   easy decide step
situation normal count number operation 
term operation vague term step  least agreement practice qualify
let code  application follow will count       
computer carry operation  will assume account bulk time need run code 
analysis time will assume take time total time program run equal time need perform operation 
idealization clearly completely true  turn simplifying assumption work practice analyze program algorithm 
simplifying assumption  still case  value target array
let first case target array 
assume target array  loop will execute time  element array 
time loop execute  follow operation      add operator loop iteration 
finally  iteration  boolean expression check false 
add final 
standard template library operation   tally operation  total + operation target array 
will leave exercise confirm target array  number operation will +
bad case running time + operation array element value target 
just determine bad case run time search code + operation 
operation traditional unit time  like nanosecond  second  minute 
want know long algorithm will take computer  know long take computer perform
nanosecond  time will + nanosecond 
second  time will + second 
slow computer take second perform time will + second 
general  take computer nanosecond perform actual running time will approximately + nanosecond 
running time express nanosecond  multiply constant depend computer
estimate + only accurate constant  standard notation sort estimate discuss notation next 
estimate run time  just normally express call big notation 
circumstance  code program algorithm run time + 
read big +  need know constant will
will undoubtedly computer  know reasonable computer system 
computer fast  
computer slow  large 
change unit  nanosecond second  only involve constant multiple  need give unit time 
sure notice big estimate upper bind estimate 
approximate take number high side  low side  true count 
notice perform big estimate  need determine exact count number operation 
only need estimate correct  constant  estimate twice large true number 
short circuit evaluation  evaluate  actually operation 
important obtain upper bound 
add extra significant 
sample case  parameter number array_element search 
surprisingly  take long search large number array_element search small number array_element 
bigo running time estimate express function size problem 
algorithm will involve range value container 
case will number element range 
example  follow + +  +  + follow + + +  +  + + big running time estimate admittedly crude  contain
will distinguish run time + run time  let distinguish run time determine algorithm fast
look graph display  notice graph function eventually fall graph function algorithm fast algorithm problem size handle  programmer find practice algorithm perform algorithm practical application intuitively   similar remark apply big running time 
terminology will help description generic algorithm running time 
linear run time mean run time
linear running time run time 
quadratic running time mean run time high term 
quadratic running time run time 
will occasionally logarithm run time formula 
normally give base  change base just constant multiple 
see log  think log base wrong think log base
logarithm slow grow function 
run time fast 
write lg 
container access run time now know big notation  express efficiency access function container class discuss section   insertion back vector  standard template library 
set map  finding find  number element container 
est exe cis es 
show run time run time 
show basis logarithm  great  constant loga 
need specify base 
simple typical example generic find function 
generic find function similar find member_function set template class find function  generic find function take argument find function discuss present set template class 
generic find function search container locate element  generic find stl sequential container class 
display show sample generic find function class vector char 
function display behave exactly replace vector char list char replace vector char sequential container class 
reason function call generic 
definition find function work wide selection container 
find function find element look return second iterator argument  need equal end display 
sample dialogue show situation find find look
standard template library 
sample dialogue enter line text line text 
enter following enter first lin enter following text 
end demonstration 
sample dialogue enter line text will
enter following enter first will
enter following find find look
end demonstration 
find work absolutely container class 
start take iterator argument  container  stack  iterator 
find function  container iterator  element store linear sequence generic algorithm operator move iterator container  element comparable 
word  container forward iterator strong kind iterator  bidirectional iterator 
present generic function template  will iterator type parameter name require kind iterator type parameter name 
forwarditerator replace type type kind forward iterator  iterator type list   container template class 
remember  bidirectional iterator forward iterator  random access iterator bidirectional iterator 
type_name forwarditerator iterator type bidirectional random access iterator type plain old forward iterator type 
case  specify forwarditerator simple iterator kind  namely  input iterator output iterator  discuss input output iterator  mention function template declaration 
remember name forward iterator  bidirectional iterator  random access iterator refer kind iterator  type_name 
actual type_name will like  case happen random access iterator 
display give sample nonmodifying generic function stl 
display notation common discuss container iterator 
iterator location encounter move iterator first equal iterator last call range first  last 
example  follow loop output element range first  last endl  note range give need container type container 
example  search function  range   container 
movement iterator first   include location last   common come special name  range first  last 
example  follow output element range 
standard template library display nonmodifye generic function work forward iterator  mean work bidirectional random access iterator 
return second target find 
return false 
    see  subrange  
return match find 
actual return_type integer type discuss  return_value assignable variable type_int 
function search search subsequence  find function search single value 
decide find search single element 
return iterator return just boolean value  big difference 
function require range search sort ascend order run time  find function require range sort guarantee only linear time 
element sorted order  search quickly 
note function guarantee implementation will binary search algorithm  discuss 
importance binary search algorithm guarantee fast running time  
read hear binary search  just think efficient search algorithm require element sort 
only point binary search relevant material
est exer cis es replace occurrence identifi vector identifi list display 
compile run program 
suppose object class vector int 
search generic function display write code determine contain number follow 
need give complete program  give include container modifying algorithm display contain description generic function stl change content container way 
remember add remove element container  affect iterator 
guarantee iterator will locate element addition deletion container template class guarantee 
template class see  list slist guarantee iterator will move addition deletion  course iterator locate element remove 
template class vector deque guarantee 
function template display guarantee value specific iterator guarantee course  count matter container
standard template library display modify generic function 
name iterator type parameter tell kind iterator function work 
remember minimum iterator requirement 
example  forwarditerator work forward iterator  bidirectional iterator  random access iterator 
iterator value equal target first  
est exe cis es 
template function list container 
copy template function vector container  copy require forward iterator vector random access iterator 
algorithm display show sample generic set operation function define stl 
note generic algorithm assume container store element sorted order 
container set  map  multiset  multimap store element sorted order  function display apply template class container 
container  vector  store element sorted order function container 
reason require element sort algorithm efficient 
operation work set  map  multiset  multimap container work container 
example  work vector  list  deque content sort 
container work  element container store sorted order 
operator work forward iterator  mean work bidirectional random access iterator 
return false 
standard template library void     result  sorted set difference range   
est exe cis 
mathematic course version set keep element sorted order union operator 
template function require container keep element sorted order 
sort algorithm display give declaration documentation template function  sort range element merge sorted range element 
note sort function sort guarantee run time log 
scope book  show write comparisonbase sort algorithm fast log 
guarantee sort algorithm fast possible  constant multiple 
display generic sort algorithm template class randomaccessiterator void first  randomaccessiterator  element range first  ascend order 
sort operator  operator define 
answer self test exercise summary iterator generalization pointer 
iterator move element range container 
operation   dereferencing define iterator 
kind iterator forward iterator  work iterator 
bidirectional iterator  work iterator 
random access iterator    random access work iterator 
mutable iterator  assign value 
stack first container 
queue first first container 
set simple collection element 
map allow store retrieve key value 
multiset class allow repetition entry 
multimap class allow single key associate multiple datum item 
answer elf test exerci se 
major difference container random access iterator list only bidirectional iterator 
mutable iterator 
stack template adapter class iterator 
queue template adapter class iterator 
mapping  mapping default string  blank 
yes type  only type set object 
type parameter template class type element store 
 return iterator locate element  
just note  long
mathematic  will mean equal assignment 
first note loga loga 
see first identity  just note raise power loga  raise power loga 
set loga  loga logb 
program run exactly
yes  random access iterator forward iterator 
template function require container keep element sorted order allow function template implement efficient way 
practice program practice program generally solve short program directly apply programming principle present
write program declare deque store_value type double  read double number  store deque 
call generic sort function sort number deque display result 
write program map template class compute histogram positive number enter user 
map key number enter  value counter number time key enter
sentinel value signal end user input 
example  user input  program output follow necessarily order number number number number occur time 
videonote solution practice program standard template library give variable type string set arbitrary text  write program stack template class type char reverse string 
list student follow course number separate space student enrol
listing order 
example  student student list look like write program read datum format console 
inputte datum 
map template class map integer student type string hold class student enrol
datum input  iterate map output student class store student 
list class organize student
high forget need space character define map vector 
programming project programming project require problem solve practice program solve way 
visit complete programming project online instant feedback 
write program allow user enter number student name score 
program display student name score accord ascend order score 
template class generic sort function stl 
note will need define structure class type datum consist student name score 
will need overload operator structure class 
prime number integer great divisible only 
integer divisible integer integer
greek mathematician eratosthene pronounce  er ahtos thin eeze give algorithm  call sieve eratosthene  find prime number integer 
algorithm work like begin list integer
number first prime 
cross list 
first number cross next prime 
multiple programming project prime 
cross multiple list 
note cross  cross 
first number cross next prime 
algorithm continue fashion reach 
number cross list prime 
container integer 
array bool initially set true keep track cross integer 
change entry false integer cross list 
improve solution way  program need way
try test program 
argue prime minimum limit square root
suppose collection student record 
record structure following type  struct studentinfo 
record maintain vector studentinfo 
write program prompt fetch datum build vector student record  sort vector name  calculate maximum minimum grade class average  print summarize datum class roll grade 
continue programming project  write function separate student vector studentinfo record vector  contain record pass student contain record ask way  give run time estimate 
generate second vector pass student third vector student 
keep duplicate record least time  way 
create vector student test function 
student record  erase 
standard template library member_function student record original vector 
write program way 
potentially erase member middle vector 
move operation 
give big estimate run time program 
time efficiency erase list affect run time program 
rewrite program list vector 
remember list indexing random access iterator only bidirectional  random access 
generic function compute intersection
here example intersect store result set set string  iterator 
videonote solution programming project 
project create database book store vector 
keep track author  title  publication date book 
program menu allow user select following  add book author  title  date  print alphabetical list book sort author  quit 
class hold datum book 
class hold string field  hold author name  publication date  hold book title 
store entire database book vector vector element book class object 
sort datum  generic sort function algorithm library 
note require define operator compare object type book author field book compare 
programming project sample input output behavior look follow 
need look identical  just give idea functionality 
select follow choice  
add book 
print list sort author 
quit enter title  human enter author  sturgeon  theodore enter date  select follow choice  
add book 
print list sort author 
quit enter title  problem solve enter author  savitch  walter enter date  select follow choice  
add book 
print list sort author 
quit book enter sort alphabetically author savitch  walter 
problem solve 
select follow choice  
add book 
print list sort author 
quit enter title  home universe enter author  kauffman enter date  
standard template library select follow choice  
add book 
print list sort author 
quit book enter sort alphabetically artist kauffman  home universe  savitch  walter 
problem solve 
create containing list  sure place space last compiler early 
example  list int define element link list contain element type_int 
code list int space will_produce 
collect file movie rating movie rate bad excellent 
first line file number identify rating file 
rating consist line  name movie follow numeric rating 
here sample rating file unique movie rating  harry potter order phoenix harry potter order phoenix bourne ultimatum harry potter order phoenix bourne ultimatum wall glitter write program read file format  calculate average rating movie  output average number review 
here desire output sample datum  glitter  review  average harry potter order phoenix  review  average programming project bourne ultimatum  review  average wall review  average map multiple map calculate output 
index string represent movie name integer store number review movie sum rating movie 
text file name  name line  compile source 
sample follow  brooke trout dinah soar jed dye brooke trout jed dye paige turner duplicate name file 
like generate invitation list want multiple invitation person 
write program eliminate duplicate name set template class 
read name file  add set  output name set generate invitation list duplicate 
programming project racer class store race participant 
class store racer name  bib number  finish position  split time record rfid sensor 
choose structure store
include function access change racer constructor 
map store race datum 
map bib number key value racer object correspond bib number 
map will need search bib number anymore  directly access split final position base bib number 
high forget need space character define map vector 
keyword follow keyword predefine purpose language 
variable_name programmer define function 
addition follow keyword list  identifier contain double underscore reserve implementation standard_library program 
precedence operator operator give box precedence 
operator high box high precedence operator low box 
unary operator assignment_operator execute right leave operator precedence 
example  mean 
operator precedence execute leave right 
example  + + mean + +
ascii character set only printable character show 
character number blank 
function_declaration give number type argument type value_return 
case  function_declaration give only type parameter give arithmetic function_function declaration description 
appendix input output member_function form function_call description 
string fstream 
 return true previous operation open stream
 return true program attempt read last character file connect input stream 
return false 
 read character input stream set equal character 
skip whitespace 
line max character long  only first read 
declared size fstream iostream 
 read character input stream return character 
character read remove input stream  next read will read character 
write value output_stream 
 place value input stream value next input value read stream 
file connect stream change 
 specify number digit output decimal_point float point value output_stream 
set field width next value output stream 
see display list possible flag 
see display list possible flag 
value_return value type_int  perform explicit implicit typecast obtain char 
function declaration description 
return true argument lowercase letter 
return true argument 
detail implementation dependent 
return false 
return true argument printable character satisfy isalnum whitespace 
append value
change value
return null pointer pattern find 
return null pointer character find 
return null pointer character find 
return integer zero  zero  great zero accord equal great 
ordering lexicographic ordering 
predefine integer constant cstdlib 
value dependent will least 
reinitialize random number generator 
argument seed 
call srand multiple time argument will cause rand random produce sequence pseudorandom number 
rand random call previous call srand  sequence number produce call srand argument 
think argument type int restriction appendix trigonometric function function radian  degree 
function declaration description 
inline function member_function definition short  give function definition definition class 
simply replace member_function declaration member_function definition  definition class definition  include class_name scope resolution operator 
example  class pair define inline function definition constructor member_function  class pair 
note semicolon need closing brace inline function definition  incorrect semicolon
inline function definition treat differently compiler run efficiently  consume storage 
inline function  function_call program replace compile version function definition  call inline function overhead normal function_call 
want expression left hand side assignment  define return reference  add return_type 
appendix object declare follow  pair 
pointer define member_function class  want refer call object 
pointer predefine pointer point call object 
example  class like following  class sample public  
notice name call object  name pointer point call object 
pointer value change  point call object 
comment previous sample normally need pointer
situation handy 
place pointer commonly assignment 
example  follow class  overload assignment appendix class public  
definition overloaded assignment pointer 
definition problem case  object occur side assignment like  array member will delete 
avoid problem  pointer test special case follow  version bug fix  
section entitle  overload assignment_operator   overload assignment string class_call stringvar 
section  need pointer member variable call test object side assignment 
class discuss alternative only member variable 
case  essentially alternative pointer 
example  display overload + friend 
label friend inside class definition  follow  amount money united states currency 
define overload + class definition show display 
possible overload + operator member operator 
overload + member  class definition begin follow  amount money united states currency 
money      cost + tax  
first argument unqualified  member variable call object 
overload member variable strange first  easy
expert advocate overload_operator member operator friend 
spirit object orient programming 
big disadvantage overload binary member 
overload binary member  argument money constructor argument type long  value will long value automatically convert value type money 
overload + member  reverse argument 
follow illegal  +  call object 
conversion long value type money work argument call object 
hand  overload + friend  follow perfectly legal  +  
index symbol +  addition   alert escape sequence   ampersand symbol       address call reference parameter      memory location pointer   arrow_operator  arrow    assignment          arithmetic_operator  dynamic data_structure inheritance object overloading  pointer   variable  vector   asterisk symbol     dereferencing operator    multiplication operator   pointer variable declaration   backslash   backslash escape sequence   boolean operator   comparison great   boolean operator     boolean operator     brace        programming layout  conditional statement local_variable declaration  loop body execution  nest statement  structure member name     colon symbol   derived_class separation  inheritance scope resolution operator    comma separation declaration    comment symbol    comparison equal      comparison great operator   comparison equal operator     comparison equal operator   comparison equal operator   decrement operator      direction arrow   directive notation   division operator   dot calling operator      double quote escape     double quote string character   equal sign    extraction operator      factorial function   increment operator       insertion operator       instruction     instruction    null character    parenthese        argument  index arithmetic order  boolean expression   control expression  predefine function   return_statement  type cast  predefine function header_file   real backslash escape   remainder operator    semicolon       end declaration    statement   structure definition     single quote constant character   square bracket       array  multidimensional array  variable declaration  vector  +  string concatenation  
see procedural block   branch statement function local_variable  nest  scope   statement  bool value    data_type  index int  convert programmer define function_return  boolean expression      arithmetic operation branch mechanism   complete evaluation  datum value  evaluating  int value conversion  loop mechanism        parenthese  precedence rule  short circuit evaluation  subexpression  true false value   truth table  brace        branching mechanism    block  boolean expression   brace   break_statement  flow control comparison operator compound statement  control expression  flow control  statement   indent   local_variable  menu  multiway  nest statement   operator  programmer define function_call string inequality switch_statement  break_statement   branch mechanism  flow control  loop mechanism  loop mechanism  nest loop switch_statement  bubble sort  bug  
see debug byte   programming  arithmetic_operator  assignment statement  asterisk symbol  backslash brace    branch mechanism  cin input statement   comment  compiler compile  compound statement  constant  cout output statement   data_type   debugging  declaration variable   direction arrow  directive   expression  flow control  increment decrement operator  indentation  input   input output  instruction  language  line break  loop mechanism   function  name  object code  output   programmer role  return_statement  run  spacing   statement    user role  variable    programming   auto  constructor delegation conversion string number  datum value  decltype  member initialization nullptr range base  index string   cstre library  argument  array  declaration equality extraction operator function   getline function  initializing  input output  insertion operator null character   number conversion  parameter  predefine function   robust input   strcat function  strcmp function  strcpy function  string object conversion  value  variable  call reference parameter       argument  call value combine function_call  memory location  pointer  call value parameter     argument call reference combine class  dynamic array  local_variable  call invocation       absolute value_function  argument    call reference parameter  call value parameter  constructor  function      header_file  include directive  loop body nest loop  predefine function  procedural abstraction  programmer define function  return_statement  capacity function  catch block    catch block parameter  central processing unit cpu   char data_type  character     blank space  data value  default argument  edit text file  eof function function   function input output  isspace function  member_function    function  predefine function   put function putback function stream parameter toupper tolower value_return  whitespace   child class    chip  computer processor cin input statement   class           abstract data_type adt  adapter  ancestor  array base     programming call value parameter child    constructor   container  copy_constructor index define  derive      destructor dot_operator dynamic array encapsulation  exception  file friend_function  hierarchy  inheritance  link list member_function    member variable  object orient programming oop object     overload_operator  parent    private member public member redefining function  scope resolution operator stream string   stringvar  structure compare  template close function   coding      array program  procedural abstraction  recursion program   colon   comma  separation declaration  comment  programming compact disc cds  comparison operator    operator equal   great  great equal    equal  equal  operator  string class  string inequality compiler program    interface programming   compile process  error_message  ifndef directive    include directive    language translation line break  link code  object code   separate compilation  space   syntax_error  testing  complete evaluation  compound statement  computer system  compiler  hardware  input output device  language linker  mainframe  memory  network  operating_system  personal pc  processor cpu   program   software   concatenation +  string  const modifier     array declaration array parameter  programming friend_function inconsistent constant array parameter  constant iterator  constant parameter  constant        data_type  declare  enumerate type  friend_function function global name  name  number  lead zero single quote    string class conversion  index constructor         array   calling invoke   class   copy   default    dynamic array   inheritance  initialization object  member_function argument overload  size array string class vector container modifying algorithm  container   access run time  adapter class  associative  auto  deque  doubly link list  efficiency initializing  map class  class  queue class  range sequential  set class  singly link list  stack class  template type definition control expression  copy_constructor   count control loop  cout output statement    debug direction arrow  program output  stream  variable declaration dangle pointer   datum  computer program data abstraction  template data_type      arithmetic_operator bool  boolean   char  character  compatibility constant    double   enumerate  expression float  float point notation  int     integer  long  name declaration  numeric   op shorthand notation  short  string class template variable  debugging     assert macro bug  code  common error  cout statement error_message  function   localize error  logic error  loop  error  reteste change  run time error  second opinion syntax_error  testing program  trace variable   warning message  decimal notation   declaration             array   cin input statement comma  separation  const modifier cout output statement string variable  double variable_type  index function     illegal range  indexed variable  initialize int variable_type    memory multidimensional array  postcondition  precondition  programmer define function    semicolon end square bracket  stream  type_name variable        vector  declare size  decltype  decrement operator    default argument  default constructor    delete_operator    deque  dereferencing operator    derived_class       operator colon separation constructor copy_constructor define  destructor exception specification implementation inheritance     redefining function  descendant  destructor    dynamic array  inheritance polymorphism virtual  digital video disc dvds  function implementation  direction arrow  directive   diskette floppy disk  division operator  loop statement    break_statement execution  infinite  syntax  dot operator    double     arithmetic_operator decimal notation exponent notation float point notation numeric data_type   output value scientific notation variable_type  double quote   string character  double precision number  doubly link list   driver  function testing dynamic array      array variable call value parameter class constructor copy_constructor creating delete   destructor link list  multidimensional  pointer arithmetic pointer variable    size square bracket  stringvar class  variable     echo input  empty statement  encapsulation  endif directive  endl instruction  eof function  equal function  equal comparison    index error        array  bug  comma index variable  common  compiler   constant parameter debug  file index variable out_of_range  localizing  logic  message   polymorphism run time  syntax  testing trace variable   virtual member_function warning message compare escape sequence  exception  catch block parameter  catch block   class hierarchy  class define derived_class function  throw handler  handling  memory  test multiple   nest try catch block  overuse programming technique rethrowing  specification  throw list  throw statement  throw exception   trivial  try block  try throw catch mechanism  uncaught  executable statement 
see execute program  exit function   exit flag loop termination  exponent notation  expression  
see arithmetic_operator  expression external file name  extraction operator     fabs function  factorial function  function  file       abstract data_type adt   appending  application  character close function  computer memory end  eof function error_message  exit function  external name  extraction operator  function implementation   include directive   input output   insertion operator  interface    member_function  memory storage name  namespace open function  opening successfully   permanent storage  reading  separate compilation stream text editing  writing  first first fifo data_structure  fix point notation  flag   flash drive  float data_type  float point notation  flow control   boolean expression  branch mechanism   index programming comparison operator compound statement  enumerate type  increment decrement operator   loop mechanism     statement    array empty null statement  multistatement body  numeric calculation semicolon  variable formal parameter 
see forward iterator  freestore  friend_function  accessor function const parameter modifier  constant parameter  implementation  equal  lead zero number constant  money class  example nonmember function  private member  access syntax  function_body  function_declaration    function definition       function header                   
see argument     arithmetic  array size array argument   array library  string   call reference  call value parameter   call invocation      case study  production graph  character   const parameter modifier   debugging   declaration     default argument  definition      implementation  driver program equal  factorial  flag format output friend  graph  index variable  inheritance  inline  input output    local_variable  manipulator  member   member_function accessor  mutator  name   nonmember  inherit   overloading name  overriding  parameter      polymorphism predefine    procedural abstraction  programmer define  random number generator   recursive  redefining function  return_statement    return array  scale  signature  stream string  index stub  subtask   task  recursion testing   throw exception top design  trigonometric  type casting  value_return   virtual  void  generic algorithm  big notation  container access run time  container modifying  nonmodifying sequence  run time  set  sorting  template function  getline function    global name constant  global scope  global_variable   graph function  great comparison  great equal comparison   handling exception  hard disk  hardware computer system  input output device  memory  processor cpu   secondary memory  header_file  predefine function  hierarchy structure  high level language  identifier  variable  statement   boolean expression brace  branching mechanism   comparison operator compound statement dangle problem  indent   multiway branch  nest  ifndef directive  ifstream   implementation file  adt    implementation phase  include directive        programming  directive notation file   header_file ifndef directive manipulator function output predefine function preprocessor separate compilation increment operator      indentation  programming indent branch   index subscript array   index variable     argument function  array comma  declaration function illegal range initializing  multidimensional array   square bracket  infinite loop statement   infinite recursion  hiding   
see procedural inheritance    ancestor class  operator base_class     child class    class hierarchy  colon constructor index copy_constructor derived_class     descendant  destructor function signature  function inherit   member_function    parent class    polymorphism private member protect qualifier  redefining function  initialization       array   string  constructor declaration object  structure  variable     inline function  input        character datum  cin statement  computer hardware device  echoing  function  loop  design ending  member_function   character put function  putback function  reading file  stream   input iterator  input output      argument parameter  programming string  character  cin input statement  cout output statement  decimal_point format number  designing  double statement  end file eof   escape sequence  file   flag  formatting  function    getline function  include directive  manipulator  namespace   function   instruction     predefine character function  stream   string class using_directive   insertion operator          int         arithmetic_operator array declaration boolean expression enumerate type  numeric data_type    unsigned type  value conversion  variable declaration     vector declaration integer    data value  type casting division  variable  interface file  adt      flag  flag  flag  flag  flag  iostream library  isalpha function  isdigit function  islower function  isspace function  isupper function  index iterator        auto  variable declaration bidirectional  compiler problem  constant  dereferencing operator forward    input  loop mechanism   mutable  operator output  pointer random access  recursion compare recursive program version  reverse  template type using_directive vector language   assembly  programming  compiler translation computer program high level  linker program low level  machine  program translation last first lifo data_structure   late dynamic binding  leaf node  length function  comparison  equal comparison  lexicographic order  line break  programming    linear running time  link list   
see container argument  operator class data_structure  doubly   dynamic data_structure  head insert node  lose node  middle  node class  node   pointer queue remove node search  singly  stack  linker program  list head size loop  local_variable    block scope   call value parameter  function  global constant global scope  global_variable inadvertent  namespace scope  logic error  long data_type  loop mechanism      ask iterate technique  body  boolean expression  brace execution break_statement count control  debugging  decrement operator   design choice  statement    end input loop  exit flag termination  flag  flow control   statement   increment operator   infinite   iteration    list head size termination  nest    procedural abstraction index product obtain semicolon sentinel value  sum obtain uninitialized variable statement    zero time body execution   low level language  machine language  function  memory  mainframe computer system  manipulator function  map class  member_function           accessor function bankaccount class example blank space string  character class    constructor  definition dot operator  eof  exit  getline  inheritance  length  mutator function   character  object private   protect  public  put  putback function  recursion redefinition scope resolution operator stream string class member name  structure   member value  structure   member variable  structure    memory       address  array declaration array parameter  bit binary digit  byte  call reference parameter computer hardware component  delete_operator dynamic variable  file  freestore  location    management  pointer random access ram  secondary auxiliary   sequential access storage variable menu  program choice switch_statement message  error  monitor  computer output device  multidimensional array   comma  index  declaration delete operator dynamic  index variable  parameter  size square bracket  dimensional example  multiplication operator  mutable iterator  mutator function  name          constant   data_type  external file  file   formal parameter  function  index global constant  identifier  overloading function  pointer type  procedural abstraction  stream   typedef function  variable    namespace      class creating  file global  local_variable name  output qualifying name  stream unnamed  using_directive      nesting       block   brace  break_statement dangle problem  function_call statement  indent statement  loop    multiway branch   procedural abstraction scope block statement  try catch block  network computer system   dynamic array pointer function   line instruction       programming endl place input member_function output node class  node    arrow arrow_operator  binary tree doubly link list  head front list  insert inserting list   leaf  link list   lose  middle list  insert remove  null constant pointer variable remove list  root  search link list structure  tree nonmember function  nonmodifying sequence algorithm  equal comparison     null character   null constant  null statement  nullptr  programming  number format  decimal_point number string conversion  numeric calculation   
see arithmetic_operator loop statement loop design product  sum  numeric data value   object code   object orient programming oop  class  encapsulation  inheritance  polymorphism  program design object      class   constructor file initialization member_function   public private  stream index error  ofstream   op  open function   operating_system  computer software operator           arithmetic   boolean expression   comparison  decrement  extraction     increment  insertion      overloading   precedence   unary      output       computer hardware device  cout statement   decimal_point format number  double statement  escape sequence  flag  format function  insertion manipulator   stream    writing file  output iterator       overloading       array index  constructor  extraction  function_name  insertion  operator   recursion compare type_conversion  unary operator  override function  parameter            argument     array  array    string  call reference   call value   character const modifier   constant  constant array  formal     friend_function function argument function_call  function_declaration function subtask local_variable  memory location   mixed list  multidimensional array  name   pointer  procedural abstraction programmer define function  size array  stream versatility  parent class    parenthesis     partially fill array  personal computer pc  pointer variable   pointer     address  ampersand symbol arithmetic perform arrow arrow_operator  assignment   asterisk automatic variable  call reference parameter call value parameter  dangle  index declaration delete    dereferencing destructor dynamic array   dynamic variable    freestore  iterator  link list memory management name  node    null constant assign queue stack static variable  structure contain  tree typedef function   variable    polymorphism   destructor virtual error  late dynamic binding  overriding function  virtual_function pop function  postcondition  pow function  precedence rule  precondition  predefine function      ab  absolute value  argument   string   call invocation  character datum   fab  header_file include directive  isspace  parenthesis  pow  random number generation sqrt   srand   strcmp  string number conversion  strncpy  toupper tolower  type cast using_directive  value_return   class  private member      accessor function class friend_function access inheritance mutator function public member problem solve phase     procedural abstraction   algorithm design  black box analogy  case study  buy pizza  case study  supermarket pricing  code   function_call function  function_return value  hiding  nest loop parameter name postcondition  precondition  problem analysis   program testing   pseudocode  subfunction processor cpu  computer component  programmer role  programmer define function  argument  body  bool value  return  branch statement call value parameter  call   declaration    index definition    header   parameter  return_statement   spacing line break syntax value_return   programming   
see programming  programming abstract data_type adt  algorithm  implementation phase  object orient oop  problem solve phase  program design software life cycle  program     algorithm compiler   computer software  debugging  design programming  executing  high level language implementation design phase  language translation linker  logic error  object code problem solve design phase  run time error  run  source_code  syntax_error  testing  protect member  pseudocode   public member  accessor function class mutator function put function  putback function  quadratic running time  queue class  queue  random access iterator  random access memory ram  random number generation   range container  reading file  recursion  base case  case study  binary search  case study  vertical number  check program design technique  efficiency ending  function definition  function  infinite  iteration compare iterative version last first lifo data_structure  member_function overloading compare return_value  stack task  function trace recursive call  value  function void function remainder operator  reserve function  resize function  rethrowing exception  return_statement     programming function parenthesis programmer define function  void function return_value  see value_return reverse iterator  robust input  string   root node  running program   running time  run time error  scale function  scientific notation  scope    block   global  local   variable   scope resolution operator  search array  search link list  secondary auxiliary memory   selection sort  semicolon     index sentinel value  loop design sequential access  memory sequential container  set algorithm  set class  setf function  setprecision manipulator  setw manipulator  short data_type  short circuit evaluation  single quote   constant character  single precision number  size number element       array parameter  array     capacity compare const modifier constructor declare  dynamic array  function argument multidimensional array  partially fill array  resize function  vector  software     abstract data_type adt  computer operating_system  life cycle  program  reusable component  sort algorithm  sort array  source_code  spacing     programming  character function definition sqrt function   square bracket      srand function   stack class   stack    empty  implementation last first lifo data_structure  link list overflow  pointer pop function  recursion standard template library stl  
see template statement   programming instruction   cin input  cout output  direction arrow  directive  executable  include directive     return  semicolon  static variable  double  std namespace  stepwise refinement  storage  memory strcat function  strcmp function  strcpy function  stream   append file  argument function  character cin class cout declare  default argument  function  file name  file flag format function  ifstream   input output      manipulator function member_function  namespace object ofstream   output  format      parameter  using_directive variable string class   string library   character  comparison operator  concatenation +   constant convert data_type default constructor double quote   character  getline function   input output index lexicographic ordering member_function  object string conversion  palindrome testing program example  variable declaration  whitespace character string function  string value   string  dynamic array  implementation  size string variable  stringvar class  strlen function  strncat function  strncmp function  strncpy function   structure    brace  class compare  diverse datum dot_operator  functional argument  hierarchy initializing  link list member name   member value   member variable    node pointer variable semicolon value  stub  function testing subexpression  subtask  assert macro  call reference parameter  debugging function  function procedural abstraction  testing function  void function  subtraction operator  switch_statement  break_statement  menu  multiway branching  syntax    class_template error  variable declaration task  recursive function template   algorithm abstraction  class syntax  container  datum abstraction  function definition  generic algorithm  iterator  standard template library stl  type definition  terminal  computer output device  testing program     boundary value  compile run program  debugging driver  error_message  function   input  logic error  procedural abstraction  program testing   run time error  scale function  stub  syntax_error  warning message  text file  editing  pointer  throw list  throw statement   throw exception    top design   toupper tolower function  trace recursive call  trace variable   tree  data_structure trigonometric function  trivial exception  true false value   
see boolean truth table  try catch block  try throw catch mechanism   dimensional array   type casting  type_name  variable  typedef function   unary operator   uninitialized variable   unsigned int type  user role  using_directive        index value_return        bool statement  character datum  predefine function  programmer define function  recursion  return_statement   toupper tolower  function value  recursive function variable                       arithmetic_operator array       assignment statement    asterisk automatic  block string  cin input statement  class_member  cout output statement  data_type   declaration        dereferencing operator dynamic   dynamic array   equal statement function global    identifier  increment decrement operator index      initializing     integer  local   loop mechanism     memory location   naming   null character  pointer    scope   square bracket  static  stream string   syntax trace   type_name  uninitialize   value     vector  vector   assignment capacity function  capacity constructor  declare variable  efficiency indexed variable  iterator reserve function  size square bracket unsigned int type  variable value  virtual_function  polymorphism void function   definition  call  recursion return_statement syntax  warning message  loop statement    brace execution break_statement increment decrement operator   infinite  nest  syntax  zero time body execution   whitespace character   width function  workstation  writing abstract data_type adt  write file  zero time loop body execution   zero lead number  credit cover  corbis figure  alamy figure  alamy figure  alamy  pg 
soon analytical engine exist   pg 
know order perform 
follow  power anticipate analytical relation truth 
province assist acquaint  ada augusta   pg 
computer terminal clunky old television typewriter front
interface mind body connect universe move bit  douglas adams  harmless fifth volume hitchhiker  pg 
dijkstra  note structured programming  pg 
 overhear cocktail party  pg 
 lewis carroll  look glass 
credit  depend deal want   lewis carroll  alice wonderland  pg 
vincent millay  letter arthur darison ficke  october  traditional carnival barker call  pg 
glory   know mean glory    alice
humpty dumpty smile contemptuously   course tell
mean  nice knock argument    glory  mean  nice knock argument    alice object 
hamlet  word  word   william shakespeare  hamlet  pg 
call rose name smell  william shakespeare  romeo juliet  pg 
james  wrong 
theory   little old lady 
credit inadequacy position 
james  question   reply little old lady   answer
first turtle stand back second  large  turtle  who stand directly   second turtle stand  persist james patiently 
little old lady crow triumphantly 
james turtle way 
ross  constraint variable syntax begin word word story thousand night  establish risk come once night repeat  jorge luis borge  garden fork path  pg 
know work  computer science student  appeal grade  pg 
aristotle man 
aristotle mortal 
cat mischievous 
garfield cat 
garfield  short lesson syllogisms  pg 
random number generation 